/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:19:24 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationIntrospector_ESTest extends AnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = annotationIntrospector_ReferenceProperty0.getType();
        assertEquals(AnnotationIntrospector.ReferenceProperty.Type.MANAGED_REFERENCE, annotationIntrospector_ReferenceProperty_Type0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.BACK_REFERENCE;
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = new AnnotationIntrospector.ReferenceProperty(annotationIntrospector_ReferenceProperty_Type0, "Y#B");
        String string0 = annotationIntrospector_ReferenceProperty0.getName();
        assertEquals("Y#B", string0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findContentSerializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        NameTransformer nameTransformer0 = annotationIntrospector0.findUnwrappingNameTransformer((AnnotatedMember) null);
        assertNull(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        JavaType javaType1 = annotationIntrospector0.refineSerializationType(deserializationConfig0, (Annotated) null, mapLikeType0);
        assertFalse(javaType1.isArrayType());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findClassDescription((AnnotatedClass) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findContentDeserializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        BaseSettings baseSettings1 = baseSettings0.withAnnotationIntrospector(annotationIntrospector0);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation(deserializationConfig0, mapLikeType0, deserializationConfig0);
        AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
        assertNull(annotatedMethod0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasCreatorAnnotation((Annotated) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null, (ClassIntrospector.MixInResolver) null);
        Vector<BeanPropertyWriter> vector0 = new Vector<BeanPropertyWriter>();
        annotationIntrospector0.findAndAddVirtualProperties((MapperConfig<?>) null, annotatedClass0, vector0);
        assertEquals("[]", vector0.toString());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findValueInstantiator((AnnotatedClass) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<MapLikeType> class0 = MapLikeType.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) deserializationConfig0, (ClassIntrospector.MixInResolver) null);
        PropertyName propertyName0 = annotationIntrospector0.findRootName(annotatedClass0);
        assertNull(propertyName0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = annotationIntrospector0.findPOJOBuilderConfig((AnnotatedClass) null);
        assertNull(jsonPOJOBuilder_Value0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.isIgnorableType((AnnotatedClass) null);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        JavaType javaType0 = deserializationConfig0.constructType(class0);
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyTypeResolver(deserializationConfig0, (AnnotatedMember) null, javaType0);
        assertNull(typeResolverBuilder0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        JavaType javaType1 = annotationIntrospector0.refineDeserializationType(deserializationConfig0, (Annotated) null, mapLikeType0);
        assertFalse(javaType1.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPropertyAccess((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findKeyDeserializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findPropertyDescription((Annotated) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findKeySerializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotatedMethod annotatedMethod0 = annotationIntrospector0.resolveSetterConflict(deserializationConfig0, (AnnotatedMethod) null, (AnnotatedMethod) null);
        assertNull(annotatedMethod0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        Boolean boolean0 = annotationIntrospector1.isTypeId((AnnotatedMember) null);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findTypeName((AnnotatedClass) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializationContentConverter((AnnotatedMember) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "% XJISf%8?p_'@J\"Y(", class0);
        annotationIntrospector0.findCreatorBinding(virtualAnnotatedMember0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = new PropertyName("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s", "JeNewn|eB");
        Class<Integer> class0 = Integer.TYPE;
        Class<ObjectIdGenerator> class1 = ObjectIdGenerator.class;
        Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
        ObjectIdInfo objectIdInfo1 = annotationIntrospector0.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
        assertFalse(objectIdInfo1.getAlwaysAsId());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        List<NamedType> list0 = annotationIntrospector0.findSubtypes((Annotated) null);
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        PropertyName propertyName0 = jacksonAnnotationIntrospector0.findWrapperName((Annotated) null);
        assertNull(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findFilterId((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
        assertSame(jsonInclude_Include0, jsonInclude_Include1);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        ArrayDeque<AnnotationIntrospector> arrayDeque0 = new ArrayDeque<AnnotationIntrospector>();
        Collection<AnnotationIntrospector> collection0 = jacksonAnnotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) arrayDeque0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, (-101));
        Object object0 = annotationIntrospector0.findDeserializationContentConverter(annotatedParameter0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findNullSerializer((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<?>[] classArray0 = annotationIntrospector0.findViews((Annotated) null);
        assertNull(classArray0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String[] stringArray0 = annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        Collection<AnnotationIntrospector> collection0 = jacksonAnnotationIntrospector0.allIntrospectors();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
        assertSame(jsonInclude_Include0, jsonInclude_Include1);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        // Undeclared exception!
        try {
            jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
        }
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        JavaType javaType0 = deserializationConfig0.constructType(class0);
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyContentTypeResolver(deserializationConfig0, (AnnotatedMember) null, javaType0);
        assertNull(typeResolverBuilder0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Value jsonInclude_Value0 = annotationIntrospector0.findPropertyInclusion((Annotated) null);
        assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializationConverter((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = annotationIntrospector0.findFormat((Annotated) null);
        assertNull(jsonFormat_Value0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializationConverter((Annotated) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        JavaType javaType0 = deserializationConfig0.constructType(class0);
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findTypeResolver(deserializationConfig0, (AnnotatedClass) null, javaType0);
        assertNull(typeResolverBuilder0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findPropertyDefaultValue((Annotated) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null, (ClassIntrospector.MixInResolver) null);
        Class<?> class1 = annotationIntrospector0.findPOJOBuilder(annotatedClass0);
        assertNull(class1);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        // Undeclared exception!
        try {
            annotationIntrospector0._hasOneOf((Annotated) null, (Class<? extends Annotation>[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
        }
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "% XJISf%8?p_'@J\"Y(", class0);
        Integer integer0 = annotationIntrospector0.findPropertyIndex(virtualAnnotatedMember0);
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findSerializationTyping((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = annotationIntrospector0.findReferenceType((AnnotatedMember) null);
        assertNull(annotationIntrospector_ReferenceProperty0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        // Undeclared exception!
        try {
            jacksonAnnotationIntrospector0.findReferenceType((AnnotatedMember) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
        }
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        JavaType javaType1 = annotationIntrospector0.refineSerializationType(deserializationConfig0, (Annotated) null, referenceType0);
        assertTrue(javaType1.isConcrete());
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = annotationIntrospector0.refineSerializationType(deserializationConfig0, (Annotated) null, javaType0);
        assertFalse(javaType1.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "";
        String[] stringArray1 = annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
        assertSame(stringArray0, stringArray1);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        JavaType javaType1 = annotationIntrospector0.refineDeserializationType(deserializationConfig0, (Annotated) null, referenceType0);
        assertFalse(javaType1.useStaticType());
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = annotationIntrospector0.refineDeserializationType(deserializationConfig0, (Annotated) null, javaType0);
        assertSame(javaType1, javaType0);
    }
}
