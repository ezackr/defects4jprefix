/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:10:57 GMT 2024
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null);
        String string0 = stdDateFormat0.toString();
        assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat(locale: en_US)", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        assertNotSame(stdDateFormat0, stdDateFormat1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateFormat dateFormat0 = StdDateFormat.getBlueprintRFC1123Format();
        assertTrue(dateFormat0.isLenient());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(timeZone0);
        assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format(timeZone0);
        assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getBlueprintISO8601Format();
        assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        assertNotSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        assertNotSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.CHINA;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        assertNotSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        assertSame(stdDateFormat1, stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0);
        stdDateFormat0.setTimeZone(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        TimeZone timeZone0 = TimeZone.getDefault();
        stdDateFormat0.setTimeZone(timeZone0);
        assertEquals("GMT", timeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        try {
            stdDateFormat0.parse("com.fasterxml.jackson.core.io.NumberInput");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"com.fasterxml.jackson.core.io.NumberInput\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parse("0");
        assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parse("-");
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"-\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        try {
            stdDateFormat0.parse("{");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"{\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        // Undeclared exception!
        try {
            stdDateFormat0.instance.format((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0);
        String string0 = stdDateFormat0.toString();
        assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat (timezone: sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null])(locale: en_US)", string0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        try {
            stdDateFormat0.parse("0;sJ%][*cF#}-");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"0;sJ%][*cF#}-\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        try {
            stdDateFormat0.parse("2.25073858507202-308");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"2.25073858507202-308\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        try {
            stdDateFormat0.parse("8[e0-qo{Q");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"8[e0-qo{Q\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        DateFormat.getTimeInstance();
        try {
            stdDateFormat0.parse("8[e0-0o{9");
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Can not parse date \"8[e0-0o{9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
            //
            verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(43);
        Date date0 = stdDateFormat0.parseAsISO8601("-wa!HW:$[Z", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("Iaa6Jj.L]%:6@55vFZ", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ParsePosition parsePosition0 = new ParsePosition(10);
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Date date0 = stdDateFormat0.parseAsISO8601("\"9z!^-$W2\"-H<:90", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(10);
        Date date0 = stdDateFormat0.parseAsISO8601("jqpsB+41v;grwj4*+(R", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("2.2507385850720-08", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("l.", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("BIY^dqsK|,yy", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        // Undeclared exception!
        try {
            stdDateFormat0.parseAsISO8601("mk$X+@+Le4}f", (ParsePosition) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(2);
        Date date0 = stdDateFormat0.parseAsISO8601("\"z!^)$(823+:90'", parsePosition0);
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format((TimeZone) null, locale0);
        assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toPattern());
    }
}
