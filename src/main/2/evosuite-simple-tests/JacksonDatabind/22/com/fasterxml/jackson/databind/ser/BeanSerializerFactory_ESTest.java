/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:08:03 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Array;
import java.sql.ClientInfoStatus;
import java.util.List;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerFactory_ESTest extends BeanSerializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<ObjectIdGenerators.UUIDGenerator>[] classArray0 = (Class<ObjectIdGenerators.UUIDGenerator>[]) Array.newInstance(Class.class, 0);
        BeanPropertyWriter beanPropertyWriter1 = beanSerializerFactory0.constructFilteredBeanWriter(beanPropertyWriter0, classArray0);
        assertFalse(beanPropertyWriter1.isUnwrapping());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
        assertSame(serializerFactory0, beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<IntNode> class0 = IntNode.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AnnotatedField> class0 = AnnotatedField.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        // Undeclared exception!
        try {
            beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        assertNotSame(serializerFactory0, beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<PropertyBasedObjectIdGenerator> class0 = PropertyBasedObjectIdGenerator.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeatureArray0[0];
        mapperFeatureArray0[5] = mapperFeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeatureArray0[0];
        mapperFeatureArray0[5] = mapperFeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertEquals("null", atomicReference0.toString());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
        Class<Boolean> class0 = Boolean.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, (AtomicReference<Throwable>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        // Undeclared exception!
        try {
            beanSerializerFactory0.instance.findBeanSerializer(serializerProvider0, mapLikeType0, basicBeanDescription0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
        }
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0);
        assertNull(jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<PropertyName> class0 = PropertyName.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertEquals("java.lang.NullPointerException", atomicReference0.toString());
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<PropertyName> class0 = PropertyName.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature0;
        mapperFeatureArray0[4] = mapperFeature0;
        mapperFeatureArray0[5] = mapperFeature0;
        objectMapper0.enable(mapperFeatureArray0);
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        mapperFeatureArray0[4] = mapperFeatureArray0[0];
        mapperFeatureArray0[5] = mapperFeatureArray0[0];
        mapperFeatureArray0[6] = mapperFeatureArray0[2];
        mapperFeatureArray0[7] = mapperFeature0;
        mapperFeatureArray0[8] = mapperFeatureArray0[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<WritableObjectId> class0 = WritableObjectId.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        assertFalse(stack0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
        Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
        stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
        beanSerializerFactory0.removeSetterlessGetters((SerializationConfig) null, (BeanDescription) null, stack0);
        assertFalse(stack0.empty());
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<BeanSerializer> class0 = BeanSerializer.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        mapperFeatureArray0[1] = mapperFeature1;
        mapperFeatureArray0[2] = mapperFeatureArray0[0];
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        mapperFeatureArray0[4] = mapperFeatureArray0[0];
        mapperFeatureArray0[5] = mapperFeatureArray0[0];
        mapperFeatureArray0[6] = mapperFeatureArray0[0];
        mapperFeatureArray0[7] = mapperFeatureArray0[0];
        mapperFeatureArray0[8] = mapperFeature1;
        ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<WritableObjectId> class0 = WritableObjectId.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }
}
