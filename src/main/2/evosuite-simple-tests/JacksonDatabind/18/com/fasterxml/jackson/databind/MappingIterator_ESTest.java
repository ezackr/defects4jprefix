/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:56:42 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MappingIterator_ESTest extends MappingIterator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        // Undeclared exception!
        try {
            mappingIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        MockIOException mockIOException0 = new MockIOException();
        // Undeclared exception!
        try {
            mappingIterator0._handleIOException((IOException) mockIOException0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        boolean boolean0 = mappingIterator0.hasNext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        List<BigIntegerNode> list0 = mappingIterator0.readAll();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        JsonParser jsonParser0 = mappingIterator0.getParser();
        assertNull(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        // Undeclared exception!
        try {
            mappingIterator0.getCurrentLocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MappingIterator<Boolean> mappingIterator0 = MappingIterator.emptyIterator();
        // Undeclared exception!
        try {
            mappingIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MappingIterator<String> mappingIterator0 = MappingIterator.emptyIterator();
        // Undeclared exception!
        try {
            mappingIterator0.getParserSchema();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MappingIterator<Object> mappingIterator0 = MappingIterator.emptyIterator();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<Object> class0 = Object.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException(class0, "FAIL_ON_UNKNOWN_PROPERTIES");
        // Undeclared exception!
        try {
            mappingIterator0._handleMappingException(jsonMappingException0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Can not construct instance of java.lang.Object, problem: FAIL_ON_UNKNOWN_PROPERTIES
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class1 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        MappingIterator<ObjectReader> mappingIterator0 = objectReader0._newIterator((JavaType) collectionType0, jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, true, (Object) class0);
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        // Undeclared exception!
        try {
            mappingIterator0.readAll((List<Object>) linkedList0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.MappingIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        MapType mapType0 = MapType.construct(class1, collectionLikeType0, simpleType0);
        Object object0 = new Object();
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, object0, (Object) class0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        MappingIterator<Object> mappingIterator0 = new MappingIterator<Object>(referenceType0, (JsonParser) null, defaultDeserializationContext_Impl0, jsonDeserializer0, true, mapType0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        MappingIterator<LinkedList<Integer>> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) jsonNodeFactory0);
        boolean boolean0 = mappingIterator0.hasNextValue();
        assertTrue(jsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        MappingIterator<LinkedList<Integer>> mappingIterator0 = objectReader0._bindAndReadValues(jsonParser0, (Object) jsonNodeFactory0);
        boolean boolean0 = mappingIterator0.hasNextValue();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        MappingIterator<BigIntegerNode> mappingIterator0 = MappingIterator.emptyIterator();
        mappingIterator0.close();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
        byte[] byteArray0 = new byte[0];
        MappingIterator<HashMap<ChronoLocalDate, Month>> mappingIterator0 = objectReader0.readValues(byteArray0);
        mappingIterator0.close();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        Class<ObjectReader> class0 = ObjectReader.class;
        MappingIterator<ObjectReader> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        mappingIterator0.hasNextValue();
        try {
            mappingIterator0.readAll((List<Object>) stack0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of com.fasterxml.jackson.databind.ObjectReader out of START_ARRAY token
            //  at [Source: java.lang.String@0000000203; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        mappingIterator0.hasNextValue();
        Class<ObjectReader> class1 = ObjectReader.class;
        MappingIterator<ObjectReader> mappingIterator1 = objectMapper0.readValues(jsonParser0, class1);
        boolean boolean0 = mappingIterator1.hasNextValue();
        assertTrue(jsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        mappingIterator0.hasNextValue();
        Class<ObjectReader> class1 = ObjectReader.class;
        MappingIterator<ObjectReader> mappingIterator1 = objectMapper0.readValues(jsonParser0, class1);
        boolean boolean0 = mappingIterator1.hasNextValue();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ArrayNode arrayNode0 = objectNode0.withArray("Lip;e^J");
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserDelegate0, class0);
        mappingIterator0.readAll((List<Object>) stack0);
        assertTrue(jsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ArrayNode arrayNode0 = objectNode0.withArray("Lip;e^J");
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserDelegate0, class0);
        mappingIterator0.readAll((List<Object>) stack0);
        assertFalse(stack0.empty());
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        Class<ObjectReader> class0 = ObjectReader.class;
        MappingIterator<ObjectReader> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        try {
            mappingIterator0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of com.fasterxml.jackson.databind.ObjectReader out of START_ARRAY token
            //  at [Source: java.lang.String@0000000203; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ArrayNode arrayNode0 = objectNode0.withArray("Lip;e^J");
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserDelegate0, class0);
        mappingIterator0.readAll((List<Object>) stack0);
        assertTrue(jsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Stack<Object> stack0 = new Stack<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ArrayNode arrayNode0 = objectNode0.withArray("Lip;e^J");
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<Object> class0 = Object.class;
        MappingIterator<Object> mappingIterator0 = objectMapper0.readValues((JsonParser) jsonParserDelegate0, class0);
        mappingIterator0.readAll((List<Object>) stack0);
        assertEquals("[[]]", stack0.toString());
    }
}
