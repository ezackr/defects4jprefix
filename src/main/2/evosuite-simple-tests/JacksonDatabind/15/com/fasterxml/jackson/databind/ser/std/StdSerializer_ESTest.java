/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:50:48 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.ser.std.RawSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdSerializer_ESTest extends StdSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        // Undeclared exception!
        try {
            objectMapper0.writeValueAsBytes(objectReader0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // Could not initialize class com.fasterxml.jackson.databind.JsonMappingException
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdDelegatingSerializer stdDelegatingSerializer0 = new StdDelegatingSerializer((Converter<?, ?>) null);
        StdArraySerializers.DoubleArraySerializer stdArraySerializers_DoubleArraySerializer0 = new StdArraySerializers.DoubleArraySerializer();
        JavaType javaType0 = stdArraySerializers_DoubleArraySerializer0.getContentType();
        JsonNode jsonNode0 = stdDelegatingSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0, false);
        assertFalse(jsonNode0.isDouble());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        SimpleModule simpleModule0 = new SimpleModule(".TuICrqcro}^~}' ");
        SimpleModule simpleModule1 = simpleModule0.addSerializer((JsonSerializer<?>) stdArraySerializers_IntArraySerializer0);
        assertSame(simpleModule1, simpleModule0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer();
        boolean boolean0 = numberSerializers_IntegerSerializer0.isDefaultSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<String> class0 = String.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
        assertEquals(1, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        RawSerializer<InvocationTargetException> rawSerializer0 = new RawSerializer<InvocationTargetException>(class0);
        JsonNode jsonNode0 = rawSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        assertEquals(2, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        ObjectNode objectNode0 = stdArraySerializers_IntArraySerializer0.createSchemaNode("'; no FilterProvider configured", false);
        assertEquals(2, objectNode0.size());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xx:Mw^McLC-v");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLFeatureNotSupportedException0, "xx:Mw^McLC-v");
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) "xx:Mw^McLC-v", "xx:Mw^McLC-v");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) null, "Can not resolve PropertyFilter with id '");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        MockError mockError0 = new MockError();
        MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockError0, (Object) mockRuntimeException0, "");
            fail("Expecting exception: Error");
        } catch (Error e) {
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockIOException mockIOException0 = new MockIOException();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) mockIOException0, "Failed to find default constructor of lass ");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SQLException sQLException0 = new SQLException();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLException0, (Object) null, "");
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // Could not initialize class com.fasterxml.jackson.databind.JsonMappingException
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.StdSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonMappingException jsonMappingException0 = null;
        try {
            jsonMappingException0 = new JsonMappingException("type");
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLClientInfoException0);
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) invocationTargetException0, (-3544));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) defaultSerializerProvider_Impl0, (Throwable) invocationTargetException0, (Object) objectIdGenerators_UUIDGenerator0, (-3544));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        MockError mockError0 = new MockError();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockError0, (Object) null, 2494);
            fail("Expecting exception: Error");
        } catch (Error e) {
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        // Undeclared exception!
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) sQLInvalidAuthorizationSpecException0, (Object) null, (-3439));
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // Could not initialize class com.fasterxml.jackson.databind.JsonMappingException
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.StdSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockIOException mockIOException0 = new MockIOException();
        StdArraySerializers.IntArraySerializer stdArraySerializers_IntArraySerializer0 = new StdArraySerializers.IntArraySerializer();
        try {
            stdArraySerializers_IntArraySerializer0.wrapAndThrow((SerializerProvider) null, (Throwable) mockIOException0, (Object) null, 211);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<RuntimeException> class0 = RuntimeException.class;
        Class<ObjectReader> class1 = ObjectReader.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, javaType0);
        MapType mapType0 = MapType.construct(class0, collectionLikeType0, javaType0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Vector> class0 = Vector.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) collectionType0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }
}
