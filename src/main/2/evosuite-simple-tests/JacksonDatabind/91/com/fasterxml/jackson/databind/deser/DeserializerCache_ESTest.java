/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 22:44:06 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerCache;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.net.Proxy;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializerCache_ESTest extends DeserializerCache_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        int int0 = deserializerCache0.cachedDeserializersCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        Object object0 = deserializerCache0.writeReplace();
        assertSame(object0, deserializerCache0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        deserializerCache0.flushCachedDeserializers();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        JavaType javaType0 = TypeFactory.unknownType();
        // Undeclared exception!
        try {
            deserializerCache0._handleUnknownKeyDeserializer((DeserializationContext) null, javaType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        objectMapper0.canDeserialize((JavaType) mapType0, atomicReference0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        try {
            objectMapper0.readValues((JsonParser) null, (JavaType) mapLikeType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not find a Value deserializer for type [map-like type; class java.lang.Object, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        objectMapper0.canDeserialize(javaType0, atomicReference0);
        boolean boolean0 = objectMapper0.canDeserialize(javaType0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) mapType0;
        javaTypeArray0[1] = (JavaType) mapType0;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[0]);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) collectionType0, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) mapType0;
        javaTypeArray0[1] = (JavaType) mapType0;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[0]);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) collectionType0, atomicReference0);
        assertEquals("null", atomicReference0.toString());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        // Undeclared exception!
        try {
            deserializerCache0.hasValueDeserializerFor((DeserializationContext) null, beanDeserializerFactory0, (JavaType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null JavaType passed
            //
            verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) mapType0;
        javaTypeArray0[1] = (JavaType) mapType0;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[0]);
        MapType mapType1 = mapType0.withContentValueHandler(collectionType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapType1, atomicReference0);
        assertEquals("java.lang.ClassCastException: com.fasterxml.jackson.databind.type.CollectionType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer", atomicReference0.toString());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) mapType0;
        javaTypeArray0[1] = (JavaType) mapType0;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[0]);
        MapType mapType1 = mapType0.withContentValueHandler(collectionType0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) mapType1, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        ObjectReader objectReader0 = objectMapper1.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Proxy.Type> class0 = Proxy.Type.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectIdReferenceProperty> class0 = ObjectIdReferenceProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        Class<BigIntegerNode> class1 = BigIntegerNode.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        Class<Module> class2 = Module.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
        javaTypeArray0[0] = (JavaType) referenceType0;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0, javaTypeArray0[0]);
        MapType mapType1 = mapType0.withKeyValueHandler(class2);
        // Undeclared exception!
        try {
            objectMapper0.canDeserialize((JavaType) mapType1);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
            //
            verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DeserializerCache deserializerCache0 = new DeserializerCache();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, (JavaType) null);
        // Undeclared exception!
        try {
            deserializerCache0.hasValueDeserializerFor(defaultDeserializationContext_Impl0, beanDeserializerFactory0, mapLikeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
        }
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        DeserializerCache deserializerCache0 = new DeserializerCache();
        Class<Module> class0 = Module.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        // Undeclared exception!
        try {
            deserializerCache0._handleUnknownValueDeserializer((DeserializationContext) null, resolvedRecursiveType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
        }
    }
}
