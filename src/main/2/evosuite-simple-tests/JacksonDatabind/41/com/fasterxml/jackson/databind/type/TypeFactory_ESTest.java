/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:05:48 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        assertFalse(javaType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Module> class0 = Module.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        assertEquals(1, collectionType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AtomicReference<ObjectMapper.DefaultTyping> atomicReference0 = new AtomicReference<ObjectMapper.DefaultTyping>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        Class<DeserializationFeature> class1 = DeserializationFeature.class;
        Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class1, classArray0);
        assertFalse(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        assertFalse(mapLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, (JavaType[]) null);
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<FloatNode> class0 = FloatNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        assertFalse(collectionLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        MapType mapType0 = new MapType(collectionType0, collectionType0, collectionType0);
        TypeBindings typeBindings0 = mapType0._bindings;
        JavaType[] javaTypeArray0 = new JavaType[3];
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, mapType0, javaTypeArray0);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionLikeType0, class0);
        assertFalse(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(arrayType0, (JavaType) null);
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructType((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructRawMapType(class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        assertFalse(mapLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("double");
        assertFalse(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        try {
            typeFactory1.findClass("[null]");
            fail("Expecting exception: ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            //
            // [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructReferenceType(class0, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        typeFactory0.constructArrayType(javaType0);
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
        assertNotSame(typeFactory0, typeFactory2);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<?> class0 = TypeFactory.rawClass(simpleType0);
        assertEquals("interface java.lang.Comparable", class0.toString());
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Class<Properties> class0 = Properties.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        assertFalse(class1.isInterface());
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer");
        assertFalse(class0.isAnnotation());
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("int");
        assertEquals("int", class0.toString());
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("long");
        assertEquals("long", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("float");
        assertEquals("float", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("boolean");
        assertEquals("boolean", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0._findPrimitive("byte");
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0._findPrimitive("byte");
        assertEquals("byte", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("char");
        assertEquals("char", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("short");
        assertEquals("short", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("void");
        assertEquals("void", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("void");
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertFalse(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        // Undeclared exception!
        try {
            typeFactory0.constructSpecializedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.util.Properties not subtype of [simple type, class java.lang.Class]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<MapperFeature> class0 = MapperFeature.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class1 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        JavaType[] javaTypeArray0 = new JavaType[9];
        javaTypeArray0[8] = (JavaType) resolvedRecursiveType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[8], (JavaType) resolvedRecursiveType0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(mapType0, class1);
        assertTrue(javaType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
        assertFalse(javaType1.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<Object> class0 = Object.class;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Internal error: class java.lang.Object not included as super-type for [simple type, class java.lang.String]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<Integer> class0 = Integer.class;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(javaType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.lang.Integer not a super-type of [simple type, class java.lang.Object]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
        assertNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JavaType javaType0 = typeFactory0._findWellKnownSimple(class0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JavaType javaType0 = typeFactory0._findWellKnownSimple(class0);
        typeFactory0.moreSpecificType(arrayType0, javaType0);
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test4551() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JavaType javaType0 = typeFactory0._findWellKnownSimple(class0);
        typeFactory0.moreSpecificType(arrayType0, javaType0);
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4652() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
        assertFalse(javaType1.isArrayType());
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<Object> class0 = Object.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        typeFactory0.moreSpecificType(collectionLikeType0, simpleType0);
        assertTrue(collectionLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        assertEquals(1, collectionLikeType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        Class<ArrayType> class1 = ArrayType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType((Class<? extends Map>) null, class0, class1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash", e);
        }
    }

    @Test(timeout = 4000)
    public void test5056() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType(class0, class0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
        }
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        Class<DeserializationFeature> class1 = DeserializationFeature.class;
        Class<Module>[] classArray0 = (Class<Module>[]) Array.newInstance(Class.class, 4);
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class1, classArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        LocalDate localDate0 = MockLocalDate.now();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(localDate0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test5359() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructArrayType((Class<?>) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5460() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
        assertTrue(arrayType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test5561() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[1];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<CollectionType> class0 = CollectionType.class;
        // Undeclared exception!
        try {
            typeFactory1.constructArrayType(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5662() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(typeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test5763() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        // Undeclared exception!
        try {
            typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }
}
