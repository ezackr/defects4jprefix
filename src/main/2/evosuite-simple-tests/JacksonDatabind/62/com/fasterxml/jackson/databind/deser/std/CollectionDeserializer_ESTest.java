/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:18:34 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        Class<RuntimeException> class1 = RuntimeException.class;
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, class0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, " PN1X!HWD?$of@l", (JsonLocation) null, readableObjectId0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(class0, linkedHashSet0);
        assertFalse(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        // Undeclared exception!
        try {
            collectionDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
        CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
        assertTrue(collectionDeserializer1.isCachable());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Boolean boolean0 = Boolean.valueOf((String) null);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        JavaType javaType1 = collectionDeserializer0.getContentType();
        assertNull(javaType1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0);
        // Undeclared exception!
        try {
            collectionDeserializer0.findBackReference("H)!3D*$oc%\"h}0");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not handle managed/back reference 'H)!3D*$oc%\"h}0': type: container deserializer of type com.fasterxml.jackson.databind.deser.std.CollectionDeserializer returned null for 'getContentDeserializer()'
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(linkedHashSet0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0);
        Boolean boolean0 = Boolean.FALSE;
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
        assertNotSame(collectionDeserializer1, collectionDeserializer0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Boolean boolean0 = new Boolean(true);
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Object> class0 = Object.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-422));
        Class<Module> class1 = Module.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class1);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, coreXMLDeserializers_Std0, (TypeDeserializer) null, stdValueInstantiator0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
        Class<String> class2 = String.class;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(referenceType0, classNameIdResolver0, "(&yt0UR-9X", true, class2);
        collectionDeserializer0.withResolved((JsonDeserializer<?>) null, coreXMLDeserializers_Std0, asWrapperTypeDeserializer0, boolean0);
        assertFalse(collectionDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null, (Boolean) null);
        assertSame(collectionDeserializer1, collectionDeserializer0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<FilterInputStream> class0 = FilterInputStream.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, collectionDeserializer0, (TypeDeserializer) null);
        boolean boolean1 = collectionDeserializer1.isCachable();
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(linkedHashSet0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null);
        boolean boolean1 = collectionDeserializer1.isCachable();
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null);
        boolean boolean1 = collectionDeserializer1.isCachable();
        assertTrue(collectionDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
        // Undeclared exception!
        try {
            collectionDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, stdValueInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) null);
        CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, collectionDeserializer0, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            collectionDeserializer1.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No default constructor for UNKNOWN TYPE
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextBooleanValue();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, filteringParserDelegate0);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        // Undeclared exception!
        try {
            collectionDeserializer0.deserialize((JsonParser) jsonParserSequence0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        HashSet<Object> hashSet0 = new HashSet<Object>();
        Boolean boolean0 = Boolean.TRUE;
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        try {
            collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) hashSet0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        HashSet<Object> hashSet0 = new HashSet<Object>();
        Boolean boolean0 = Boolean.valueOf("JSON");
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
        // Undeclared exception!
        try {
            collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) hashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        // Undeclared exception!
        try {
            collectionDeserializer0.handleNonArray((JsonParser) null, defaultDeserializationContext_Impl0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference((UnresolvedForwardReference) null);
        Integer integer0 = new Integer(1);
        collectionDeserializer_CollectionReferringAccumulator0.add(integer0);
        assertFalse(linkedHashSet0.contains(1));
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference((UnresolvedForwardReference) null);
        Integer integer0 = new Integer(1);
        collectionDeserializer_CollectionReferringAccumulator0.add(integer0);
        assertEquals(0, linkedHashSet0.size());
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        collectionDeserializer_CollectionReferringAccumulator0.add(linkedHashSet0);
        assertFalse(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        Object object0 = new Object();
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, object0);
        ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
        UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, " PN1v!{WwD?$of@6l", (JsonLocation) null, readableObjectId0);
        collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
        // Undeclared exception!
        try {
            collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(class0, linkedHashSet0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Trying to resolve a forward reference with id [class java.lang.String] that wasn't previously seen as unresolved.
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", e);
        }
    }
}
