/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:22:10 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LinkedNode;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.text.DateFormat;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeserializationConfig_ESTest extends DeserializationConfig_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((HandlerInstantiator) null);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = objectMapper0.valueToTree((Object) "");
        assertEquals("", textNode0.asText());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.KOREAN;
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        // Undeclared exception!
        try {
            deserializationConfig0.introspectDirectClassAnnotations(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion();
        assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        // Undeclared exception!
        try {
            deserializationConfig0.introspectForBuilder((JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        JsonInclude.Value jsonInclude_Value0 = deserializationConfig0.getDefaultPropertyInclusion(class0);
        assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAppendedAnnotationIntrospector(annotationIntrospector0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withInsertedAnnotationIntrospector(annotationIntrospector0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withInsertedAnnotationIntrospector(annotationIntrospector0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        LinkedNode<DeserializationProblemHandler> linkedNode0 = deserializationConfig0.getProblemHandlers();
        assertNull(linkedNode0);
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        VisibilityChecker<?> visibilityChecker0 = deserializationConfig0.getDefaultVisibilityChecker();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(visibilityChecker0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((Base64Variant) null);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(dateFormat0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(typeFactory0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BaseSettings baseSettings1 = deserializationConfig0.getBaseSettings();
        assertFalse(baseSettings1.hasExplicitTimeZone());
    }

    @Test(timeout = 4000)
    public void test2329() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(timeZone0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        assertTrue(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeatureArray0);
        assertTrue(deserializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
        mapperFeatureArray0[0] = mapperFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2943() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertTrue(deserializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test2944() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test2945() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test2946() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3047() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test3048() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3049() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test3050() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, true);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3151() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(mapperFeature0, false);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3252() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test3353() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectReader objectReader1 = objectReader0.withRootName("Do not know how to construct standard type serializer for inclusion type: ");
        assertNotSame(objectReader1, objectReader0);
    }

    @Test(timeout = 4000)
    public void test3555() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName((PropertyName) null);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3656() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName("T6 C}y^2FD#i#.");
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
        assertNotSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test3657() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName("T6 C}y^2FD#i#.");
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName((PropertyName) null);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3758() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3759() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
        assertNotSame(deserializationConfig2, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3860() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView((Class<?>) null);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3961() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttribute(baseSettings0, stdSubtypeResolver0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3962() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withAttribute(baseSettings0, stdSubtypeResolver0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4063() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutAttribute((Object) null);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test4265() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4366() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        deserializationFeatureArray0[0] = deserializationFeature0;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test4467() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4568() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4669() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        assertEquals(15215392, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4670() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test4671() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(deserializationFeatureArray0);
        assertTrue(deserializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test4772() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        assertEquals(11020576, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4773() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test4774() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test4875() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4976() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(deserializationFeature0, deserializationFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        deserializationFeatureArray0[0] = deserializationFeature1;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test5178() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5279() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5280() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        assertEquals(15206688, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5281() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(deserializationFeatureArray0);
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test5382() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
        assertSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5383() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5384() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5485() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5586() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5587() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5588() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5589() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(jsonParser_FeatureArray0);
        assertTrue(deserializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5690() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5691() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertNotSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5692() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5793() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5794() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5795() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertTrue(deserializationConfig2.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5796() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5797() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(jsonParser_Feature0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(jsonParser_Feature0);
        assertNotSame(deserializationConfig2, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5898() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        assertNotSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5899() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test58100() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        assertTrue(deserializationConfig2.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test58101() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(jsonParser_FeatureArray0);
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test59102() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test60103() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test61104() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, Integer.MAX_VALUE).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test61105() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, Integer.MAX_VALUE).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test61106() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, Integer.MAX_VALUE).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test61107() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, Integer.MAX_VALUE).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test62108() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test63109() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3640, (-1), 0, 0, 0).when(formatFeature0).getMask();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        formatFeatureArray0[6] = formatFeature0;
        formatFeatureArray0[7] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test63110() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3640, (-1), 0, 0, 0).when(formatFeature0).getMask();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        formatFeatureArray0[6] = formatFeature0;
        formatFeatureArray0[7] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        assertSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test63111() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3640, (-1), 0, 0, 0).when(formatFeature0).getMask();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        formatFeatureArray0[6] = formatFeature0;
        formatFeatureArray0[7] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        assertTrue(deserializationConfig2.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test63112() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(3640, (-1), 0, 0, 0).when(formatFeature0).getMask();
        FormatFeature[] formatFeatureArray0 = new FormatFeature[8];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        formatFeatureArray0[3] = formatFeature0;
        formatFeatureArray0[4] = formatFeature0;
        formatFeatureArray0[5] = formatFeature0;
        formatFeatureArray0[6] = formatFeature0;
        formatFeatureArray0[7] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
        assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test64113() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test65114() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test65115() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures((-2151));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test65116() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures((-2151));
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-2151), (-1282), 0, 0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig3 = deserializationConfig0.with(formatFeature0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        DeserializationConfig deserializationConfig4 = deserializationConfig3.withoutFeatures(formatFeatureArray0);
        assertEquals(15214880, deserializationConfig3.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test65117() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures((-2151));
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-2151), (-1282), 0, 0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig3 = deserializationConfig0.with(formatFeature0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        DeserializationConfig deserializationConfig4 = deserializationConfig3.withoutFeatures(formatFeatureArray0);
        assertSame(deserializationConfig3, deserializationConfig4);
    }

    @Test(timeout = 4000)
    public void test65118() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<Integer> class0 = Integer.class;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withView(class0);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures((-2151));
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-2151), (-1282), 0, 0, 0).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig3 = deserializationConfig0.with(formatFeature0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        formatFeatureArray0[2] = formatFeature0;
        DeserializationConfig deserializationConfig4 = deserializationConfig3.withoutFeatures(formatFeatureArray0);
        assertTrue(deserializationConfig3.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test66119() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test66120() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test66121() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(formatFeatureArray0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test67122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test68123() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonNodeFactory0);
        assertSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test69124() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
        assertSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test69125() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
        assertEquals(15214880, deserializationConfig2.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test69126() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withHandler((DeserializationProblemHandler) null);
        assertNotSame(deserializationConfig2, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test70127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test70128() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withHandler((DeserializationProblemHandler) null);
        DeserializationConfig deserializationConfig2 = deserializationConfig1.withNoProblemHandlers();
        assertNotSame(deserializationConfig2, deserializationConfig1);
    }

    @Test(timeout = 4000)
    public void test71129() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        // Undeclared exception!
        try {
            deserializationConfig1.initialize((JsonParser) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test72130() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(253, 253).when(formatFeature0).getMask();
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
        // Undeclared exception!
        try {
            deserializationConfig1.initialize((JsonParser) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test73131() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[2];
        mapperFeatureArray0[4] = mapperFeatureArray0[3];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test73132() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[2];
        mapperFeatureArray0[4] = mapperFeatureArray0[3];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test73133() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[2];
        mapperFeatureArray0[4] = mapperFeatureArray0[3];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test73134() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[2];
        mapperFeatureArray0[4] = mapperFeatureArray0[3];
        DeserializationConfig deserializationConfig1 = deserializationConfig0.without(mapperFeatureArray0);
        deserializationConfig1.getDefaultVisibilityChecker();
        assertTrue(deserializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test74135() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test74136() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test74137() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
        boolean boolean0 = deserializationConfig1.useRootWrapping();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test75138() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        // Undeclared exception!
        try {
            deserializationConfig0.isEnabled(jsonParser_Feature0, (JsonFactory) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test76139() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        assertNotSame(deserializationConfig1, deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test76140() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test76141() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test76142() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_Feature0;
        jsonParser_FeatureArray0[2] = jsonParser_Feature0;
        jsonParser_FeatureArray0[3] = jsonParser_Feature0;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.withoutFeatures(jsonParser_FeatureArray0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, jsonFactory0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test77143() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, (JsonFactory) null);
        assertEquals(15214880, deserializationConfig1.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test77144() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, (JsonFactory) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test77145() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, (JsonFactory) null);
        assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test77146() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        DeserializationConfig deserializationConfig1 = deserializationConfig0.with(jsonParser_Feature0);
        boolean boolean0 = deserializationConfig1.isEnabled(jsonParser_Feature0, (JsonFactory) null);
        assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test78147() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasDeserializationFeatures(32);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test79148() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(66);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test80149() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = deserializationConfig0.hasSomeOfFeatures(1371);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test81150() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        TypeDeserializer typeDeserializer0 = deserializationConfig0.findTypeDeserializer(javaType0);
        assertNull(typeDeserializer0);
    }
}
