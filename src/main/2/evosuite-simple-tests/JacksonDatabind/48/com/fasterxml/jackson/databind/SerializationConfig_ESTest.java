/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:24:59 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SerializationConfig_ESTest extends SerializationConfig_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FilterProvider filterProvider0 = serializationConfig0.getFilterProvider();
        assertNull(filterProvider0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SerializationConfig serializationConfig1 = serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SerializationConfig serializationConfig1 = serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
        serializationConfig1.getSerializationInclusion();
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
        serializationConfig1.getSerializationInclusion();
        assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        SerializationConfig serializationConfig1 = serializationConfig0.withSerializationInclusion(jsonInclude_Include0);
        serializationConfig1.getSerializationInclusion();
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<String> class0 = String.class;
        JsonInclude.Value jsonInclude_Value0 = serializationConfig0.getDefaultPropertyInclusion(class0);
        assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy) PropertyNamingStrategy.KEBAB_CASE;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        assertEquals(0, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((Base64Variant) null);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((Base64Variant) null);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        TimeZone timeZone0 = TimeZone.getDefault();
        SerializationConfig serializationConfig1 = serializationConfig0.with(timeZone0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        TimeZone timeZone0 = TimeZone.getDefault();
        SerializationConfig serializationConfig1 = serializationConfig0.with(timeZone0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<MinimalPrettyPrinter> class0 = MinimalPrettyPrinter.class;
        // Undeclared exception!
        try {
            serializationConfig0.introspectDirectClassAnnotations(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.CHINESE;
        SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Locale locale0 = Locale.CHINESE;
        SerializationConfig serializationConfig1 = serializationConfig0.with(locale0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        String string0 = serializationConfig0.toString();
        assertEquals("[SerializationConfig: flags=0x2989bc]", string0);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        int int0 = serializationConfig0.getSerializationFeatures();
        assertEquals(2722236, int0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((HandlerInstantiator) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        VisibilityChecker<?> visibilityChecker0 = serializationConfig0.getDefaultVisibilityChecker();
        SerializationConfig serializationConfig1 = serializationConfig0.with(visibilityChecker0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        SerializationConfig serializationConfig1 = serializationConfig0.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withInsertedAnnotationIntrospector((AnnotationIntrospector) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
        SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
        SerializationConfig serializationConfig1 = serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.getAnnotationIntrospector();
        assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.getAnnotationIntrospector();
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.getAnnotationIntrospector();
        assertFalse(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        serializationConfig1.getAnnotationIntrospector();
        assertTrue(serializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
        assertTrue(serializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, false);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test2943() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeature0, true);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test3145() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3146() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((DateFormat) null);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3247() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3248() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3249() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName((PropertyName) null);
        assertNotSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test3350() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName((PropertyName) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3451() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
        assertNotSame(serializationConfig2, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3452() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3553() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test3654() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3755() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test3856() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        SerializationConfig serializationConfig1 = serializationConfig0.withView((Class<?>) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test3957() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withAttribute((Object) null, baseSettings0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test3958() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withAttribute((Object) null, baseSettings0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withoutAttribute((Object) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        serializationFeatureArray0[0] = serializationFeature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test4262() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
        assertEquals(2722748, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4363() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        assertEquals(2730428, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4364() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test4465() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(serializationFeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4566() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test4667() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        serializationFeatureArray0[2] = serializationFeature0;
        serializationFeatureArray0[3] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test4768() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4869() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test4870() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        serializationFeatureArray0[0] = serializationFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        assertEquals(2722108, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test4971() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(serializationFeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5072() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5073() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5074() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        assertSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5075() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.with(jsonGenerator_Feature0);
        assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5177() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5178() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        assertTrue(serializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5179() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5280() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(jsonGenerator_FeatureArray0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5281() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(jsonGenerator_FeatureArray0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5282() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(jsonGenerator_FeatureArray0);
        assertSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5383() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5384() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertNotSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5385() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5386() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertTrue(serializationConfig2.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5487() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        // Undeclared exception!
        try {
            serializationConfig1.initialize((JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test5588() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertNotSame(serializationConfig2, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5589() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test5590() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test5591() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5592() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
        assertSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5693() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5794() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test5795() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        assertTrue(serializationConfig2.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test5796() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test5797() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
        assertNotSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test5898() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test5899() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test58100() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test59101() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-18), (-18)).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertTrue(serializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test59102() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-18), (-18)).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test59103() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-18), (-18)).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test60104() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test61105() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 61).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test61106() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 61).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test61107() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 61).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.with(formatFeature0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test62108() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, (RootNameLookup) null);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test63109() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 7, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test63110() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 7, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        assertNotSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test63111() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 7, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test63112() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 7, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test63113() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(1, 1, 7, 1).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        formatFeatureArray0[1] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test64114() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(0, 0).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test65115() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(16384, 16384).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test65116() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(16384, 16384).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test65117() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(16384, 16384).when(formatFeature0).getMask();
        SerializationConfig serializationConfig1 = serializationConfig0.without(formatFeature0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test66118() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test66119() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        assertTrue(serializationConfig1.canOverrideAccessModifiers());
    }

    @Test(timeout = 4000)
    public void test66120() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test66121() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test67122() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertNotSame(serializationConfig2, serializationConfig1);
    }

    @Test(timeout = 4000)
    public void test67123() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertEquals(2722236, serializationConfig2.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test67124() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test67125() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test67126() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test67127() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn((-1), (-1)).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        SerializationConfig serializationConfig2 = serializationConfig1.withoutFeatures(formatFeatureArray0);
        assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
    }

    @Test(timeout = 4000)
    public void test68128() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
        SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test69129() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test69130() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test70131() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = serializationConfig0.withFilters((FilterProvider) null);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test71132() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
        ObjectMapper objectMapper1 = objectMapper0.setPropertyInclusion(jsonInclude_Value0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test72133() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;
        SerializationConfig serializationConfig1 = serializationConfig0.withDefaultPrettyPrinter(defaultPrettyPrinter0);
        assertSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test73134() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
        PrettyPrinter prettyPrinter0 = serializationConfig1.constructDefaultPrettyPrinter();
        assertNull(prettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test73135() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (PrettyPrinter) null);
        PrettyPrinter prettyPrinter0 = serializationConfig1.constructDefaultPrettyPrinter();
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test74136() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        PrettyPrinter prettyPrinter0 = serializationConfig0.constructDefaultPrettyPrinter();
        assertNotNull(prettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test75137() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
        objectMapper0.enable(serializationFeature0);
        try {
            objectMapper0.writeValueAsString(baseSettings0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.cfg.BaseSettings[\"annotationIntrospector\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test76138() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
        FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
        doReturn(74).when(formatFeature0).getMask();
        formatFeatureArray0[0] = formatFeature0;
        SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
        // Undeclared exception!
        try {
            serializationConfig1.initialize((JsonGenerator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test77139() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[1];
        mapperFeatureArray0[4] = mapperFeatureArray0[2];
        objectMapper0.disable(mapperFeatureArray0);
        try {
            objectMapper0.writeValueAsString(baseSettings0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class com.fasterxml.jackson.databind.cfg.BaseSettings and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test78140() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
        MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_IS_GETTERS;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeature0;
        mapperFeatureArray0[4] = mapperFeatureArray0[2];
        objectMapper0.disable(mapperFeatureArray0);
        try {
            objectMapper0.writeValueAsString(baseSettings0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.cfg.BaseSettings[\"annotationIntrospector\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test79141() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        objectMapper0.configure(mapperFeature0, false);
        try {
            objectMapper0.writeValueAsString(baseSettings0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.cfg.BaseSettings[\"annotationIntrospector\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test80142() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonInclude.Include jsonInclude_Include0 = serializationConfig0.getSerializationInclusion();
        assertEquals(JsonInclude.Include.ALWAYS, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test81143() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        boolean boolean0 = serializationConfig0.useRootWrapping();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test82144() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test82145() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        assertNotSame(serializationConfig1, serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test82146() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test83147() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", "");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test83148() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        PropertyName propertyName0 = PropertyName.construct("", "");
        SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
        boolean boolean0 = serializationConfig1.useRootWrapping();
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test84149() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test85150() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test85151() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test85152() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
        JsonFactory jsonFactory0 = new JsonFactory();
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test86153() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertEquals(2722236, serializationConfig1.getSerializationFeatures());
    }

    @Test(timeout = 4000)
    public void test86154() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
    }

    @Test(timeout = 4000)
    public void test86155() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature0);
        boolean boolean0 = serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test87156() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
        boolean boolean0 = serializationConfig0.hasSerializationFeatures(7);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test88157() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        boolean boolean0 = serializationConfig0.hasSerializationFeatures(524288);
        assertTrue(boolean0);
    }
}
