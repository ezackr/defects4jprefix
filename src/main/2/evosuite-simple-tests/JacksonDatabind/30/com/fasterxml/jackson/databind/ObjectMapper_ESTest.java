/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:36:27 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        Class<Throwable> class0 = Throwable.class;
        objectMapper1._configAndWriteValue(jsonGenerator0, class0, class0);
        objectMapper0.readTree((File) mockFile0);
        assertEquals(21L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) null, atomicReference0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<NullNode> class0 = NullNode.class;
        Class<LongNode> class1 = LongNode.class;
        SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class1, class0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        // Undeclared exception!
        try {
            objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PushbackReader> class0 = PushbackReader.class;
        Class<FilterOutputStream> class1 = FilterOutputStream.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionLikeType0, (Object) class0, (Object) null);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[2];
        Class<MockFileWriter> class0 = MockFileWriter.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
        try {
            objectMapper0.readValue(byteArray0, (JavaType) collectionType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: [B@0000000123; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.ROOT;
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ShortNode> class0 = ShortNode.class;
        try {
            objectMapper0.readValue("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
            //  at [Source: java.lang.String@0000000124; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.registerSubtypes((Class<?>[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, 9, 9, class0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 9
            //
            verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        assertNotSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        try {
            objectMapper0.readValue((Reader) null, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
        // Undeclared exception!
        try {
            objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("");
        Class<ArrayNode> class0 = ArrayNode.class;
        try {
            objectMapper0.readValue((File) mockFile0, class0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TimeZone timeZone0 = TimeZone.getDefault();
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readerFor((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ArrayNode> class0 = ArrayNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<BinaryNode> class0 = BinaryNode.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((String) null, javaType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.JsonFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(concurrentHashMap0);
        objectMapper0.setFilters(simpleFilterProvider0);
        assertTrue(simpleFilterProvider0.willFailOnUnknownId());
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        objectMapper0.writeValue((File) mockFile0, (Object) null);
        assertEquals(0L, mockFile0.getUsableSpace());
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleModule> class0 = SimpleModule.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[6];
        TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, 76, (int) (-62), (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedReader pipedReader0 = new PipedReader();
        PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
        JavaType javaType0 = TypeFactory.unknownType();
        try {
            objectMapper0.readValue((Reader) pushbackReader0, javaType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        // Undeclared exception!
        try {
            objectMapper0.disable(mapperFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<StringWriter> typeReference0 = (TypeReference<StringWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.reader(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<SimpleModule> typeReference0 = (TypeReference<SimpleModule>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((JsonParser) null, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        assertEquals("JSON", jsonFactory0.getFormatName());
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
        assertNotNull(visibilityChecker0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        Class<MockPrintWriter> class0 = MockPrintWriter.class;
        try {
            objectMapper0.treeToValue((TreeNode) objectNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No suitable constructor found for type [simple type, class org.evosuite.runtime.mock.java.io.MockPrintWriter]: can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)
            //  at [Source: java.lang.String@0000000125; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        // Undeclared exception!
        try {
            objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readValue((URL) null, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
        }
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("JSON");
        Class<Throwable> class0 = Throwable.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        try {
            objectMapper0.readValue((File) mockFile0, (JavaType) simpleType0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = objectMapper0.writeValueAsBytes((Object) null);
        assertArrayEquals(new byte[] { (byte) 110, (byte) 117, (byte) 108, (byte) 108 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ObjectOutputStream> typeReference0 = (TypeReference<ObjectOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValues((JsonParser) null, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
        assertNull(propertyNamingStrategy0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.writeValue((OutputStream) null, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        try {
            objectMapper0.writeValue((Writer) charArrayWriter0, (Object) charArrayWriter0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class java.io.CharArrayWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter((PrettyPrinter) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        objectMapper0.addMixInAnnotations(class0, class0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 5, 5);
        // Undeclared exception!
        try {
            objectMapper0.readValue(jsonParser0, (ResolvedType) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
        assertNotNull(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(jacksonAnnotationIntrospector0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[6];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-1485), (-1485));
        Class<StringWriter> class0 = StringWriter.class;
        MappingIterator<StringWriter> mappingIterator0 = objectMapper0.readValues(jsonParser0, class0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        assertNotNull(serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.PascalCaseStrategy propertyNamingStrategy_PascalCaseStrategy0 = (PropertyNamingStrategy.PascalCaseStrategy) PropertyNamingStrategy.PASCAL_CASE_TO_CAMEL_CASE;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_PascalCaseStrategy0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
        assertSame(objectMapper0, object0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        try {
            objectMapper0.readValue((InputStream) pipedInputStream0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = objectMapper0.getDateFormat();
        assertNotNull(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[8];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte) 4, 0);
        Class<LineNumberReader> class0 = LineNumberReader.class;
        Class<MockFileWriter> class1 = MockFileWriter.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        MapType mapType0 = MapType.construct(class1, simpleType0, simpleType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) mapType0, (Object) mapType0, (Object) null);
        try {
            objectMapper0.readValue(jsonParser0, (JavaType) referenceType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: [B@0000000126; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(59);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1529, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 59, (byte) (-79), false);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            objectMapper0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        // Undeclared exception!
        try {
            objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        Class<MockPrintWriter> class0 = MockPrintWriter.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        String string0 = objectMapper0.writeValueAsString(class0);
        assertEquals("\"org.evosuite.runtime.mock.java.io.MockPrintWriter\"", string0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
        assertNotNull(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getHttpExample();
        TypeReference<NullNode> typeReference0 = (TypeReference<NullNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        try {
            objectMapper0.readValue(uRL0, (TypeReference) typeReference0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Could not find: www.someFakeButWellFormedURL.org
            //
            verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
        }
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PrettyPrinter prettyPrinter0 = objectMapper0._defaultPrettyPrinter();
        assertNotNull(prettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<FloatNode> class0 = FloatNode.class;
        Class<MapType> class1 = MapType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        byte[] byteArray0 = new byte[3];
        try {
            objectMapper0.readValue(byteArray0, (int) 102, (int) (-41), (JavaType) collectionLikeType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: [B@0000000127; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
        assertNull(injectableValues0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getFileExample();
        Class<MapType> class0 = MapType.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue(uRL0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.net.URL", e);
        }
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue((byte[]) null, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.JsonFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MissingNode> class0 = MissingNode.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
        assertNull(class1);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0);
        ObjectMapper objectMapper1 = objectMapper0.setConfig(serializationConfig0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        TextNode textNode0 = arrayNode0.textNode("JSON");
        Class<DecimalNode> class0 = DecimalNode.class;
        // Undeclared exception!
        try {
            objectMapper0._configAndWriteValue((JsonGenerator) null, textNode0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        NamedType[] namedTypeArray0 = new NamedType[7];
        SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("l]m70)m(9uD>4`L:(-");
        TypeReference<StringReader> typeReference0 = (TypeReference<StringReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        try {
            objectMapper0.readValue((File) mockFile0, (TypeReference) typeReference0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = objectMapper0.constructType(javaType0);
        assertTrue(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedReader pipedReader0 = new PipedReader();
        TypeReference<BuilderBasedDeserializer> typeReference0 = (TypeReference<BuilderBasedDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((Reader) pipedReader0, (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setFilterProvider((FilterProvider) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
        // Undeclared exception!
        try {
            objectMapper0.convertValue((Object) byteArrayOutputStream0, (TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream(64);
        try {
            objectMapper0.readValue((InputStream) pipedInputStream0, (TypeReference) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<FloatNode> class0 = FloatNode.class;
        Class<MapType> class1 = MapType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) collectionLikeType0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        try {
            objectMapper0.readValue((InputStream) null, (JavaType) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<ReferenceType> class0 = ReferenceType.class;
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) mapType0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readValue("#@#P_ZWe", (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<MapType> class0 = MapType.class;
        JsonSerializer<MapLikeType> jsonSerializer0 = (JsonSerializer<MapLikeType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends MapLikeType>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        SimpleModule simpleModule0 = new SimpleModule("");
        Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
        SimpleModule simpleModule1 = simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule(" does not define valid handledType() -- must either register with method that takes type argument ");
        Class<MapLikeType> class0 = MapLikeType.class;
        JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends MapLikeType>) jsonDeserializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<BooleanNode> class0 = BooleanNode.class;
        SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class0, (ValueInstantiator) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("/[rBF(^8Q.f\"6My(:u");
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<DoubleNode> class0 = DoubleNode.class;
        SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends DoubleNode>) class0, (JsonSerializer<DoubleNode>) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        simpleModule0.setAbstractTypes(simpleAbstractTypeResolver0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        simpleModule0.setSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
        ObjectReader objectReader0 = objectMapper1.reader(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(javaType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, objectMapper_DefaultTyping0, javaType0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(collectionLikeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        Class<ArrayNode> class0 = ArrayNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
        TypeDeserializer typeDeserializer0 = objectMapper_DefaultTypeResolverBuilder0.buildTypeDeserializer(deserializationConfig0, simpleType0, arrayDeque0);
        assertNull(typeDeserializer0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        // Undeclared exception!
        try {
            objectMapper0._checkInvalidCopy(class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.6.3-SNAPSHOT) does not override copy(); it has to
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule((String) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined name
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("~fjE", (Version) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined version
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[1];
        SimpleModule simpleModule0 = new SimpleModule();
        moduleArray0[0] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Stack<Module> stack0 = new Stack<Module>();
        SimpleModule simpleModule0 = new SimpleModule("{");
        stack0.add((Module) simpleModule0);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) stack0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        // Undeclared exception!
        try {
            objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not use includeAs of EXTERNAL_PROPERTY
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        // Undeclared exception!
        try {
            objectMapper0.disable(jsonParser_FeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.JsonFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        JsonNode jsonNode0 = objectMapper0.valueToTree((Object) class0);
        assertFalse(jsonNode0.isFloat());
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
        IntNode intNode0 = objectMapper0.readTree((JsonParser) readerBasedJsonParser0);
        assertNull(intNode0);
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
        objectMapper0.writeTree(jsonGenerator0, (JsonNode) null);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream("JSON");
        JsonNode jsonNode0 = objectMapper0.readTree((InputStream) mockFileInputStream0);
        assertFalse(jsonNode0.isIntegralNumber());
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        MockFile mockFile0 = new MockFile("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        DoubleNode doubleNode0 = DoubleNode.valueOf(56319);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) doubleNode0);
        assertEquals(7L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test168169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        MockFile mockFile0 = new MockFile("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        DoubleNode doubleNode0 = DoubleNode.valueOf(56319);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) doubleNode0);
        MockFileReader mockFileReader0 = new MockFileReader(mockFile0);
        JsonNode jsonNode0 = objectMapper0.readTree((Reader) mockFileReader0);
        URL uRL0 = mockFile0.toURL();
        JsonNode jsonNode1 = objectMapper0.readTree(uRL0);
        assertNotSame(jsonNode1, jsonNode0);
    }

    @Test(timeout = 4000)
    public void test169170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNode jsonNode0 = objectMapper0.readTree("0");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
        Class<ArrayNode> class1 = ArrayNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        try {
            objectMapper0._convert(jsonNode0, collectionLikeType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not find a Value deserializer for type [collection-like type; class org.evosuite.runtime.mock.java.io.MockFileOutputStream, contains [simple type, class com.fasterxml.jackson.databind.node.ArrayNode]]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test170171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        Class<Integer> class0 = Integer.TYPE;
        objectMapper0._configAndWriteValue(jsonGenerator0, jsonFactory0, class0);
        URL uRL0 = mockFile0.toURL();
        JsonNode jsonNode0 = objectMapper0.readTree(uRL0);
        assertFalse(jsonNode0.isDouble());
    }

    @Test(timeout = 4000)
    public void test171172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNode jsonNode0 = objectMapper0.valueToTree((Object) null);
        assertNull(jsonNode0);
    }

    @Test(timeout = 4000)
    public void test172173() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test173174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test174175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MapLikeType> typeReference0 = (TypeReference<MapLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.writerFor(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test175176() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((TypeReference<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test176177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) ObjectMapper._defaultPrettyPrinter;
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test177178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test178179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((Class<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test179180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MockFileReader> typeReference0 = (TypeReference<MockFileReader>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.writerWithType(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test180181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test181182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<StringWriter> class0 = StringWriter.class;
        StringWriter stringWriter0 = objectMapper0.convertValue((Object) null, class0);
        assertNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test182183() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        // Undeclared exception!
        try {
            objectMapper0.convertValue((Object) jsonFactory0, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test183184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = objectMapper0.convertValue((Object) null, (JavaType) null);
        assertNull(doubleNode0);
    }

    @Test(timeout = 4000)
    public void test184185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.instance;
        Class<StringWriter> class0 = StringWriter.class;
        StringWriter stringWriter0 = objectMapper0.convertValue((Object) nullNode0, class0);
        assertNull(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test185186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        // Undeclared exception!
        try {
            objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // type must be provided
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test186187() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
        Class<NamedType> class0 = NamedType.class;
        // Undeclared exception!
        try {
            objectMapper0._configAndWriteValue(jsonGenerator0, class0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test187188() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.getInstance();
        Class<CharArrayWriter> class0 = CharArrayWriter.class;
        CharArrayWriter charArrayWriter0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
        assertNull(charArrayWriter0);
    }
}
