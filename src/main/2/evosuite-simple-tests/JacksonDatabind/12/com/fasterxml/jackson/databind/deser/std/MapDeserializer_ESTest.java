/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:31:04 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.math.RoundingMode;
import java.sql.DataTruncation;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MapDeserializer_ESTest extends MapDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            mapDeserializer0.deserializeWithType((JsonParser) null, (DeserializationContext) null, (TypeDeserializer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<InvocationTargetException> class1 = InvocationTargetException.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        SimpleType simpleType0 = SimpleType.construct(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapLikeType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0);
        assertTrue(mapDeserializer1.isCachable());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class0 = String.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, asWrapperTypeDeserializer0);
        JavaType javaType0 = mapDeserializer0.getValueType();
        assertFalse(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class0 = String.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "", true, class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, asWrapperTypeDeserializer0);
        JavaType javaType0 = mapDeserializer0.getValueType();
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
        // Undeclared exception!
        try {
            mapDeserializer0.wrapAndThrow(sQLTransientConnectionException0, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Can not pass null fieldName
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<InvocationTargetException> class1 = InvocationTargetException.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        SimpleType simpleType0 = SimpleType.construct(class0);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapLikeType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, hashSet0);
        assertFalse(mapDeserializer1.isCachable());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            mapDeserializer0.findBackReference("com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not handle managed/back reference 'com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator': type: container deserializer of type com.fasterxml.jackson.databind.deser.std.MapDeserializer returned null for 'getContentDeserializer()'
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        // Undeclared exception!
        try {
            mapDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) hashMap0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class1 = String.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "com.fasterxml.jackson.databind.introspect.AnnotatedMember", true, class1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, asWrapperTypeDeserializer0);
        mapDeserializer0.getContentType();
        assertFalse(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ObjectMapper objectMapper0 = new ObjectMapper();
        MappingIterator<String> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (JavaType) simpleType0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class0 = String.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, (TypeDeserializer) null, (JsonDeserializer<?>) null, hashSet0);
        assertFalse(mapDeserializer1.isCachable());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, mapDeserializer0, hashSet0);
        assertFalse(mapDeserializer1.isCachable());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        Class<NamedType> class0 = NamedType.class;
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(simpleType0, classNameIdResolver0, "JSON", true, class0);
        HashSet<String> hashSet0 = new HashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, asArrayTypeDeserializer0, (JsonDeserializer<?>) null, hashSet0);
        assertFalse(mapDeserializer1.equals((Object) mapDeserializer0));
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, (JsonDeserializer<?>) null, (HashSet<String>) null);
        assertSame(mapDeserializer1, mapDeserializer0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-713));
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<CreatorProperty> class1 = CreatorProperty.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, fromStringDeserializer_Std0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapLikeType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
        assertTrue(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        String[] stringArray0 = new String[0];
        mapDeserializer0.setIgnorableProperties(stringArray0);
        assertTrue(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<RoundingMode> class0 = RoundingMode.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
        String[] stringArray0 = new String[2];
        mapDeserializer0.setIgnorableProperties(stringArray0);
        assertFalse(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            mapDeserializer0.resolve((DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        Class<Object> class0 = Object.class;
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            mapDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        MappingIterator<String> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (JavaType) simpleType0);
        assertNotNull(mappingIterator0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class0 = String.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        Class<MockFileInputStream> class1 = MockFileInputStream.class;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "`j0&}+b8ir;?2+(T[", true, class1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, asWrapperTypeDeserializer0);
        Class<IOException> class2 = IOException.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class2, fromStringDeserializer_Std0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_DelegatingKD0, (TypeDeserializer) null, mapDeserializer0, linkedHashSet0);
        boolean boolean0 = mapDeserializer1.isCachable();
        assertFalse(mapDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<String> class0 = String.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        Class<MockFileInputStream> class1 = MockFileInputStream.class;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, "`j0&}+b8ir;?2+(T[", true, class1);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, asWrapperTypeDeserializer0);
        Class<IOException> class2 = IOException.class;
        StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class2, fromStringDeserializer_Std0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer_DelegatingKD0, (TypeDeserializer) null, mapDeserializer0, linkedHashSet0);
        boolean boolean0 = mapDeserializer1.isCachable();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        // Undeclared exception!
        try {
            mapDeserializer0.deserialize((JsonParser) null, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<Integer> class0 = Integer.TYPE;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 38);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser) jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        mapDeserializer0._readAndBind(readerBasedJsonParser0, (DeserializationContext) null, hashMap0);
        assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        mapDeserializer0._readAndBindStringMap(jsonParser0, (DeserializationContext) null, hashMap0);
        assertFalse(jsonParser0.canReadTypeId());
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(jsonMappingException0);
        try {
            mapDeserializer0.wrapAndThrow(invocationTargetException0, invocationTargetException0, "JSON");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<Integer> class0 = Integer.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        try {
            mapDeserializer0.wrapAndThrow(invocationTargetException0, jsonFactory0, "JSON");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // (was java.lang.reflect.InvocationTargetException) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"JSON\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
        MockError mockError0 = new MockError((String) null, (Throwable) null);
        // Undeclared exception!
        try {
            mapDeserializer0.wrapAndThrow(mockError0, (Object) null, (String) null);
            fail("Expecting exception: Error");
        } catch (Error e) {
        }
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        MapDeserializer mapDeserializer0 = new MapDeserializer(mapLikeType0, jsonLocationInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
        SQLTransientException sQLTransientException0 = new SQLTransientException("I3?jPsU?03/keknn", "I3?jPsU?03/keknn");
        DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 11, 1, sQLTransientException0);
        MockIOException mockIOException0 = new MockIOException("I3?jPsU?03/keknn", dataTruncation0);
        try {
            mapDeserializer0.wrapAndThrow(mockIOException0, (Object) null, "I3?jPsU?03/keknn");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }
}
