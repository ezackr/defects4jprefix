/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:46:08 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.IsoEra;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberSerializer_ESTest extends NumberSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<BigDecimal> class0 = BigDecimal.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        JavaType javaType0 = TypeFactory.unknownType();
        Class<BigInteger> class1 = BigInteger.class;
        JavaType[] javaTypeArray0 = new JavaType[2];
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, arrayType0);
        assertFalse(arrayType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<BigInteger> class0 = BigInteger.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        assertEquals(1, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.System", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        BigDecimal bigDecimal0 = new BigDecimal(2147483647L);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IsoEra isoEra0 = IsoEra.BCE;
        IOContext iOContext0 = new IOContext(bufferRecycler0, isoEra0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 829, objectMapper0, mockPrintStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializer0.serialize((Number) bigDecimal0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
        assertEquals(12, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Byte> class0 = Byte.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        MissingNode missingNode0 = MissingNode.getInstance();
        IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-7159), true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) bigInteger0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -7159
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) 56320, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        Long long0 = new Long((-269L));
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) long0, (JsonGenerator) null, (SerializerProvider) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Double double0 = new Double(1766.7);
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) double0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        Float float0 = new Float((-579.081));
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) float0, (JsonGenerator) null, (SerializerProvider) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        Byte byte0 = new Byte((byte) 9);
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) byte0, (JsonGenerator) null, (SerializerProvider) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Short short0 = new Short((short) (-3162));
        // Undeclared exception!
        try {
            numberSerializer0.serialize((Number) short0, (JsonGenerator) uTF8JsonGenerator0, (SerializerProvider) defaultSerializerProvider_Impl0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Long> class0 = Long.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class0);
        JsonNode jsonNode0 = numberSerializer0.getSchema((SerializerProvider) null, (Type) class0);
        assertEquals(1, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        NumberSerializer numberSerializer0 = NumberSerializer.instance;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        assertFalse(resolvedRecursiveType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        Class<Integer> class1 = Integer.TYPE;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        Class<BigInteger> class2 = BigInteger.class;
        NumberSerializer numberSerializer0 = new NumberSerializer(class2);
        numberSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        assertFalse(resolvedRecursiveType0.isEnumType());
    }
}
