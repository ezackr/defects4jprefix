/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:02:38 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberDeserializers_ESTest extends NumberDeserializers_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
        assertFalse(numberDeserializers_BigIntegerDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Long> class0 = Long.class;
        Long long0 = new Long(0L);
        NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
        assertTrue(numberDeserializers_LongDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Long> class0 = Long.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        // Undeclared exception!
        try {
            numberDeserializers_BigDecimalDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BigDecimalDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Integer> class0 = Integer.class;
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, (Integer) null);
        assertTrue(numberDeserializers_IntegerDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
        assertFalse(numberDeserializers_NumberDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NumberDeserializers numberDeserializers0 = new NumberDeserializers();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
        Class<Object> class0 = Object.class;
        objectMapper0.convertValue((Object) numberDeserializers_LongDeserializer0, class0);
        assertTrue(numberDeserializers_LongDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Character> class0 = Character.class;
        Character character0 = new Character('z');
        NumberDeserializers.CharacterDeserializer numberDeserializers_CharacterDeserializer0 = new NumberDeserializers.CharacterDeserializer(class0, character0);
        assertFalse(numberDeserializers_CharacterDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Short> class0 = Short.class;
        Short short0 = new Short((short) (-1610));
        NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "7HSCqb)rF(1<ghv", true);
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 118);
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (byte) 0, 10, false);
        try {
            numberDeserializers_ShortDeserializer0.deserialize((JsonParser) uTF8StreamJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of java.lang.Short out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Byte byte0 = new Byte((byte) 77);
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = new NumberDeserializers.ByteDeserializer(class0, byte0);
        assertFalse(numberDeserializers_ByteDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        try {
            numberDeserializers_ByteDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of byte out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        JsonParser jsonParser0 = arrayNode0.traverse();
        try {
            numberDeserializers_BooleanDeserializer0.deserializeWithType(jsonParser0, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of boolean out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, (Boolean) null);
        assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
        // Undeclared exception!
        try {
            numberDeserializers_BooleanDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Float> class0 = Float.class;
        Float float0 = new Float(Double.NEGATIVE_INFINITY);
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
        assertFalse(numberDeserializers_FloatDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[5];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        try {
            numberDeserializers_FloatDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of float out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        try {
            numberDeserializers_DoubleDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of java.lang.Double out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Double> class0 = Double.class;
        Double double0 = new Double(0.0);
        NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        try {
            numberDeserializers_DoubleDeserializer0.deserializeWithType(jsonParser0, deserializationContext0, (TypeDeserializer) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of java.lang.Double out of null token
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "JSON");
        assertTrue(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<Boolean> class0 = Boolean.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "Attempted}to unwrap sinle value array for single 'BigInteger' value but there wRs more than a single value in ths array");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "`%");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<Double> class0 = Double.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "JSON");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<Character> class0 = Character.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "Problem deserializing 'setterless' property (\"");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Byte> class0 = Byte.TYPE;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "f");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<JsonGenerator.Feature> class0 = JsonGenerator.Feature.class;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "~#Tj-&YOpv(8SctB");
        assertNull(jsonDeserializer0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "java.math.BigInteger");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Long> class0 = Long.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<Double> class0 = Double.class;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "java.math.BigInteger");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<Character> class0 = Character.class;
        JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, "java.math.BigInteger");
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Byte> class0 = Byte.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Short> class0 = Short.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Float> class0 = Float.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Class<String> class0 = String.class;
        // Undeclared exception!
        try {
            NumberDeserializers.find(class0, "java.math.BigInteger");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Internal error: can't find deserializer for java.lang.String
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers", e);
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigDecimal> class0 = BigDecimal.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigInteger> class0 = BigInteger.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
        Boolean boolean0 = numberDeserializers_BooleanDeserializer0.getNullValue((DeserializationContext) null);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
        Boolean boolean0 = numberDeserializers_BooleanDeserializer0.getNullValue((DeserializationContext) defaultDeserializationContext_Impl0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.CharacterDeserializer numberDeserializers_CharacterDeserializer0 = NumberDeserializers.CharacterDeserializer.wrapperInstance;
        // Undeclared exception!
        try {
            numberDeserializers_CharacterDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$CharacterDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
        // Undeclared exception!
        try {
            numberDeserializers_IntegerDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
        // Undeclared exception!
        try {
            numberDeserializers_IntegerDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
        // Undeclared exception!
        try {
            numberDeserializers_LongDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
        // Undeclared exception!
        try {
            numberDeserializers_NumberDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$NumberDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
        // Undeclared exception!
        try {
            numberDeserializers_NumberDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$NumberDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
        // Undeclared exception!
        try {
            numberDeserializers_BigIntegerDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BigIntegerDeserializer", e);
        }
    }
}
