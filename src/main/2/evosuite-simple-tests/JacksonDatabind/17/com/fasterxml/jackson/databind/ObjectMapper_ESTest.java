/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:55:59 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.text.DateFormat;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        Class<DataOutputStream> class0 = DataOutputStream.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        try {
            objectMapper0._convert(simpleType0, simpleType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not instantiate value of type [simple type, class java.io.DataOutputStream] from String value ('java.io.DataOutputStream'); no single-String constructor/factory method
            //  at [Source: java.lang.String@0000000629; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) simpleType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[3];
        Class<LongNode> class0 = LongNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        try {
            objectMapper0.readValue(byteArray0, (JavaType) simpleType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: [B@0000001968; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.CANADA;
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CharArrayWriter> class0 = CharArrayWriter.class;
        try {
            objectMapper0.readValue("6Ef", class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('f' (code 102)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: java.lang.String@0000001969; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<MockPrintWriter>[] classArray0 = (Class<MockPrintWriter>[]) Array.newInstance(Class.class, 7);
        // Undeclared exception!
        try {
            objectMapper0.registerSubtypes(classArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.NamedType", e);
        }
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue((byte[]) null, 1025, 619, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        PipedReader pipedReader0 = new PipedReader();
        Class<BooleanNode> class0 = BooleanNode.class;
        try {
            objectMapper0.readValue((Reader) pipedReader0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        // Undeclared exception!
        try {
            objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[7];
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue((File) null, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
        ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
        assertFalse(objectReader1.equals((Object) objectReader0));
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
        doReturn(jsonObjectFormatVisitor_Base0).when(jsonFormatVisitorWrapper0).expectObjectFormat(any(com.fasterxml.jackson.databind.JavaType.class));
        objectMapper0.acceptJsonFormatVisitor(class0, jsonFormatVisitorWrapper0);
        assertEquals(0, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, ObjectInputStream> hashMap0 = new HashMap<String, ObjectInputStream>();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        try {
            objectMapper0.readValue("?YkOa1F<k/&XUeG%2", (JavaType) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: java.lang.String@0000001970; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, Throwable> hashMap0 = new HashMap<String, Throwable>();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
        objectMapper0.setFilters(simpleFilterProvider0);
        assertTrue(simpleFilterProvider0.willFailOnUnknownId());
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        assertFalse(objectMapper1.equals((Object) objectMapper0));
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("", ",W'y:");
        objectMapper0.writeValue((File) mockFile0, (Object) null);
        assertEquals(0, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        Class<ThaiBuddhistEra> class1 = ThaiBuddhistEra.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapType mapType0 = MapType.construct(class1, simpleType0, simpleType0);
        CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) collectionType0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        TypeReference<MockFileOutputStream> typeReference0 = (TypeReference<MockFileOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, (-286), (-286), (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MissingNode missingNode0 = MissingNode.getInstance();
        Class<ArrayType> class0 = ArrayType.class;
        try {
            objectMapper0.treeToValue((TreeNode) missingNode0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not deserialize instance of com.fasterxml.jackson.databind.type.ArrayType out of NOT_AVAILABLE token
            //  at [Source: java.lang.String@0000001971; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        StringReader stringReader0 = new StringReader("Current token not FIELD_NAME (to contain expected root name '");
        try {
            objectMapper0.readValue((Reader) stringReader0, (JavaType) simpleType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Current': was expecting ('true', 'false' or 'null')
            //  at [Source: java.io.StringReader@0000001972; line: 1, column: 8]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.disable((MapperFeature[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.reader((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2995), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        TypeReference<SimpleType> typeReference0 = (TypeReference<SimpleType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((JsonParser) readerBasedJsonParser0, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        assertTrue(jsonFactory0.canUseCharArrays());
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
        assertNotNull(visibilityChecker0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
        // Undeclared exception!
        try {
            objectMapper0.enable(deserializationFeature0, (DeserializationFeature[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readValue((URL) null, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
        }
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        File file0 = MockFile.createTempFile("`ud=Y/R.M ", "`ud=Y/R.M ");
        try {
            objectMapper0.readValue(file0, (JavaType) simpleType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No content to map due to end-of-input
            //  at [Source: org.evosuite.runtime.mock.java.io.MockFile@0000001973; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        IntNode intNode0 = new IntNode(34);
        byte[] byteArray0 = objectMapper0.writeValueAsBytes(intNode0);
        assertArrayEquals(new byte[] { (byte) 51, (byte) 52 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ShortNode> typeReference0 = (TypeReference<ShortNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValues((JsonParser) null, (TypeReference<?>) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
        // Undeclared exception!
        try {
            objectMapper0._checkInvalidCopy(class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.4.7-SNAPSHOT) does not override copy(); it has to
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
        char[] charArray0 = new char[0];
        CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, charArrayReader0, objectMapper0, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        try {
            objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) bufferRecycler0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No serializer found for class com.fasterxml.jackson.core.util.BufferRecycler and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 17, 3);
        Charset charset0 = Charset.defaultCharset();
        CharsetDecoder charsetDecoder0 = charset0.newDecoder();
        InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
        // Undeclared exception!
        try {
            objectMapper0.writeValue((Writer) null, (Object) inputStreamReader0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
        objectMapper0.addMixInAnnotations(class0, class0);
        assertEquals(1, objectMapper0.mixInCount());
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        try {
            objectMapper0.readValue(jsonParser0, (ResolvedType) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
            //  at [Source: java.lang.String@0000001974; line: 1, column: 9]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FilterOutputStream> class0 = FilterOutputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
        assertNotNull(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        assertNotNull(deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 2983, 37, true);
        Class<MapLikeType> class1 = MapLikeType.class;
        Iterator<MapLikeType> iterator0 = readerBasedJsonParser0.readValuesAs(class1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        assertNotNull(serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = (PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy) PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Object object0 = objectMapper0.setHandlerInstantiator((HandlerInstantiator) null);
        assertSame(object0, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BinaryNode> class0 = BinaryNode.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
        DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
        try {
            objectMapper0.readValue((InputStream) dataInputStream0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.PushbackInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectMapper> class0 = ObjectMapper.class;
        Class<Throwable> class1 = Throwable.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        CollectionType collectionType0 = CollectionType.construct(class0, collectionLikeType0);
        // Undeclared exception!
        try {
            objectMapper0.readValue((JsonParser) null, (JavaType) collectionType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ShortNode shortNode0 = ShortNode.valueOf((short) (-32768));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
        // Undeclared exception!
        try {
            objectMapper0.readValues(jsonParser0, (ResolvedType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        // Undeclared exception!
        try {
            objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
        String string0 = objectMapper0.writeValueAsString(serializationFeature0);
        assertEquals("\"WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS\"", string0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        assertFalse(objectNode0.isInt());
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<LongNode> class0 = LongNode.class;
        MockThrowable mockThrowable0 = new MockThrowable("JSON");
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(mockThrowable0);
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
        assertNotNull(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getFtpExample();
        // Undeclared exception!
        try {
            objectMapper0.readValue(uRL0, (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.net.URL", e);
        }
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        // Undeclared exception!
        try {
            objectMapper0.readValue(byteArray0, 933, 933, (JavaType) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 933
            //
            verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
        // Undeclared exception!
        try {
            objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
        // Undeclared exception!
        try {
            objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<POJONode> class0 = POJONode.class;
        // Undeclared exception!
        try {
            objectMapper0.readValue((URL) null, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
        }
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[3];
        Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
        try {
            objectMapper0.readValue(byteArray0, class0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: [B@0000001975; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
        // Undeclared exception!
        try {
            objectMapper0.enable(mapperFeatureArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        assertNull(arrayNode0.numberType());
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        boolean boolean0 = objectMapper0.isEnabled(mapperFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("", "");
        TypeReference<MapLikeType> typeReference0 = (TypeReference<MapLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        try {
            objectMapper0.readValue((File) mockFile0, (TypeReference) typeReference0);
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Throwable> class0 = Throwable.class;
        JavaType javaType0 = objectMapper0.constructType(class0);
        assertFalse(javaType0.isArrayType());
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        // Undeclared exception!
        try {
            objectMapper0.readValue((Reader) null, (TypeReference) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
        // Undeclared exception!
        try {
            objectMapper0.convertValue((Object) deserializationFeature0, (TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1347, (-3093));
        TypeReference<POJONode> typeReference0 = (TypeReference<POJONode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue((InputStream) byteArrayInputStream0, (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ShortNode shortNode0 = new ShortNode((short) 2);
        ArrayType arrayType0 = ArrayType.construct(simpleType0, shortNode0, shortNode0);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        try {
            objectMapper0.readValue((InputStream) bufferedInputStream0, (JavaType) arrayType0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ObjectOutputStream> typeReference0 = (TypeReference<ObjectOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.readValue("\"WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS\"", (TypeReference) typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider((DefaultSerializerProvider) null);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("b5*G/'BT?+");
        Class<NullNode> class0 = NullNode.class;
        JsonSerializer<NullNode> jsonSerializer0 = (JsonSerializer<NullNode>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends NullNode>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("b5*G/'BT?+");
        Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
        SimpleModule simpleModule1 = simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("JSON");
        SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
        simpleModule0.setDeserializers(simpleDeserializers0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        simpleModule0.addValueInstantiator(class0, jsonLocationInstantiator0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<MapType> class0 = MapType.class;
        JsonSerializer<MapType> jsonSerializer0 = (JsonSerializer<MapType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends MapType>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        NamedType[] namedTypeArray0 = new NamedType[4];
        simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.enableDefaultTyping();
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        try {
            objectMapper0._convert(class0, mapLikeType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.node.NullNode, [simple type, class com.fasterxml.jackson.databind.node.NullNode] -> [simple type, class com.fasterxml.jackson.databind.node.NullNode]]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        // Undeclared exception!
        try {
            objectMapper1.valueToTree((Object) objectMapper0);
            fail("Expecting exception: NoClassDefFoundError");
        } catch (NoClassDefFoundError e) {
            //
            // com/fasterxml/jackson/databind/JsonMappingException$Reference
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ShortNode shortNode0 = new ShortNode((short) 2);
        ArrayType arrayType0 = ArrayType.construct(simpleType0, shortNode0, shortNode0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        Class<TextNode> class0 = TextNode.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule((String) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined name
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("JSON", (Version) null);
        // Undeclared exception!
        try {
            objectMapper0.registerModule(simpleModule0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Module without defined version
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        Object object0 = objectMapper0._convert("Module without defined name", simpleType0);
        Module[] moduleArray0 = new Module[1];
        IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, false);
        PipedReader pipedReader0 = new PipedReader();
        PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 200);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, pushbackReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 4026, false);
        Version version0 = readerBasedJsonParser0.version();
        SimpleModule simpleModule0 = new SimpleModule("Module without defined name", version0);
        moduleArray0[0] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = Version.unknownVersion();
        SimpleModule simpleModule0 = new SimpleModule("Pk{\"?v~5AR@`", version0);
        ArrayDeque<Module> arrayDeque0 = new ArrayDeque<Module>(1);
        arrayDeque0.add(simpleModule0);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) arrayDeque0);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
        assertNull(class1);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        assertEquals(0, objectMapper1.mixInCount());
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
        assertSame(objectMapper1, objectMapper0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
        assertSame(objectMapper0, objectMapper1);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("[h7[sSc1");
        try {
            objectMapper0.readTree(jsonParser0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'h7': was expecting ('true', 'false' or 'null')
            //  at [Source: java.lang.String@0000001976; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        byte[] byteArray0 = new byte[13];
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (-3193), (-3193));
        FloatNode floatNode0 = objectMapper0.readTree(jsonParser0);
        assertNull(floatNode0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) null);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
        JsonNode jsonNode0 = objectMapper0.readTree((InputStream) mockFileInputStream0);
        assertFalse(jsonNode0.isLong());
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNode jsonNode0 = objectMapper0.readTree("\"WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS\"");
        assertEquals(JsonNodeType.STRING, jsonNode0.getNodeType());
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) null);
        JsonNode jsonNode0 = objectMapper0.readTree((File) mockFile0);
        assertFalse(jsonNode0.isIntegralNumber());
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        BooleanNode booleanNode0 = BooleanNode.TRUE;
        objectMapper0.writeTree(jsonGenerator0, (JsonNode) booleanNode0);
        URL uRL0 = mockFile0.toURL();
        JsonNode jsonNode0 = objectMapper0.readTree(uRL0);
        assertEquals(0, jsonNode0.size());
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        objectMapper0.writeValue(jsonGenerator0, (Object) jsonGenerator0);
        assertEquals(1444L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test152153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        objectMapper0.writeValue(jsonGenerator0, (Object) jsonGenerator0);
        assertFalse(jsonGenerator0.isClosed());
    }

    @Test(timeout = 4000)
    public void test153154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        NullNode nullNode0 = NullNode.instance;
        Class<Object> class0 = Object.class;
        Object object0 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test154155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
        JsonNode jsonNode0 = bigIntegerNode0.path((String) null);
        Class<MissingNode> class0 = MissingNode.class;
        MissingNode missingNode0 = objectMapper0.treeToValue((TreeNode) jsonNode0, class0);
        assertFalse(missingNode0.isShort());
    }

    @Test(timeout = 4000)
    public void test155156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.valueToTree((Object) null);
        assertNull(arrayNode0);
    }

    @Test(timeout = 4000)
    public void test156157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test157158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((Class<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test158159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<FloatNode> typeReference0 = (TypeReference<FloatNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        // Undeclared exception!
        try {
            objectMapper0.writerWithType(typeReference0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test159160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test160161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) ObjectMapper._defaultPrettyPrinter;
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test161162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test162163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        Class<SimpleModule> class0 = SimpleModule.class;
        try {
            objectMapper0.convertValue((Object) beanSerializerFactory0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No serializer found for class com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.ser.BeanSerializerFactory[\"factoryConfig\"])
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test163164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper0.convertValue((Object) null, class0);
        assertNull(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test164165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedHashSet> class1 = LinkedHashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
        try {
            objectMapper0.convertValue((Object) class1, (JavaType) collectionType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not deserialize instance of java.util.LinkedHashSet out of VALUE_STRING token
            //  at [Source: java.lang.String@0000001512; line: -1, column: -1]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test165166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        ArrayType arrayType0 = ArrayType.construct(simpleType0, arrayNode0, objectMapper0);
        NullNode nullNode0 = objectMapper0.convertValue((Object) null, (JavaType) arrayType0);
        assertNull(nullNode0);
    }

    @Test(timeout = 4000)
    public void test166167() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        Object object0 = objectMapper0._convert("?", javaType0);
        assertEquals("?", object0);
    }

    @Test(timeout = 4000)
    public void test167168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = (SimpleType) objectMapper0._convert(simpleType0, simpleType0);
        assertFalse(simpleType1.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test168169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        Class<PipedWriter> class1 = PipedWriter.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        try {
            objectMapper0._convert((Object) null, mapLikeType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.node.NullNode, [simple type, class java.io.PipedWriter] -> [simple type, class java.io.PipedWriter]]
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test169170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            objectMapper0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // type must be provided
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test170171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        File file0 = MockFile.createTempFile("?YkOa1F<k/&XUeG%2", "?YkOa1F<k/&XUeG%2");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        JsonFactory jsonFactory0 = new JsonFactory();
        SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        SerializationFeature serializationFeature1 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
        serializationFeatureArray0[0] = serializationFeature1;
        serializationFeatureArray0[1] = serializationFeature0;
        serializationFeatureArray0[2] = serializationFeature0;
        serializationFeatureArray0[3] = serializationFeature0;
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        objectMapper0._configAndWriteValue(jsonGenerator0, decimalNode0);
        assertEquals(111, jsonGenerator0.getFeatureMask());
    }

    @Test(timeout = 4000)
    public void test171172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        Class<TextNode> class0 = TextNode.class;
        objectMapper0._configAndWriteValue(jsonGenerator0, jsonFactory0, class0);
        assertEquals(512L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test171173() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        Class<TextNode> class0 = TextNode.class;
        objectMapper0._configAndWriteValue(jsonGenerator0, jsonFactory0, class0);
        assertEquals(79, jsonGenerator0.getFeatureMask());
    }

    @Test(timeout = 4000)
    public void test172174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1533, objectMapper0, (OutputStream) null);
        StringWriter stringWriter0 = new StringWriter(0);
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        // Undeclared exception!
        try {
            objectMapper0._configAndWriteValue(uTF8JsonGenerator0, stringWriter0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test173175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Integer integer0 = new Integer((-1830));
        Class<FloatNode> class0 = FloatNode.class;
        // Undeclared exception!
        try {
            objectMapper0._configAndWriteValue((JsonGenerator) null, integer0, class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
        }
    }

    @Test(timeout = 4000)
    public void test174176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Object object0 = objectMapper0._convert(class0, simpleType0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test174177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DoubleNode> class0 = DoubleNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Object object0 = objectMapper0._convert(class0, simpleType0);
        Object object1 = objectMapper0._convert(object0, simpleType0);
        assertNotSame(object1, object0);
    }
}
