/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:59:04 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.ser.std.EnumSerializer;
import com.fasterxml.jackson.databind.util.EnumValues;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class EnumSerializer_ESTest extends EnumSerializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        EnumSerializer enumSerializer0 = null;
        try {
            enumSerializer0 = new EnumSerializer((EnumValues) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[2];
        JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
        jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
        jsonFormat_FeatureArray0[1] = jsonFormat_FeatureArray0[0];
        JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
        Boolean boolean0 = jsonFormat_Features0.get(jsonFormat_FeatureArray0[0]);
        EnumSerializer enumSerializer0 = null;
        try {
            enumSerializer0 = new EnumSerializer((EnumValues) null, boolean0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.empty();
        // Undeclared exception!
        try {
            EnumSerializer.construct(class0, (SerializationConfig) null, (BeanDescription) null, jsonFormat_Value0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.util.EnumValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.BOOLEAN;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        // Undeclared exception!
        try {
            EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unsupported serialization shape (BOOLEAN) for Enum com.fasterxml.jackson.databind.DeserializationFeature, not supported as property annotation
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, (JsonFormat.Value) null, true);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<MapperFeature> class0 = MapperFeature.class;
        JsonFormat.Value jsonFormat_Value0 = new JsonFormat.Value();
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.SCALAR;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<InputStream> class0 = InputStream.class;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.STRING;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NATURAL;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NUMBER_INT;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ARRAY;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.BOOLEAN;
        Class<Integer> class0 = Integer.class;
        JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
        // Undeclared exception!
        try {
            EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unsupported serialization shape (BOOLEAN) for Enum java.lang.Integer, not supported as class annotation
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
        }
    }
}
