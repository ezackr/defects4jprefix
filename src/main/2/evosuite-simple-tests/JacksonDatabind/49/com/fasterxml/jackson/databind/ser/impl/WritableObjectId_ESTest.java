/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:27:43 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class WritableObjectId_ESTest extends WritableObjectId_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        boolean boolean0 = writableObjectId0.writeAsId((JsonGenerator) null, defaultSerializerProvider_Impl0, (ObjectIdWriter) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        writableObjectId0.idWritten = true;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayOutputStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        writableObjectId0.generateId(uTF8JsonGenerator0);
        // Undeclared exception!
        try {
            writableObjectId0.writeAsId(uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (ObjectIdWriter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.WritableObjectId", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayOutputStream0);
        ChronoField chronoField0 = ChronoField.HOUR_OF_AMPM;
        Object object0 = writableObjectId0.generateId(chronoField0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayOutputStream0);
        ChronoField chronoField0 = ChronoField.HOUR_OF_AMPM;
        Object object0 = writableObjectId0.generateId(chronoField0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(collectionLikeType0, serializedString0, writableObjectId0.generator, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, false);
        boolean boolean0 = writableObjectId0.writeAsId(uTF8JsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        writableObjectId0.generateId(iOContext0);
        Class<String> class0 = String.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class1);
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(mapLikeType0, serializedString0, writableObjectId0.generator, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, true);
        try {
            writableObjectId0.writeAsId(uTF8JsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_IntSequenceGenerator0, true);
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintStream mockPrintStream0 = new MockPrintStream(">+dq>#%6");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, (PropertyName) null, (ObjectIdGenerator<?>) objectIdGenerators_IntSequenceGenerator0, true);
        writableObjectId0.writeAsField(uTF8JsonGenerator0, defaultSerializerProvider_Impl0, objectIdWriter0);
        assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "pt", false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SerializedString serializedString0 = new SerializedString("JSON");
        ObjectIdWriter objectIdWriter0 = new ObjectIdWriter(simpleType0, serializedString0, objectIdGenerators_IntSequenceGenerator0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, false);
        try {
            writableObjectId0.writeAsField(jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, objectIdWriter0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
            //
            verifyException("com.fasterxml.jackson.databind.ser.impl.FailingSerializer", e);
        }
    }
}
