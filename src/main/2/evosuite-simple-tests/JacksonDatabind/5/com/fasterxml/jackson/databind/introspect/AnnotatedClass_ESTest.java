/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 18:08:17 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.Annotations;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.time.chrono.ChronoLocalDate;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotatedClass_ESTest extends AnnotatedClass_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<?> class0 = annotatedClass0.getRawType();
        assertEquals("boolean", class0.toString());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        int int0 = annotatedClass0.getModifiers();
        assertEquals(17, int0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        // Undeclared exception!
        try {
            annotatedClass0.getType((TypeBindings) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.Annotated", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<AnnotatedField> class0 = AnnotatedField.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        List<AnnotatedMethod> list0 = annotatedClass0.getStaticMethods();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Class<AnnotatedField> class0 = AnnotatedField.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        List<AnnotatedMethod> list0 = annotatedClass0.getStaticMethods();
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        AnnotatedClass annotatedClass1 = annotatedClass0.withAnnotations((AnnotationMap) null);
        assertEquals(1041, annotatedClass1.getModifiers());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = annotatedClass0.getName();
        assertEquals("java.lang.String", string0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
        Class<?> class1 = annotatedClass0.getAnnotated();
        assertEquals("class com.fasterxml.jackson.databind.introspect.AnnotatedParameter", class1.toString());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = annotatedClass0.toString();
        assertEquals("[AnnotedClass boolean]", string0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Iterable<Annotation> iterable0 = annotatedClass0.annotations();
        assertNotNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        AnnotationMap annotationMap0 = annotatedClass0.getAllAnnotations();
        assertEquals(0, annotationMap0.size());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
        assertEquals(0, annotations0.size());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        boolean boolean0 = annotatedClass0.hasAnnotations();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        boolean boolean0 = annotatedClass0.hasAnnotations();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        assertEquals(1, annotatedConstructor0.getModifiers());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 1);
        annotatedClass0.findMethod("Trying to resolve a forward reference with id [", classArray0);
        int int0 = annotatedClass0.getFieldCount();
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        int int0 = annotatedClass0.getFieldCount();
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        int int0 = annotatedClass0.getFieldCount();
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AnnotatedParameter> class1 = AnnotatedParameter.class;
        objectMapper0.addMixInAnnotations(class0, class1);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Class<ClassKey> class0 = ClassKey.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
        objectMapper0.addMixInAnnotations(class0, class1);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Class<Annotation> class0 = Annotation.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.addMixInAnnotations(class0, class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        int int0 = annotatedClass0.getMemberMethodCount();
        assertEquals(36, int0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class1 = Object.class;
        objectMapper0.addMixInAnnotations(class1, class1);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<String> class0 = String.class;
        annotatedClass0._addConstructorMixIns(class0);
        assertEquals(17, annotatedClass0.getModifiers());
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<String> class0 = String.class;
        // Undeclared exception!
        try {
            annotatedClass0._addFactoryMixIns(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClass", e);
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        // Undeclared exception!
        try {
            annotatedClass0._addFactoryMixIns(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClass", e);
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct((Class<?>) null, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
        int int0 = annotatedClass0.getMemberMethodCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Class<AnnotatedField> class0 = AnnotatedField.class;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        AnnotationMap annotationMap0 = annotatedClass0._collectRelevantAnnotations((Annotation[]) null);
        assertEquals(0, annotationMap0.size());
    }
}
