/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:33:37 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.InputStream;
import java.io.PipedReader;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ExternalTypeHandler_ESTest extends ExternalTypeHandler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        ExternalTypeHandler externalTypeHandler1 = externalTypeHandler0.start();
        assertNotSame(externalTypeHandler0, externalTypeHandler1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        // Undeclared exception!
        try {
            externalTypeHandler0._deserialize((JsonParser) null, (DeserializationContext) null, (-3236), "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        // Undeclared exception!
        try {
            externalTypeHandler0._deserializeAndSet((JsonParser) null, (DeserializationContext) null, "}/wjrD07", 0, "}/wjrD07");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        boolean boolean0 = externalTypeHandler0.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, (String) null, (Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "w\"ZL{)", false, class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2), classNameIdResolver0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        boolean boolean0 = externalTypeHandler0.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, "", asPropertyTypeDeserializer0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<Object> class1 = Object.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "(\"Fv>'oC)8f>.", true, class1);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 56320, annotationMap0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        // Undeclared exception!
        try {
            externalTypeHandler0.handleTypePropertyValue(readerBasedJsonParser0, (DeserializationContext) null, "(\"Fv>'oC)8f>.", (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<Object> class1 = Object.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, ")n(\"Fv>'oC)Kf>.", false, class1);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        PropertyMetadata propertyMetadata0 = pOJOPropertyBuilder0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 56320, annotationMap0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        boolean boolean0 = externalTypeHandler1.handleTypePropertyValue(readerBasedJsonParser0, (DeserializationContext) null, ")n(\"Fv>'oC)Kf>.", collectionType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        boolean boolean0 = externalTypeHandler0.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "", (Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "Missing external type id property '%s'", false, class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 3, classNameIdResolver0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        // Undeclared exception!
        try {
            externalTypeHandler0.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "", "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<Object> class1 = Object.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "in(\"Fv>'oC)8f>.", false, class1);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        PropertyMetadata propertyMetadata0 = pOJOPropertyBuilder0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 56320, annotationMap0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        boolean boolean0 = externalTypeHandler1.handlePropertyValue(readerBasedJsonParser0, (DeserializationContext) null, "in(\"Fv>'oC)8f>.", (Object) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<Object> class1 = Object.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "in(\"Fv>'oC)8f>.", true, class1);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        PropertyMetadata propertyMetadata0 = pOJOPropertyBuilder0.getMetadata();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 56320, annotationMap0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
        PipedReader pipedReader0 = new PipedReader();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        boolean boolean0 = externalTypeHandler1.handlePropertyValue(readerBasedJsonParser0, (DeserializationContext) null, "in(\"Fv>'oC)8f>.", annotationIntrospector0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "Missing external type id property '%s'", false, class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-2), classNameIdResolver0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        Object object0 = externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) null, (Object) asPropertyTypeDeserializer0);
        assertSame(asPropertyTypeDeserializer0, object0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        Class<InputStream> class1 = InputStream.class;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "/eW(L*_Lf6<d5", false, class1);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1, typeFactory0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
        PropertyBasedCreator propertyBasedCreator0 = new PropertyBasedCreator(jsonLocationInstantiator0, settableBeanPropertyArray0);
        // Undeclared exception!
        try {
            externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (PropertyValueBuffer) null, propertyBasedCreator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "Missing external type id property '%s'", false, class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 13, annotationMap0, propertyMetadata0);
        ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
        externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
        ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
        ExternalTypeHandler externalTypeHandler1 = new ExternalTypeHandler(externalTypeHandler0);
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(13);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[2];
        settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[1] = (SettableBeanProperty) creatorProperty0;
        PropertyBasedCreator propertyBasedCreator0 = new PropertyBasedCreator(creatorCollector_Vanilla0, settableBeanPropertyArray0);
        // Undeclared exception!
        try {
            externalTypeHandler1.complete((JsonParser) null, (DeserializationContext) null, (PropertyValueBuffer) null, propertyBasedCreator0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
        }
    }
}
