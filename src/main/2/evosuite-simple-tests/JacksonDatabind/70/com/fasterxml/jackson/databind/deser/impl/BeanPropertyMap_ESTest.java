/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:43:02 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.time.chrono.HijrahDate;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
        assertEquals(0, settableBeanPropertyArray0.length);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, hashSet0);
        int int0 = beanPropertyMap0.size();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(priorityQueue0, false);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        linkedHashSet0.add((SettableBeanProperty) null);
        PropertyName propertyName0 = new PropertyName("gdXpwu\"mPFQMa4$:");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "gdXpwu\"mPFQMa4$:", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 39, asArrayTypeDeserializer0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty1);
        CreatorProperty creatorProperty2 = creatorProperty1.withName(propertyName0);
        linkedHashSet0.add(creatorProperty2);
        CreatorProperty creatorProperty3 = creatorProperty1.withName(propertyName0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty3);
        CreatorProperty creatorProperty4 = creatorProperty3.withName(propertyName0);
        linkedHashSet0.add(creatorProperty4);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        assertEquals(6, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1203, hijrahDate0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1443, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
        assertSame(beanPropertyMap0, beanPropertyMap1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1221, hijrahDate0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty1);
        assertSame(beanPropertyMap0, beanPropertyMap1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1221, hijrahDate0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty0);
        CreatorProperty creatorProperty2 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty1);
        linkedHashSet0.add(creatorProperty2);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty2);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp", "Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, "Gpp", propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, priorityQueue0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("aw;=", "aw;=");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "aw;=", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1443, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("' missing from _propsinorder", "aw;=");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("aw;=", "aw;=");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "aw;=", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1443, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("' missing from _propsinorder", "aw;=");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        linkedHashSet0.add((SettableBeanProperty) null);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        linkedHashSet0.add((SettableBeanProperty) null);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
        LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(linkedHashSet1);
        assertSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        HashSet<SettableBeanProperty> hashSet0 = new HashSet<SettableBeanProperty>();
        hashSet0.add((SettableBeanProperty) null);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(hashSet0, false);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ObjectNode objectNode1 = objectNode0.putNull("Se7iL&RMn%Q8v;");
        List<String> list0 = objectNode1.findValuesAsText("Se7iL&RMn%Q8v;", (List<String>) linkedList0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(list0);
        assertEquals(0, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.putNull("");
        List<String> list0 = objectNode0.findValuesAsText("", (List<String>) linkedList0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(list0);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.putNull("");
        List<String> list0 = objectNode0.findValuesAsText("", (List<String>) linkedList0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(list0);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("", "");
        List<String> list0 = objectNode1.findValuesAsText("", (List<String>) linkedList0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(list0);
        assertEquals(0, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));
        assertSame(settableBeanProperty0, creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(1);
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, treeSet0);
        // Undeclared exception!
        try {
            beanPropertyMap0.find((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not pass null property name
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp", "Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, "Gpp", propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("ko{");
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("cnp", "cnp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "cnp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1153, classNameIdResolver0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        PropertyName propertyName1 = PropertyName.construct("au!pp", "au!pp");
        CreatorProperty creatorProperty1 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1153, linkedHashSet0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("au!pp");
        assertNotNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("cnp", "cnp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "cnp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1153, classNameIdResolver0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        PropertyName propertyName1 = PropertyName.construct("au!pp", "au!pp");
        CreatorProperty creatorProperty1 = new CreatorProperty(propertyName1, (JavaType) null, propertyName1, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1153, linkedHashSet0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("au!pp");
        assertEquals("au!pp", settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp", "Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 23, "Gpp", propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty1);
        CreatorProperty creatorProperty2 = creatorProperty1.withName(propertyName0);
        linkedHashSet0.add(creatorProperty2);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("ko{");
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1443, asArrayTypeDeserializer0, propertyMetadata0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1443);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty1);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("ppp");
        linkedHashSet0.add(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap0.find("ppp");
        assertNotNull(settableBeanProperty1);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1443, asArrayTypeDeserializer0, propertyMetadata0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1443);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty1);
        SettableBeanProperty settableBeanProperty0 = creatorProperty1.withSimpleName("ppp");
        linkedHashSet0.add(settableBeanProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty1 = beanPropertyMap0.find("ppp");
        assertEquals("ppp", settableBeanProperty1.getName());
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", false, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1221, hijrahDate0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        // Undeclared exception!
        try {
            beanPropertyMap0.remove(creatorProperty0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // No entry 'Gpp' found, can't remove
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", false, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1221, hijrahDate0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        beanPropertyMap0.remove(creatorProperty1);
        assertEquals(2, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Boolean> class0 = Boolean.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1834, propertyName0, propertyMetadata0);
        beanPropertyMap0.withProperty(creatorProperty0);
        beanPropertyMap0.remove(creatorProperty0);
        assertEquals(0, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", false, (JavaType) null);
        Class<Module> class0 = Module.class;
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-2228));
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-93587601), objectIdGenerators_IntSequenceGenerator0, propertyMetadata0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            beanPropertyMap0.findDeserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, object0, "Gpp");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        ArrayDeque<SettableBeanProperty> arrayDeque0 = new ArrayDeque<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(arrayDeque0, true);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser((Reader) null);
        boolean boolean0 = beanPropertyMap0.findDeserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null, "JSON");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        HijrahDate hijrahDate0 = MockHijrahDate.now();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1219, hijrahDate0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, false);
        String string0 = beanPropertyMap0.toString();
        assertEquals("Properties=[Gpp(null), Gpp(null)]", string0);
    }

    @Test(timeout = 4000)
    public void test3136() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
        assertNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test3237() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("aw;=", "aw;=");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "aw;=", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1437, asArrayTypeDeserializer0, propertyMetadata0);
        JsonDeserializer<JsonDeserializer<InvocationTargetException>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<InvocationTargetException>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<JsonDeserializer<InvocationTargetException>> jsonDeserializer1 = (JsonDeserializer<JsonDeserializer<InvocationTargetException>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("aw;=", "pMp|p");
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
        assertFalse(settableBeanProperty0.hasViews());
    }

    @Test(timeout = 4000)
    public void test3338() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1082);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        linkedHashSet0.add(creatorProperty1);
        NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
        assertNotSame(beanPropertyMap1, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("", "");
        PropertyName propertyName0 = new PropertyName("", "");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asArrayTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1082, asArrayTypeDeserializer0, propertyMetadata0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1082);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        linkedHashSet0.add(creatorProperty1);
        NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer_Chained0);
        assertEquals(1, beanPropertyMap1.size());
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        MockIOException mockIOException0 = new MockIOException();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIOException0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedHashSet0);
        try {
            beanPropertyMap0.wrapAndThrow(invocationTargetException0, mockIOException0, (String) null, (DeserializationContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
        }
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
        try {
            beanPropertyMap0.wrapAndThrow(invocationTargetException0, beanDeserializerFactory0, "JSON", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // (was java.lang.reflect.InvocationTargetException) (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"JSON\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Float float0 = new Float((double) 1121);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "");
        MockError mockError0 = new MockError("9b8Er9LG1v", jsonMappingException0);
        Object object0 = new Object();
        // Undeclared exception!
        try {
            beanPropertyMap0.wrapAndThrow(mockError0, object0, "", defaultDeserializationContext_Impl0);
            fail("Expecting exception: Error");
        } catch (Error e) {
        }
    }

    @Test(timeout = 4000)
    public void test3743() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        Object object0 = new Object();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("Gpp");
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
        // Undeclared exception!
        try {
            beanPropertyMap0.wrapAndThrow((Throwable) null, object0, "Gpp", defaultDeserializationContext0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test3844() throws Throwable {
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("JSON");
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(jsonMappingException0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
        try {
            beanPropertyMap0.wrapAndThrow(invocationTargetException0, beanDeserializerFactory0, "JSON", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // JSON
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test3945() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("}blp1^");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedHashSet0);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(jsonMappingException0);
        try {
            beanPropertyMap0.wrapAndThrow(jsonMappingException0, invocationTargetException0, "}blp1^", (DeserializationContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // }blp1^ (through reference chain: java.lang.reflect.InvocationTargetException[\"}blp1^\"])
            //
            verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
        }
    }

    @Test(timeout = 4000)
    public void test4046() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = new PropertyName("cnp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "cnp", false, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-670), classNameIdResolver0, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("Illegal white space character (code 0x");
        linkedHashSet0.add(settableBeanProperty0);
        linkedHashSet0.add(creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        beanPropertyMap0.replace(creatorProperty0);
        assertEquals((-670), creatorProperty0.getCreatorIndex());
    }

    @Test(timeout = 4000)
    public void test4147() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "cnp", false, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-32766847), classNameIdResolver0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withName(propertyName0);
        CreatorProperty creatorProperty2 = creatorProperty1.withName(propertyName0);
        linkedHashSet0.add(creatorProperty1);
        linkedHashSet0.add(creatorProperty0);
        linkedHashSet0.add(creatorProperty2);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        SettableBeanProperty settableBeanProperty0 = creatorProperty2.withSimpleName("cnp");
        // Undeclared exception!
        try {
            beanPropertyMap0.replace(settableBeanProperty0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // No entry 'cnp' found, can't replace
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test4248() throws Throwable {
        LinkedHashSet<SettableBeanProperty> linkedHashSet0 = new LinkedHashSet<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.construct("Gpp", "Gpp");
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "Gpp", true, (JavaType) null);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, asWrapperTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-93587664), "Gpp", propertyMetadata0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedHashSet0, true);
        linkedHashSet0.add(creatorProperty0);
        beanPropertyMap0.init(linkedHashSet0);
        // Undeclared exception!
        try {
            beanPropertyMap0.replace(creatorProperty0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Illegal state: property 'Gpp' missing from _propsInOrder
            //
            verifyException("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap", e);
        }
    }
}
