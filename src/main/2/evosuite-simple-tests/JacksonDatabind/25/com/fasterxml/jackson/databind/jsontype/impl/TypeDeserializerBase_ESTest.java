/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 19:21:33 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "/,F26cP)<Z+", false, class1);
        String string0 = asWrapperTypeDeserializer0.getPropertyName();
        assertEquals("/,F26cP)<Z+", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", true, class1);
        MinimalClassNameIdResolver minimalClassNameIdResolver1 = (MinimalClassNameIdResolver) asWrapperTypeDeserializer0.getTypeIdResolver();
        assertEquals("class name used as type id", minimalClassNameIdResolver1.getDescForKnownTypeIds());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "j ", false, class0);
        String string0 = asWrapperTypeDeserializer0.toString();
        assertEquals("[com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer; base-type:[simple type, class int]; id-resolver: null]", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "H", false, class0);
        String string0 = asWrapperTypeDeserializer0.baseTypeName();
        assertEquals("int", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "!{AF", false, class0);
        // Undeclared exception!
        try {
            asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = null;
        try {
            asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((AsWrapperTypeDeserializer) null, (BeanProperty) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "0123456789abcdef", false, (Class<?>) null);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        // Undeclared exception!
        try {
            asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, deserializationContext0, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "j ", false, class0);
        Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
        assertFalse(class1.isArray());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "j ", false, (Class<?>) null);
        Class<?> class1 = asWrapperTypeDeserializer0.getDefaultImpl();
        assertNull(class1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "r[PKFga>m(", true, class0);
        // Undeclared exception!
        try {
            asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, "r[PKFga>m(");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, (String) null, true, class0);
        // Undeclared exception!
        try {
            asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, (Object) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, classNameIdResolver0, (String) null, true, class0);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4839));
        asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
        JsonDeserializer<Object> jsonDeserializer0 = asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, (String) null, true, class0);
        // Undeclared exception!
        try {
            asWrapperTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, simpleType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "", false, class0);
        // Undeclared exception!
        try {
            asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, "", (TypeIdResolver) null, simpleType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = SimpleType.construct(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "", false, class0);
        // Undeclared exception!
        try {
            asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, "", minimalClassNameIdResolver0, simpleType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
        }
    }
}
