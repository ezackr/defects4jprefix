/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:07:16 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
        assertFalse(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        CollectionType collectionType2 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType1);
        assertTrue(collectionType2.hasHandlers());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<SerializationFeature> atomicReference0 = new AtomicReference<SerializationFeature>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
        // Undeclared exception!
        try {
            typeFactory0.constructParametrizedType(class0, class1, (JavaType[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.HashSet with 0 type parameters: class expects 1
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertNotNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Class<Properties> class0 = Properties.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        assertTrue(mapLikeType0.isContainerType());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class0 = SimpleType.class;
        Class<AnnotationIntrospector.ReferenceProperty.Type>[] classArray0 = (Class<AnnotationIntrospector.ReferenceProperty.Type>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
        assertFalse(javaType1.isFinal());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
        assertNotSame(objectReader1, objectReader0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        assertFalse(collectionLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        assertFalse(collectionLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TreeSet> class0 = TreeSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(collectionType0, class0);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        assertEquals(1, collectionLikeType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        assertFalse(arrayType0.hasValueHandler());
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        // Undeclared exception!
        try {
            typeFactory0.constructType((TypeReference<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructRawMapType(class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
        }
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        assertFalse(mapLikeType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        try {
            typeFactory1.constructFromCanonical("6aB/07Y+6v>D]Czt[`w");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Failed to parse type '6aB/07Y+6v>D]Czt[`w' (remaining: '>D]Czt[`w'): Can not locate class '6aB/07Y+6v', problem: 6aB/07Y+6v
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapType> class0 = MapType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
        assertEquals(0, javaTypeArray0.length);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        // Undeclared exception!
        try {
            typeFactory0.constructReferenceType(class0, (JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
        TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        try {
            typeFactory0.findClass("k@*,0#=`p%A#eSv");
            fail("Expecting exception: ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            //
            // Class 'k@*,0#=`p%A#eSv.class' should be in target project, but could not be found!
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructArrayType((JavaType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
        }
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2459, 2459);
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
        assertNotSame(typeFactory2, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
        assertNotSame(typeFactory0, typeFactory1);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        // Undeclared exception!
        try {
            TypeFactory.rawClass((Type) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        Class<?> class1 = TypeFactory.rawClass(class0);
        assertFalse(class1.isEnum());
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("double");
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("int");
        assertEquals("int", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("long");
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("float");
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("boolean");
        assertEquals("boolean", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("byte");
        assertEquals(0, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("char");
        assertEquals("char", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("short");
        assertEquals("short", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("short");
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("void");
        assertEquals("void", class0.toString());
    }

    @Test(timeout = 4000)
    public void test3641() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("void");
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test3742() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertTrue(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test3743() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<SerializationFeature> class0 = SerializationFeature.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        assertTrue(javaType1.isEnumType());
    }

    @Test(timeout = 4000)
    public void test3844() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<Object> class0 = Object.class;
        // Undeclared exception!
        try {
            typeFactory0.constructSpecializedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.lang.Object not subtype of [simple type, class boolean]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test3945() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<MapperFeature> class0 = MapperFeature.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test4046() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        Class<Object> class1 = Object.class;
        JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionType0, class1);
        assertFalse(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4147() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionLikeType0, class0);
        assertFalse(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test4248() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        Class<Object> class0 = Object.class;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Internal error: class java.lang.Object not included as super-type for [simple type, class java.lang.Class]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test4349() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        // Undeclared exception!
        try {
            typeFactory0.constructGeneralizedType(simpleType0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Class java.util.Properties not a super-type of [simple type, class java.lang.Object]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test4450() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);
        JavaType javaType0 = typeFactory0.moreSpecificType(collectionType0, simpleType0);
        assertSame(collectionType0, javaType0);
    }

    @Test(timeout = 4000)
    public void test4551() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
        assertNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test4652() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
        assertFalse(javaType1.isInterface());
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        JavaType[] javaTypeArray0 = new JavaType[1];
        javaTypeArray0[0] = (JavaType) simpleType0;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
        JavaType javaType0 = typeFactory0.moreSpecificType(referenceType0, javaTypeArray0[0]);
        assertFalse(javaType0.hasContentType());
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        assertFalse(javaType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
        assertSame(simpleType0, javaType0);
    }

    @Test(timeout = 4000)
    public void test5056() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        // Undeclared exception!
        try {
            typeFactory0.constructType((Type) null, (JavaType) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unrecognized Type: [null]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType((Class<? extends Map>) null, class0, (Class<?>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        // Undeclared exception!
        try {
            typeFactory0.constructMapType(class0, class0, class0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
        }
    }

    @Test(timeout = 4000)
    public void test5359() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<RuntimeException> class0 = RuntimeException.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        assertFalse(mapLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test5460() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
        // Undeclared exception!
        try {
            typeFactory0.constructParametricType(class0, classArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5561() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test5562() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (JavaType) collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
        assertEquals(1, collectionType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test5663() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        // Undeclared exception!
        try {
            typeFactory1.constructFromCanonical("com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TypeModifier Mock for TypeModifier, hashCode: 475932890 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1246601984) return null for type [simple type, class java.lang.Object]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5764() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<Integer> class0 = Integer.class;
        // Undeclared exception!
        try {
            typeFactory1.constructType((Type) class0, (Class<?>) class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // TypeModifier Mock for TypeModifier, hashCode: 987368923 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1246601984) return null for type [simple type, class java.lang.Object]
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test5865() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<POJONode> class0 = POJONode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        assertFalse(collectionLikeType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test5966() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.ser.std.UUIDSerializer");
        assertFalse(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test6067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        // Undeclared exception!
        try {
            typeFactory0._fromParamType((ClassStack) null, parameterizedType0, (TypeBindings) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
        }
    }
}
