/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 22:24:45 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import java.io.File;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Currency;
import java.util.Locale;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FromStringDeserializer_ESTest extends FromStringDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
        // Undeclared exception!
        try {
            uUIDDeserializer0._deserializeEmbedded(fromStringDeserializer_Std0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<?>[] classArray0 = FromStringDeserializer.types();
        assertEquals(13, classArray0.length);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<File> class0 = File.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<URL> class0 = URL.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<URI> class0 = URI.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Module> class0 = Module.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Currency> class0 = Currency.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(2, FromStringDeserializer.Std.STD_URL);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<Pattern> class0 = Pattern.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Locale> class0 = Locale.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Charset> class0 = Charset.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<ArrayType> class0 = ArrayType.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertNull(fromStringDeserializer_Std0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<InetAddress> class0 = InetAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = FromStringDeserializer.findDeserializer(class0);
        Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
        assertEquals("", object0.toString());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        Class<Integer> class0 = Integer.TYPE;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0.deserialize(jsonParser0, (DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 1);
        MockFile mockFile0 = (MockFile) fromStringDeserializer_Std0._deserialize("com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std", defaultDeserializationContext_Impl0);
        assertFalse(mockFile0.canWrite());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<ArrayType> class0 = ArrayType.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("[]", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal character in path at index 0: []
            //
            verifyException("java.net.URI", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<Locale> class0 = Locale.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2);
        try {
            fromStringDeserializer_Std0._deserialize("N#poWzl", (DeserializationContext) null);
            fail("Expecting exception: MalformedURLException");
        } catch (MalformedURLException e) {
            //
            // no protocol: N#poWzl
            //
            verifyException("java.net.URL", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<Object> class0 = Object.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 4);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("[Bracketed IPv6 address must contain closing bracket", defaultDeserializationContext_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 5);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("': was expecting ", defaultDeserializationContext_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("P:pnw|(ISfZq", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Currency", e);
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 7);
        Pattern pattern0 = (Pattern) fromStringDeserializer_Std0._deserialize("QKT,U*I|KCqwT", defaultDeserializationContext_Impl0);
        assertEquals("QKT,U*I|KCqwT", pattern0.pattern());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserialize("v,", defaultDeserializationContext_Impl0);
        assertEquals("v,", locale0.getLanguage());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("[[", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // [[
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 10);
        ZoneInfo zoneInfo0 = (ZoneInfo) fromStringDeserializer_Std0._deserialize(":pnw|(ISfZq", defaultDeserializationContext_Impl0);
        assertEquals("GMT", zoneInfo0.getID());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 11);
        Inet4Address inet4Address0 = (Inet4Address) fromStringDeserializer_Std0._deserialize("{t|O)CJqsdsKL6n", (DeserializationContext) null);
        assertEquals("200.42.42.0", inet4Address0.getHostAddress());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<Object> class0 = Object.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("[]", defaultDeserializationContext_Impl0);
        assertFalse(mockInetSocketAddress0.isUnresolved());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 13);
        Object object0 = fromStringDeserializer_Std0._deserialize("com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", defaultDeserializationContext_Impl0);
        assertEquals("com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer", object0.toString());
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Class<StringBuilder> class0 = StringBuilder.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-1176));
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize((String) null, (DeserializationContext) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Internal error: this code path should never get executed
            //
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Object object0 = fromStringDeserializer_Std0._deserialize("[[[-#Qt<.h", defaultDeserializationContext_Impl0);
        assertEquals("[[[_#QT<.H", object0.toString());
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserialize("[USE_WRAPPER_NAME_AS_PROPERTY_NAME", defaultDeserializationContext_Impl0);
        assertEquals("NAME_AS_PROPERTY_NAME", locale0.getVariant());
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<TimeZone> class0 = TimeZone.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserialize("[USE_WRAPPER_NAME_AS_PROPERTY_NAME", defaultDeserializationContext_Impl0);
        assertEquals("[use_WRAPPER_NAME_AS_PROPERTY_NAME", locale0.toString());
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<Object> class0 = Object.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        Object object0 = fromStringDeserializer_Std0._deserialize("cI@:RK*FPWE:3s.", defaultDeserializationContext_Impl0);
        assertEquals("/200.42.42.0:0", object0.toString());
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        try {
            fromStringDeserializer_Std0._deserialize("[[", defaultDeserializationContext_Impl0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Bracketed IPv6 address must contain closing bracket
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std", e);
        }
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress) fromStringDeserializer_Std0._deserialize("_", defaultDeserializationContext_Impl0);
        assertFalse(mockInetSocketAddress0.isUnresolved());
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 12);
        // Undeclared exception!
        try {
            fromStringDeserializer_Std0._deserialize("P:pw|(ISfZq", defaultDeserializationContext_Impl0);
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"pw|(ISfZq\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
        URI uRI0 = (URI) fromStringDeserializer_Std0._deserializeFromEmptyString();
        assertNull(uRI0.getHost());
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        Class<InetSocketAddress> class0 = InetSocketAddress.class;
        FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
        Locale locale0 = (Locale) fromStringDeserializer_Std0._deserializeFromEmptyString();
        assertEquals("", locale0.getLanguage());
    }
}
