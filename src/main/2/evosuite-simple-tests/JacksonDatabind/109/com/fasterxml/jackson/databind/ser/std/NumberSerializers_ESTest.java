/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 00:16:13 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.File;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<Byte> class0 = Byte.TYPE;
        JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NumberSerializers numberSerializers0 = new NumberSerializers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<BeanSerializer> class0 = BeanSerializer.class;
        NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
        DOMSerializer dOMSerializer0 = new DOMSerializer();
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "A");
        // Undeclared exception!
        try {
            numberSerializers_IntegerSerializer0.serializeWithType(dOMSerializer0, (JsonGenerator) null, (SerializerProvider) null, asExistingPropertyTypeSerializer0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // com.fasterxml.jackson.databind.ext.DOMSerializer cannot be cast to java.lang.Integer
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializers_FloatSerializer0.serialize(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl cannot be cast to java.lang.Float
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<BeanSerializer> class0 = BeanSerializer.class;
        NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        // Undeclared exception!
        try {
            numberSerializers_LongSerializer0.serialize(serializerProvider0, jsonGenerator0, serializerProvider0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl cannot be cast to java.lang.Long
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
        Float float0 = new Float(2944.434F);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializers_IntLikeSerializer0.serialize(float0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Double> class0 = Double.class;
        NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
        Object object0 = new Object();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, (OutputStream) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializers_DoubleSerializer0.serializeWithType(object0, uTF8JsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // java.lang.Object cannot be cast to java.lang.Double
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<DOMSerializer> class0 = DOMSerializer.class;
        Class<FloatNode> class1 = FloatNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
        numberSerializers_ShortSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, mapLikeType0);
        assertEquals(0, mapLikeType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
        NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = NumberSerializers.ShortSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        // Undeclared exception!
        try {
            numberSerializers_ShortSerializer0.serialize(numberSerializers_DoubleSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer cannot be cast to java.lang.Short
            //
            verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = NumberSerializers.FloatSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
        numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        assertFalse(numberSerializers_FloatSerializer0.usesObjectId());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
        assertFalse(jsonSerializer0.isUnwrappingSerializer());
    }
}
