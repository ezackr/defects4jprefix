/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 23:49:13 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.format.FormatStyle;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicBeanDescription_ESTest extends BasicBeanDescription_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("; expected Class<Converter>", (Class<?>[]) null);
        assertNull(annotatedMethod0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-1064));
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, referenceType0, annotatedClass0);
        TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
        assertEquals(0, typeBindings0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        boolean boolean0 = basicBeanDescription0.removeProperty("valueOf");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        boolean boolean0 = basicBeanDescription0.hasProperty((PropertyName) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
        assertNull(annotatedMethod0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
        LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(set0, false);
        assertTrue(linkedHashMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<AnnotatedField> class0 = AnnotatedField.class;
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        // Undeclared exception!
        try {
            basicBeanDescription0.resolveType(class0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
        assertNull(javaType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterAccessor();
        assertNull(annotatedMember0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        Map<Object, AnnotatedMember> map0 = basicBeanDescription0.findInjectables();
        // Undeclared exception!
        try {
            basicBeanDescription0._createConverter(map0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // AnnotationIntrospector returned Converter definition of type java.util.Collections$EmptyMap; expected type Converter or Class<Converter> instead
            //
            verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        Object object0 = basicBeanDescription0.instantiateBean(true);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        // Undeclared exception!
        try {
            basicBeanDescription0.findExpectedFormat((JsonFormat.Value) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
        // Undeclared exception!
        try {
            basicBeanDescription0.findDefaultViews();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature1;
        objectMapper0.disable(mapperFeatureArray0);
        Class<VirtualAnnotatedMember> class0 = VirtualAnnotatedMember.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        JsonInclude.Value jsonInclude_Value0 = basicBeanDescription0.findPropertyInclusion((JsonInclude.Value) null);
        assertNull(jsonInclude_Value0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
        assertNull(annotatedMember0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        Map<String, AnnotatedMember> map0 = basicBeanDescription0.findBackReferenceProperties();
        assertNull(map0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FormatStyle> class0 = FormatStyle.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        Constructor<?> constructor0 = basicBeanDescription0.findSingleArgConstructor((Class<?>[]) null);
        assertNull(constructor0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        Method method0 = basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
        assertNull(method0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
        assertNull(jsonPOJOBuilder_Value0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        String string0 = basicBeanDescription0.findClassDescription();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        LinkedList<String> linkedList0 = new LinkedList<String>();
        LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(linkedList0, true);
        assertTrue(linkedHashMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        Class<AnnotatedField> class0 = AnnotatedField.class;
        // Undeclared exception!
        try {
            basicBeanDescription0._createConverter(class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.introspect.AnnotatedField; expected Class<Converter>
            //
            verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
        }
    }
}
