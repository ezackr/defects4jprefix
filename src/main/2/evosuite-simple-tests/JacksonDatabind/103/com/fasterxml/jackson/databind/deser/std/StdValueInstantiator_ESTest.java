/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 23:46:28 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdValueInstantiator_ESTest extends StdValueInstantiator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<MatchStrength> class0 = MatchStrength.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDelegateType((DeserializationConfig) null);
        assertEquals("`com.fasterxml.jackson.core.format.MatchStrength`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<JavaType> class0 = JavaType.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.configureIncompleteParameter((AnnotatedParameter) null);
        assertEquals("`com.fasterxml.jackson.databind.JavaType`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createUsingDelegate((DeserializationContext) null, (Object) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No delegate constructor for `java.lang.Object`
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDelegateCreator();
        assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<ExceptionInInitializerError> class0 = ExceptionInInitializerError.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getArrayDelegateCreator();
        assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLDataException sQLDataException0 = new SQLDataException();
        // Undeclared exception!
        try {
            stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLDataException0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = null;
        try {
            stdValueInstantiator0 = new StdValueInstantiator((StdValueInstantiator) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getArrayDelegateType((DeserializationConfig) null);
        assertEquals("`java.lang.Integer`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDefaultCreator();
        assertEquals("`com.fasterxml.jackson.databind.jsontype.TypeIdResolver`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getWithArgsCreator();
        assertEquals("`java.lang.String`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (Class<?>) null);
        assertFalse(stdValueInstantiator0.canCreateFromString());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, (JavaType) null);
        assertEquals("UNKNOWN TYPE", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<List> class1 = List.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        stdValueInstantiator0._delegateType = (JavaType) collectionType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertTrue(stdValueInstantiator0.canCreateUsingDelegate());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Class<String> class0 = String.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<List> class1 = List.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        stdValueInstantiator0._delegateType = (JavaType) collectionType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Class<MapperFeature> class0 = MapperFeature.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-2019));
        stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertTrue(stdValueInstantiator0.canCreateUsingArrayDelegate());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Class<MapperFeature> class0 = MapperFeature.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        PlaceholderForType placeholderForType0 = new PlaceholderForType((-2019));
        stdValueInstantiator0._arrayDelegateType = (JavaType) placeholderForType0;
        boolean boolean0 = stdValueInstantiator0.canInstantiate();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createUsingDefault((DeserializationContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromObjectWith((DeserializationContext) null, (Object[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Class<JavaType> class0 = JavaType.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createUsingArrayDelegate((DeserializationContext) null, class0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No delegate constructor for `com.fasterxml.jackson.databind.JavaType`
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Class<Integer> class0 = Integer.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromString((DeserializationContext) null, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromInt((DeserializationContext) null, (-78));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Class<Module> class0 = Module.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromLong((DeserializationContext) null, 0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromDouble((DeserializationContext) null, 0.0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        // Undeclared exception!
        try {
            stdValueInstantiator0.createFromBoolean((DeserializationContext) null, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Class<Module> class0 = Module.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
        JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransactionRollbackException0);
        stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, jsonMappingException0);
        assertEquals("`com.fasterxml.jackson.databind.Module`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
        JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransientConnectionException0);
        JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(jsonMappingException0);
        assertEquals("`java.lang.Object`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Class<Object> class0 = Object.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
        JsonMappingException jsonMappingException0 = stdValueInstantiator0.wrapException(sQLTransientConnectionException0);
        JsonMappingException jsonMappingException1 = stdValueInstantiator0.wrapException(jsonMappingException0);
        assertSame(jsonMappingException1, jsonMappingException0);
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "vwX^UG|Z!7JTu");
        SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vwX^UG|Z!7JTu", "vwX^UG|Z!7JTu", jsonMappingException0);
        stdValueInstantiator0.unwrapAndWrapException((DeserializationContext) null, sQLSyntaxErrorException0);
        assertEquals("`com.fasterxml.jackson.databind.introspect.BasicBeanDescription`", stdValueInstantiator0.getValueTypeDesc());
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        ExceptionInInitializerError exceptionInInitializerError0 = new ExceptionInInitializerError();
        // Undeclared exception!
        try {
            stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, exceptionInInitializerError0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        Class<JsonMappingException> class0 = JsonMappingException.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(sQLNonTransientException0, (String) null);
        // Undeclared exception!
        try {
            stdValueInstantiator0.rewrapCtorProblem((DeserializationContext) null, invocationTargetException0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.databind.deser.std.StdValueInstantiator", e);
        }
    }
}
