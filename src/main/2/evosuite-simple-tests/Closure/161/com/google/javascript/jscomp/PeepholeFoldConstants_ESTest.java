/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:18:44 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(683.9850026942208);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = Node.newNumber((-20.120789388996286));
        Node node1 = new Node(26, node0, node0, node0, node0, 8, 2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3283.0));
        Node node1 = new Node(27, node0, node0, node0, node0, 2, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 66, 66, 66);
        Node node1 = new Node(28, node0, node0, node0, node0, 2, 16);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1138);
        Node node1 = new Node(29, node0, node0, node0, node0, 2, 20);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1138);
        Node node1 = new Node(29, node0, node0, node0, node0, 2, 20);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(32, node0, node0, node0, node0, 0, 1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(683.9850026942208);
        Node node1 = Node.newNumber((-3283.0), 43, 2);
        Node node2 = new Node(17, node0, node0, node1, node1, 16, 83);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber(9.007199254740992E15, 15, 36);
        Node node2 = new Node(10, node1, node0, node1, node0, 50, 42);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 36);
        Node node1 = Node.newNumber((double) 42);
        Node node2 = new Node(11, node1, node0, node0, node0, 12, 9);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(54.0);
        Node node1 = Node.newNumber((double) 0, 9, (-3));
        Node node2 = new Node(12, node0, node1, node1, 43, 7);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(13, node0, node1, node1, node1, 12, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 45, 15, 35);
        Node node2 = new Node(14, node1, node0, node0, node0, 49, 13);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 46, 14, 50);
        Node node2 = new Node(15, node1, node0, node0, node0, 7, 14);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(16, node0, node1, node1, node1, 12, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Node node0 = new Node(1138, 1138, 1138);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(19, node0, node1, node1, node1, 4, 43);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-2147483605), node3.getSourceOffset());
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(933, 933, 933);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(20, node1, node0, node1, node0, 11, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(11, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        Node node0 = Node.newNumber((double) 2700, 2700, 2700);
        Node node1 = Node.newString("");
        Node node2 = new Node(21, node1, node0, node1, node0, 3, 4);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        Node node0 = Node.newNumber((double) (-4543), (-4543), (-4543));
        Node node1 = new Node(1, (-2), 2);
        Node node2 = new Node(22, node0, node1, 18, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Node node0 = Node.newNumber((double) (-4543), (-4543), (-4543));
        Node node1 = new Node(1, (-2), 2);
        Node node2 = new Node(22, node0, node1, 18, 35);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(22, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(23, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(23, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-2147483636), node3.getSourceOffset());
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 43);
        Node node1 = Node.newNumber((double) 31, 42, 1);
        Node node2 = new Node(24, node1, node0, node0, 30, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(12, node3.getCharno());
    }

    @Test(timeout = 4000)
    public void test01923() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 43);
        Node node1 = Node.newNumber((double) 31, 42, 1);
        Node node2 = new Node(24, node1, node0, node0, 30, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-313), (-313), (-313));
        Node node1 = Node.newNumber((double) 45, 18, 1);
        Node node2 = new Node(31, node0, node1, node0, node1, 2, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test02125() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 30);
        Node node1 = Node.newNumber((double) 31, 42, 1);
        Node node2 = new Node(33, node1, node1, node0, node0, 12, 52);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(12, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test02226() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(898, 898, 898);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(34, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.wasEmptyNode());
    }

    @Test(timeout = 4000)
    public void test02327() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(1);
        Node node2 = new Node(35, node0, node0, node0, node1, 8, 52);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test02328() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = new Node(1);
        Node node2 = new Node(35, node0, node0, node0, node1, 8, 52);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-2147483596), node3.getSourceOffset());
    }

    @Test(timeout = 4000)
    public void test02429() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(36, node0, node0, node0, node1, (-2105), 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(41, Node.BRACELESS_TYPE);
    }

    @Test(timeout = 4000)
    public void test02530() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 86, 86, 86);
        Node node1 = new Node(39, 1, 36);
        Node node2 = new Node(37, node0, node0, node1, 38, 30);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test02631() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80, 80, 80);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(38, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(14, Node.DEFAULT_PROP);
    }

    @Test(timeout = 4000)
    public void test02732() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-506), (-506), (-506));
        Node node1 = Node.newNumber((double) 44, 50, 10);
        Node node2 = new Node(39, node0, node0, node0, node1, 41, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(167967, node3.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = Node.newNumber((double) 15);
        Node node2 = new Node(40, node1, node1, node1, node0, 31, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(11, Node.USES_PROP);
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(41, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(4.1710683802658);
        Node node1 = Node.newNumber((double) 3);
        Node node2 = new Node(42, node0, node0, node1, 43, (-3));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(962, 962, 962);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(43, node1, node0, node1, node0, 11, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(44, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(92);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(44, node0, node1, 2, 16);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(9, Node.FIXUPS_PROP);
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-311));
        Node node1 = new Node(12, 0, 16);
        Node node2 = new Node(47, node0, node0, node1, 40, (-2));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.isOnlyModifiesThisCall());
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-322));
        Node node1 = new Node(48);
        Node node2 = new Node(48, node0, node0, node1, 834, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(20, Node.FINALLY_PROP);
    }

    @Test(timeout = 4000)
    public void test03540() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 45, 15, 35);
        Node node2 = new Node(49, node1, node0, node0, node0, 49, 13);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(47, Node.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(49);
        Node node1 = new Node(49);
        Node node2 = new Node(50, node0, node1, 18, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 29, 5, 31);
        Node node2 = new Node(51, node0, node1, node1, node1, 46, 15);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-517), (-517), (-517));
        Node node1 = Node.newNumber((double) 4, (-1127), 53);
        Node node2 = new Node(53, node1, node0, node1, node0, 44, 42);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test03944() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(962, 962, 962);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(54, node1, node0, node1, node0, 11, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(49, Node.DIRECT_EVAL);
    }

    @Test(timeout = 4000)
    public void test04045() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 28);
        Node node2 = new Node(55, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, Node.BREAK_PROP);
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(938, 938, 938);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(56, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(52, Node.LENGTH);
    }

    @Test(timeout = 4000)
    public void test04247() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(962, 962, 962);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(57, node1, node0, node1, node0, 11, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(4, Node.ENUM_PROP);
    }

    @Test(timeout = 4000)
    public void test04348() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(58, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(7, Node.LOCAL_PROP);
    }

    @Test(timeout = 4000)
    public void test04449() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-60), (-60), (-60));
        Node node1 = Node.newNumber((double) 1);
        Node node2 = new Node(59, node0, node0, node0, node1, 12, 44);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test04550() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 933, 933, 933);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(60, node1, node0, node1, node0, 11, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.equals((Object) node1));
    }

    @Test(timeout = 4000)
    public void test04651() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(61, node1, node0, node1, node0, 21, 60);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test04752() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52, 52, 52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(62, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(16, Node.FLAG_LOCAL_RESULTS);
    }

    @Test(timeout = 4000)
    public void test04853() throws Throwable {
        Node node0 = new Node(1138);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(63, node0, node1, node1, node1, 4, 43);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(23, Node.VARIABLE_PROP);
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-18));
        Node node1 = Node.newNumber((double) 4, 2, 19);
        Node node2 = new Node(64, node0, node0, node1, node1, 22, 34);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(15, Node.NO_SIDE_EFFECTS);
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(65, node1, node1, node0, node0, 0, 86);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(28, Node.DEBUGSOURCE_PROP);
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = Node.newNumber((double) 15);
        Node node2 = new Node(66, node1, node0, node1, node0, 49, 45);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(17, Node.TYPE_PROP);
    }

    @Test(timeout = 4000)
    public void test05257() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 30);
        Node node1 = Node.newNumber((double) 2);
        Node node2 = new Node(67, node1, node1, node1, node0, 227, 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(0, node3.getCharno());
    }

    @Test(timeout = 4000)
    public void test05358() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 36, 41, 47);
        Node node2 = new Node(68, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(18, Node.SPECIAL_PROP_PROP);
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(54);
        Node node1 = Node.newNumber((double) (-2));
        Node node2 = new Node(69, node0, node0, node1, node1, 1500, (-1));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, Node.ATTRIBUTE_FLAG);
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(29, 29, 29);
        Node node1 = Node.newNumber((double) 31, 16, 1);
        Node node2 = new Node(70, node0, node0, node1, node1, 25, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(74, 74, 74);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(71, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.isFromExterns());
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(3030.1168831021296);
        Node node1 = Node.newNumber((-1320.2643394), 48, 31);
        Node node2 = new Node(72, node0, node1, node1, node1, 2, 26);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(30, Node.VAR_ARGS_NAME);
    }

    @Test(timeout = 4000)
    public void test05863() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(73, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test05964() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(74, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06065() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-532), (-532), (-532));
        Node node1 = Node.newNumber((double) 44, 50, 10);
        Node node2 = new Node(75, node0, node0, node0, node1, 41, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06166() throws Throwable {
        Node node0 = new Node(1138);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(76, node0, node1, node1, node1, 4, 43);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(0, node3.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test06267() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(74);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(77, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(37, Node.OPT_ARG_NAME);
    }

    @Test(timeout = 4000)
    public void test06368() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(78, 78, 78);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(78, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(79, node1, node0, node0, node0, 0, 27);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(0, node3.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test06570() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(49);
        Node node1 = Node.newNumber((double) 4, 2, 19);
        Node node2 = new Node(80, node0, node0, node1, node1, 22, 34);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test06671() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(81, node0, node1, node1, node1, 4, 6);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(46, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test06772() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(898, 898, 898);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(82, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(18, Node.SPECIAL_PROP_PROP);
    }

    @Test(timeout = 4000)
    public void test06873() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52, 52, 52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(83, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(39, Node.EMPTY_BLOCK);
    }

    @Test(timeout = 4000)
    public void test06974() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(898, 898, 898);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(84, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test07075() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(1684.2592);
        Node node1 = Node.newNumber((double) 23, (-2740), 19);
        Node node2 = new Node(85, node1, node0, node1, node0, 45, 20);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, Node.BREAK_PROP);
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 938, 938, 938);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(86, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(25, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test07277() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(85);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(87, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertSame(node3, node2);
    }

    @Test(timeout = 4000)
    public void test07378() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(88, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.wasEmptyNode());
    }

    @Test(timeout = 4000)
    public void test07479() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(80, 80, 80);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node(89, node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test07580() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 60);
        Node node1 = Node.newNumber((double) 31, 16, 1);
        Node node2 = new Node(90, node0, node0, node1, node1, 25, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(30, Node.VAR_ARGS_NAME);
    }

    @Test(timeout = 4000)
    public void test07681() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(38, 38, 38);
        Node node1 = Node.newNumber((double) 4, 2, 19);
        Node node2 = new Node(91, node0, node0, node1, node1, 22, 34);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test07782() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(92, node0, node1, 15, 16);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(3, Node.CONTINUE_PROP);
    }

    @Test(timeout = 4000)
    public void test07883() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-512), (-512), (-512));
        Node node1 = Node.newNumber((double) 44, 50, 82);
        Node node2 = new Node(93, node0, node0, node0, node1, 41, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(31, Node.SKIP_INDEXES_PROP);
    }

    @Test(timeout = 4000)
    public void test07984() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(71.78303697521682);
        Node node1 = new Node(38);
        Node node2 = new Node(94, node1, node0, 52, (-2604));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotSame(node1, node3);
    }

    @Test(timeout = 4000)
    public void test08085() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52, 52, 52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(95, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
    }

    @Test(timeout = 4000)
    public void test08186() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(45);
        Node node1 = Node.newNumber((double) 31, 42, 1);
        Node node2 = new Node(96, node0, node0, node1, 30, 1);
        Node node3 = ControlFlowAnalysis.computeFallThrough(node2);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(1, node4.getCharno());
    }

    @Test(timeout = 4000)
    public void test08287() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(97, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(42, Node.SIDE_EFFECT_FLAGS);
    }

    @Test(timeout = 4000)
    public void test08388() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newNumber((double) 15);
        Node node2 = new Node(98, node0, node0, node1, node1, 28, (-1));
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(28, Node.DEBUGSOURCE_PROP);
    }

    @Test(timeout = 4000)
    public void test08489() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(99, node0, node1, node1, node1, (-2914), 49);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(51, Node.STATIC_SOURCE_FILE);
    }

    @Test(timeout = 4000)
    public void test08590() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newNumber((double) 15);
        Node node2 = new Node(100, node0, node1, node0, node1, 8, 4095);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test08691() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-517));
        Node node1 = Node.newNumber((double) 44, 50, 10);
        Node node2 = new Node(101, node0, node0, node0, node1, 41, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test08692() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-517));
        Node node1 = Node.newNumber((double) 44, 50, 10);
        Node node2 = new Node(101, node0, node0, node0, node1, 41, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08793() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(74, 74, 74);
        Node node1 = Node.newNumber((double) 4, 45, 47);
        Node node2 = new Node((-3), node0, node1, node1, node1, 40, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(6, Node.TEMP_PROP);
    }

    @Test(timeout = 4000)
    public void test08894() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(93, 93, 93);
        Node node1 = Node.newNumber((double) 31, 35, 1);
        node1.setDouble(0);
        Node node2 = new Node(122, node1, node0, node1, node1, 49, 31);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-2147483617), node3.getSourceOffset());
    }

    @Test(timeout = 4000)
    public void test08995() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(36, 36, 36);
        Compiler compiler0 = new Compiler();
        AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[8];
        PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0);
        peepholeFoldConstants0.beginTraversal(nodeTraversal0);
        Node node1 = new Node(122, node0, node0, node0, node0, 49, 41);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals((-2147483607), node2.getSourceOffset());
    }

    @Test(timeout = 4000)
    public void test09096() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(36, 36, 36);
        Compiler compiler0 = new Compiler();
        AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[8];
        PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0);
        peepholeFoldConstants0.beginTraversal(nodeTraversal0);
        Node node1 = Node.newNumber((double) 31, 35, 1);
        Node node2 = new Node(122, node1, node0, node1, node1, 49, 41);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test09197() throws Throwable {
        Node node0 = new Node(20);
        Node node1 = new Node(2, 11, 47);
        Node node2 = new Node(21, node0, node1, 1, 29);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test09298() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(38, "Array index not integer: {0}", 38, 38);
        Node node1 = new Node(24, node0, node0, node0, node0, 1, 1);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test09299() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(38, "Array index not integer: {0}", 38, 38);
        Node node1 = new Node(24, node0, node0, node0, node0, 1, 1);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(4097, node2.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test093100() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(28, node0, node0, node0, node0, 2, 16);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test094101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(98, 98, 98);
        Node node1 = new Node(23, node0, node0, node0, 0, 14);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test095102() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(100);
        Node node1 = new Node(18, node0, node0, node0, node0, 12, 31);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test096103() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(101, 101, 101);
        Node node1 = new Node(23, node0, node0, node0, 0, 14);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test097104() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(24, node0, node0, node0, 30, 12);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test098105() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Arryindex not integer: {}", 38, 38);
        Node node1 = new Node(24, node0, node0, node0, node0, 1, 1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test099106() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test100107() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(55);
        Node node1 = new Node(32, node0, node0, node0, node0, 2, 28);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(1, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-600.9217735726309), 78, 78);
        Node node1 = new Node(26, node0, node0);
        Node node2 = Node.newNumber(1.0);
        Node node3 = new Node(32, node1, node2, node2, node1, 15, 53);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(".(");
        Node node1 = new Node(32, node0, node0, node0, node0, 33, 0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test103110() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 78, 78, 78);
        Node node1 = new Node(43, 37, 24);
        Node node2 = new Node(32, node1, node0, node0, node1, 0, 66);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test104111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(44);
        Node node1 = new Node(32, node0, node0, node0, node0, 2, 28);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test105112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(74.48018905109137);
        node0.setType(63);
        Node node1 = new Node(32, node0, node0, node0, node0, 0, 41);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test106113() throws Throwable {
        Node node0 = Node.newNumber((double) 1138, 1138, 1138);
        Node node1 = new Node(29, node0, node0, node0, node0, 2, 20);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test107114() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(26, node0, 30, 0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test108115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(26, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test108116() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(26, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasChildren());
    }

    @Test(timeout = 4000)
    public void test109117() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = new Node(27, node0, node0, node0, node0, 2, 43);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test110118() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(5.36970385900659);
        Node node1 = new Node(27, node0, node0, node0, node0, 2, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test111119() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(930);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(52, node0, node1, 2, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test112120() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-556), (-556), (-556));
        Compiler compiler0 = new Compiler();
        AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[1];
        PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0);
        peepholeFoldConstants0.beginTraversal(nodeTraversal0);
        Node node1 = new Node(6, 35, 36);
        Node node2 = new Node(52, node0, node1, node0, node1, 31, 16);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test113121() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) (-517), (-517), (-517));
        Node node1 = Node.newNumber((double) 44, 50, 10);
        Node node2 = new Node(101, node0, node0, node0, node1, 41, 31);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test114122() throws Throwable {
        Node node0 = new Node(7);
        Node node1 = new Node(44, 11, 31);
        Node node2 = new Node(21, node0, node1, 1, 4095);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test115123() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64, 64, 64);
        Node node1 = new Node(37, 22, 7);
        Node node2 = new Node(21, node0, node1, node0, node1, 40, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test116124() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(64, 64, 64);
        Node node1 = Node.newNumber((double) 5);
        Node node2 = new Node(21, node0, node1, node0, node1, 40, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test117125() throws Throwable {
        Node node0 = new Node(20);
        Node node1 = new Node(51, 11, 31);
        Node node2 = new Node(21, node0, node1, 1, 1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(21, node3.getType());
    }

    @Test(timeout = 4000)
    public void test118126() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 25);
        Node node1 = Node.newNumber((double) 52);
        Node node2 = new Node(9, node0, node0, node1, node1, 13, 52);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test119127() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 38);
        Node node1 = Node.newNumber((double) 5);
        Node node2 = new Node(21, node0, node1, node0, node1, 40, 1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test120128() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(4.1710683802658);
        Node node1 = Node.newNumber((double) 3);
        Node node2 = new Node(23, node1, node1, node0, node0, 31, 932);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test121129() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 45, 15, 35);
        Node node2 = new Node(22, node1, node0, node0, node0, 49, 13);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test122130() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(25, node0, node1, node1, node1, 12, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test123131() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(22, node0, node0, node0, node1, 97, (-1));
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test124132() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 933, 933, 933);
        Node node1 = Node.newNumber((double) 11, 21, 52);
        Node node2 = new Node(20, node1, node0, node1, node0, 11, 45);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test125133() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(20, node0, node1, node0, node1, 1, 14);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test126134() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(100.0, 1138, 1138);
        Node node1 = Node.newNumber((-579.098), 41, 44);
        Node node2 = new Node(18, node0, node1, node0, node1, 6, 1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test127135() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-646.57243112209));
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(20, node0, node1, node0, node1, 12, 14);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test128136() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 75);
        Node node1 = Node.newNumber((double) 31, 34, 1);
        Node node2 = new Node(19, node0, node0, node1, node1, 25, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test129137() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 11);
        Node node1 = Node.newNumber((double) 31, 22, 6);
        Node node2 = new Node(18, node0, node0, node1, node1, (-533), 12);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test130138() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(22.0);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(20, node0, node1, node0, node1, 1, 14);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test131139() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(938, 938, 938);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(13, node0, node0, node1, node1, 25, 28);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(102428, node3.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test132140() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 0, 0, 0);
        Node node1 = new Node(45, 0, 42);
        Node node2 = new Node(16, node1, node0, node1, node0, 1, 27);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertSame(node3, node2);
    }

    @Test(timeout = 4000)
    public void test133141() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3217.30241426063));
        Node node1 = Node.newNumber((double) 13);
        Node node2 = new Node(50, 39, 52);
        Node node3 = new Node(14, node1, node2, node2, node0, 14, 33);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test134142() throws Throwable {
        Node node0 = Node.newNumber((double) 2700, 2700, 2700);
        Node node1 = Node.newString("");
        Node node2 = new Node(21, node1, node0, node1, node0, 3, 4);
        node2.setType(12);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-3), Node.LOCAL_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test135143() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(43);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(12, node0, node1, node1, node1, 16, 48);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(31, Node.SKIP_INDEXES_PROP);
    }

    @Test(timeout = 4000)
    public void test136144() throws Throwable {
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = new Node(26, node0, node0, 47, 1);
        Node node2 = Node.newNumber((double) 46, 14, 50);
        Node node3 = new Node(15, node2, node1, node1, node1, 7, 14);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(12, Node.REGEXP_PROP);
    }

    @Test(timeout = 4000)
    public void test137145() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((double) 74, 74, 74);
        Node node1 = Node.newNumber((double) 4, (-2), 11);
        Node node2 = new Node(45, node0, node1, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test138146() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(4.1710683802658);
        Node node1 = Node.newNumber((double) 3);
        Node node2 = new Node(46, node1, node0, node1, node0, 11, 45);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test139147() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(15, node0, node0, node1, node1, 1, (-3));
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test140148() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3217.30241426063));
        Node node1 = Node.newNumber((double) 13);
        Node node2 = new Node(14, node1, node0, node0, node0, 14, 33);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test141149() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(2350.828061);
        Node node1 = Node.newNumber(1509.2541);
        Node node2 = new Node(17, node1, node0, 35, 17);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test142150() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(16, node1, node0, 8, 27);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test143151() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(30, 30, 30);
        Node node1 = new Node(36, node0, node0, node0, node0, 22, 14);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(27, Node.SPECIALCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test144152() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(30);
        Node node1 = new Node(35, node0, node0, node0, node0, 15, 2);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test145153() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(52);
        Node node1 = Node.newNumber((double) 29, 8, 48);
        Node node2 = new Node(35, node0, node1, node1, node1, 4, 43);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(16427, node3.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test146154() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(66, 66, 66);
        Node node1 = Node.newString("e1", 18, 66);
        Node node2 = new Node(33, node0, node0, node0, node1, 27, 8);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(110600, node3.getSourcePosition());
    }
}
