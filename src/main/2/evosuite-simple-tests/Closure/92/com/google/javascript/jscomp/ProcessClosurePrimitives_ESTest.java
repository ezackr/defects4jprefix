/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:12:39 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.rhino.Node;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ProcessClosurePrimitives_ESTest extends ProcessClosurePrimitives_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = compiler0.parseTestCode("goog.base");
        processClosurePrimitives0.process(node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = compiler0.parseTestCode("goog.base");
        processClosurePrimitives0.process(node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        assertTrue(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("setCssNameMapping");
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node1 = new Node(30, node0, node0, node0, 1, 15);
        processClosurePrimitives0.process(node1, node1);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node0 = new Node(37);
        Node node1 = new Node(130);
        // Undeclared exception!
        try {
            processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ProcessClosurePrimitives", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node0 = new Node(37);
        node0.addChildrenToBack(node0);
        processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, nodeTraversal0.getLineNumber());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node0 = new Node(37, 37, 37);
        Node node1 = Node.newString(33, "A(.c1FT");
        node0.addChildrenToBack(node1);
        node1.addChildrenToBack(node0);
        processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
        assertEquals(8, Node.CODEOFFSET_PROP);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = new Node(105, 105, 105);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node1 = new Node(4095, node0, node0);
        processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
        assertEquals(44, Node.IS_VAR_ARGS_PARAM);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = new Node(105, 105, 105);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        Node node1 = new Node(125, node0, node0);
        // Undeclared exception!
        try {
            processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ProcessClosurePrimitives", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("msg.c=r.mltple.parms");
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        processClosurePrimitives0.process(node0, node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("msg.c=r.mltple.parms");
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        processClosurePrimitives0.process(node0, node0);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = new Node(38);
        Node node1 = new Node(118, node0, node0);
        // Undeclared exception!
        try {
            processClosurePrimitives0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Node node0 = new Node(86);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
        processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
        assertEquals(17, Node.TYPE_PROP);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(30);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        processClosurePrimitives0.process(node0, node0);
        assertEquals(45, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
        Node node0 = new Node(38);
        Node node1 = new Node(30, node0, node0);
        // Undeclared exception!
        try {
            processClosurePrimitives0.process(node1, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }
}
