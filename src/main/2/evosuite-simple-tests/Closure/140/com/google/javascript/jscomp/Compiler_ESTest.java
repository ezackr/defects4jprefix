/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:35:41 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.parseTestCode(":^({J.rf#uz}");
        assertEquals(3, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource((JSModule) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        // Undeclared exception!
        try {
            compiler0.toSource(compiler_CodeBuilder0, (-2004318069), (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("externExports");
        // Undeclared exception!
        try {
            compiler0.toSourceArray(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            compiler0.stripCode(linkedHashSet0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.parseInputs();
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Level level0 = Level.OFF;
        Compiler.setLoggingLevel(level0);
        assertEquals("OFF", level0.getName());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("", "");
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        assertNull(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
        assertNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.EVERY_PASS;
        compilerOptions0.devMode = compilerOptions_DevMode0;
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("R");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertFalse(result0.success);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource((Node) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Cannot build without root node being specified
            //
            verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
        }
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getMessages();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.acquireSymbolTable();
        // Undeclared exception!
        try {
            compiler0.acquireSymbolTable();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // SymbolTable already acquired
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("L)3)");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseTestCode("|g");
        assertFalse(node0.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "/Y/RD#rg-}W4";
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("U>*/\n");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[4];
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        jSModuleArray0[2] = jSModule0;
        jSModuleArray0[3] = jSModule0;
        Result result0 = compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        assertFalse(result0.success);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("U>*/\n");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(";_vK>~", sourceFile_Generator0);
        jSModule0.add(jSSourceFile0);
        JSModule[] jSModuleArray0 = new JSModule[4];
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        jSModuleArray0[2] = jSModule0;
        jSModuleArray0[3] = jSModule0;
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Computing Control Flow Graph");
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFileArray0[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = compiler0.options;
        assertNotNull(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Computing Control Flow Graph");
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFileArray0[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("]&8:c%a.[", "");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.disableThreads();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromCode("$ERolS}.S&m^\"", "$ERolS}.S&m^\"");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        jSSourceFileArray0[0] = jSSourceFile1;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        Compiler compiler0 = new Compiler();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
        compiler0.setPassConfig(defaultPassConfig0);
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.startPass("");
        // Undeclared exception!
        try {
            compiler0.startPass("T1iNZ^.`BJ'biP%X");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.reportCodeChange();
        Node node0 = compiler0.parseInputs();
        assertEquals(45, Node.IS_VAR_ARGS_PARAM);
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("c$wFd9", "com.google.javascript.jscomp.FunctionRewriter$EmptyFunctionReducer");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[6];
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("aliasExternals");
        compiler0.areNodesEqualForInlining(node0, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("^=ecv");
        compiler0.parseSyntheticCode("No Context associated with current Thread");
        // Undeclared exception!
        try {
            compiler0.newExternInput(" [synthetic] ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Conflicting externs name:  [synthetic]
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "]&8:c%a.[");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        jSSourceFileArray0[0] = jSSourceFile0;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.parseTestCode("gr");
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("gr", (String) null, "gr");
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        compiler0.addIncrementalSourceAst(jsAst0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
        assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test6264() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("R");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.parseInputs();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test6365() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("\n");
        int int0 = compiler_CodeBuilder1.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("3Q+Hd0^DO7<7A0If");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6668() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("JSC_MODULE_DEPENDENCY_ERROR");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6769() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("AtY?/\"]H");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("5kI");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6870() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.EVERY_PASS;
        compilerOptions0.devMode = compilerOptions_DevMode0;
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.optimize();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Sanity check failed for beforeStandardOptimizations
            //
            verifyException("com.google.javascript.jscomp.PhaseOptimizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test6971() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.optimize();
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test7072() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7173() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("o)2g_:Kb;RB/Xo$E", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // o)2g_:Kb;RB/Xo$E
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test7274() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        // Undeclared exception!
        try {
            compiler0.check();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("R", "R");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "s%tripCode");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertEquals(2, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test7477() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "s%tripCode");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test7578() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("K:5iSD\u0003'Vmx", (-1111));
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test7679() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("R", "R");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("R", 45);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test7680() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("R", "R");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("R", 45);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test7781() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "]&8:c%a.[");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        jSSourceFileArray0[0] = jSSourceFile0;
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test7882() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("h", "h");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion((JSModule) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test7983() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("IH& {\"8M1|{ z", (Charset) null);
        jSModule0.addFirst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test8084() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        JSModule jSModule0 = new JSModule((String) null);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test8185() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test8286() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        MockFile mockFile0 = new MockFile("gr", "4");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node0 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test8287() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        MockFile mockFile0 = new MockFile("gr", "4");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test8388() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertEquals(0.0, errorManager0.getTypedPercent(), 0.01);
    }
}
