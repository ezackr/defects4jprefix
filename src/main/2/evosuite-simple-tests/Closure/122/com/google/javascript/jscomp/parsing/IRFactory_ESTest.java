/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:27:33 GMT 2024
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.Block;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ConditionalExpression;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.DoLoop;
import com.google.javascript.rhino.head.ast.ElementGet;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.EmptyStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.ForLoop;
import com.google.javascript.rhino.head.ast.FunctionCall;
import com.google.javascript.rhino.head.ast.FunctionNode;
import com.google.javascript.rhino.head.ast.InfixExpression;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.ast.ReturnStatement;
import com.google.javascript.rhino.head.ast.Scope;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.ast.ThrowStatement;
import com.google.javascript.rhino.head.ast.VariableDeclaration;
import com.google.javascript.rhino.head.ast.VariableInitializer;
import com.google.javascript.rhino.head.ast.WhileLoop;
import com.google.javascript.rhino.head.ast.WithStatement;
import com.google.javascript.rhino.head.ast.XmlString;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ConditionalExpression conditionalExpression0 = new ConditionalExpression();
        astRoot0.addChild(conditionalExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(11);
        astRoot0.addChild(parenthesizedExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(">Yrv", false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, simpleSourceFile0, "(", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        HashSet<String> hashSet0 = new HashSet<String>();
        DoLoop doLoop0 = new DoLoop(2, 1);
        astRoot0.addChildrenToBack(doLoop0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "setters are not supported in older versions of JavaScript. If you are targeting newer versions of JavaScript, set the appropriate language_in option.", config0, (ErrorReporter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression(3077);
        astRoot0.addChild(emptyExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, errorCollector0);
        assertEquals(3079, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression(3077);
        astRoot0.addChild(emptyExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "", config0, errorCollector0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ElementGet elementGet0 = new ElementGet();
        astRoot0.addChild(elementGet0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "wU9RJ!$/a*3+T$AV6", config0, (ErrorReporter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        InfixExpression infixExpression0 = new InfixExpression(16, astRoot0, astRoot0, 1);
        astRoot0.addChild(infixExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "txU^[~]([o]OR", config0, errorCollector0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WithStatement withStatement0 = new WithStatement(16, 13);
        astRoot0.addChild(withStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "\n * @", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ForLoop forLoop0 = new ForLoop();
        astRoot0.addChild(forLoop0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "{#5! #K]?Q)z", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Label label0 = new Label(2);
        astRoot0.addChild(label0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, ")|IW|yo?Sqk/", config0, (ErrorReporter) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        NumberLiteral numberLiteral0 = new NumberLiteral(14);
        astRoot0.addChildrenToBack(numberLiteral0);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertTrue(node0.isFromExterns());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        NumberLiteral numberLiteral0 = new NumberLiteral(14);
        astRoot0.addChildrenToBack(numberLiteral0);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        NumberLiteral numberLiteral0 = new NumberLiteral(14);
        astRoot0.addChildrenToBack(numberLiteral0);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ExpressionStatement expressionStatement0 = new ExpressionStatement();
        astRoot0.addChild(expressionStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "getters may not have parameters", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* o@", true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        objectLiteral0.setIsDestructuring(true);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* o@", config0, (ErrorReporter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher", e);
        }
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyStatement emptyStatement0 = new EmptyStatement();
        astRoot0.addChild(emptyStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "[q}>/", config0, errorCollector0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyStatement emptyStatement0 = new EmptyStatement();
        astRoot0.addChild(emptyStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "[q}>/", config0, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Scope scope0 = new Scope(86);
        astRoot0.addChild(scope0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "com.google.javascript.rhino.Token", config0, errorCollector0);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Scope scope0 = new Scope(86);
        astRoot0.addChild(scope0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "com.google.javascript.rhino.Token", config0, errorCollector0);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Scope scope0 = new Scope(86);
        astRoot0.addChild(scope0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "com.google.javascript.rhino.Token", config0, errorCollector0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WhileLoop whileLoop0 = new WhileLoop();
        astRoot0.addChild(whileLoop0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "yield", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        astRoot0.addChild(block0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "unsupported language extension: for each", config0, errorCollector0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        astRoot0.addChild(block0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "unsupported language extension: for each", config0, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(0, 2, "(");
        FunctionNode functionNode0 = new FunctionNode(2, name0);
        astRoot0.addChild(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "(", config0, (ErrorReporter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty();
        astRoot0.addChild(objectProperty0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "ZYSI];6{R37aY", config0, toolErrorReporter0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 103
            //
            verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        XmlString xmlString0 = new XmlString();
        astRoot0.addChild(xmlString0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "\n* ot", config0, errorCollector0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
        }
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ThrowStatement throwStatement0 = new ThrowStatement();
        astRoot0.addChild(throwStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "(L/5", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(19);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Name name0 = new Name(26, "LEAVEWgTH");
        PropertyGet propertyGet0 = new PropertyGet(variableDeclaration0, name0, 2);
        astRoot0.addChild(propertyGet0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "LEAVEWgTH", config0, (ErrorReporter) null);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(19);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Name name0 = new Name(26, "LEAVEWgTH");
        PropertyGet propertyGet0 = new PropertyGet(variableDeclaration0, name0, 2);
        astRoot0.addChild(propertyGet0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "LEAVEWgTH", config0, (ErrorReporter) null);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", false);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
        Comment comment0 = new Comment(26, 2, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", false);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
        Comment comment0 = new Comment(26, 2, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", true);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(14, 25, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", true);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(14, 25, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
        assertTrue(node0.isFromExterns());
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", true);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(14, 25, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(26);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(23, 7, token_CommentType0, "Bad initialBuffeCpacity: ");
        regExpLiteral0.setJsDocNode(comment0);
        regExpLiteral0.setValue("Bad initialBuffeCpacity: ");
        astRoot0.addChild(regExpLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Bad initialBuffeCpacity: ", config0, toolErrorReporter0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(26);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(23, 7, token_CommentType0, "Bad initialBuffeCpacity: ");
        regExpLiteral0.setJsDocNode(comment0);
        regExpLiteral0.setValue("Bad initialBuffeCpacity: ");
        astRoot0.addChild(regExpLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Bad initialBuffeCpacity: ", config0, toolErrorReporter0);
        assertEquals(28, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", false);
        Locale locale0 = Locale.forLanguageTag("\n* ot");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(26, 2, token_CommentType0, "\n* ot");
        astRoot0.addComment(comment0);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, (ErrorReporter) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", false);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral();
        astRoot0.addChild(arrayLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Catch clauses are not supported", config0, (ErrorReporter) null);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral();
        astRoot0.addChild(arrayLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Catch clauses are not supported", config0, (ErrorReporter) null);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(25);
        astRoot0.addChild(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "]>_3~[v_mL[4|", config0, toolErrorReporter0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test2741() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(25);
        astRoot0.addChild(functionNode0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "]>_3~[v_mL[4|", config0, toolErrorReporter0);
        assertEquals(27, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement();
        astRoot0.addChild(breakStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "jJ", config0, errorCollector0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test2843() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement();
        astRoot0.addChild(breakStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "jJ", config0, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2944() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement();
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "j[E+z]/3#Ko{= }d8o<", config0, toolErrorReporter0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test2945() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement();
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "j[E+z]/3#Ko{= }d8o<", config0, toolErrorReporter0);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test3046() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement();
        Name name0 = new Name(10, 16, "Node has existing properties.");
        continueStatement0.setLabel(name0);
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "5}8vcms|F+Pf)", config0, (ErrorReporter) null);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test3047() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement();
        Name name0 = new Name(10, 16, "Node has existing properties.");
        continueStatement0.setLabel(name0);
        astRoot0.addChild(continueStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "5}8vcms|F+Pf)", config0, (ErrorReporter) null);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test3148() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(5);
        astRoot0.addChild(arrayComprehensionLoop0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "j[Ez]3#Ko{= }#d8oJ", config0, toolErrorReporter0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3249() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement();
        astRoot0.addChild(labeledStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "j[E+z]/3#Ko{= }d8o<", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3350() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(19);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Name name0 = new Name(26, "LEAVEWgTH");
        PropertyGet propertyGet0 = new PropertyGet(variableDeclaration0, name0, 2);
        astRoot0.addChild(propertyGet0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "LEAVEWgTH", config0, errorCollector0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test3351() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(19);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Name name0 = new Name(26, "LEAVEWgTH");
        PropertyGet propertyGet0 = new PropertyGet(variableDeclaration0, name0, 2);
        astRoot0.addChild(propertyGet0);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "LEAVEWgTH", config0, errorCollector0);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test3452() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name();
        astRoot0.addChild(name0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "eFjq+uid!&c<_", config0, toolErrorReporter0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.TokenStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test3553() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n * @", true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral(0, 1);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n * @", config0, (ErrorReporter) null);
        assertEquals(2, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test3554() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n * @", true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral(0, 1);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n * @", config0, (ErrorReporter) null);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3555() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n * @", true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral(0, 1);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n * @", config0, (ErrorReporter) null);
        assertTrue(node0.isFromExterns());
    }

    @Test(timeout = 4000)
    public void test3656() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\n* ot", true);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChild(objectLiteral0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        ErrorCollector errorCollector0 = new ErrorCollector();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, simpleSourceFile0, "\n* ot", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3757() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(26);
        regExpLiteral0.setFlags("CharMatcher.NONE");
        regExpLiteral0.setValue("Bad initialBuffeCpacity: ");
        astRoot0.addChild(regExpLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Bad initialBuffeCpacity: ", config0, toolErrorReporter0);
        assertEquals(28, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test3758() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(26);
        regExpLiteral0.setFlags("CharMatcher.NONE");
        regExpLiteral0.setValue("Bad initialBuffeCpacity: ");
        astRoot0.addChild(regExpLiteral0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "Bad initialBuffeCpacity: ", config0, toolErrorReporter0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3859() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement(2);
        astRoot0.addChild(returnStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test3960() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement(1);
        returnStatement0.setReturnValue(astRoot0);
        astRoot0.addChild(returnStatement0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "L&6G.z", config0, errorCollector0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
        }
    }

    @Test(timeout = 4000)
    public void test4061() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral();
        astRoot0.addChild(stringLiteral0);
        stringLiteral0.setValue("~n|>&0Ssz");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "~n|>&0Ssz", config0, errorCollector0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test4062() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral();
        astRoot0.addChild(stringLiteral0);
        stringLiteral0.setValue("~n|>&0Ssz");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "~n|>&0Ssz", config0, errorCollector0);
        assertEquals(0, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test4163() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase(12);
        switchCase0.setExpression(astRoot0);
        astRoot0.addChild(switchCase0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "private", config0, (ErrorReporter) null);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
        }
    }

    @Test(timeout = 4000)
    public void test4264() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase();
        astRoot0.addChild(switchCase0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "com.google.javascript.rhino.head.ast.ConditionalExpression", config0, toolErrorReporter0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test4265() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase();
        astRoot0.addChild(switchCase0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "com.google.javascript.rhino.head.ast.ConditionalExpression", config0, toolErrorReporter0);
        assertTrue(node0.isScript());
    }

    @Test(timeout = 4000)
    public void test4366() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertEquals(1, node0.getLength());
    }

    @Test(timeout = 4000)
    public void test4367() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertTrue(node0.isFromExterns());
    }

    @Test(timeout = 4000)
    public void test4368() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("end index", true);
        Node node0 = IRFactory.transformTree(astRoot0, simpleSourceFile0, "SunMonTueWedThuFriSat", config0, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test4469() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(9, 14);
        VariableInitializer variableInitializer0 = new VariableInitializer();
        variableDeclaration0.addVariable(variableInitializer0);
        astRoot0.addChild(variableDeclaration0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "j[E+z]/3#Ko{= }d8o<", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4570() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral(1, 146);
        InfixExpression infixExpression0 = new InfixExpression(9, astRoot0, stringLiteral0, 12);
        astRoot0.addChild(infixExpression0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "extends", config0, (ErrorReporter) null);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4671() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        NewExpression newExpression0 = new NewExpression(13);
        astRoot0.addChild(newExpression0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, (String) null, config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4772() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionCall functionCall0 = new FunctionCall();
        astRoot0.addChild(functionCall0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (StaticSourceFile) null, "unsupported language extension: for each", config0, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }
}
