/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:36:38 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckGlobalThis;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CheckGlobalThis_ESTest extends CheckGlobalThis_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = Node.newString(105, "match");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
        Node node1 = new Node(37, node0, node0, 38, 10);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(105, ".p?rototy.", 105, 105);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node1 = new Node(125, node0, node0, 1, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node0 = Node.newString(105, "", 105, 105);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node1 = new Node(32, node0, node0, 48, (-2626));
        Node node2 = compiler0.parseSyntheticCode("", "");
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(105, "prototype", 105, 105);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node1 = new Node(38, node0, node0, 12, 20);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node1;
        Node node2 = new Node(29, nodeArray0, (-1415), 46);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(105, ".prototye.", 105, 105);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node1 = new Node(86, node0, node0, 1, 24);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(105, ".prototye.", 105, 105);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node1 = new Node(86, node0, node0, 1, 24);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node0 = Node.newString(30, ".prootyp", 30, 30);
        Node node1 = new Node(86, node0, node0, 4095, 34);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
        boolean boolean1 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node0 = Node.newString(42, ".prootyp", 42, 42);
        Node node1 = new Node(86, node0, node0, 4095, 34);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
        boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node0 = Node.newString(42, ".prootyp", 42, 42);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) checkGlobalThis0);
        assertEquals(41, Node.BRACELESS_TYPE);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node0 = Node.newString(42, ".prootyp", 42, 42);
        Node node1 = new Node(86, node0, node0, 4095, 34);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        Node node0 = Node.newString(30, ".prootyp", 30, 30);
        Node node1 = new Node(86, node0, node0, 4095, 34);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
        assertEquals(86, node1.getType());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
        Node node0 = Node.newString(42, "");
        checkGlobalThis0.visit(nodeTraversal0, node0, node0);
        assertEquals(44, Node.IS_OPTIONAL_PARAM);
    }
}
