/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:14:06 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TernaryValue;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString("&<3a9[~t");
        Node node1 = NodeUtil.newVarNode("&<3a9[~t", node0);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString("&<3a9[~t");
        Node node1 = NodeUtil.newVarNode("&<3a9[~t", node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("");
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.precedence((-834));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-834> (type -834)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative((-1041));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Node node0 = Node.newString("`)");
        // Undeclared exception!
        try {
            NodeUtil.getRootOfQualifiedName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        // Undeclared exception!
        try {
            NodeUtil.getArgumentForCallOrNew(node0, 1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<FunctionType> linkedList0 = new LinkedList<FunctionType>();
        Vector<JSType> vector0 = new Vector<JSType>(linkedList0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        Node node1 = NodeUtil.newVarNode("bcK&^", node0);
        node0.setType(42);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        node0.toString();
        Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<FunctionType> linkedList0 = new LinkedList<FunctionType>();
        Vector<JSType> vector0 = new Vector<JSType>(linkedList0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        Node node1 = NodeUtil.newVarNode("bcK&^", node0);
        node0.setType(42);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        node0.toString();
        Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        NodeUtil.isStatementParent(node2);
        boolean boolean0 = NodeUtil.isThis(node2);
        boolean boolean1 = NodeUtil.isWithinLoop(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<FunctionType> linkedList0 = new LinkedList<FunctionType>();
        Vector<JSType> vector0 = new Vector<JSType>(linkedList0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        Node node1 = NodeUtil.newVarNode("bcK&^", node0);
        node0.setType(42);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        node0.toString();
        Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        NodeUtil.isStatementParent(node2);
        boolean boolean0 = NodeUtil.isThis(node2);
        boolean boolean1 = NodeUtil.isWithinLoop(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test01318() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<FunctionType> linkedList0 = new LinkedList<FunctionType>();
        Vector<JSType> vector0 = new Vector<JSType>(linkedList0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        Node node1 = NodeUtil.newVarNode("bcK&^", node0);
        node0.setType(42);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        node0.toString();
        Node node2 = peepholeSubstituteAlternateSyntax0.skipFinallyNodes(node0);
        NodeUtil.isStatementParent(node2);
        boolean boolean0 = NodeUtil.isThis(node2);
        boolean boolean1 = NodeUtil.isWithinLoop(node1);
        boolean boolean2 = NodeUtil.isTryFinallyNode(node0, node0);
        assertFalse(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    }

    @Test(timeout = 4000)
    public void test01520() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        // Undeclared exception!
        try {
            NodeUtil.newName(googleCodingConvention0, "%T,bY?CzFP", (Node) null, "%T,bY?CzFP");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 112);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01722() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        assertEquals(125, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        assertEquals(125, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(125, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(125, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01727() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01728() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01829() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01930() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isNew(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02031() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02132() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02233() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02334() throws Throwable {
        Node node0 = Node.newString("$V$/");
        // Undeclared exception!
        try {
            NodeUtil.getAssignedValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test02435() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        // Undeclared exception!
        try {
            NodeUtil.newCallNode(node0, nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test02536() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-1437));
    }

    @Test(timeout = 4000)
    public void test02637() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node0 = compiler0.parseTestCode("r");
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "r", node0, "r");
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02638() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node0 = compiler0.parseTestCode("r");
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "r", node0, "r");
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test02639() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node0 = compiler0.parseTestCode("r");
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "r", node0, "r");
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node1);
        assertEquals(0, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test02740() throws Throwable {
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.newQualifiedNameNode((CodingConvention) null, "rhino", (Node) null, "20?AW?L/v2@");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02841() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.newExpr((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test02942() throws Throwable {
        NodeUtil.isSimpleOperatorType(87);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(87);
    }

    @Test(timeout = 4000)
    public void test03043() throws Throwable {
        Node node0 = new Node(100);
        // Undeclared exception!
        try {
            NodeUtil.mayBeString(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03144() throws Throwable {
        Node node0 = new Node(95, 95, 95);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03245() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("><3>w{L{3!|SQsMc@");
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "><3>w{L{3!|SQsMc@");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03346() throws Throwable {
        Node node0 = Node.newString("whW|ty[)!l1n4{#Hb");
        Node node1 = NodeUtil.newVarNode("whW|ty[)!l1n4{#Hb", node0);
        node0.setType(49);
        NodeUtil.isNameReferenced(node1, "whW|ty[)!l1n4{#Hb");
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node1, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test03447() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03548() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03649() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03750() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5585);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=5585> (type 5585)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test03851() throws Throwable {
        Node node0 = new Node((-409), (-409), (-409));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03952() throws Throwable {
        Node node0 = new Node(2478, 2478, 2478);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03953() throws Throwable {
        Node node0 = new Node(2478, 2478, 2478);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        // Undeclared exception!
        try {
            NodeUtil.maybeAddFinally(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04054() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Zyv");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04055() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Zyv");
        Node node0 = Node.newString("Zyv", (-21), (-21));
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, true);
        List<Node> list0 = astParallelizer0.split();
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode("Zyv", list0, node0, (-128), (-2825));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.newQualifiedNameNode((CodingConvention) null, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 176, 81);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test04257() throws Throwable {
        String string0 = NodeUtil.opToStr(843);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04358() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test04459() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.isSimpleFunctionObjectCall((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test04560() throws Throwable {
        Node node0 = new Node(3510);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04661() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test04762() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.newName(googleCodingConvention0, "|h,/)~YJ&k>rL#r", (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test04863() throws Throwable {
        Node node0 = Node.newString("$CV$/");
        // Undeclared exception!
        try {
            NodeUtil.getArgumentForFunction(node0, 1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04964() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(102);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05065() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(1856);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 1856
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        Node node0 = Node.newString("$V$/");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05267() throws Throwable {
        Node node0 = new Node(2048, 2048, 2048);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test05368() throws Throwable {
        Node node0 = new Node(159);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05469() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test05470() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test05571() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05672() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05673() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertEquals(8232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05674() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05775() throws Throwable {
        Node node0 = new Node(139, 139, 139);
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test05876() throws Throwable {
        Node node0 = Node.newString("$V$/");
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test05977() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06078() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test06079() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06080() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, set0);
        assertEquals(110, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test06181() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06282() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06383() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.isString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06484() throws Throwable {
        Node node0 = Node.newString("NoObject");
        NodeUtil.isConstantName(node0);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test06585() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06686() throws Throwable {
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    }

    @Test(timeout = 4000)
    public void test06787() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(158);
        Node node0 = new Node(158, 158, 158);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 158
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test06888() throws Throwable {
        Node node0 = new Node(2024, 2024, 2024);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06989() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.isReferenceName(node0);
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        assertEquals("JSCompiler_renameProperty", string0);
    }

    @Test(timeout = 4000)
    public void test06990() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.isReferenceName(node0);
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        NodeUtil.isPrototypePropertyDeclaration(node0);
        // Undeclared exception!
        try {
            NodeUtil.getArgumentForCallOrNew(node0, 115);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test07091() throws Throwable {
        Node node0 = new Node(1446);
        Node node1 = new Node(112, node0, 4, (-2));
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.containsFunction(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07192() throws Throwable {
        Node node0 = new Node((-1327), (-1327), (-1327));
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test07293() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newString("%");
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("%", vector0, node0, 4095, 0);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test07294() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newString("%");
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("%", vector0, node0, 4095, 0);
        assertEquals(0, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test07295() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newString("%");
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("%", vector0, node0, 4095, 0);
        assertEquals(4095, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test07296() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newString("%");
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("%", vector0, node0, 4095, 0);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07397() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.isCall(node0);
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected NEW node, got DEL_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test07498() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isStatementBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07599() throws Throwable {
        Node node0 = new Node((-1524));
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test076100() throws Throwable {
        Node node0 = new Node(30);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test077101() throws Throwable {
        Node node0 = Node.newString("W>nsF!8vn");
        Integer integer0 = new Integer(31);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078102() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertEquals(141, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test078103() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078104() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test078105() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertEquals(141, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test079106() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isNumericResultHelper(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test079107() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test080108() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test080109() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test080110() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
        assertEquals(8232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test081111() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("qN}.=q[YN6Lz +[~");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test081112() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("qN}.=q[YN6Lz +[~");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test082113() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63743);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083114() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test084115() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test085116() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test086117() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test086118() throws Throwable {
        Node node0 = new Node(64);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test087119() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        NodeUtil.isSimpleOperatorType((byte) 91);
        Node node0 = Node.newNumber((double) (byte) 91);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(91.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test088120() throws Throwable {
        Node node0 = new Node(58);
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(49, node0, node0, 24, 44);
        node1.setType(1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        boolean boolean1 = NodeUtil.isTryCatchNodeContainer(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test088121() throws Throwable {
        Node node0 = new Node(58);
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(49, node0, node0, 24, 44);
        node1.setType(1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        boolean boolean1 = NodeUtil.isTryCatchNodeContainer(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test089122() throws Throwable {
        Node node0 = new Node(1385, 1385, 1385);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test090123() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test091124() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test092125() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("8f[cbX.&u*K4K");
        boolean boolean0 = NodeUtil.isStatementBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093126() throws Throwable {
        NodeUtil.isAssociative(102);
        String string0 = NodeUtil.opToStr(102);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test094127() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test094128() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.getJSType();
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test095129() throws Throwable {
        Node node0 = new Node((-4065));
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test096130() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(453, nodeArray0, 453, 453);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test096131() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(453, nodeArray0, 453, 453);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        assertEquals(453, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test097132() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = new Node(110, 8, 6);
        NodeUtil.isVar(node0);
        NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStr(36);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test098133() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test099134() throws Throwable {
        Node node0 = Node.newNumber((-1614.38), 77, 2605);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100135() throws Throwable {
        Node node0 = new Node(9);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101136() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test101137() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test102138() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        Node node1 = new Node(20, node0, 4095, 21);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test103139() throws Throwable {
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test103140() throws Throwable {
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        assertEquals(10000, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test103141() throws Throwable {
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        Node node2 = Node.newNumber((double) 15);
        node2.children();
        boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test103142() throws Throwable {
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        Node node2 = Node.newNumber((double) 15);
        node2.children();
        boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test103143() throws Throwable {
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        Node node2 = Node.newNumber((double) 15);
        node2.children();
        boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test104144() throws Throwable {
        Node node0 = Node.newString("$V$/");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // STRING $V$/ does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test105145() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = new Node(6, node0, node0, node0);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertFalse(node0.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test106146() throws Throwable {
        Node node0 = NodeUtil.newVarNode("&J", (Node) null);
        assertEquals(118, node0.getType());
    }

    @Test(timeout = 4000)
    public void test106147() throws Throwable {
        Node node0 = NodeUtil.newVarNode("&J", (Node) null);
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test107148() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test108149() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((double) 39);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
        assertEquals("39", string0);
    }

    @Test(timeout = 4000)
    public void test109150() throws Throwable {
        Node node0 = Node.newNumber((-647.59045));
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test110151() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node.newString("_3jDXW~o", 26, 2);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node2 = NodeUtil.newVarNode("5", node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test110152() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node.newString("_3jDXW~o", 26, 2);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node2 = NodeUtil.newVarNode("5", node0);
        node1.setType((-63));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "_3jDXW~o");
        Node.newNumber((double) 4);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean1 = NodeUtil.isCall(node2);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test110153() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node.newString("_3jDXW~o", 26, 2);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node2 = NodeUtil.newVarNode("5", node0);
        node1.setType((-63));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "_3jDXW~o");
        Node.newNumber((double) 4);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean1 = NodeUtil.isCall(node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean2 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean2);
    }

    @Test(timeout = 4000)
    public void test110154() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node.newString("_3jDXW~o", 26, 2);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node2 = NodeUtil.newVarNode("5", node0);
        node1.setType((-63));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "_3jDXW~o");
        Node.newNumber((double) 4);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean1 = NodeUtil.isCall(node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean2 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(118, node2.getType());
    }

    @Test(timeout = 4000)
    public void test110155() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node.newString("_3jDXW~o", 26, 2);
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node2 = NodeUtil.newVarNode("5", node0);
        node1.setType((-63));
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "_3jDXW~o");
        Node.newNumber((double) 4);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean1 = NodeUtil.isCall(node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean2 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test111156() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test111157() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        NodeUtil.isFunctionExpression(node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test111158() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        NodeUtil.isFunctionExpression(node0);
        assertEquals(3692, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test111159() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        NodeUtil.isFunctionExpression(node0);
        assertEquals(15, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test111160() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        NodeUtil.isFunctionExpression(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test111161() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 15);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isAssignmentOp(node0);
        node0.children();
        int int0 = NodeUtil.getNameReferenceCount(node0, "com.google.javascript.rhino.jstype.JSType$TypePair");
        NodeUtil.isFunctionExpression(node0);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test112162() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113163() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("$V$/");
        Node node1 = new Node(29, (-842), 47);
        NodeUtil.getNumberValue(node1);
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114164() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test114165() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        node1.setType(21);
        NodeUtil.isForIn(node1);
        Node.newNumber((double) 2, 1, 45);
        Node node2 = new Node(29, node1, node1);
        NodeUtil.getNumberValue(node2);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115166() throws Throwable {
        Node node0 = new Node((byte) 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        Stack<Node> stack0 = new Stack<Node>();
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test117168() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        boolean boolean0 = NodeUtil.isName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118169() throws Throwable {
        Node node0 = new Node(64);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test119170() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test120171() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "AST not normalized.", 791, (-1060));
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test120172() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "AST not normalized.", 791, (-1060));
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test120173() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "AST not normalized.", 791, (-1060));
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test121174() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", 64, (-1668));
        NodeUtil.getImpureBooleanValue(node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test121175() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", 64, (-1668));
        NodeUtil.getImpureBooleanValue(node0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test121176() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", 64, (-1668));
        NodeUtil.getImpureBooleanValue(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test121177() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", 64, (-1668));
        NodeUtil.getImpureBooleanValue(node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test122178() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test123179() throws Throwable {
        Node node0 = new Node(75);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = NodeUtil.opToStrNoFail(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test124180() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        HashSet<String> hashSet0 = new HashSet<String>();
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = Node.newNumber((-1801.2197941675));
        NodeUtil.getPureBooleanValue(node0);
        NodeUtil.mayEffectMutableState(node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125181() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("Z");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test125182() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("Z");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test126183() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("*V$");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test126184() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("*V$");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test127185() throws Throwable {
        Node node0 = Node.newString("infinity");
        NodeUtil.isLatin("infinity");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test128186() throws Throwable {
        Node node0 = Node.newString("com.google.javascript.jscomp.ReplaceStrings$Config");
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test129187() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.isStatementParent((Node) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test130188() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("()", "\u0006[>=|<c8UtF1ZmGd_");
        NodeUtil.isLoopStructure(node0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
        assertFalse(jSType0.isNullType());
    }

    @Test(timeout = 4000)
    public void test131189() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, jSType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test132190() throws Throwable {
        Node node0 = new Node(2489, 2489, 2489);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test133191() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test133192() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        NodeUtil.getImpureBooleanValue(node0);
        assertEquals(140, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test133193() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        NodeUtil.getImpureBooleanValue(node0);
        assertEquals(140, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test134194() throws Throwable {
        Node node0 = Node.newString("JSType$TypePair");
        NodeUtil.getStringNumberValue("JSType$TypePair");
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test135195() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = new Node(21);
        node1.addChildToFront(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test135196() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = new Node(21);
        node1.addChildToFront(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test136197() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137198() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 4);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test138199() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isVar(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139200() throws Throwable {
        Node node0 = Node.newString("NoObject");
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test140201() throws Throwable {
        Node node0 = new Node(97, 97, 97);
        Stack<JSType> stack0 = new Stack<JSType>();
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test141202() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(97, 97, 97);
        Stack<JSType> stack0 = new Stack<JSType>();
        String string0 = NodeUtil.opToStrNoFail(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test141203() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(97, 97, 97);
        Stack<JSType> stack0 = new Stack<JSType>();
        String string0 = NodeUtil.opToStrNoFail(13);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test142204() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(20, int0);
    }

    @Test(timeout = 4000)
    public void test143205() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = new Node(16);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144206() throws Throwable {
        Node node0 = new Node(26);
        // Undeclared exception!
        try {
            NodeUtil.getArrayElementStringValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test145207() throws Throwable {
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test146208() throws Throwable {
        Node node0 = new Node(2048);
        Node node1 = new Node(43, node0, node0);
        NodeUtil.getNumberValue(node1);
        String string0 = NodeUtil.arrayToString(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test147209() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNameSuffixes);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test147210() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNameSuffixes);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test148211() throws Throwable {
        Node node0 = new Node(37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test148212() throws Throwable {
        Node node0 = new Node(37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test149213() throws Throwable {
        Node node0 = new Node(30);
        Node node1 = new Node(29, node0, 44, 2);
        HashSet<String> hashSet0 = new HashSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, hashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test150214() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newNumber((-1004.41));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(16, Node.FLAG_LOCAL_RESULTS);
    }

    @Test(timeout = 4000)
    public void test151215() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
        node0.setString(":(K:MWcZkCpPc4");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(0, Node.SIDE_EFFECTS_ALL);
    }

    @Test(timeout = 4000)
    public void test152216() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node node1 = new Node(21, node0, node0, 17, 16);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        NodeUtil.redeclareVarsInsideBranch(node1);
        boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test152217() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node node1 = new Node(21, node0, node0, 17, 16);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        NodeUtil.redeclareVarsInsideBranch(node1);
        boolean boolean1 = NodeUtil.isLiteralValue(node1, true);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test153218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
        Node node1 = Node.newString("G]s49A7", 157, 459);
        Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
        assertEquals(118, node2.getType());
    }

    @Test(timeout = 4000)
    public void test153219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
        Node node1 = Node.newString("G]s49A7", 157, 459);
        Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
        assertEquals(157, node2.getLineno());
    }

    @Test(timeout = 4000)
    public void test153220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
        Node node1 = Node.newString("G]s49A7", 157, 459);
        Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
        node0.setLineno(48);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        node1.setType(1131);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "M|$wD");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test153221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
        Node node1 = Node.newString("G]s49A7", 157, 459);
        Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
        node0.setLineno(48);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        node1.setType(1131);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "M|$wD");
        Node node3 = Node.newNumber(1706.9892589);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node3);
        boolean boolean1 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean2 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test153222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString(8233, "M|$wD", 8233, (-2595));
        Node node1 = Node.newString("G]s49A7", 157, 459);
        Node node2 = NodeUtil.newVarNode("dpq*l2+Kt@O%WJK", node1);
        node0.setLineno(48);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        node1.setType(1131);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "M|$wD");
        Node node3 = Node.newNumber(1706.9892589);
        NodeUtil.isFunctionObjectCall(node1);
        NodeUtil.isExprAssign(node3);
        boolean boolean1 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean2 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        NodeUtil.getVarsDeclaredInBranch(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.getCount(node3, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test154223() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 109: ELSE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test155224() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test156225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<(l9TiEy@6;7");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.getStringNumberValue("<(l9TiEy@6;7");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 112: DEFAULT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test157226() throws Throwable {
        Node node0 = Node.newNumber(46.9642042712);
        String string0 = NodeUtil.arrayToString(node0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test158227() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.parseAndNormalizeTestCode(compiler0, "msg.prop.defined", "msg.prop.defined");
        // Undeclared exception!
        try {
            NodeUtil.isValidPropertyName((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.TokenStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test159228() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test160229() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = Node.newNumber((double) 108, 108, 108);
        Node node1 = new Node(1, node0, node0);
        NodeUtil.getNumberValue(node1);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test161230() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString("H|3Hk<G^l\u0002&}j>", 8, 8);
        node0.setType(8);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(36, node1, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
        assertEquals(8, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test161231() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString("H|3Hk<G^l\u0002&}j>", 8, 8);
        node0.setType(8);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(36, node1, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test161232() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString("H|3Hk<G^l\u0002&}j>", 8, 8);
        node0.setType(8);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Node node2 = new Node(36, node1, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node1);
        Object object0 = new Object();
        boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H|3Hk<G^l\u0002&}j>");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test162233() throws Throwable {
        Node node0 = new Node(53);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test162234() throws Throwable {
        Node node0 = new Node(53);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test162235() throws Throwable {
        Node node0 = new Node(53);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        boolean boolean0 = NodeUtil.isAssociative(108);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test163236() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test163237() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals(125, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test163238() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test163239() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals(125, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test163240() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        String string0 = NodeUtil.getSourceName(node0);
        String string1 = NodeUtil.opToStrNoFail(24);
        assertEquals("/", string1);
    }

    @Test(timeout = 4000)
    public void test164241() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("9d/_/r7[[N'b6*");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test165242() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NAME, LP, or BLOCK node expected; found: ", (-135), (-135));
        NodeUtil.isReferenceName(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test166243() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test167244() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test167245() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        int int1 = NodeUtil.precedence(15);
        assertEquals(9, int1);
    }

    @Test(timeout = 4000)
    public void test168246() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(3692, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test168247() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(13, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test168248() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test168249() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(3692, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test168250() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test168251() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(13, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test168252() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.rhino.jstype.JSType$TypePair", 3692, 13);
        NodeUtil.getImpureBooleanValue(node0);
        node0.children();
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test169253() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test170254() throws Throwable {
        Node node0 = new Node(67);
        // Undeclared exception!
        try {
            NodeUtil.callHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test171255() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(5747, 5747, 5747);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test172256() throws Throwable {
        Node node0 = Node.newString("&");
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test173257() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.isStrWhiteSpaceChar(9);
    }

    @Test(timeout = 4000)
    public void test174258() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.isStrWhiteSpaceChar(12);
    }

    @Test(timeout = 4000)
    public void test175259() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test176260() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test177261() throws Throwable {
        Node node0 = Node.newString("$V$/");
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test177262() throws Throwable {
        Node node0 = Node.newString("$V$/");
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test178263() throws Throwable {
        Node node0 = new Node(39);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test179264() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test180265() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test181266() throws Throwable {
        Node node0 = new Node(2478, 2478, 2478);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 2478
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test182267() throws Throwable {
        Node node0 = Node.newString("$V/");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test183268() throws Throwable {
        Node node0 = new Node((-1972), (-1972), (-1972));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test183269() throws Throwable {
        Node node0 = new Node((-1972), (-1972), (-1972));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStrNoFail(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test184270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(18);
        Node node1 = new Node(88, node0, node0);
        NodeUtil.isStrWhiteSpaceChar((-1));
        NodeUtil.mayBeString(node0);
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node1, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test185271() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        HashSet<String> hashSet0 = new HashSet<String>();
        String string0 = NodeUtil.opToStr(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test186272() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.opToStr(48);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test187273() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected CALL node, got REF_CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test188274() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test189275() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test190276() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        node0.addChildrenToBack(node0);
        // Undeclared exception!
        NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test191277() throws Throwable {
        Node node0 = Node.newString(108, "");
        NodeUtil.isThis(node0);
        // Undeclared exception!
        try {
            NodeUtil.getAssignedValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test192278() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test193279() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test194280() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node1 = new Node(43, 23, 13);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test194281() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node1 = new Node(43, 23, 13);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test195282() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(38);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 38: NAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test196283() throws Throwable {
        Compiler compiler0 = new Compiler();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test197284() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals(140, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test197285() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test197286() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 140, 140);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals(140, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test198287() throws Throwable {
        NodeUtil.isSimpleOperatorType(83);
        NodeUtil.isStrWhiteSpaceChar(83);
    }

    @Test(timeout = 4000)
    public void test199288() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        // Undeclared exception!
        try {
            NodeUtil.isStatement(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test200289() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = Node.newString((-33), "_3jDXW~o");
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 118, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        assertEquals(105, node2.getType());
    }

    @Test(timeout = 4000)
    public void test200290() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = Node.newString((-33), "_3jDXW~o");
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 118, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        assertEquals(33, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test200291() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = Node.newString((-33), "_3jDXW~o");
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 118, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        assertEquals(118, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test200292() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = Node.newString((-33), "_3jDXW~o");
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 118, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test201293() throws Throwable {
        Node node0 = new Node(2478, 2478, 2478);
        // Undeclared exception!
        try {
            NodeUtil.newHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test202294() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        int int0 = 114;
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test203295() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(110);
        Object object0 = new Object();
        boolean boolean0 = NodeUtil.isCommutative(110);
        Node node0 = Node.newString(110, "nvalid assignment targe");
        ControlFlowAnalysis.computeFallThrough(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        nodeUtil_MatchShallowStatement0.equals("nvalid assignment targe");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement1 = new NodeUtil.MatchShallowStatement();
        nodeUtil_MatchShallowStatement1.equals(ternaryValue0);
        boolean boolean1 = nodeUtil_MatchShallowStatement1.apply(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test203296() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        TernaryValue ternaryValue0 = NodeUtil.isStrWhiteSpaceChar(110);
        Object object0 = new Object();
        boolean boolean0 = NodeUtil.isCommutative(110);
        Node node0 = Node.newString(110, "nvalid assignment targe");
        ControlFlowAnalysis.computeFallThrough(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        nodeUtil_MatchShallowStatement0.equals("nvalid assignment targe");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement1 = new NodeUtil.MatchShallowStatement();
        nodeUtil_MatchShallowStatement1.equals(ternaryValue0);
        boolean boolean1 = nodeUtil_MatchShallowStatement1.apply(node0);
        Node node1 = Node.newString("+;Wfm(F5n", 2, 12);
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, (-888), nodeUtil_MatchShallowStatement1);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test204297() throws Throwable {
        Node node0 = new Node(67);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.isAssign(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test204298() throws Throwable {
        Node node0 = new Node(67);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.isAssign(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test205299() throws Throwable {
        NodeUtil.isAssociative(110);
        String string0 = NodeUtil.opToStr(40);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test206300() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test207301() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isCommutative(21);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test207302() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isCommutative(21);
        String string0 = NodeUtil.opToStrNoFail(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test207303() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isCommutative(21);
        String string0 = NodeUtil.opToStrNoFail(18);
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test208304() throws Throwable {
        NodeUtil.isSimpleOperatorType(121);
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test209305() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test209306() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        int int1 = NodeUtil.precedence(13);
        assertEquals(8, int1);
    }

    @Test(timeout = 4000)
    public void test210307() throws Throwable {
        NodeUtil.opToStr(79);
        // Undeclared exception!
        try {
            Node.newString(79, (String) null, 1810, 79);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test211308() throws Throwable {
        Node node0 = new Node(2102);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212309() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = NodeUtil.opToStr(39);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test213310() throws Throwable {
        NodeUtil.isSimpleOperatorType((byte) 99);
        String string0 = NodeUtil.opToStr((byte) 99);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test214311() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 120: CATCH
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test215312() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(22, 129, (-1700));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test215313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(22, 129, (-1700));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test216314() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        Stack<JSType> stack0 = new Stack<JSType>();
        stack0.trimToSize();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test217315() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test218316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setWasEmptyNode(true);
        Node node1 = NodeUtil.newVarNode("Unreferenced var: ", node0);
        NodeUtil.isVar(node1);
        NodeUtil.mayEffectMutableState(node1);
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        // Undeclared exception!
        try {
            NodeUtil.isConstantByConvention((CodingConvention) null, node0, node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // LP [empty_block: 1] is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test219317() throws Throwable {
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = new Node(57, 57, (-5367));
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node1 = Node.newString(20, "JSType$TypePair");
        node0.cloneNode();
        Node.newString(15, "JSType$TypePair");
        NodeUtil.mayEffectMutableState(node1);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220318() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        Node node0 = new Node(100, 100, 100);
        Node node1 = new Node(36, node0, 4, (-52));
        node0.addChildrenToBack(node1);
        NodeUtil.mayBeString(node0);
        NodeUtil.opToStr(1955);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        String string0 = NodeUtil.getStringValue(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test221319() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = NodeUtil.newVarNode("G[?", node0);
        NodeUtil.getPureBooleanValue(node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test221320() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = NodeUtil.newVarNode("G[?", node0);
        NodeUtil.getPureBooleanValue(node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean2 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test221321() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = NodeUtil.newVarNode("G[?", node0);
        NodeUtil.getPureBooleanValue(node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean2 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test222322() throws Throwable {
        Node node0 = new Node(51);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test222323() throws Throwable {
        Node node0 = new Node(51);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test223324() throws Throwable {
        Node node0 = new Node(13, 13, (-436));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test223325() throws Throwable {
        Node node0 = new Node(13, 13, (-436));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        boolean boolean1 = NodeUtil.isFunctionObjectApply(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test224326() throws Throwable {
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
        Node node0 = new Node(100, 100, 121);
        Node node1 = new Node(121, node0, 18, 38);
        HashSet<String> hashSet0 = new HashSet<String>();
        node0.addChildrenToBack(node1);
        NodeUtil.isExprAssign(node1);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test224327() throws Throwable {
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis((AbstractCompiler) null, false, false);
        Node node0 = new Node(100, 100, 121);
        Node node1 = new Node(121, node0, 18, 38);
        HashSet<String> hashSet0 = new HashSet<String>();
        node0.addChildrenToBack(node1);
        NodeUtil.isExprAssign(node1);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test225328() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test226329() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test227330() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        String string0 = NodeUtil.opToStr(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test228331() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test229332() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test230333() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(33);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 33: GETPROP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test231334() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test232335() throws Throwable {
        NodeUtil.getStringNumberValue("\n parent:");
        NodeUtil.isSimpleOperatorType(88);
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test233336() throws Throwable {
        NodeUtil.isAssociative(102);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.externsRoot;
        Node node1 = NodeUtil.newUndefinedNode((Node) null);
        NodeUtil.isAssignmentOp(node1);
        node1.setLineno(25);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    }

    @Test(timeout = 4000)
    public void test234337() throws Throwable {
        Node node0 = new Node(2048);
        Node node1 = new Node(43, node0, node0);
        NodeUtil.getImpureBooleanValue(node1);
        NodeUtil.isSimpleOperatorType(14);
        Node node2 = new Node(2, 0, 30);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test235338() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.mayBeString(node0, false);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test235339() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.mayBeString(node0, false);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test236340() throws Throwable {
        Node node0 = new Node((-1391));
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test237341() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN, 103, 103);
        node0.setCharno(103);
        NodeUtil.getImpureBooleanValue(node0);
        String string0 = NodeUtil.opToStr(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test237342() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN, 103, 103);
        node0.setCharno(103);
        NodeUtil.getImpureBooleanValue(node0);
        String string0 = NodeUtil.opToStr(11);
        String string1 = NodeUtil.getObjectLitKeyName(node0);
        assertEquals("NaN", string1);
    }

    @Test(timeout = 4000)
    public void test238343() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239344() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test240345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test241346() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(6);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242347() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242348() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isLiteralValue(node0, true);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test242349() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isLiteralValue(node0, true);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test243350() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test244351() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        node0.addChildrenToFront(node0);
        // Undeclared exception!
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test245352() throws Throwable {
        Node node0 = new Node(87);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test246353() throws Throwable {
        Node node0 = new Node(95);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test247354() throws Throwable {
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(91, node0, node0, (-2669), 31);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test248355() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStr(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test249356() throws Throwable {
        Node node0 = new Node(97);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean0 = NodeUtil.isAssignmentOp(node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test250357() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(95, 95, 95);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251358() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(97, 97, 97);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test252359() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(5714, 5714, 5714);
        NodeUtil.opToStr(31);
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test253360() throws Throwable {
        Node node0 = new Node(58);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(10);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test254361() throws Throwable {
        Node node0 = new Node(19, 19, 19);
        Node.newString(46, "Aeo0J,Va&40", 6, 36);
        boolean boolean0 = NodeUtil.isAssociative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test255362() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test256363() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test257364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString(105, ".i", 52, 52);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = new Node(1, node0, (-429), 0);
        node0.setOptionalArg(true);
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        NodeUtil.canBeSideEffected(node0, hashSet1);
        NodeUtil.redeclareVarsInsideBranch(node1);
        assertEquals(18, Node.SPECIAL_PROP_PROP);
    }

    @Test(timeout = 4000)
    public void test258365() throws Throwable {
        Node node0 = new Node(111);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCASE
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test259366() throws Throwable {
        Node node0 = new Node(102);
        String string0 = NodeUtil.opToStr(30);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test259367() throws Throwable {
        Node node0 = new Node(102);
        String string0 = NodeUtil.opToStr(30);
        NodeUtil.isStrWhiteSpaceChar(20);
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test260368() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test261369() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test262370() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.setType(88);
        node0.detachChildren();
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test262371() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.setType(88);
        node0.detachChildren();
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test263372() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        Node.newNumber((-153.1), 1, 49);
        NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStr(116);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test264373() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        String string0 = NodeUtil.opToStrNoFail(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test265374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(28);
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test265375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(28);
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test266376() throws Throwable {
        Node node0 = new Node(24);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test267377() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test268378() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        String string0 = NodeUtil.opToStr(77);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test269379() throws Throwable {
        Node node0 = new Node(64);
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test270380() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isArrayLiteral(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test271381() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        String string0 = NodeUtil.getSourceName(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test271382() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals(" [testcode] ", string0);
    }

    @Test(timeout = 4000)
    public void test271383() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        String string0 = NodeUtil.getSourceName(node0);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test272384() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fk=>u^@-7:N");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(108);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 108: IF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test273385() throws Throwable {
        NodeUtil.opToStr(32);
        int int0 = new Integer(32);
        assertEquals(32, int0);
    }

    @Test(timeout = 4000)
    public void test274386() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test274387() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
        Node node0 = Node.newString("");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test275388() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 49: THROW
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test276389() throws Throwable {
        NodeUtil.opToStr(47);
        Integer integer0 = new Integer(47);
        assertEquals(47, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test277390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test278391() throws Throwable {
        Node node0 = new Node(98, 98, 227);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test278392() throws Throwable {
        Node node0 = new Node(98, 98, 227);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test278393() throws Throwable {
        Node node0 = new Node(98, 98, 227);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        assertEquals(98, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test279394() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        boolean boolean1 = NodeUtil.isValidPropertyName("false");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test279395() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        boolean boolean1 = NodeUtil.isValidPropertyName("false");
        boolean boolean2 = NodeUtil.isForIn(node0);
        boolean boolean3 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean3 == boolean2);
    }

    @Test(timeout = 4000)
    public void test279396() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        boolean boolean1 = NodeUtil.isValidPropertyName("false");
        boolean boolean2 = NodeUtil.isForIn(node0);
        boolean boolean3 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean3);
    }

    @Test(timeout = 4000)
    public void test280397() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test281398() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test282399() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test282400() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertEquals(8232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test283401() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test284402() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test285403() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test285404() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(141, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test285405() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 141, 141);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(141, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test286406() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test287407() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = new Node(33);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test288408() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" (type ");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test289409() throws Throwable {
        Node.newString("NAME, LP, or BLOCK node expected; found: ");
        Double double0 = NodeUtil.getStringNumberValue("NAME, LP, or BLOCK node expected; found: ");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test289410() throws Throwable {
        Node.newString("NAME, LP, or BLOCK node expected; found: ");
        Double double0 = NodeUtil.getStringNumberValue("NAME, LP, or BLOCK node expected; found: ");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test290411() throws Throwable {
        Node node0 = new Node(74);
        Node node1 = Node.newNumber((double) 74, 8, 5);
        node0.addChildrenToFront(node1);
        node0.setWasEmptyNode(false);
        String string0 = NodeUtil.opToStrNoFail(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test290412() throws Throwable {
        Node node0 = new Node(74);
        Node node1 = Node.newNumber((double) 74, 8, 5);
        node0.addChildrenToFront(node1);
        node0.setWasEmptyNode(false);
        String string0 = NodeUtil.opToStrNoFail(10);
        boolean boolean0 = NodeUtil.isSwitchCase(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test291413() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node0 = new Node((byte) 12);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(35);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test292414() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test293415() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN, 103, 103);
        NodeUtil.getImpureBooleanValue(node0);
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test294416() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newString("inva\"id assignmen target", 110, 110);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.isCommutative(7);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean1 = NodeUtil.isValidDefineValue(node0, hashSet0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test294417() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newString("inva\"id assignmen target", 110, 110);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.isCommutative(7);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean1 = NodeUtil.isValidDefineValue(node0, hashSet0);
        boolean boolean2 = NodeUtil.isString(node0);
        assertFalse(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test294418() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newString("inva\"id assignmen target", 110, 110);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.isCommutative(7);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean1 = NodeUtil.isValidDefineValue(node0, hashSet0);
        boolean boolean2 = NodeUtil.isString(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean3 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean3 == boolean2);
    }

    @Test(timeout = 4000)
    public void test295419() throws Throwable {
        Node node0 = new Node(74);
        NodeUtil.isSimpleOperatorType(37);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-2));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-2> (type -2)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test296420() throws Throwable {
        Node node0 = new Node(15);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        node0.setCharno(198);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test297421() throws Throwable {
        Node node0 = new Node(103);
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test298422() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test299423() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototye", 141, 141);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(141, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test299424() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototye", 141, 141);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(141, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test299425() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototye", 141, 141);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test300426() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test301427() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test302428() throws Throwable {
        String string0 = NodeUtil.opToStr((byte) 12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test303429() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(11);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test304430() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.isExprAssign(node0);
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test305431() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        node1.getDirectives();
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test306432() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test307433() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test308434() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test308435() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test309436() throws Throwable {
        Node node0 = new Node(74, 110, 74);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(16);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_MEMBER 110
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test310437() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test311438() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test311439() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test312440() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0iV:A@");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test312441() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0iV:A@");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test313442() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test313443() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        String string0 = NodeUtil.opToStr(101);
        Double double0 = NodeUtil.getStringNumberValue("&&");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test313444() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        String string0 = NodeUtil.opToStr(101);
        Double double0 = NodeUtil.getStringNumberValue("&&");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test314445() throws Throwable {
        NodeUtil.isSimpleOperatorType(22);
        int int0 = new Integer(22);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test315446() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.precedence(9);
        int int0 = new Integer(8);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test316447() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        String string0 = NodeUtil.opToStrNoFail(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test317448() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(85);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test318449() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test318450() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        NodeUtil.precedence(95);
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.getArgumentForCallOrNew((Node) null, 1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test319451() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(8232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test319452() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 8232, 8232);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test320453() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        String string0 = NodeUtil.opToStr(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test321454() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test322455() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test322456() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStr(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test322457() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        String string0 = NodeUtil.opToStr(19);
        boolean boolean1 = NodeUtil.isExprAssign(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test323458() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.opToStr(63);
        int int0 = NodeUtil.precedence((byte) 32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test324459() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test324460() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        String string0 = NodeUtil.opToStrNoFail(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test325461() throws Throwable {
        Node node0 = new Node(30, 102, 102);
        NodeUtil.getArrayElementStringValue(node0);
        NodeUtil.isImmutableValue(node0);
        Node node1 = new Node(29, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 84: RP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test326462() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test326463() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.isSimpleOperatorType(44);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test327464() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(22);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test327465() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(22);
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test328466() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test328467() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test329468() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test330469() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        String string0 = NodeUtil.opToStr(118);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test331470() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        Node node1 = Node.newString(11, "XML");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertEquals(125, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test331471() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        Node node1 = Node.newString(11, "XML");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertEquals(125, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test331472() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        Node node1 = Node.newString(11, "XML");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test331473() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XML", 125, 125);
        Node node1 = Node.newString(11, "XML");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test332474() throws Throwable {
        Node node0 = new Node(58);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(49, node0, node0, 24, 44);
        node1.setType(95);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test333475() throws Throwable {
        Node node0 = new Node(102);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        node0.children();
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test334476() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test334477() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
        boolean boolean0 = NodeUtil.mayBeString(node1);
        NodeUtil.isBooleanResultHelper(node0);
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test335478() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test336479() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test337480() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test338481() throws Throwable {
        Node node0 = new Node(11);
        Node node1 = new Node(34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test339482() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test340483() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test341484() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test342485() throws Throwable {
        Node node0 = new Node(105);
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test343486() throws Throwable {
        Node node0 = new Node(34);
        node0.addChildrenToBack(node0);
        NodeUtil.mayHaveSideEffects(node0);
        // Undeclared exception!
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test344487() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(26, 110, 255);
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test345488() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        String string0 = NodeUtil.opToStr(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test346489() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(41);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 41: NULL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test347490() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test347491() throws Throwable {
        Object object0 = new Object();
        boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test348492() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test348493() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        node1.setType(21);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test348494() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        node1.setType(21);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test349495() throws Throwable {
        int int0 = 37;
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(37);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 37: CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test350496() throws Throwable {
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.isSimpleOperatorType(77);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 77: TRY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test351497() throws Throwable {
        Node node0 = new Node(97);
        Node.newNumber((double) 97, 37, 5);
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test352498() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "]XXPgajsZ{_<Slp\"L", "]XXPgajsZ{_<Slp\"L");
        Node node1 = new Node(29, node0, 29, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test353499() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test354500() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning(" mdg#l]7c,y)JiFr9", "_jDXW~o", 935, (String) null, (-2538));
        simpleErrorReporter0.error("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", "_jDXW~o", 935, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", (-632));
        MockPrintStream mockPrintStream0 = new MockPrintStream(" mdg#l]7c,y)JiFr9");
        Node node0 = Node.newString("XB(C4GfkJF>@h#G`f/", 12, 2777);
        Node node1 = NodeUtil.newVarNode("XB(C4GfkJF>@h#G`f/", node0);
        node0.clonePropsFrom(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        System.setCurrentTimeMillis(45);
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test354501() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning(" mdg#l]7c,y)JiFr9", "_jDXW~o", 935, (String) null, (-2538));
        simpleErrorReporter0.error("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", "_jDXW~o", 935, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", (-632));
        MockPrintStream mockPrintStream0 = new MockPrintStream(" mdg#l]7c,y)JiFr9");
        Node node0 = Node.newString("XB(C4GfkJF>@h#G`f/", 12, 2777);
        Node node1 = NodeUtil.newVarNode("XB(C4GfkJF>@h#G`f/", node0);
        node0.clonePropsFrom(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        System.setCurrentTimeMillis(45);
        String string0 = NodeUtil.getSourceName(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        boolean boolean1 = NodeUtil.isLhs(node0, node1);
        assertEquals(2777, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test354502() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning(" mdg#l]7c,y)JiFr9", "_jDXW~o", 935, (String) null, (-2538));
        simpleErrorReporter0.error("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", "_jDXW~o", 935, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", (-632));
        MockPrintStream mockPrintStream0 = new MockPrintStream(" mdg#l]7c,y)JiFr9");
        Node node0 = Node.newString("XB(C4GfkJF>@h#G`f/", 12, 2777);
        Node node1 = NodeUtil.newVarNode("XB(C4GfkJF>@h#G`f/", node0);
        node0.clonePropsFrom(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        System.setCurrentTimeMillis(45);
        String string0 = NodeUtil.getSourceName(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        boolean boolean1 = NodeUtil.isLhs(node0, node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test354503() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning(" mdg#l]7c,y)JiFr9", "_jDXW~o", 935, (String) null, (-2538));
        simpleErrorReporter0.error("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", "_jDXW~o", 935, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", (-632));
        MockPrintStream mockPrintStream0 = new MockPrintStream(" mdg#l]7c,y)JiFr9");
        Node node0 = Node.newString("XB(C4GfkJF>@h#G`f/", 12, 2777);
        Node node1 = NodeUtil.newVarNode("XB(C4GfkJF>@h#G`f/", node0);
        node0.clonePropsFrom(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        System.setCurrentTimeMillis(45);
        String string0 = NodeUtil.getSourceName(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node1);
        boolean boolean1 = NodeUtil.isLhs(node0, node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test355504() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(85);
        NodeUtil.arrayToString(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            nodeUtil_MayBeStringResultPredicate0.apply(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test356505() throws Throwable {
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        Node node0 = new Node(48);
        Node node1 = new Node(20, node0, 4095, 21);
        node0.setType(16);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test356506() throws Throwable {
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        Node node0 = new Node(48);
        Node node1 = new Node(20, node0, 4095, 21);
        node0.setType(16);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isObjectCallMethod(node1, "com.google.javascript.jscomp.NodeUtil$VarCollector");
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test357507() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test358508() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        node0.toStringTree();
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test358509() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        node0.toStringTree();
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        int int0 = NodeUtil.precedence(18);
        boolean boolean1 = NodeUtil.isAssociative(8);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test358510() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        node0.toStringTree();
        NodeUtil.isAssignmentOp(node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        int int0 = NodeUtil.precedence(18);
        boolean boolean1 = NodeUtil.isAssociative(8);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test359511() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = new Node(88);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test360512() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.opToStr(88);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = new Node(88, (-1738), 74);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test361513() throws Throwable {
        Node node0 = new Node(4532);
        String string0 = NodeUtil.opToStr(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test362514() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.isSimpleOperatorType(41);
        NodeUtil.isStrWhiteSpaceChar(41);
    }

    @Test(timeout = 4000)
    public void test363515() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test364516() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(22);
        Node node0 = Node.newNumber((double) 22, 22, 22);
        NodeUtil.mayEffectMutableState(node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test365517() throws Throwable {
        Node node0 = new Node(4275, 4275, 251);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(4275, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test365518() throws Throwable {
        Node node0 = new Node(4275, 4275, 251);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test365519() throws Throwable {
        Node node0 = new Node(4275, 4275, 251);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test366520() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        String string0 = NodeUtil.opToStr(9);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test366521() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        String string0 = NodeUtil.opToStr(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test367522() throws Throwable {
        Node node0 = new Node(86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("JhE", stack0, node0, 1, 33);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test368523() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(105, 22, 105);
        Node node1 = new Node(18, node0, 0, 41);
        HashSet<String> hashSet0 = new LinkedHashSet<String>(28);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test369524() throws Throwable {
        NodeUtil.isSimpleOperatorType(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test370525() throws Throwable {
        Node node0 = new Node(20);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test371526() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test372527() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test372528() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(119);
        String string0 = NodeUtil.opToStrNoFail(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test373529() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test374530() throws Throwable {
        Node node0 = Node.newString((int) (byte) 12, "javascript");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test375531() throws Throwable {
        Node node0 = Node.newString("");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test376532() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test377533() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test377534() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test378535() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.no.semi.for", (-14), (-14));
        NodeUtil.isStrWhiteSpaceChar(1);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        assertEquals("i.for", string0);
    }

    @Test(timeout = 4000)
    public void test378536() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.no.semi.for", (-14), (-14));
        NodeUtil.isStrWhiteSpaceChar(1);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test378537() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "msg.no.semi.for", (-14), (-14));
        NodeUtil.isStrWhiteSpaceChar(1);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        NodeUtil.getPrototypeClassName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test379538() throws Throwable {
        Node node0 = new Node(25, 25, 110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test380539() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test380540() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        boolean boolean0 = NodeUtil.isAssociative((-967));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test381541() throws Throwable {
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            NodeUtil.isHoistedFunctionDeclaration(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test382542() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        node1.setType(21);
        NodeUtil.mayEffectMutableState(node1);
        NodeUtil.getImpureBooleanValue(node0);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-3931));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-3931> (type -3931)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test383543() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test383544() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        boolean boolean1 = NodeUtil.isBooleanResult(node0);
        boolean boolean2 = NodeUtil.isCallOrNew(node0);
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test383545() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        boolean boolean1 = NodeUtil.isBooleanResult(node0);
        boolean boolean2 = NodeUtil.isCallOrNew(node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test384546() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(83);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 83: LP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test385547() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test386548() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test387549() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        int int0 = 81;
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 81: LC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test388550() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test389551() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test389552() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        assertEquals(37, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test389553() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        assertEquals(4095, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test389554() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test389555() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        Node node2 = new Node(29);
        AstParallelizer.createNewFileLevelAstParallelizer(node2);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("bJeXU/c");
        node0.children();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        Object object0 = new Object();
        boolean boolean1 = NodeUtil.valueCheck(node2, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test389556() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-675));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-675), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("bJeXU/c", stack0, node0, 37, 4095);
        Node node2 = new Node(29);
        AstParallelizer.createNewFileLevelAstParallelizer(node2);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("bJeXU/c");
        node0.children();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        Object object0 = new Object();
        boolean boolean1 = NodeUtil.valueCheck(node2, nodeUtil_BooleanResultPredicate0);
        boolean boolean2 = NodeUtil.evaluatesToLocalValue(node2, nodeUtil_BooleanResultPredicate0);
        assertFalse(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test390557() throws Throwable {
        Node node0 = new Node(93);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test391558() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test392559() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test393560() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node((-42), (-42), 1427);
        Stack<JSType> stack0 = new Stack<JSType>();
        NodeUtil.isGet(node0);
        Node node1 = new Node(14, node0, node0, node0, 8, 4);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.isObjectLitKey(node1, node0);
        nodeUtil_MayBeStringResultPredicate0.apply(node1);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test394561() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test395562() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test396563() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test397564() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN, 103, 103);
        NodeUtil.getImpureBooleanValue(node0);
        String string0 = NodeUtil.opToStr(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test398565() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test399566() throws Throwable {
        Node node0 = new Node((-7));
        Node node1 = new Node(19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test400567() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = Node.newNumber((-1018.037878460538));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node1 = Node.newString("eOyY@3Z", 43, (-931));
        Node node2 = new Node(21, node0, 38, 32);
        node1.getQualifiedName();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.has(node2, nodeUtil_MayBeStringResultPredicate0, nodeUtil_NumbericResultPredicate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test401568() throws Throwable {
        int int0 = 73;
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test402569() throws Throwable {
        NodeUtil.isSimpleOperatorType(73);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
    }

    @Test(timeout = 4000)
    public void test403570() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 98);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isForIn(node0);
        NodeUtil.isStrWhiteSpaceChar(13);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test403571() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 98);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isForIn(node0);
        NodeUtil.isStrWhiteSpaceChar(13);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test404572() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.getNumberValue(node1);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test404573() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.getNumberValue(node1);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test405574() throws Throwable {
        Node node0 = new Node(23);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(799);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test406575() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(13);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test407576() throws Throwable {
        Node.newString("LOR(#h5Ey");
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test408577() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node.newString("J#t", 10000, 10000);
        Node node0 = new Node(36, 24, 4);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETELEM 24
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test409578() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test410579() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeWHILE 113
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test411580() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 113: WHILE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test412581() throws Throwable {
        Node node0 = Node.newString("`)");
        node0.children();
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test413582() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test414583() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        boolean boolean1 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test414584() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        boolean boolean1 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test415585() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test416586() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test417587() throws Throwable {
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8/>`$NBl;y.");
        int int0 = 103;
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(103);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 103: DEC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test418588() throws Throwable {
        Node node0 = Node.newString(45, "");
        NodeUtil.mayBeString(node0);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test419589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test420590() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
        Node node1 = NodeUtil.newExpr(node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        googleCodingConvention0.extractClassNameIfProvide(node0, node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test420591() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
        Node node1 = NodeUtil.newExpr(node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        googleCodingConvention0.extractClassNameIfProvide(node0, node1);
        assertNotSame(node0, node1);
    }

    @Test(timeout = 4000)
    public void test421592() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test422593() throws Throwable {
        Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test423594() throws Throwable {
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test424595() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test425596() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test425597() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test426598() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        node0.siblings();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test427599() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test427600() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test428601() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+infinity");
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test429602() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test430603() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test431604() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = new Node(14, node0, node0, node0, 11, 12);
        NodeUtil.isBooleanResultHelper(node0);
        NodeUtil.isControlStructure(node1);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: NOT 26 of LT 11
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test432605() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("Infinity", 10000, 10000);
        Node node1 = NodeUtil.newVarNode("W_$&K:", node0);
        NodeUtil.isNameReferenced(node1, ";#}HaB6m>");
        Node node2 = Node.newNumber((double) 15);
        node2.children();
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test433606() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        compiler0.getWarnings();
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test433607() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        compiler0.getWarnings();
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test433608() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        compiler0.getWarnings();
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test434609() throws Throwable {
        Node node0 = new Node(51);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "G", node0, "\"");
        NodeUtil.isExprAssign(node1);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test434610() throws Throwable {
        Node node0 = new Node(51);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "G", node0, "\"");
        NodeUtil.isExprAssign(node1);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertEquals(0, node1.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test434611() throws Throwable {
        Node node0 = new Node(51);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "G", node0, "\"");
        NodeUtil.isExprAssign(node1);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test435612() throws Throwable {
        NodeUtil.opToStr(64);
        NodeUtil.isStrWhiteSpaceChar(64);
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test436613() throws Throwable {
        Node node0 = new Node(98, 98, 227);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test437614() throws Throwable {
        Compiler compiler0 = new Compiler();
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test438615() throws Throwable {
        Node.newString("`)");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "`)", 27, 1350);
        NodeUtil.isStrWhiteSpaceChar(49);
        Node node1 = Node.newNumber((double) 1);
        NodeUtil.mayBeString(node1);
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        NodeUtil.copyNameAnnotations(node1, node1);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 60: ENUM_ID
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test439616() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test440617() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(32);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSWITCH 110
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test441618() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "m&GU", ":BQ2Q8!NRn");
        Node node1 = new Node(26, node0, node0, node0, node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
        NodeUtil.copyNameAnnotations(node0, node0);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        node0.cloneNode();
        NodeUtil.isArrayLiteral(node0);
        NodeUtil.isGetOrSetKey(node1);
        node1.children();
        compilerOptions0.processObjectPropertyString = false;
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        Normalize.parseAndNormalizeTestCode(compiler0, "JSC_OPTIONAL_ARG_AT_END", "M!#~%V^E");
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        nodeUtil_MayBeStringResultPredicate0.apply(node1);
        node1.setIsSyntheticBlock(false);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.has(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MayBeStringResultPredicate0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test442619() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test442620() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test443621() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(110);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test443622() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(110);
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test444623() throws Throwable {
        Node node0 = Node.newString("NoObject");
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test445624() throws Throwable {
        Node node0 = new Node(2048, 2048, 2048);
        Node node1 = new Node(43, node0, node0);
        Node node2 = node1.cloneTree();
        NodeUtil.getNumberValue(node1);
        NodeUtil.getStringValue(node2);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test446625() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test447626() throws Throwable {
        Node node0 = new Node(58);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(49, node0, node0, 24, 44);
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test448627() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = NodeUtil.opToStr(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test449628() throws Throwable {
        NodeUtil.isSimpleOperatorType(50);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(1200);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 1200
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test450629() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.precedence(33);
        NodeUtil.getPrototypeClassName(node0);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertFalse(node0.isVarArgs());
    }

    @Test(timeout = 4000)
    public void test451630() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("&=");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test452631() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test453632() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(75);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test454633() throws Throwable {
        Node node0 = Node.newString("R", 64, (-703));
        Node node1 = new Node(39, node0, 565, 2);
        node1.getJsDocBuilderForNode();
        MockPrintStream mockPrintStream0 = new MockPrintStream("R");
        Node node2 = node1.clonePropsFrom(node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Integer integer0 = new Integer(1);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.arrayToString(node2);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Number node not created with Node.newNumber
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test455634() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test455635() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test456636() throws Throwable {
        NodeUtil.opToStr(62);
        // Undeclared exception!
        try {
            NodeUtil.getStringNumberValue((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test457637() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test458638() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test459639() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.warning("|@KCx3;f", "|@KCx3;f", 985, "|@KCx3;f", 985);
        Node node0 = new Node(25);
        Node node1 = new Node(27, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        String string0 = NodeUtil.getStringValue(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test460640() throws Throwable {
        Compiler compiler0 = new Compiler();
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test461641() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(47);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test461642() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(47);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test462643() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test463644() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        NodeUtil.isSimpleOperatorType(30);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test464645() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "prototype", 120, 120);
        NodeUtil.getNumberValue(node0);
        String string0 = NodeUtil.opToStr(111);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test465646() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        node0.cloneNode();
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test466647() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(117);
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test467648() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test468649() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        boolean boolean0 = NodeUtil.isLatin("^");
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 8;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        Node node0 = new Node(41);
        Node node1 = new Node(41, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test468650() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        boolean boolean0 = NodeUtil.isLatin("^");
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 8;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        Node node0 = new Node(41);
        Node node1 = new Node(41, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.valueCheck(node1, predicate0);
        boolean boolean2 = NodeUtil.isAssign(node1);
        assertFalse(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test468651() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        boolean boolean0 = NodeUtil.isLatin("^");
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 8;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        Node node0 = new Node(41);
        Node node1 = new Node(41, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.valueCheck(node1, predicate0);
        boolean boolean2 = NodeUtil.isAssign(node1);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test469652() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test470653() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test470654() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test471655() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test472656() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        NodeUtil.isGet(node0);
        // Undeclared exception!
        try {
            NodeUtil.newHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test473657() throws Throwable {
        Node node0 = new Node(121);
        Node node1 = new Node(109, 48, 12);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test473658() throws Throwable {
        Node node0 = new Node(121);
        Node node1 = new Node(109, 48, 12);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.isStrWhiteSpaceChar(5);
        boolean boolean2 = NodeUtil.isLabelName((Node) null);
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test473659() throws Throwable {
        Node node0 = new Node(121);
        Node node1 = new Node(109, 48, 12);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.isStrWhiteSpaceChar(5);
        boolean boolean2 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test474660() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        node0.getJsDocBuilderForNode();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSType> stack0 = new Stack<JSType>();
        NodeUtil.isGet(node0);
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test475661() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test476662() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test477663() throws Throwable {
        Node node0 = Node.newString(52, "size", 52, 52);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isCommutative((-847));
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test477664() throws Throwable {
        Node node0 = Node.newString(52, "size", 52, 52);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isCommutative((-847));
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test478665() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(115, (-214), (-214));
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test479666() throws Throwable {
        Node node0 = new Node(110);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // SWITCH does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test480667() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test480668() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test481669() throws Throwable {
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test482670() throws Throwable {
        Node node0 = new Node(86);
        FileSystemHandling.shouldAllThrowIOExceptions();
        NodeUtil.isSwitchCase(node0);
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test483671() throws Throwable {
        Node node0 = new Node(58);
        Node node1 = new Node(49, node0, node0, 24, 44);
        node0.getAncestor(0);
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test484672() throws Throwable {
        Node node0 = Node.newString("whW|ty[)!!l1n{#Hb");
        node0.setType(49);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isLatin("whW|ty[)!!l1n{#Hb");
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test484673() throws Throwable {
        Node node0 = Node.newString("whW|ty[)!!l1n{#Hb");
        node0.setType(49);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isLatin("whW|ty[)!!l1n{#Hb");
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test485674() throws Throwable {
        Node node0 = new Node(122);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test486675() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test486676() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test487677() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "colapseAnonymousFunctions", "colapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 33, 47);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETPROP 33
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test488678() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString(105, ".i", 105, 22);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = new Node(18, node0, 0, 41);
        node0.addChildrenToBack(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test488679() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString(105, ".i", 105, 22);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = new Node(18, node0, 0, 41);
        node0.addChildrenToBack(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        boolean boolean1 = NodeUtil.isWithinLoop(node1);
        boolean boolean2 = NodeUtil.isValidPropertyName(".i");
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test488680() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString(105, ".i", 105, 22);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = new Node(18, node0, 0, 41);
        node0.addChildrenToBack(node1);
        HashSet<String> hashSet0 = new HashSet<String>();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        boolean boolean1 = NodeUtil.isWithinLoop(node1);
        boolean boolean2 = NodeUtil.isValidPropertyName(".i");
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test489681() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 119: WITH
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test490682() throws Throwable {
        NodeUtil.isSimpleOperatorType(101);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        assertTrue(linkedHashSet0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test491683() throws Throwable {
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test492684() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.isSimpleOperatorType((-5084));
        byte[] byteArray0 = new byte[6];
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test493685() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        String string0 = NodeUtil.opToStrNoFail(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test494686() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test495687() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test496688() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapsAnonymousFunctions");
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test497689() throws Throwable {
        Node node0 = new Node(2048);
        Node node1 = new Node(43, node0, node0);
        TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node1);
        TernaryValue ternaryValue1 = NodeUtil.getPureBooleanValue(node0);
        assertFalse(ternaryValue1.equals((Object) ternaryValue0));
    }

    @Test(timeout = 4000)
    public void test498690() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.isStrWhiteSpaceChar(10);
    }

    @Test(timeout = 4000)
    public void test499691() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test500692() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test501693() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("&=");
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(98);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 98: HOOK
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test502694() throws Throwable {
        Node node0 = new Node(81);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLC
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test503695() throws Throwable {
        NodeUtil.opToStr(82);
        NodeUtil.isStrWhiteSpaceChar(1230);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-654));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-654> (type -654)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test504696() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-4));
        Node node0 = Node.newString(">>=", (int) (byte) 73, 77);
        NodeUtil.precedence(90);
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test505697() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test506698() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test507699() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString("`qV)3mI)EL3,iJSGR");
        Node node1 = NodeUtil.newVarNode("`qV)3mI)EL3,iJSGR", node0);
        node0.setType(46);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test507700() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString("`qV)3mI)EL3,iJSGR");
        Node node1 = NodeUtil.newVarNode("`qV)3mI)EL3,iJSGR", node0);
        node0.setType(46);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test507701() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString("`qV)3mI)EL3,iJSGR");
        Node node1 = NodeUtil.newVarNode("`qV)3mI)EL3,iJSGR", node0);
        node0.setType(46);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
        boolean boolean2 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test507702() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = Node.newString("`qV)3mI)EL3,iJSGR");
        Node node1 = NodeUtil.newVarNode("`qV)3mI)EL3,iJSGR", node0);
        node0.setType(46);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node1);
        boolean boolean2 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test508703() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
        Node node0 = new Node(16);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6=_{q/25uS$bs");
        NodeUtil.isLoopStructure(node0);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test508704() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
        Node node0 = new Node(16);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6=_{q/25uS$bs");
        NodeUtil.isLoopStructure(node0);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test509705() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test510706() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test511707() throws Throwable {
        Node node0 = new Node(109, 227, 2281);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getImpureBooleanValue(node1);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test511708() throws Throwable {
        Node node0 = new Node(109, 227, 2281);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getImpureBooleanValue(node1);
        assertEquals(2281, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test512709() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 98);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test512710() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 98);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test513711() throws Throwable {
        Node node0 = new Node(37);
        Node.newString(23, "C");
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test514712() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = Node.newString("_3jDXW~o", 26, 2);
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Node node2 = new Node(37, node1, node1, node1, node0, 1, 39);
        NodeUtil.evaluatesToLocalValue(node2, nodeUtil_NumbericResultPredicate0);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node2);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // CALL 1 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test515713() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4095);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test516714() throws Throwable {
        Node node0 = new Node((byte) 101);
        node0.toString(true, true, false);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            nodeUtil_MayBeStringResultPredicate1.apply(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test517715() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-654));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("0W@0(b2", 2386, (-654));
        node0.setType((-3106));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test517716() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-654));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("0W@0(b2", 2386, (-654));
        node0.setType((-3106));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = Node.newString(41, "0W@0(b2");
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node2.removeChildren();
        Node node3 = new Node(431, node2, node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node2);
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        boolean boolean1 = NodeUtil.isAssociative(42);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test517717() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-654));
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("0W@0(b2", 2386, (-654));
        node0.setType((-3106));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = Node.newString(41, "0W@0(b2");
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node2.removeChildren();
        Node node3 = new Node(431, node2, node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node2);
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        boolean boolean1 = NodeUtil.isAssociative(42);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test518718() throws Throwable {
        Node node0 = new Node(41);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        NodeUtil.getNumberValue(node1);
        NodeUtil.isNullOrUndefined(node0);
        node1.putIntProp(12, 124);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.getExceptionHandler(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
        }
    }

    @Test(timeout = 4000)
    public void test519719() throws Throwable {
        Node node0 = Node.newString(115, "{");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test520720() throws Throwable {
        Node node0 = Node.newString(119, "{");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test521721() throws Throwable {
        Node node0 = new Node(82, 82, 227);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRC 82
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test522722() throws Throwable {
        Node node0 = new Node(104);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDOT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test523723() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test523724() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("Infinity", string0);
    }

    @Test(timeout = 4000)
    public void test523725() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(97, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test523726() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(9, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test523727() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test523728() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", 9, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test524729() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.isSimpleOperatorType((-5024));
        NodeUtil.isSimpleOperatorType(54);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(54);
        NodeUtil.isExprAssign(node0);
        NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test525730() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        nodeUtil_MayBeStringResultPredicate0.equals("C)t1;}EBlGt");
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test526731() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test526732() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        Node node0 = Node.newString(95, "*=", 1799, 95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test527733() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        Node node0 = new Node(112, 1514, 8);
        boolean boolean0 = NodeUtil.isVar(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test527734() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        Node node0 = new Node(112, 1514, 8);
        boolean boolean0 = NodeUtil.isVar(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean2 = NodeUtil.isLabelName(node0);
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test527735() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        Node node0 = new Node(112, 1514, 8);
        boolean boolean0 = NodeUtil.isVar(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean2 = NodeUtil.isLabelName(node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test528736() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = new Node(31);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        NodeUtil.getNumberValue(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test529737() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(31);
        Node node1 = new Node(2011, node0, node0);
        NodeUtil.isStrWhiteSpaceChar(1);
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node1);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test530738() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test530739() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test531740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = Node.newString(105, ".i", 52, 52);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Double double0 = NodeUtil.getStringNumberValue(".i");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test531741() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = Node.newString(105, ".i", 52, 52);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Double double0 = NodeUtil.getStringNumberValue(".i");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test531742() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = Node.newString(105, ".i", 52, 52);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Double double0 = NodeUtil.getStringNumberValue(".i");
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node1 = Node.newString(24, ".i");
        node0.cloneNode();
        Node node2 = Node.newString(73, ".i");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test531743() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = Node.newString(105, ".i", 52, 52);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Double double0 = NodeUtil.getStringNumberValue(".i");
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node1 = Node.newString(24, ".i");
        node0.cloneNode();
        Node node2 = Node.newString(73, ".i");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node2);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test532744() throws Throwable {
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "prototype");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = Node.newString(27, "prototype");
        NodeUtil.mayBeString(node0);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 34: SETPROP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test533745() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test534746() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        hashSet1.add("collapseAnonymousFunctions");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, hashSet1);
        boolean boolean1 = NodeUtil.isGet(node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test534747() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        hashSet1.add("collapseAnonymousFunctions");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, hashSet1);
        boolean boolean1 = NodeUtil.isGet(node1);
        boolean boolean2 = NodeUtil.isForIn(node0);
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test535748() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        boolean boolean0 = NodeUtil.isSimpleOperatorType((-5024));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test535749() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        boolean boolean0 = NodeUtil.isSimpleOperatorType((-5024));
        Node node0 = Node.newString("AST not normalized.");
        NodeUtil.getImpureBooleanValue(node0);
        Node node1 = new Node(24, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        boolean boolean2 = NodeUtil.isAssign(node1);
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test535750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        boolean boolean0 = NodeUtil.isSimpleOperatorType((-5024));
        Node node0 = Node.newString("AST not normalized.");
        NodeUtil.getImpureBooleanValue(node0);
        Node node1 = new Node(24, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean1 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        boolean boolean2 = NodeUtil.isAssign(node1);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test536751() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test537752() throws Throwable {
        NodeUtil.isSimpleOperatorType(56);
        Node node0 = new Node(311, 1403, (-310));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test538753() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        assertEquals(105, node2.getType());
    }

    @Test(timeout = 4000)
    public void test538754() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
        boolean boolean1 = NodeUtil.containsFunction(node2);
        assertEquals(160, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test538755() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
        boolean boolean1 = NodeUtil.containsFunction(node2);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test538756() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
        boolean boolean1 = NodeUtil.containsFunction(node2);
        assertEquals(33, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test538757() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
        boolean boolean1 = NodeUtil.containsFunction(node2);
        assertEquals(3, node2.getChildCount());
    }

    @Test(timeout = 4000)
    public void test538758() throws Throwable {
        LinkedListMultimap<Node, Node> linkedListMultimap0 = LinkedListMultimap.create();
        List<Node> list0 = linkedListMultimap0.removeAll("_3jDXW~o");
        Vector<Node> vector0 = new Vector<Node>(list0);
        Node node0 = new Node((-33));
        linkedListMultimap0.clear();
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("PARAM", stack0, node0, 160, 33);
        NodeUtil.getInfoForNameNode(node0);
        node1.setJSDocInfo((JSDocInfo) null);
        Node node2 = NodeUtil.newFunctionNode("_3jDXW~o", list0, node1, 36, (-2));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
        boolean boolean1 = NodeUtil.containsFunction(node2);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test539759() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        HashSet<String> hashSet0 = new HashSet<String>();
        NodeUtil.isStrWhiteSpaceChar(65279);
    }

    @Test(timeout = 4000)
    public void test540760() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node node0 = Node.newString(35, "Infinity");
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test541761() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node0 = new Node(113);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected node type: WHILE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test542762() throws Throwable {
        Node node0 = new Node(102);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
        Node node1 = NodeUtil.newExpr(node0);
        NodeUtil.isExpressionNode(node1);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail((-3212));
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // -3212
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test543763() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("msg.no.paren.after.parms");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test543764() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("msg.no.paren.after.parms");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test543765() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("msg.no.paren.after.parms");
        boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test544766() throws Throwable {
        Node node0 = new Node(30, 61, 61);
        String string0 = NodeUtil.opToStr(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test545767() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = new Node(115, (-1211), 141);
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 104: DOT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test546768() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        Node node0 = new Node(11);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Doubl:Ae");
        node0.setCharno(3);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test546769() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        Node node0 = new Node(11);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Doubl:Ae");
        node0.setCharno(3);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Double double0 = NodeUtil.getStringNumberValue("-h;1>6rP~nlGh]j");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test546770() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        Node node0 = new Node(11);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Doubl:Ae");
        node0.setCharno(3);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Double double0 = NodeUtil.getStringNumberValue("-h;1>6rP~nlGh]j");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test547771() throws Throwable {
        Node node0 = new Node(110);
        Stack<Node> stack0 = new Stack<Node>();
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node1 = Node.newString(32, "I:");
        node0.cloneNode();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test548772() throws Throwable {
        Node node0 = new Node(178);
        Node node1 = Node.newString(32, "Error");
        node0.addChildrenToBack(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test548773() throws Throwable {
        Node node0 = new Node(178);
        Node node1 = Node.newString(32, "Error");
        node0.addChildrenToBack(node1);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test549774() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.runtimeError("n&aHA$T7Y;", "n&aHA$T7Y;", 2877, "`B`pHlJfyu%y1X5|j5", 3584);
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        simpleErrorReporter0.warning("2}#8b]#", "2}#8b]#", 2217, "mPj!<3", (-241));
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        Node node0 = new Node(2217);
        node0.getQualifiedName();
        Node node1 = new Node(86, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean1 = NodeUtil.isAssign(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test549775() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        simpleErrorReporter0.runtimeError("n&aHA$T7Y;", "n&aHA$T7Y;", 2877, "`B`pHlJfyu%y1X5|j5", 3584);
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        simpleErrorReporter0.warning("2}#8b]#", "2}#8b]#", 2217, "mPj!<3", (-241));
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
        Node node0 = new Node(2217);
        node0.getQualifiedName();
        Node node1 = new Node(86, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        NodeUtil.valueCheck(node1, nodeUtil_BooleanResultPredicate0);
        boolean boolean1 = NodeUtil.isAssign(node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test550776() throws Throwable {
        Node node0 = new Node(86);
        Stack<Node> stack0 = new Stack<Node>();
        // Undeclared exception!
        try {
            NodeUtil.mayBeString(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test551777() throws Throwable {
        Node node0 = new Node(2048, 2048, 2048);
        Node node1 = new Node(43, node0, node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test552778() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        NodeUtil.isVar(node0);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test553779() throws Throwable {
        Node node0 = new Node(49);
        NodeUtil.isFunctionObjectCallOrApply(node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTHROW
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test554780() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(5595);
        Integer integer0 = new Integer(5595);
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test555781() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        simpleErrorReporter0.warning("bQ#}dh^*iM9!.9Q", "bQ#}dh^*iM9!.9Q", 1544, "com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates", 1544);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        NodeUtil.isGet(node0);
        String string0 = NodeUtil.opToStrNoFail(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test555782() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        simpleErrorReporter0.warning("bQ#}dh^*iM9!.9Q", "bQ#}dh^*iM9!.9Q", 1544, "com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates", 1544);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        NodeUtil.isGet(node0);
        String string0 = NodeUtil.opToStrNoFail(87);
        Node node1 = new Node(110, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
        NodeUtil.isStrWhiteSpaceChar(1);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test555783() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        simpleErrorReporter0.warning("bQ#}dh^*iM9!.9Q", "bQ#}dh^*iM9!.9Q", 1544, "com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates", 1544);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        NodeUtil.isGet(node0);
        String string0 = NodeUtil.opToStrNoFail(87);
        Node node1 = new Node(110, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
        NodeUtil.isStrWhiteSpaceChar(1);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test556784() throws Throwable {
        NodeUtil.opToStr(85);
        // Undeclared exception!
        try {
            NodeUtil.getStringNumberValue((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test557785() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 56: CATCH_SCOPE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test558786() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test559787() throws Throwable {
        NodeUtil.isSimpleOperatorType(57);
        Node node0 = new Node(57, 57, 57);
        // Undeclared exception!
        try {
            NodeUtil.getAssignedValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test560788() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test561789() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test562790() throws Throwable {
        NodeUtil.isSimpleOperatorType(65);
        NodeUtil.isStrWhiteSpaceChar(65);
    }

    @Test(timeout = 4000)
    public void test563791() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = new Node(12);
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Number");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.getStringNumberValue("prototype");
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node1 = Node.newString(35, "prototype");
        Node node2 = new Node(16, node1);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test564792() throws Throwable {
        Node node0 = new Node(2048);
        Node node1 = new Node(43, node0, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test565793() throws Throwable {
        NodeUtil.opToStr(121);
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test566794() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test566795() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test566796() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.putIntProp(4, 84);
        boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = NodeUtil.canBeSideEffected(node0, set0);
        assertEquals(97, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test566797() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.putIntProp(4, 84);
        boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = NodeUtil.canBeSideEffected(node0, set0);
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test566798() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.putIntProp(4, 84);
        boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = NodeUtil.canBeSideEffected(node0, set0);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test566799() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        String string0 = NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.putIntProp(4, 84);
        boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = NodeUtil.canBeSideEffected(node0, set0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test567800() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test568801() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test569802() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test570803() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Vector<JSType> vector0 = new Vector<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.precedence(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=50> (type 50)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test571804() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test571805() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test572806() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(77);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test573807() throws Throwable {
        Node node0 = new Node(58);
        node0.getAncestor(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test574808() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Node node0 = new Node((-2075), 91, 91);
        Node node1 = new Node(91, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test575809() throws Throwable {
        Node node0 = new Node(91);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test576810() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test577811() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Stack<JSType> stack0 = new Stack<JSType>();
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test578812() throws Throwable {
        Node node0 = Node.newString(87, "<<=", 87, 61);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test579813() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(92, 92, 2024);
        NodeUtil.getOpFromAssignmentOp(node0);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test580814() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(153);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
        Node node0 = new Node(153, 153, 153);
        NodeUtil.isVar(node0);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
        NodeUtil.isLabelName(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLABEL_NAME 153
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test581815() throws Throwable {
        Node node0 = new Node(41, 49, 38);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test581816() throws Throwable {
        Node node0 = new Node(41, 49, 38);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test581817() throws Throwable {
        Node node0 = new Node(41, 49, 38);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test582818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("JSType$TypePair");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test583819() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("$V$/");
        boolean boolean0 = NodeUtil.isStatementParent(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test584820() throws Throwable {
        NodeUtil.opToStr(64);
        Node node0 = new Node(64);
        Node node1 = new Node(28, node0, 4, 3);
        node0.getQualifiedName();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test585821() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        String string0 = NodeUtil.opToStrNoFail(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test586822() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.isAssignmentOp(node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test587823() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar((-654));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString((-654), "+[k");
        Stack<Node> stack0 = new Stack<Node>();
        Object[] objectArray0 = new Object[8];
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = new Node(44, 13, 8);
        Node[] nodeArray0 = new Node[0];
        NodeUtil.newCallNode(node0, nodeArray0);
        NodeUtil.isAssignmentOp(node0);
        // Undeclared exception!
        try {
            NodeUtil.maybeAddFinally(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test588824() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test588825() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test589826() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, true);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test590827() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test591828() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 73: REF_MEMBER
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test592829() throws Throwable {
        NodeUtil.opToStr(75);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-93));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-93> (type -93)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test593830() throws Throwable {
        Node node0 = new Node(100);
        Node node1 = new Node((-2843), node0, 18, 38);
        node0.addChildrenToBack(node1);
        NodeUtil.mayBeString(node0);
        Node node2 = NodeUtil.getPrototypeClassName(node1);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test594831() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(29);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test594832() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(29);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        boolean boolean2 = NodeUtil.isLhs(node0, node0);
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test594833() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(29);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean1 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
        boolean boolean2 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test595834() throws Throwable {
        Node node0 = Node.newString("xH7vU");
        NodeUtil.mayEffectMutableState(node0);
        boolean boolean0 = NodeUtil.isCommutative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test596835() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(71);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test597836() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test598837() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(141);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test598838() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(141);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(141);
        Node node0 = Node.newString("^", 141, 141);
        node0.getQualifiedName();
        NodeUtil.isStrWhiteSpaceChar(8232);
        boolean boolean1 = NodeUtil.isFunctionDeclaration(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test599839() throws Throwable {
        int int0 = 78;
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test600840() throws Throwable {
        int int0 = 60;
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test601841() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test601842() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test602843() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 107: IMPORT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test603844() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        // Undeclared exception!
        try {
            NodeUtil.precedence(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=62> (type 62)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test604845() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.getPureBooleanValue(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test604846() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        NodeUtil.getPureBooleanValue(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test605847() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test605848() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test606849() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("Infinity", (-1874), (-3491));
        Node node1 = new Node(28, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test606850() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        Node node0 = Node.newString("Infinity", (-1874), (-3491));
        Node node1 = new Node(28, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test607851() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test608852() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(153);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(1542);
        Node node1 = new Node((-1399), node0, node0);
        NodeUtil.isStrWhiteSpaceChar(8233);
        NodeUtil.mayBeString(node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Node node2 = exploitAssigns0.optimizeSubtree(node1);
        NodeUtil.nodeTypeMayHaveSideEffects(node2);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test609853() throws Throwable {
        Node node0 = new Node(65);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGET_REF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test610854() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(25);
        Node node1 = new Node(27, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        String string0 = NodeUtil.getStringValue(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test611855() throws Throwable {
        NodeUtil.opToStr(74);
        // Undeclared exception!
        try {
            NodeUtil.precedence(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=74> (type 74)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test612856() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test613857() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "", (-135), (-135));
        NodeUtil.isReferenceName(node0);
        // Undeclared exception!
        try {
            Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test614858() throws Throwable {
        Node node0 = new Node(57);
        node0.toString();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        nodeUtil_MayBeStringResultPredicate0.apply(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_KEYS
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test615859() throws Throwable {
        Node.newString("LOR(#h5Ey");
        Node node0 = new Node(18, 9, 16);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        boolean boolean1 = NodeUtil.isCallOrNew(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test615860() throws Throwable {
        Node.newString("LOR(#h5Ey");
        Node node0 = new Node(18, 9, 16);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        boolean boolean1 = NodeUtil.isCallOrNew(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test616861() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test617862() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for thisfn (type 61)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test618863() throws Throwable {
        Node node0 = new Node(30);
        node0.addChildrenToBack(node0);
        NodeUtil.mayHaveSideEffects(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test619864() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Node node0 = Node.newString(78, ",2bJ[!5huC1HtVVq");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSEMI ,2bJ[!5huC1HtVVq
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test620865() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(78);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test621866() throws Throwable {
        Stack<Node> stack0 = new Stack<Node>();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "XM|L", 125, 125);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.isSimpleFunctionObjectCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.isSimpleOperatorType(51);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(108);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 108: IF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test622867() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=66> (type 66)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test623868() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
        String string0 = NodeUtil.opToStr(65);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test624869() throws Throwable {
        Node node0 = new Node(102);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
        NodeUtil.mayEffectMutableState(node0);
        Node node1 = Node.newNumber((double) 0, 46, 119);
        NodeUtil.getPureBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test625870() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEL_REF 67
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test626871() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test626872() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.isAssociative(23);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test626873() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.isAssociative(23);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test627874() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=58> (type 58)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test628875() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test629876() throws Throwable {
        NodeUtil.isAssociative(102);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.opToStrNoFail(91);
        NodeUtil.precedence(51);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-963));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-963> (type -963)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test630877() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        NodeUtil.opToStrNoFail(20);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test631878() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test632879() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Infinity");
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 141, (-2954));
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node1 = Node.newString("Infinity", 1431655764, 104);
        Node node2 = new Node(116);
        NodeUtil.getNumberValue(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        NodeUtil.isNullOrUndefined(node3);
        node2.putIntProp((-1640), (-622));
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        // Undeclared exception!
        try {
            peepholeRemoveDeadCode0.tryFoldWhile(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test633880() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        Node node0 = new Node(41);
        NodeUtil.getPureBooleanValue(node0);
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test634881() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        NodeUtil.precedence(122);
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        assertNotNull(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test635882() throws Throwable {
        Node node0 = new Node(51);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test636883() throws Throwable {
        int int0 = new Integer(77);
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test637884() throws Throwable {
        Node node0 = new Node((-7));
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$4", vector0, node0, 4, 3887);
        NodeUtil.getArgumentForFunction(node1, 13);
        assertEquals(3887, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test637885() throws Throwable {
        Node node0 = new Node((-7));
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$4", vector0, node0, 4, 3887);
        NodeUtil.getArgumentForFunction(node1, 13);
        assertEquals(4, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test637886() throws Throwable {
        Node node0 = new Node((-7));
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$4", vector0, node0, 4, 3887);
        NodeUtil.getArgumentForFunction(node1, 13);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test637887() throws Throwable {
        Node node0 = new Node((-7));
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$4", vector0, node0, 4, 3887);
        NodeUtil.getArgumentForFunction(node1, 13);
        NodeUtil.getPureBooleanValue(node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test638888() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        NodeUtil.getConditionExpression(node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test639889() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test640890() throws Throwable {
        Node node0 = new Node(62, 62, 62);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETURN_RESULT 62
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test641891() throws Throwable {
        int int0 = NodeUtil.precedence(52);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test642892() throws Throwable {
        Node node0 = new Node(37);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test643893() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 98);
        Node node1 = new Node(37, node0);
        NodeUtil.isSimpleOperatorType((-2358));
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.nodeTypeMayHaveSideEffects(node1);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected node type: CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test644894() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) (-119));
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test645895() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(103);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test646896() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test647897() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-h;1>6r;P~nlGh]j");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test647898() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-h;1>6r;P~nlGh]j");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test648899() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Stack<JSType> stack0 = new Stack<JSType>();
        jSTypeRegistry0.createParameters((List<JSType>) stack0);
        String string0 = ":BQ2Q8XNRn";
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":BQ2Q8XNRn");
        Node node0 = new Node(32, 2, 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test649900() throws Throwable {
        Node node0 = new Node(26);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test650901() throws Throwable {
        Node node0 = new Node(109);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.getImpureBooleanValue(node0);
        Node node1 = Node.newString(":K46 T)?", 2, 10);
        Node node2 = new Node(44, node0, node1);
        NodeUtil.getImpureBooleanValue(node2);
        NodeUtil.getImpureBooleanValue(node2);
        boolean boolean0 = NodeUtil.isNullOrUndefined(node2);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test651902() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(18);
        MockPrintStream mockPrintStream0 = new MockPrintStream(",obJ[!5huCN1HtV1q");
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test652903() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test652904() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test653905() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test654906() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test655907() throws Throwable {
        Node node0 = new Node(90);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        nodeUtil_MayBeStringResultPredicate0.equals((Object) null);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test656908() throws Throwable {
        NodeUtil.getStringNumberValue("NaN");
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        String string0 = NodeUtil.opToStr(71);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test657909() throws Throwable {
        Node node0 = new Node(43);
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(1192, node0, node0, 11, 97);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test657910() throws Throwable {
        Node node0 = new Node(43);
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(1192, node0, node0, 11, 97);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        boolean boolean1 = NodeUtil.isEmptyBlock(node1);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test658911() throws Throwable {
        Node node0 = new Node(89);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test659912() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(92, 92, 92);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test660913() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.parseAndNormalizeTestCode(compiler0, " (type ", " (type ");
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 72: ESCXMLTEXT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test661914() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ref_special (type 69)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test662915() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test663916() throws Throwable {
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        Node node0 = Node.newString(17, "Zyv");
        NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test664917() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        NodeUtil.isStrWhiteSpaceChar(2615);
        Object object0 = new Object();
        Node node0 = Node.newString(113, "com.google.javascript.jscomp.SuspiciousPropertiesCheck");
        node0.getJsDocBuilderForNode();
        NodeUtil.isFunctionObjectCall(node0);
        NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test665918() throws Throwable {
        Node node0 = new Node(37);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test665919() throws Throwable {
        Node node0 = new Node(37);
        NodeUtil.isExprAssign(node0);
        boolean boolean0 = NodeUtil.isCall(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        boolean boolean2 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test666920() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockPrintStream mockPrintStream0 = new MockPrintStream("collapseAnonymousFunctions");
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        NodeUtil.opToStr(50);
        Node.newString(39, "collapseAnonymousFunctions", (-3116), 44);
        Denormalize denormalize0 = new Denormalize(compiler0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        defaultPassConfig0.getTypedScopeCreator();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
        // Undeclared exception!
        try {
            nodeTraversal0.getScopeRoot();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeTraversal", e);
        }
    }

    @Test(timeout = 4000)
    public void test667921() throws Throwable {
        int int0 = 66;
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 66: SET_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test668922() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test669923() throws Throwable {
        Node node0 = new Node(96);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test670924() throws Throwable {
        Node node0 = new Node(96);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test671925() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test672926() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = new Node(12, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test673927() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.mayEffectMutableState(node0);
        TernaryValue ternaryValue0 = NodeUtil.getImpureBooleanValue(node0);
        TernaryValue ternaryValue1 = NodeUtil.isStrWhiteSpaceChar(21);
        assertFalse(ternaryValue1.equals((Object) ternaryValue0));
    }

    @Test(timeout = 4000)
    public void test674928() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test675929() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(92);
        Node node1 = new Node(48, node0);
        Node node2 = new Node(23, (-2012), 147);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test676930() throws Throwable {
        Node node0 = new Node(48);
        Node node1 = new Node(20, node0, 4095, 21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test676931() throws Throwable {
        Node node0 = new Node(48);
        Node node1 = new Node(20, node0, 4095, 21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        boolean boolean1 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test677932() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        Node node1 = new Node(118, node0, 40, 38);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.getStringValue(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test678933() throws Throwable {
        Node node0 = new Node(76, 76, 76);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate1 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_NAME 76
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test679934() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test680935() throws Throwable {
        Node node0 = new Node(113);
        NodeUtil.isAssignmentOp(node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node1 = new Node(84, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test681936() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test682937() throws Throwable {
        NodeUtil.opToStr(52);
        Node node0 = new Node(52);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test683938() throws Throwable {
        NodeUtil.opToStr(52);
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test684939() throws Throwable {
        Node node0 = new Node(58);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        NodeUtil.getPureBooleanValue(node0);
        Node node1 = new Node(49, node0, node0, 24, 44);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test685940() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = new Node((-16), (-16), 117);
        String string0 = "C)t1;}EBlGt";
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s7");
        Node node1 = new Node(10, 1062, 39);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test686941() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test687942() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        node0.setType(15);
        Node node1 = new Node(30, node0, node0);
        NodeUtil.constructorCallHasSideEffects(node1);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test688943() throws Throwable {
        Node node0 = new Node(75);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NAME
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test689944() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test690945() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 89);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test691946() throws Throwable {
        Node node0 = Node.newString(105, "<W&$", 105, (-1801614837));
        NodeUtil.isSwitchCase(node0);
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test692947() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        Node node1 = new Node(104, 98, (-6315));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test693948() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("U&=");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test694949() throws Throwable {
        Object object0 = new Object();
        Node node0 = new Node(96, 96, 96);
        NodeUtil.getOpFromAssignmentOp(node0);
        NodeUtil.copyNameAnnotations(node0, node0);
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        int int0 = new Integer(31);
        assertEquals(31, int0);
    }

    @Test(timeout = 4000)
    public void test695950() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        node0.setString("com.google.javascript.jscomp.Compiler$5");
        Integer integer0 = new Integer(101);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertEquals(97, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test695951() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        node0.setString("com.google.javascript.jscomp.Compiler$5");
        Integer integer0 = new Integer(101);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test695952() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        node0.setString("com.google.javascript.jscomp.Compiler$5");
        Integer integer0 = new Integer(101);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test695953() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        node0.setString("com.google.javascript.jscomp.Compiler$5");
        Integer integer0 = new Integer(101);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test695954() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        node0.setString("com.google.javascript.jscomp.Compiler$5");
        Integer integer0 = new Integer(101);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean1 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test696955() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Infinity", (-128), (-128));
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test697956() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        String string0 = NodeUtil.opToStr(78);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test698957() throws Throwable {
        Node node0 = new Node(86);
        Node node1 = new Node(44);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test699958() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean1 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test699959() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean1 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        boolean boolean2 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertFalse(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test700960() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        NodeUtil.mayEffectMutableState(node0);
        int int0 = new Integer(19);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test701961() throws Throwable {
        Node node0 = new Node(47);
        node0.addChildToFront(node0);
        NodeUtil.getPureBooleanValue(node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test702962() throws Throwable {
        Node node0 = new Node(30);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        boolean boolean0 = NodeUtil.isCallOrNew(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test703963() throws Throwable {
        Node node0 = Node.newString("`)");
        Node node1 = new Node(123, 29, 23);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test703964() throws Throwable {
        Node node0 = Node.newString("`)");
        Node node1 = new Node(123, 29, 23);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean2 = NodeUtil.isLabelName(node1);
        assertTrue(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test703965() throws Throwable {
        Node node0 = Node.newString("`)");
        Node node1 = new Node(123, 29, 23);
        boolean boolean0 = NodeUtil.isVar(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        NodeUtil.getPureBooleanValue(node0);
        boolean boolean2 = NodeUtil.isLabelName(node1);
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test704966() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((byte) 89);
        Node node1 = new Node(37, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test705967() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        NodeUtil.evaluatesToLocalValue(node0);
        NodeUtil.isImmutableValue(node0);
        String string0 = NodeUtil.opToStr(2);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test706968() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test706969() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test707970() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = new Node(101);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Integer integer0 = new Integer(1);
        nodeUtil_MayBeStringResultPredicate0.equals(integer0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test708971() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=71> (type 71)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test709972() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        node0.addChildToFront(node0);
        // Undeclared exception!
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test710973() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = new Node((byte) 69, 28, (byte) 0);
        NodeUtil.isVar(node0);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        assertNotNull(nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test710974() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        Node node0 = new Node((byte) 69, 28, (byte) 0);
        NodeUtil.isVar(node0);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_SPECIAL 28
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test711975() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(42, "javascript");
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        node0.copyInformationFromForTree(node1);
        NodeUtil.isValidDefineValue(node0, set0);
        // Undeclared exception!
        try {
            NodeUtil.getNearestFunctionName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test712976() throws Throwable {
        Node node0 = new Node(58);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(46);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_VALUES
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test713977() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        String string0 = NodeUtil.opToStr(115);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test714978() throws Throwable {
        Node node0 = Node.newString(16, "");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test715979() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test715980() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        boolean boolean1 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test716981() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(28);
        node0.hasSideEffects();
        NodeUtil.isPrototypePropertyDeclaration(node0);
        NodeUtil.isBooleanResultHelper(node0);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test717982() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = new Node(41, 13, (-389));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test718983() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(52);
        Node node0 = Node.newString(105, "Infinity", 52, 52);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean1 = NodeUtil.isCall(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test718984() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(52);
        Node node0 = Node.newString(105, "Infinity", 52, 52);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean1 = NodeUtil.isCall(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test719985() throws Throwable {
        Node node0 = new Node(66);
        Node node1 = node0.cloneTree();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSET_REF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test720986() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(66);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test721987() throws Throwable {
        Node node0 = new Node(57, 48, (-5385));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test722988() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = Node.newString(8, "|Ww<;");
        Node node2 = new Node(4095, node0, node0, node1, (-2564), (-3036));
        NodeUtil.isBooleanResultHelper(node0);
        NodeUtil.isControlStructure(node1);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test723989() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = new Node(31, 31, 31);
        NodeUtil.isVar(node0);
        node0.getAncestor(31);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test724990() throws Throwable {
        Node node0 = new Node(93);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3160));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test725991() throws Throwable {
        String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
        NodeUtil.isLatin("\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"_\n\rMethodOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0085\u0002\n\u0013UninterpretedOption\u0012;\n\u0004name\u0018\u0002 \u0003(\u000B2-.google.protobuf.UninterpretedOption.NamePart\u0012\u0018\n\u0010identifier_value\u0018\u0003 \u0001(\t\u0012\u001A\n\u0012positive_int_value\u0018\u0004 \u0001(\u0004\u0012\u001A\n\u0012negative_int_value\u0018\u0005 \u0001(\u0003\u0012\u0014\n\fdouble_value\u0018\u0006 \u0001(\u0001\u0012\u0014\n\fstring_value\u0018\u0007 \u0001(\f\u001A3\n\bNamePart\u0012\u0011\n");
        // Undeclared exception!
        try {
            NodeUtil.precedence((-2525));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-2525> (type -2525)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test726992() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.getPureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test727993() throws Throwable {
        Node node0 = new Node(11);
        NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test728994() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        Stack<Node> stack0 = new Stack<Node>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(22);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCOLON 99
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test729995() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = new Node(60);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test729996() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = new Node(60);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test730997() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test731998() throws Throwable {
        Node node0 = new Node(130);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test732999() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=72> (type 72)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7331000() throws Throwable {
        Node node0 = new Node(30, 30, 826);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7341001() throws Throwable {
        Node node0 = Node.newString(45, "");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7351002() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7361003() throws Throwable {
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = new Node(99);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7371004() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("%");
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "DZ.'$2MR.W", node0, "DZ.'$2MR.W");
        assertEquals(33, node1.getType());
    }

    @Test(timeout = 4000)
    public void test7371005() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("%");
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "DZ.'$2MR.W", node0, "DZ.'$2MR.W");
        NodeUtil.mayHaveSideEffects(node0);
        MockFile mockFile0 = new MockFile("J-xl:?f");
        Node node2 = Node.newString(90, "J-xl:?f", 12, (-1104));
        int int0 = NodeUtil.getOpFromAssignmentOp(node2);
        assertEquals(18, int0);
    }

    @Test(timeout = 4000)
    public void test7381006() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Set<String> set0 = compilerOptions0.aliasableStrings;
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test7391007() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(115);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeFOR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7401008() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = new Node(115);
        NodeUtil.mayEffectMutableState(node0);
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        assertFalse(simpleErrorReporter1.equals((Object) simpleErrorReporter0));
    }

    @Test(timeout = 4000)
    public void test7411009() throws Throwable {
        Node node0 = Node.newString(108, "{");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7421010() throws Throwable {
        Node node0 = Node.newString(73, "com.google.common.io.CharStreams");
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test7431011() throws Throwable {
        Node node0 = new Node(6);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node1 = Node.newNumber((double) 49);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7441012() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = Node.newString(77, "l()-_HM#1o_ag`");
        NodeUtil.getStringValue(node0);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 84;
        byteArray0[1] = (byte) 75;
        byteArray0[2] = (byte) (-117);
        byteArray0[3] = (byte) 105;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        nodeUtil_MatchDeclaration0.apply(node0);
        NodeUtil.isAssociative(1);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTRY l()-_HM#1o_ag`
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7451013() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(19, "&=");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7461014() throws Throwable {
        Node node0 = Node.newString(63, "rhino", 63, 63);
        node0.getAncestor(63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7471015() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7481016() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(19, "");
        NodeUtil.isNumericResultHelper(node0);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test7491017() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 33, 47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7501018() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(22);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Node node0 = Node.newString(22, "prototype");
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7501019() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(22);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Node node0 = Node.newString(22, "prototype");
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        boolean boolean1 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test7511020() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7521021() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        Node node1 = new Node(43, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7521022() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        Node node1 = new Node(43, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test7531023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node node1 = new Node(21, node0, node0, 17, 16);
        NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test7541024() throws Throwable {
        Compiler compiler0 = new Compiler();
        Locale locale0 = Locale.US;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(31, "OKB'Ej`z<");
        NodeUtil.isValidDefineValue(node0, set0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test7551025() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node((-1391));
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node2 = new Node(27, node0, node1, 1, 19);
        node1.getDirectives();
        NodeUtil.isValidDefineValue(node2, (Set<String>) null);
        NodeUtil.isControlStructure(node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // -1391
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test7561026() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        node0.setCharno(34);
        boolean boolean0 = NodeUtil.isLoopStructure(node1);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean1 = NodeUtil.isValidDefineValue(node1, set0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7561027() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "collapseAnonymousFunctions", "collapseAnonymousFunctions");
        Node node1 = new Node(34, node0, 125, 47);
        node0.setCharno(34);
        boolean boolean0 = NodeUtil.isLoopStructure(node1);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean1 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test7571028() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        node0.addChildrenToFront(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7581029() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        node0.addChildrenToFront(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
        }
    }

    @Test(timeout = 4000)
    public void test7591030() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=53> (type 53)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7601031() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("U&=");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7611032() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7621033() throws Throwable {
        Node node0 = Node.newString(33, ".i", 33, 3242);
        Node node1 = new Node(12, node0, 84, 33);
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        Locale locale0 = Locale.KOREA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        NodeUtil.canBeSideEffected(node1, set0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    }

    @Test(timeout = 4000)
    public void test7631034() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test7631035() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7641036() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 70: DEFAULTNAMESPACE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7651037() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7661038() throws Throwable {
        Node node0 = new Node(53);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLOCAL_LOAD
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7671039() throws Throwable {
        Node node0 = Node.newString(66, "size");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSET_REF size
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7681040() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(52);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Node node0 = Node.newString(105, ".i", 52, 52);
        Node node1 = new Node(1, node0, 1, 0);
        HashSet<String> hashSet0 = new HashSet<String>();
        HashSet<String> hashSet1 = new HashSet<String>();
        SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7691041() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(76);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=76> (type 76)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7701042() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(2319);
        Node node1 = new Node(56, node0);
        NodeUtil.isSimpleFunctionObjectCall(node1);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCATCH_SCOPE
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7711043() throws Throwable {
        int int0 = new Integer(68);
        // Undeclared exception!
        try {
            NodeUtil.precedence(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=68> (type 68)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7721044() throws Throwable {
        Node node0 = new Node(94);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test7731045() throws Throwable {
        Node node0 = new Node(94);
        node0.addChildrenToBack(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7741046() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("%");
        Vector<Node> vector0 = new Vector<Node>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Vector<JSType> vector1 = new Vector<JSType>();
        jSTypeRegistry0.createParameters((List<JSType>) vector1);
        node0.setType(101);
        NodeUtil.isStrWhiteSpaceChar(31);
        NodeUtil.isBooleanResultHelper(node0);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        // Undeclared exception!
        try {
            NodeUtil.getImpureBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7751047() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = node0.cloneTree();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
        NodeUtil.mayEffectMutableState(node1);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node1);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7751048() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = node0.cloneTree();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(11);
        NodeUtil.mayEffectMutableState(node1);
        NodeUtil.copyNameAnnotations(node0, node0);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node1);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test7761049() throws Throwable {
        Node node0 = Node.newString(">>>");
        Node node1 = NodeUtil.newVarNode("infinity", node0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        node0.setType(19);
        NodeUtil.mayBeString(node1);
        NodeUtil.isBooleanResultHelper(node0);
        // Undeclared exception!
        try {
            NodeUtil.precedence(3);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for leavewith (type 3)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7771050() throws Throwable {
        NodeUtil.isSimpleOperatorType(110);
        Locale locale0 = Locale.GERMAN;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(32, "\" is not a type.");
        NodeUtil.isValidDefineValue(node0, set0);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test7781051() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Stack<JSType> stack0 = new Stack<JSType>();
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 106: EXPORT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7791052() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7791053() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.isCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test7801054() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(42, "javascript");
        NodeUtil.isValidDefineValue(node0, set0);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected node type: THIS javascript
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7811055() throws Throwable {
        Node node0 = new Node(41, 121, 121);
        NodeUtil.getStringValue(node0);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7821056() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        int int0 = 57;
        NodeUtil.opToStr(57);
        // Undeclared exception!
        try {
            NodeUtil.getStringNumberValue((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test7831057() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.isStrWhiteSpaceChar(35);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7831058() throws Throwable {
        Node node0 = new Node(103);
        NodeUtil.getStringValue(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        NodeUtil.isStrWhiteSpaceChar(35);
        boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test7841059() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("externsValidation");
        Node node0 = new Node(119, (-1), 34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7851060() throws Throwable {
        Node.newString("-infinity");
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test7861061() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7861062() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7871063() throws Throwable {
        Node node0 = new Node(113, 15, 15);
        NodeUtil.getArrayElementStringValue(node0);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test7881064() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test7891065() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder", (-128), (-1286));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7891066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder", (-128), (-1286));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test7891067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.TypedScopeCreator$GlobalScopeBuilder", (-128), (-1286));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test7901068() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        node0.cloneTree();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-97));
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeBINDNAME 48
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7911069() throws Throwable {
        Node node0 = new Node(101, (-1959), (-1959));
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, (PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        printStreamErrorManager0.printSummary();
        Node node1 = compiler0.parseTestCode("goog.asserts.assertNumber");
        node0.addChildrenToBack(node1);
        NodeUtil.isExprAssign(node0);
        NodeUtil.isCall(node1);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // node is not a child
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test7921070() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7931071() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        Node node1 = Node.newString(46, "NAME, LP, or BLOCK node expected; found:", 6, 36);
        node1.setCharno(14);
        NodeUtil.isLoopStructure(node1);
        Locale locale0 = Locale.JAPANESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node1, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7941072() throws Throwable {
        Node node0 = new Node(129);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // EXPR_VOID does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7951073() throws Throwable {
        Node node0 = new Node(44);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate1.apply(node0);
        boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test7951074() throws Throwable {
        Node node0 = new Node(44);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate1 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = nodeUtil_MayBeStringResultPredicate1.apply(node0);
        boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test7961075() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Node node0 = Node.newString(15, "bC*M0:a:S");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test7971076() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        Node node1 = Node.newString(46, "NAME, LP, or BLOCK node expected; found:", 6, 36);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7981077() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.isLoopStructure(node0);
        NodeUtil.arrayToString(node0);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        // Undeclared exception!
        try {
            NodeUtil.isConstantByConvention(defaultCodingConvention0, node0, node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // DO 114 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test7991078() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8001079() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test8011080() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8021081() throws Throwable {
        Node node0 = new Node(71);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLATTR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8031082() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8041083() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8041084() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test8051085() throws Throwable {
        Node node0 = Node.newString(63, ".i", 63, 63);
        NodeUtil.isLiteralValue(node0, false);
        NodeUtil.getNumberValue(node0);
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test8061086() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test8071087() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Locale locale0 = Locale.JAPANESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(114, "NaN");
        Node node1 = new Node(41, node0, node0);
        NodeUtil.isValidDefineValue(node1, set0);
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test8081088() throws Throwable {
        Node node0 = new Node(55, 55, 4156);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETVAR 55
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8091089() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(112, 113, 92);
        node0.getJsDocBuilderForNode();
        NodeUtil.mayBeStringHelper(node0);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.precedence((-1));
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for error (type -1)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8101090() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Locale locale0 = new Locale("dfj;ad");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(28, "dfj;ad");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8111091() throws Throwable {
        NodeUtil.opToStr(61);
        Node node0 = new Node(61);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node.newString((-3), ",obJ[!5huCN1HtV1q");
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8121092() throws Throwable {
        Node.newString("y5U+6^", (-235), 51);
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8131093() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Node node0 = new Node(63, 63, 63);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8141094() throws Throwable {
        Node node0 = new Node(114);
        NodeUtil.getConditionExpression(node0);
        // Undeclared exception!
        try {
            NodeUtil.getNumberValue((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8151095() throws Throwable {
        Node node0 = new Node(113, 15, 15);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8151096() throws Throwable {
        Node node0 = new Node(113, 15, 15);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        boolean boolean1 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test8161097() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setvar (type 55)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8171098() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$78", (-14), (-3659));
        NodeUtil.isStrWhiteSpaceChar(160);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        assertEquals(".javascript.jscomp.DefaultPassConfig$78", string0);
    }

    @Test(timeout = 4000)
    public void test8171099() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$78", (-14), (-3659));
        NodeUtil.isStrWhiteSpaceChar(160);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test8171100() throws Throwable {
        Stack<JSType> stack0 = new Stack<JSType>();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.DefaultPassConfig$78", (-14), (-3659));
        NodeUtil.isStrWhiteSpaceChar(160);
        String string0 = NodeUtil.getPrototypePropertyName(node0);
        NodeUtil.getPrototypeClassName(node0);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test8181101() throws Throwable {
        Node node0 = new Node(120, 103, 103);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        boolean boolean2 = NodeUtil.isImmutableValue(node0);
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test8181102() throws Throwable {
        Node node0 = new Node(120, 103, 103);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        boolean boolean2 = NodeUtil.isImmutableValue(node0);
        boolean boolean3 = NodeUtil.isControlStructure(node0);
        assertFalse(boolean3 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8181103() throws Throwable {
        Node node0 = new Node(120, 103, 103);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        boolean boolean1 = NodeUtil.isLoopStructure(node0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        boolean boolean2 = NodeUtil.isImmutableValue(node0);
        boolean boolean3 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean3);
    }

    @Test(timeout = 4000)
    public void test8191104() throws Throwable {
        Node node0 = new Node(124, 124, 124);
        NodeUtil.mayEffectMutableState(node0);
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test8201105() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        Node node0 = new Node(79, 105, (byte) 12);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLB 105
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8211106() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test8221107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Stack<JSType> stack0 = new Stack<JSType>();
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Locale locale0 = new Locale("2V(!oO$q%/kRaI}SRV%");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Node node0 = Node.newString(14, "2V(!oO$q%/kRaI}SRV%");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8231108() throws Throwable {
        NodeUtil.opToStr(67);
        Node node0 = new Node(67);
        Node.newString((-3), ",obJ[!5huCN1HtV1q");
        NodeUtil.isArrayLiteral(node0);
        NodeUtil.isControlStructure(node0);
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test8241109() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.getArrayElementStringValue(node0);
        NodeUtil.canBeSideEffected(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test8251110() throws Throwable {
        Node node0 = new Node(94);
        Node node1 = Node.newNumber((double) 94, 12, 5);
        node0.setWasEmptyNode(false);
        NodeUtil.getNumberValue(node1);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(33);
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8251111() throws Throwable {
        Node node0 = new Node(94);
        Node node1 = Node.newNumber((double) 94, 12, 5);
        node0.setWasEmptyNode(false);
        NodeUtil.getNumberValue(node1);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(33);
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test8261112() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test8271113() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8281114() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        Node node0 = Node.newString("msg.bad.ctor.return", 63, 63);
        boolean boolean1 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8281115() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        Node node0 = Node.newString("msg.bad.ctor.return", 63, 63);
        boolean boolean1 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test8291116() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.isLhs((Node) null, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8301117() throws Throwable {
        Node node0 = Node.newString(86, "rhino");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8311118() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0, "TightenTypes pass appears to be stuck in an infinite loop.");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8311119() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0, "TightenTypes pass appears to be stuck in an infinite loop.");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test8311120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("externsValidation");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "NaN", node0, "TightenTypes pass appears to be stuck in an infinite loop.");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
        assertEquals(1, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test8321121() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 58, 58);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertEquals(58, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test8321122() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 58, 58);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8321123() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 58, 58);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        assertEquals(58, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test8331124() throws Throwable {
        Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8331125() throws Throwable {
        Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8331126() throws Throwable {
        Node node0 = Node.newString(35, "sK^dW<.:bT!Itx]ey");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        boolean boolean1 = NodeUtil.isGet(node0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test8341127() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(73, 73, 5712);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1727);
        NodeUtil.mayEffectMutableState(node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_MEMBER 73
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8351128() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        node0.getJsDocBuilderForNode();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8361129() throws Throwable {
        Node node0 = Node.newString(63, ".i", 63, 63);
        NodeUtil.mayHaveSideEffects(node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            SourceMap.DetailLevel.valueOf(".i");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // No enum constant com.google.javascript.jscomp.SourceMap.DetailLevel..i
            //
            verifyException("java.lang.Enum", e);
        }
    }

    @Test(timeout = 4000)
    public void test8371130() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8381131() throws Throwable {
        Node node0 = Node.newString(108, "{");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8391132() throws Throwable {
        Node node0 = Node.newString(78, ".i", 78, 78);
        NodeUtil.isLiteralValue(node0, false);
        NodeUtil.mayEffectMutableState(node0);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test8401133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("com.google.javascript.jscomp.rlobalNamespa}e", "com.google.javascript.jscomp.rlobalNamespa}e");
        Node node0 = Node.newString(18, "com.google.javascript.jscomp.rlobalNamespa}e");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8411134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node.newString(35, "Infinity");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-3), 40);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8411135() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("Infinity", "Infinity");
        Node.newString(35, "Infinity");
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", (-3), 40);
        NodeUtil.getImpureBooleanValue(node0);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test8421136() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        Node node1 = new Node(97, node0, node0);
        NodeUtil.getNumberValue(node1);
        NodeUtil.getAssignedValue(node0);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test8421137() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        Node node1 = new Node(97, node0, node0);
        NodeUtil.getNumberValue(node1);
        NodeUtil.getAssignedValue(node0);
        assertEquals(97, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test8421138() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        Node node1 = new Node(97, node0, node0);
        NodeUtil.getNumberValue(node1);
        NodeUtil.getAssignedValue(node0);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test8431139() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8431140() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        Node node1 = new Node(110);
        boolean boolean1 = NodeUtil.isControlStructureCodeBlock(node1, (Node) null);
        boolean boolean2 = NodeUtil.isValidPropertyName("!|q");
        assertTrue(boolean2 == boolean1);
    }

    @Test(timeout = 4000)
    public void test8431141() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        Node node1 = new Node(110);
        boolean boolean1 = NodeUtil.isControlStructureCodeBlock(node1, (Node) null);
        boolean boolean2 = NodeUtil.isValidPropertyName("!|q");
        assertFalse(boolean2);
    }

    @Test(timeout = 4000)
    public void test8441142() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test8441143() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        assertEquals(97, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test8441144() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test8441145() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "QQG", 4, 97);
        Node node1 = new Node(84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8451146() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.mayHaveSideEffects(node0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(1.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test8461147() throws Throwable {
        Node node0 = new Node(2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node2 = new Node(47, node1);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node2);
        assertFalse(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8461148() throws Throwable {
        Node node0 = new Node(2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        Node node2 = new Node(47, node1);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
        boolean boolean1 = NodeUtil.mayEffectMutableState(node2);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test8471149() throws Throwable {
        Node node0 = new Node(59, 59, 59);
        Node node1 = new Node(28, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8481150() throws Throwable {
        Node node0 = Node.newString(108, "{");
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test8491151() throws Throwable {
        Node node0 = new Node(105);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 4636, (-4609));
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(Double.POSITIVE_INFINITY, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test8491152() throws Throwable {
        Node node0 = new Node(105);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 4636, (-4609));
        Double double0 = NodeUtil.getNumberValue(node1);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test8491153() throws Throwable {
        Node node0 = new Node(105);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 4636, (-4609));
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test8501154() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8511155() throws Throwable {
        Node node0 = new Node(106, 106, 98);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeEXPORT 106
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8521156() throws Throwable {
        Node node0 = Node.newString("LOR(#h5Ey");
        Node node1 = new Node(18, 9, 16);
        Node node2 = new Node(112, node1, node1, node0, 16, 32);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        node2.getDirectives();
        boolean boolean1 = NodeUtil.isValidDefineValue(node2, (Set<String>) null);
        assertFalse(boolean1);
    }

    @Test(timeout = 4000)
    public void test8521157() throws Throwable {
        Node node0 = Node.newString("LOR(#h5Ey");
        Node node1 = new Node(18, 9, 16);
        Node node2 = new Node(112, node1, node1, node0, 16, 32);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        node2.getDirectives();
        boolean boolean1 = NodeUtil.isValidDefineValue(node2, (Set<String>) null);
        boolean boolean2 = NodeUtil.isControlStructure(node2);
        assertFalse(boolean2 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8521158() throws Throwable {
        Node node0 = Node.newString("LOR(#h5Ey");
        Node node1 = new Node(18, 9, 16);
        Node node2 = new Node(112, node1, node1, node0, 16, 32);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        node2.getDirectives();
        boolean boolean1 = NodeUtil.isValidDefineValue(node2, (Set<String>) null);
        boolean boolean2 = NodeUtil.isControlStructure(node2);
        assertTrue(boolean2);
    }

    @Test(timeout = 4000)
    public void test8531159() throws Throwable {
        Node node0 = Node.newString(29, ".", 29, 29);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8541160() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(5747, 5747, 5747);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isCommutative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8551161() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8561162() throws Throwable {
        NodeUtil.isAssociative(100);
        Node node0 = null;
        // Undeclared exception!
        try {
            NodeUtil.isVarDeclaration((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8571163() throws Throwable {
        Node node0 = Node.newString(25, "");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8581164() throws Throwable {
        Node node0 = Node.newString(30, ":i#|cq/QI3&");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8591165() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8601166() throws Throwable {
        Compiler compiler0 = new Compiler();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "<<=", "Serializing to a ByteString threw an IOException (should never happen).");
        Node node1 = new Node(82, node0, 16, 98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8611167() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        Node node0 = Node.newString(23, "externsValidation");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8621168() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(126, 126, (-2447));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8631169() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8641170() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_CALL 68
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8651171() throws Throwable {
        Node node0 = new Node(36);
        Node node1 = NodeUtil.newExpr(node0);
        node0.addChildrenToBack(node1);
        NodeUtil.mayHaveSideEffects(node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeEXPR_RESULT
            //  parent:SETELEM
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8661172() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        node0.setWasEmptyNode(true);
        // Undeclared exception!
        try {
            NodeUtil.getNumberValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8671173() throws Throwable {
        Node node0 = Node.newString(9, "QQG");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, linkedHashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8681174() throws Throwable {
        Node node0 = Node.newString(13, "8@Y^(!&$9w{4x2SN<Q");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8691175() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(10);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_NEXT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8701176() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        NodeUtil.isBooleanResultHelper(node0);
        Set<String> set0 = node0.getDirectives();
        assertNull(set0);
    }

    @Test(timeout = 4000)
    public void test8711177() throws Throwable {
        Node node0 = new Node(72, 72, 121);
        Node node1 = new Node(121, node0, 18, 38);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLTEXT 72
            //  parent:FINALLY 18
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test8721178() throws Throwable {
        Node node0 = Node.newString(9, "QQG");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node1 = Node.newNumber((double) 18, 2, (-1341));
        node0.addChildToFront(node1);
        linkedHashSet0.add("R");
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test8731179() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        Node node1 = new Node(118, node0, 40, 38);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        node0.addSuppression("JSC_IFACE_INITIALIZER_NOT_IFACE");
        NodeUtil.getStringValue(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertFalse(jSDocInfo0.isNoShadow());
    }

    @Test(timeout = 4000)
    public void test8741180() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = Node.newString(29, "NH2Z\"RV4EiC)Oj`+r");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node1, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }
}
