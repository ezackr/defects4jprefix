/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:29:55 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlStructureCheck;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.ObjectPropertyStringPreprocess;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.protobuf.ByteString;
import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("w");
        // Undeclared exception!
        try {
            compiler0.toSource(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.disableThreads();
        String string0 = compiler0.toSource();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.disableThreads();
        String string0 = compiler0.toSource();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.disableThreads();
        String string0 = compiler0.toSource();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("P|-mQn~zP");
        // Undeclared exception!
        try {
            compiler0.toSourceArray(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        Level level0 = Level.FINEST;
        Compiler.setLoggingLevel(level0);
        assertEquals("sun.util.logging.resources.logging", level0.getResourceBundleName());
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test00913() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Compiler$5", "com.google.javascript.jscomp.Compiler$5");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test00914() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Compiler$5", "com.google.javascript.jscomp.Compiler$5");
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test01116() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        // Undeclared exception!
        try {
            compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.JsAst", e);
        }
    }

    @Test(timeout = 4000)
    public void test01217() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        assertNull(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test01318() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.aggressiveVarCheck = checkLevel0;
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test01319() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.aggressiveVarCheck = checkLevel0;
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01320() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.aggressiveVarCheck = checkLevel0;
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.check();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01421() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test01522() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01623() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test01825() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
        assertNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test01926() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D_plicate extern input: {0}", "");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        // Undeclared exception!
        try {
            compiler0.areNodesEqualForInlining(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02027() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode("{XmA>UTxI~!a");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02128() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test02229() throws Throwable {
        Callable<ControlStructureCheck> callable0 = (Callable<ControlStructureCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        ControlStructureCheck controlStructureCheck0 = Compiler.runCallableWithLargeStack(callable0);
        assertNull(controlStructureCheck0);
    }

    @Test(timeout = 4000)
    public void test02330() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.languageMode();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02431() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02532() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02633() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test02734() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test02835() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parse();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02936() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test03037() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test03138() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test03239() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03340() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test03441() throws Throwable {
        ByteString.Output byteString_Output0 = ByteString.newOutput();
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test03542() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
    }

    @Test(timeout = 4000)
    public void test03643() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
    }

    @Test(timeout = 4000)
    public void test03744() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("j-{!Z]U", "M76:~2?=<<_L");
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test03845() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getMessages();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test03946() throws Throwable {
        MockFile mockFile0 = new MockFile("1f :5WD-yg@*Yk8");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test04047() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test04249() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04350() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04451() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04552() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*X['=/<RJ3U&");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("*X['=/<RJ3U&");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertEquals(3, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("21e).<KAs~&G");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.parseTestCode("1=J{lU?AWe");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test04856() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        // Undeclared exception!
        try {
            compiler0.initModules(linkedList0, (List<JSModule>) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test05058() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        MockFile mockFile0 = new MockFile("o#xrh\"AVV7Z((h~", "");
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        JSModule[] jSModuleArray0 = new JSModule[1];
        JSModule jSModule0 = new JSModule("");
        jSModuleArray0[0] = jSModule0;
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05059() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        MockFile mockFile0 = new MockFile("o#xrh\"AVV7Z((h~", "");
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        JSModule[] jSModuleArray0 = new JSModule[1];
        JSModule jSModule0 = new JSModule("");
        jSModuleArray0[0] = jSModule0;
        compiler0.init(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        Compiler compiler0 = new Compiler();
        Charset charset0 = Charset.defaultCharset();
        MockFile mockFile0 = new MockFile("2QRDd3AZh 5_", "2QRDd3AZh 5_");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile1 = JSSourceFile.fromCode("getters are not supported in Internet Explorer", (String) null);
        compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile1, jSSourceFile1, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test05261() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.parseInputs();
        LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();
        // Undeclared exception!
        try {
            compiler0.compileModules(linkedList0, linkedList1, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test05362() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallable((Callable<ObjectPropertyStringPreprocess>) null, false, true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test05463() throws Throwable {
        Callable<ObjectPropertyStringPreprocess> callable0 = (Callable<ObjectPropertyStringPreprocess>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        ObjectPropertyStringPreprocess objectPropertyStringPreprocess0 = Compiler.runCallable(callable0, false, true);
        assertNull(objectPropertyStringPreprocess0);
    }

    @Test(timeout = 4000)
    public void test05564() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setOutputCharset("const");
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.disableThreads();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // org.evosuite.runtime.mock.java.lang.MockThrowable: java.nio.charset.UnsupportedCharsetException: const
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test05665() throws Throwable {
        Compiler compiler0 = new Compiler();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
        compiler0.setPassConfig(defaultPassConfig0);
    }

    @Test(timeout = 4000)
    public void test05766() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test05867() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameAnonymousFunctionsOnly = true;
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.check();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05868() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameAnonymousFunctionsOnly = true;
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.check();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test05969() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.optimize();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test06070() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.STRIP;
        compilerOptions0.setTweakProcessing(compilerOptions_TweakProcessing0);
        // Undeclared exception!
        try {
            compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNameSuffixes);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06272() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        compiler0.startPass(",");
        // Undeclared exception!
        try {
            compiler0.startPass((String) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06373() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06474() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        Node node0 = compiler0.parseTestCode("_Pn<~Xsv2m");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test06475() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        Node node0 = compiler0.parseTestCode("_Pn<~Xsv2m");
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test06576() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("*X['=/<RJ3U&");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.removeInput("*X['=/<RJ3U&");
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06677() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("java.lang.Character");
        compiler0.removeInput("JSCompiler_ObjectPropertyString");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test06678() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("java.lang.Character");
        compiler0.removeInput("JSCompiler_ObjectPropertyString");
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06779() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("7Ty@e>", "3Pg,je'&Lt-Q{<|+Uu6");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.removeInput("7Ty@e>");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06880() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/5}[R7#-05}[R7#-");
        // Undeclared exception!
        try {
            compiler0.newExternInput("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/5}[R7#-05}[R7#-");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test06981() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("2Q4=AZh 5", "2Q4=AZh 5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.newExternInput("2Q4=AZh 5");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Conflicting externs name: 2Q4=AZh 5
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test07082() throws Throwable {
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("]", sourceFile_Generator0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack1 = new Stack<JSSourceFile>();
        compiler0.compileModules(stack1, stack0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name ]
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test07183() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("2QR3AZh 5", "2QR3AZh 5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.replaceIncrementalSourceAst(jsAst0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test07284() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("2QR3AZh 5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07285() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("2QR3AZh 5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07286() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("2QR3AZh 5");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07387() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test07388() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test07389() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.optimize();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07390() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.optimize();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test07491() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertNotNull(errorManager0);
    }

    @Test(timeout = 4000)
    public void test07492() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        assertNotNull(reverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test07493() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07594() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07595() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        assertNotNull(typeValidator0);
    }

    @Test(timeout = 4000)
    public void test07696() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D_plicate extern input: {0}", "");
        File file0 = MockFile.createTempFile("M}=!+yt[D(9F", "isPrototypeOf");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, (Charset) null);
        compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test07697() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D_plicate extern input: {0}", "");
        File file0 = MockFile.createTempFile("M}=!+yt[D(9F", "isPrototypeOf");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, (Charset) null);
        compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test07698() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("D_plicate extern input: {0}", "");
        File file0 = MockFile.createTempFile("M}=!+yt[D(9F", "isPrototypeOf");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, (Charset) null);
        compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test07799() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("-");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.manageClosureDependencies = true;
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test077100() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("-");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.manageClosureDependencies = true;
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test077101() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("-");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.manageClosureDependencies = true;
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test077102() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("-");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.manageClosureDependencies = true;
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test078103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("-");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        linkedList0.add(jSModule0);
        compilerOptions0.manageClosureDependencies = true;
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.parseInputs();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test079104() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSModule jSModule0 = new JSModule("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/M}=!+yt[D(9F0isPrototypeOf");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/M}=!+yt[D(9F0isPrototypeOf", (Charset) null);
        jSModule0.add(jSSourceFile0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.parseInputs();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test079105() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSModule jSModule0 = new JSModule("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/M}=!+yt[D(9F0isPrototypeOf");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/M}=!+yt[D(9F0isPrototypeOf", (Charset) null);
        jSModule0.add(jSSourceFile0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.parseInputs();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test080106() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameReferenceReportPath = "";
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test080107() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameReferenceReportPath = "";
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test080108() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameReferenceReportPath = "";
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test080109() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameReferenceReportPath = "";
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test081110() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.parseTestCode("%num%");
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test082111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.disableThreads();
        compiler0.toSource();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test083112() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.disableThreads();
        String string0 = compiler0.toSource();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test083113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.disableThreads();
        String string0 = compiler0.toSource();
        assertEquals("'use strict';", string0);
    }

    @Test(timeout = 4000)
    public void test084114() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("ALL NAMES<ul>\n");
        compiler_CodeBuilder1.append("ALL NAMES<ul>\n");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("ALL NAMES<ul>\n");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test085115() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("X");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test086116() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append(".~*C |o");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("wf");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test087117() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test087118() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.initOptions(compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088119() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088120() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test088121() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test089122() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test089123() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test089124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test090125() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test090126() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test090127() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091128() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test091129() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test091130() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test091131() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test092132() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        String[] stringArray0 = new String[2];
        JSError jSError0 = JSError.make((String) null, 16, 1, compilerOptions0.checkMethods, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        assertEquals(16, jSError0.lineNumber);
    }

    @Test(timeout = 4000)
    public void test093133() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("7", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // 7
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test094134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("const");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 50);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test094135() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("const");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 50);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test095136() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5}[R7#-");
        CompilerOptions compilerOptions0 = compiler0.options;
        // Undeclared exception!
        try {
            compiler0.compile((JSSourceFile) null, (JSSourceFile) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.JsAst", e);
        }
    }

    @Test(timeout = 4000)
    public void test096137() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("=jPFomKG-;ck=", (-2116805308));
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test097138() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("bad right operand to bitwise operator");
        compiler0.getSourceRegion("bad right operand to bitwise operator", 27);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test098139() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("F-O");
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test099140() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("INSTANCE", "INSTANCE");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test099141() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("INSTANCE", "INSTANCE");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test099142() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("INSTANCE", "INSTANCE");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test099143() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("INSTANCE", "INSTANCE");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test100144() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion((JSModule) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test101145() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("F-O");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion(jSModule0);
        assertEquals((-1), jSModule0.getDepth());
    }

    @Test(timeout = 4000)
    public void test101146() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("F-O");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion(jSModule0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test101147() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule("F-O");
        linkedList0.addFirst(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compileModules(stack0, linkedList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion(jSModule0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test102148() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test103149() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test103150() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test103151() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> RETURN [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test103152() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        String string0 = compiler0.getAstDotGraph();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test104153() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("inline_");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(hashMap0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test105154() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("bad right opeHandto bitwise operator");
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(hashMap0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }
}
