/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:26:59 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.TypeCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class LightweightMessageFormatter_ESTest extends LightweightMessageFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion(1100, 1100, ":1100: ERROR - @define tag only permits literal types\n");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertEquals("  1100| :1100: ERROR - @define tag only permits literal types", string0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion(1100, 1100, ":1100: ERROR - @define tag only permits literal types\n");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        DiagnosticType diagnosticType0 = TypeCheck.UNEXPECTED_TOKEN;
        JSError jSError0 = JSError.make(diagnosticType0, (String[]) null);
        Compiler compiler0 = new Compiler();
        LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
        String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
        assertEquals("WARNING - Internal Error: Dont know how to handle {0}\n", string0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS;
        JSError jSError0 = JSError.make("JSC_BAD_PROTECTED_PROPERTY_ACCESS", 10, 10, diagnosticType0, (String[]) null);
        String string0 = lightweightMessageFormatter0.formatError(jSError0);
        assertEquals("JSC_BAD_PROTECTED_PROPERTY_ACCESS:10: ERROR - Access to protected property {0} of {1} not allowed here.\n", string0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        DiagnosticType diagnosticType0 = CheckAccessControls.DEPRECATED_NAME_REASON;
        JSError jSError0 = JSError.make("Variable {0} has been deprecated: {1}", (-1), (-1), diagnosticType0.defaultLevel, diagnosticType0, (String[]) null);
        String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
        assertEquals("Variable {0} has been deprecated: {1}: WARNING - Variable {0} has been deprecated: {1}\n", string0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        SimpleRegion simpleRegion0 = new SimpleRegion(0, 0, "");
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        SimpleRegion simpleRegion0 = new SimpleRegion((-371), (-371), " ^_v am?Fg");
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertEquals("  -371|  ^_v am?Fg", string0);
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        SimpleRegion simpleRegion0 = new SimpleRegion((-371), (-371), " ^_v am?Fg");
        LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
        String string0 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(simpleRegion0);
        assertNotNull(string0);
    }
}
