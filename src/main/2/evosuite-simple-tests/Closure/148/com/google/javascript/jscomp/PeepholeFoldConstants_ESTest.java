/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:12:18 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = new Node(32, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(32, node2.getType());
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(33);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(21, Node.LOCALCOUNT_PROP);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(36, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasChildren());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(36, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("");
        Node node1 = new Node(37, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("");
        Node node1 = new Node(37, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("LL/");
        Node node1 = Node.newString("LL/", 30, 10);
        Node node2 = new Node(10, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = Node.newString("com.google.common.collect.ImmutableSetMultimap");
        Node node1 = new Node(2);
        Node node2 = new Node(11, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Node node0 = new Node(32);
        Node node1 = new Node(39, 29, 2);
        Node node2 = new Node(14, node1, node0, 1, 16);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(15, 15, 15);
        Node node1 = new Node(25);
        Node node2 = new Node(15, node1, node0, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(16, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Node node0 = Node.newString("m,P@Zr");
        Node node1 = Node.newString(48, "m,P@Zr", 13, 15);
        Node node2 = new Node(17, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(18, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(19, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("F");
        Node node1 = Node.newString("F");
        Node node2 = new Node(20, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(20, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Node node0 = Node.newString("G", 1901, 1901);
        Node node1 = new Node(35);
        Node node2 = new Node(21, node1, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Node node0 = Node.newString("!");
        Node node1 = Node.newString("!", 12, 1);
        Node node2 = new Node(22, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        Node node1 = new Node(39, 48, 26);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(23, node1, node0, node0, 19, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(24, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Node node0 = new Node(1889, 1889, 1889);
        Node node1 = new Node(50, 1, 13);
        Node node2 = new Node(25, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Node node0 = new Node(1902);
        Node node1 = new Node(29);
        Node node2 = new Node(28, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(28, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Node node0 = Node.newString("fa*Ngh-p4AWCGv1^");
        Node node1 = Node.newString("fa*Ngh-p4AWCGv1^");
        Node node2 = new Node(30, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Node node0 = new Node(62);
        Node node1 = new Node(29);
        Node node2 = new Node(31, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("F");
        Node node1 = Node.newString("F");
        Node node2 = new Node(33, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(1919);
        Node node1 = new Node(11);
        Node node2 = new Node(34, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Node node0 = Node.newString("last)ndexO.(");
        Node node1 = new Node(44);
        Node node2 = new Node(35, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(38, Node.SOURCEFILE_PROP);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(19);
        Node node2 = new Node(36, node1, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(44);
        Node node2 = new Node(38, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Node node0 = Node.newString("HMU");
        Node node1 = Node.newString("HMU", 45, (-2));
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(39, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(39, node3.getType());
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-23));
        Node node1 = new Node(25);
        Node node2 = new Node(40, node0, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(94, 94, 94);
        Node node1 = new Node(37);
        Node node2 = new Node(41, node1, node0, 2, 2);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(42, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Node node0 = new Node(17);
        Node node1 = new Node(7);
        Node node2 = new Node(43, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(44, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newString("");
        Node node2 = new Node(45, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Node node0 = new Node(43, (-965), 750);
        Node node1 = Node.newNumber((-2373.2758), 2587, (-17));
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(46, node0, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("-FkS-[dmn2+citQR");
        Node node1 = new Node(27);
        Node node2 = new Node(47, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        Node node0 = new Node(1962, 1962, 1962);
        Node node1 = new Node(43, 2, 0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(48, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-1), node3.getCharno());
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("F");
        Node node1 = new Node(45, 40, 20);
        Node node2 = new Node(49, node1, node1, node0, 7, 12);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03739() throws Throwable {
        Node node0 = new Node(1933);
        Node node1 = new Node(29);
        Node node2 = new Node(50, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03840() throws Throwable {
        Node node0 = Node.newString("com.googe.avascript.jscomp.mozilla.rhino.ast.ForLoop", (-260), (-260));
        Node node1 = Node.newString(28, "com.googe.avascript.jscomp.mozilla.rhino.ast.ForLoop");
        Node node2 = new Node(51, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test03941() throws Throwable {
        Node node0 = Node.newString("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", 1916, 1916);
        Node node1 = new Node(36);
        Node node2 = new Node(52, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test04042() throws Throwable {
        Node node0 = new Node(56);
        Node node1 = new Node(10);
        Node node2 = new Node(53, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(53, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Etak<");
        Compiler compiler0 = new Compiler();
        Node node1 = compiler0.parseSyntheticCode("Etak<", "obbec0p");
        Node node2 = new Node(54, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04244() throws Throwable {
        Node node0 = new Node(68);
        Node node1 = new Node(26, 39, 45);
        Node node2 = new Node(55, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04345() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("");
        Node node1 = new Node(26);
        Node node2 = new Node(56, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04446() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(21);
        Node node1 = new Node(1);
        Node node2 = new Node(57, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04547() throws Throwable {
        Node node0 = new Node(158);
        Node node1 = new Node(8, 50, 22);
        Node node2 = new Node(58, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04648() throws Throwable {
        Node node0 = new Node(1902);
        Node node1 = new Node(29);
        Node node2 = new Node(59, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test04749() throws Throwable {
        Node node0 = Node.newString("faHNgho-_4AWCGv1^", (-19), (-19));
        Node node1 = Node.newString(41, "faHNgho-_4AWCGv1^");
        Node node2 = new Node(60, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04850() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(61, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04951() throws Throwable {
        Node node0 = Node.newString("W");
        Node node1 = Node.newString("W");
        Node node2 = new Node(62, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(62, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05052() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("qS*>>~wq(S,Nif");
        Node node1 = new Node(11);
        Node node2 = new Node(63, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        Node node1 = new Node(44);
        Node node2 = new Node(64, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05254() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(65, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05355() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("0>");
        Node node1 = new Node(26);
        Node node2 = new Node(66, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05456() throws Throwable {
        Node node0 = Node.newString("uegth");
        Node node1 = Node.newString("uegth");
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(67, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(67, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05557() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(68, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05658() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(69, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05759() throws Throwable {
        Node node0 = new Node(92);
        Node node1 = new Node(23);
        Node node2 = new Node(70, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05860() throws Throwable {
        Node node0 = Node.newString("qDl|=@ulC;9t");
        Node node1 = new Node(2);
        Node node2 = new Node(71, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05961() throws Throwable {
        Node node0 = new Node(92);
        Node node1 = new Node(23);
        Node node2 = new Node(72, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06062() throws Throwable {
        Node node0 = new Node((-1816));
        Node node1 = new Node(101);
        Node node2 = new Node(73, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06163() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(74, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(74, node3.getType());
    }

    @Test(timeout = 4000)
    public void test06264() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(75, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06365() throws Throwable {
        Node node0 = Node.newString("lngh");
        Node node1 = new Node(31, 12, (-1));
        Node node2 = new Node(76, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06466() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        Node node1 = new Node(44);
        Node node2 = new Node(77, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06567() throws Throwable {
        Node node0 = Node.newString("length");
        Node node1 = new Node(31, 12, (-1));
        Node node2 = new Node(78, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06668() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(79, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(79, node3.getType());
    }

    @Test(timeout = 4000)
    public void test06769() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("L/");
        Node node1 = new Node(1);
        Node node2 = new Node(80, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06870() throws Throwable {
        Node node0 = new Node(68);
        Node node1 = new Node(25, 4095, (-2));
        Node node2 = new Node(81, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06971() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("qS*>>~wq(S,Nif");
        Node node1 = new Node(11);
        Node node2 = new Node(82, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07072() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(50, 22, 1);
        Node node2 = new Node(83, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07173() throws Throwable {
        Node node0 = Node.newString("W");
        Node node1 = Node.newString("W");
        Node node2 = new Node(84, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07274() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(85, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07375() throws Throwable {
        Node node0 = Node.newString("$egth");
        Node node1 = Node.newString("$egth");
        Node node2 = new Node(86, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07476() throws Throwable {
        Node node0 = new Node(55);
        Node node1 = new Node(41, 30, 0);
        Node node2 = new Node(87, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07577() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("hHaMn52CpMy7");
        Node node1 = Node.newString("hHaMn52CpMy7");
        Node node2 = new Node(88, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07678() throws Throwable {
        Node node0 = new Node(67);
        Node node1 = new Node(26, 39, 45);
        Node node2 = new Node(89, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07779() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(90, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07880() throws Throwable {
        Node node0 = new Node(51, 51, 51);
        Node node1 = new Node((-1), 12, 11);
        Node node2 = new Node(91, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals((-1), node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test07981() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("length");
        Node node1 = new Node(26);
        Node node2 = new Node(92, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08082() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("]");
        Node node1 = new Node(17, 33, 25);
        Node node2 = new Node(93, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(93, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08183() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(19);
        Node node2 = new Node(94, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08284() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("0>");
        Node node1 = new Node(26);
        Node node2 = new Node(95, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08385() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(50, 22, 1);
        Node node2 = new Node(96, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08486() throws Throwable {
        Node node0 = Node.newString("Moving functions+ variable into eeper modules");
        Node node1 = new Node(31);
        Node node2 = new Node(97, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08587() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Moving functions + variable into deeper modules");
        Node node1 = Node.newString("Moving functions + variable into deeper modules", 12, 22);
        Node node2 = new Node(98, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test08688() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Etak<");
        Node node1 = Node.newString("Etak<");
        Node node2 = new Node(99, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08789() throws Throwable {
        Node node0 = Node.newString(132, "fa*Ngh-~4AWCGv1^");
        Node node1 = Node.newString(41, "fa*Ngh-~4AWCGv1^");
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(100, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test08890() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(68, 68, 68);
        Node node1 = new Node(9);
        Node node2 = new Node(3, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(3, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08991() throws Throwable {
        Node node0 = new Node(32);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertSame(node1, node0);
    }

    @Test(timeout = 4000)
    public void test09092() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(41);
        Node node1 = new Node(32, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09193() throws Throwable {
        Node node0 = new Node(39, 48, 26);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = new Node(32, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09294() throws Throwable {
        Node node0 = Node.newString("DXcD");
        Node node1 = new Node(32, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09395() throws Throwable {
        Node node0 = new Node(2147483626);
        Node node1 = new Node(43, node0, node0, 50, 3);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(32, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09496() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        Node node1 = new Node(32, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09597() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("", 1919, 1919);
        Node node1 = new Node(26, node0, node0);
        Node node2 = new Node(1321, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test09698() throws Throwable {
        Node node0 = new Node(84);
        Node node1 = new Node(27, node0, node0);
        Node node2 = new Node(3, node1, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertEquals(27, node3.getType());
    }

    @Test(timeout = 4000)
    public void test09799() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("]ikA7!^|Mq");
        Node node1 = new Node(29, node0, node0, 1, 33);
        Node node2 = new Node(37, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test098100() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("#:");
        Node node1 = new Node(27, node0, node0, node0, 43, 8);
        Node node2 = new Node(4, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test099101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("]ikA7!^|Mq");
        Node node1 = new Node(26, node0, node0);
        Node node2 = new Node(37, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test100102() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("length");
        Node node1 = new Node(26);
        Node node2 = new Node(52, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test101103() throws Throwable {
        Node node0 = Node.newString("shzpTK)f;Hm'{`vP.", 1919, 1919);
        Node node1 = new Node(11);
        Node node2 = new Node(52, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test102104() throws Throwable {
        Node node0 = Node.newString("$egth");
        Node node1 = Node.newString("$egth");
        Node node2 = new Node(86, node1, node0);
        node0.addChildrenToBack(node2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test103105() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("F");
        Node node1 = Node.newString("F");
        Node node2 = new Node(100, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test104106() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Moving functions + vriable into deeper modules");
        Node node1 = Node.newString("Moving functions + vriable into deeper modules", 12, 22);
        Node node2 = new Node(101, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test105107() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString(1920, "");
        Node node1 = Node.newString("", 38, 12);
        Node node2 = new Node(101, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test106108() throws Throwable {
        Node node0 = new Node(87);
        Node node1 = new Node(28, 50, 35);
        Node node2 = new Node(101, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test107109() throws Throwable {
        Node node0 = Node.newString("m'P@Zr");
        Node node1 = Node.newString(48, "m'P@Zr", 13, 15);
        Node node2 = new Node(101, node1, node0);
        Node node3 = new Node(1, node2, node2, node2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(101, node4.getType());
    }

    @Test(timeout = 4000)
    public void test108110() throws Throwable {
        Node node0 = new Node(Integer.MAX_VALUE);
        Node node1 = new Node(Integer.MAX_VALUE, 31, 20);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(21, node1, node1, node0, 15, 9);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test109111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("|CT{lNj5=8FLA");
        Node node1 = Node.newString(47, "|CT{lNj5=8FLA");
        Node node2 = new Node(21, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(21, node3.getType());
    }

    @Test(timeout = 4000)
    public void test110112() throws Throwable {
        Node node0 = Node.newString("dLKX@8>ySvy:", 51, 51);
        Node node1 = Node.newString(41, "dLKX@8>ySvy:");
        Node node2 = new Node(21, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test111113() throws Throwable {
        Node node0 = Node.newString("dLKX@8>ySvy:", 51, 51);
        Node node1 = Node.newString(41, "dLKX@8>ySvy:");
        Node node2 = new Node(21, node1, node0);
        node0.setType(41);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test112114() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("fa*Ngh-p4AWCGTv1^");
        Node node1 = new Node(14);
        Node node2 = new Node(21, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test113115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node((-952), (-952), (-952));
        Node node1 = Node.newNumber((-2.147483648E9), 1, 14);
        Node node2 = new Node(9, node1, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(23, Node.VARIABLE_PROP);
    }

    @Test(timeout = 4000)
    public void test114116() throws Throwable {
        Node node0 = Node.newString("dLKX@8>ySvy:", 51, 51);
        Node node1 = Node.newString(41, "dLKX@8>ySvy:");
        Node node2 = new Node(46, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test115117() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("sIU");
        Node node1 = new Node(44, node0, node0, 49, 3);
        Node node2 = Node.newString("sIU");
        Node node3 = new Node(12, node1, node2);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(2, node4.getChildCount());
    }

    @Test(timeout = 4000)
    public void test116118() throws Throwable {
        Node node0 = Node.newString("length");
        Node node1 = new Node(2);
        Node node2 = new Node(14, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(14, node3.getType());
    }

    @Test(timeout = 4000)
    public void test117119() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("IU");
        Node node1 = Node.newString("IU");
        Node node2 = new Node(12, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test118120() throws Throwable {
        Node node0 = Node.newString("target");
        Node node1 = Node.newString("target");
        Node node2 = new Node(46, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test119121() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Mohng funcions + variable into deeper mouBes");
        Node node1 = new Node(40);
        Node node2 = new Node(16, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test120122() throws Throwable {
        Node node0 = Node.newString("LL/");
        Node node1 = Node.newString("[].join()", 176, 467);
        Node node2 = new Node(13, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test121123() throws Throwable {
        Node node0 = new Node(39, 48, 26);
        Node node1 = Node.newNumber((double) 29, 30, 1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node2 = new Node(46, node1, node0, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Number node not created with Node.newNumber
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test122124() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(0, Node.BOTH);
    }

    @Test(timeout = 4000)
    public void test123125() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("");
        Node node1 = new Node(26);
        Node node2 = new Node(37, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test124126() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        Node node1 = new Node(19);
        Node node2 = new Node(33, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }
}
