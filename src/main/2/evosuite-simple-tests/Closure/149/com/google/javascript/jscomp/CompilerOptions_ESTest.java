/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:23:34 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CompilerOptions_ESTest extends CompilerOptions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0221() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0222() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0223() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0224() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0225() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0226() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0227() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0229() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compilerOptions0.setReplaceStringsConfiguration("_a/aeEs`5k", (List<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0431() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0432() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0433() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0434() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0435() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0436() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0437() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0438() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0439() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0440() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel((-4485));
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0541() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(true);
        assertTrue(compilerOptions0.shouldColorizeErrorOutput());
    }

    @Test(timeout = 4000)
    public void test0642() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0643() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0644() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0645() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0646() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0647() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0648() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0649() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0650() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0651() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0752() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0753() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0754() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0755() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0756() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0757() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0758() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0759() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0760() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0761() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0862() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0863() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0864() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test0865() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0866() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0867() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0868() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0869() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0870() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0871() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0872() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0973() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test0974() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test0975() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test0976() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test0977() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test0978() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test0979() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test0980() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test0981() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test0982() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test1083() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.isExternExportsEnabled());
    }

    @Test(timeout = 4000)
    public void test1084() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test1085() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test1086() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test1087() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test1088() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test1089() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test1090() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test1091() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test1092() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test1093() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test1194() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test1195() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test1196() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test1197() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test1198() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test1199() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test11100() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test11101() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test11102() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test11103() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(true);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test12104() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test12105() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test12106() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test12107() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test12108() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test12109() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test12110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test12111() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test12112() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test12113() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test13114() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test13115() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test13116() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test13117() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test13118() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test13119() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test13120() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test13121() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test13122() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test13123() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test13124() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral("@V", "pQwb:AA;>ya}'");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test14125() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test14126() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test14127() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test14128() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test14129() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test14130() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test14131() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test14132() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test14133() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test14134() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test15135() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test15136() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test15137() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test15138() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test15139() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test15140() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test15141() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test15142() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test15143() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test15144() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("@YWxG2 -");
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test16145() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test16146() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test16147() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test16148() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test16149() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test16150() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test16151() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test16152() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test16153() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test16154() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test16155() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("Incorrect source mappings order, previous : (%s,%s)\nnew : (%s,%s)\nnode : %s", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test17156() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test17157() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test17158() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test17159() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test17160() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test17161() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkTypes);
    }

    @Test(timeout = 4000)
    public void test17162() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test17163() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test17164() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test17165() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertFalse(compilerOptions1.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test17166() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
        assertNotSame(compilerOptions1, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test18167() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test18168() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test18169() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test18170() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test18171() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test18172() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test18173() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test18174() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("com.google.javascript.jscomp.CompilerOptions$DevMode", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test19175() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test19176() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test19177() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test19178() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test19179() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test19180() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test19181() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test19182() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test19183() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test19184() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test20185() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test20186() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test20187() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test20188() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test20189() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test20190() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test20191() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test20192() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test20193() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test20194() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test21195() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test21196() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test21197() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test21198() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test21199() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test21200() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test21201() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test21202() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test21203() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test21204() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test22205() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test22206() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test22207() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test22208() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test22209() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test22210() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test22211() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test22212() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test22213() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test22214() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test23215() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test23216() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test23217() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test23218() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test23219() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test23220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test23221() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test23222() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test23223() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test23224() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test23225() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test24226() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test24227() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test24228() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test24229() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test24230() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test24231() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test24232() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test24233() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test24234() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test24235() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test25236() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test25237() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test25238() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test25239() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test25240() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test25241() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test25242() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test25243() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test25244() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test25245() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test26246() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test26247() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test26248() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test26249() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test26250() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test26251() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test26252() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test26253() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral(",auW,te+pu~", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test27254() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test27255() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test27256() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test27257() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test27258() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test27259() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test27260() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test27261() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test27262() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test27263() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test27264() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("", (-4485));
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test28265() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test28266() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test28267() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test28268() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test28269() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test28270() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test28271() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test28272() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test28273() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test28274() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test28275() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.enables((DiagnosticGroup) null);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test29276() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test29277() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test29278() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test29279() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test29280() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test29281() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test29282() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test29283() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test29284() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test29285() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test29286() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test30287() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test30288() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test30289() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test30290() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test30291() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test30292() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test30293() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test30294() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test30295() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test30296() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test30297() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[4] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[4].defaultLevel);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test31298() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test31299() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test31300() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test31301() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test31302() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test31303() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test31304() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test31305() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test31306() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test31307() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31308() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_DUPLICATE_KEY;
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test32309() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32310() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test32311() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test32312() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test32313() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test32314() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test32315() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test32316() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test32317() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test32318() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test32319() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[8];
        DiagnosticType diagnosticType0 = NodeTraversal.NODE_TRAVERSAL_ERROR;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[2] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[2].defaultLevel);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test33320() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test33321() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test33322() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test33323() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test33324() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test33325() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test33326() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test33327() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test33328() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test33329() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test33330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[5];
        DiagnosticType diagnosticType0 = CheckMissingReturn.MISSING_RETURN_STATEMENT;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        diagnosticGroupArray0[0] = diagnosticGroup0;
        diagnosticGroupArray0[2] = diagnosticGroupArray0[0];
        compilerOptions0.setWarningLevel(diagnosticGroupArray0[2], compilerOptions0.checkRequires);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroupArray0[0]);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test34331() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test34332() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test34333() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test34334() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test34335() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test34336() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test34337() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test34338() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test34339() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test34340() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[7];
        DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
        diagnosticTypeArray0[0] = diagnosticType0;
        diagnosticTypeArray0[5] = diagnosticTypeArray0[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticTypeArray0[5].level);
        compilerOptions0.setWarningLevel(diagnosticGroup0, compilerOptions0.reportMissingOverride);
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test35341() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.allowLegacyJsMessages);
    }

    @Test(timeout = 4000)
    public void test35342() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test35343() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkSuspiciousCode);
    }

    @Test(timeout = 4000)
    public void test35344() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.tightenTypes);
    }

    @Test(timeout = 4000)
    public void test35345() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkSymbols);
    }

    @Test(timeout = 4000)
    public void test35346() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
    }

    @Test(timeout = 4000)
    public void test35347() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.inferTypesInGlobalScope);
    }

    @Test(timeout = 4000)
    public void test35348() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkControlStructures);
    }

    @Test(timeout = 4000)
    public void test35349() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35350() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.checkDuplicateMessages);
    }

    @Test(timeout = 4000)
    public void test35351() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
        assertFalse(compilerOptions0.strictMessageReplacement);
    }

    @Test(timeout = 4000)
    public void test36352() throws Throwable {
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        boolean boolean0 = compilerOptions_TracerMode0.isOn();
        assertTrue(boolean0);
    }
}
