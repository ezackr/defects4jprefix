/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:23:19 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableSet;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("");
        // Undeclared exception!
        try {
            compiler0.toSource(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        // Undeclared exception!
        try {
            compiler0.toSource(compiler_CodeBuilder0, (-3652), (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("(wF-kKTn.NOZdM2F|");
        // Undeclared exception!
        try {
            compiler0.toSourceArray(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("q_YfXl[>A=9fq_Yf", "com.google.protobuf.GeneratedMessage$ExtendableMessage$ExtensionWriter", "com.google.protobuf.GeneratedMessage$ExtendableMessage$ExtensionWriter");
        // Undeclared exception!
        try {
            compiler0.stripCode(immutableSet0, immutableSet0, immutableSet0, immutableSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];
        // Undeclared exception!
        try {
            compiler0.init(jSSourceFileArray0, (JSModule[]) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("[[singleton]]");
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("[[singleton]]");
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.parse();
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Level level0 = Level.FINEST;
        Compiler.setLoggingLevel(level0);
        assertEquals("FINEST", level0.toString());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource((Node) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Cannot build without root node being specified
            //
            verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        assertNull(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
        assertNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getInputsInOrder();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.isNormalized();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Compiler compiler0 = new Compiler();
        File file0 = MockFile.createTempFile("Computing Control Flow Graph", "QPeT8nv?vVeU~,=");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Compiler compiler0 = new Compiler();
        File file0 = MockFile.createTempFile("Computing Control Flow Graph", "QPeT8nv?vVeU~,=");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode("xH\"_&q*(2.", (String) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
        }
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setUnnormalized();
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.crossModuleMethodMotion = true;
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.optimize();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // One-time passes cannot be run multiple times: markUnnormalized
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("y$1#oSourcO", "y$1#oSourcO");
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.ForbiddenChange codeChangeHandler_ForbiddenChange0 = new CodeChangeHandler.ForbiddenChange();
        compiler0.removeChangeHandler(codeChangeHandler_ForbiddenChange0);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getMessages();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[9];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        jSSourceFileArray0[7] = jSSourceFile0;
        jSSourceFileArray0[8] = jSSourceFileArray0[4];
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        MockFile mockFile0 = new MockFile(".Compiler$6");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        // Undeclared exception!
        try {
            compiler0.initModules(stack0, arrayList0, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "";
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "";
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compileModules(linkedList0, stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion((JSModule) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Vector<JSModule> vector0 = new Vector<JSModule>();
        // Undeclared exception!
        try {
            compiler0.compileModules(stack0, vector0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSModule jSModule0 = new JSModule("yXvs_,or8U]K`Ko^0");
        ImmutableSet<JSModule> immutableSet0 = ImmutableSet.of(jSModule0, jSModule0, jSModule0, jSModule0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>(immutableSet0);
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        assertEquals((-1), jSModule0.getDepth());
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSModule jSModule0 = new JSModule("yXvs_,or8U]K`Ko^0");
        ImmutableSet<JSModule> immutableSet0 = ImmutableSet.of(jSModule0, jSModule0, jSModule0, jSModule0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>(immutableSet0);
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.getSourceLine("&,)y<K", 965);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        // Undeclared exception!
        try {
            compiler0.check();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        compiler0.startPass("");
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(19, Node.LABEL_PROP);
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test6571() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6672() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.newExternInput((String) null);
        // Undeclared exception!
        try {
            compiler0.newExternInput((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Conflicting externs name: null
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6773() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6874() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
        assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test6975() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        assertFalse(typeCheck1.equals((Object) typeCheck0));
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        stack0.add(jSSourceFile0);
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.parse();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test7278() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compilerOptions0.setManageClosureDependencies(true);
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(34, Node.PARENTHESIZED_PROP);
    }

    @Test(timeout = 4000)
    public void test7379() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.parse(jSSourceFile0);
        Node node0 = compiler0.parseInputs();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test7480() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.nameReferenceReportPath = "U8nv}UFA-;5q'9Fo]H";
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(node0.isVarArgs());
    }

    @Test(timeout = 4000)
    public void test7581() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.parseTestCode((String) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
        }
    }

    @Test(timeout = 4000)
    public void test7682() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseTestCode((String) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
        }
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("\n");
        assertSame(compiler_CodeBuilder0, compiler_CodeBuilder1);
    }

    @Test(timeout = 4000)
    public void test7884() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("}fn)E@");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7985() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("com.google.javascript.rhino.jstype.JSTypeRegistry$1");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("{^`>tHpj*ic");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8086() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("K");
        compiler_CodeBuilder0.append("K");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("K");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8187() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.parse(jSSourceFile0);
        compiler0.optimize();
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test8288() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        MockFile mockFile0 = new MockFile("i>g", "i>g");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFileArray0[0];
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8289() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        MockFile mockFile0 = new MockFile("i>g", "i>g");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, (Charset) null);
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFileArray0[0];
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test8390() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        Node node0 = new Node((-3254), (-3254), (-3254));
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make((String) null, node0, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
        assertEquals((-1), jSError0.lineNumber);
    }

    @Test(timeout = 4000)
    public void test8491() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        VarCheck varCheck0 = new VarCheck(compiler0, true);
    }

    @Test(timeout = 4000)
    public void test8592() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("JSC_MODULE_DEPENDENCY_ERROR", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // JSC_MODULE_DEPENDENCY_ERROR
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test8693() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("[[singleton]]", 3);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test8794() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) stack0, compilerOptions0);
        String string0 = compiler0.getSourceLine("[[singleton]]", 2);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test8895() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("com.google.javascript.jscomp.MustBeReachingVariableDef", (-533));
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test8996() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion((String) null, 26);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test9097() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("'~l)</sB9?znt]");
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test9198() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test9299() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("'~l)</sB9?znt]");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(")_", "JSC_EMPTY_MODULE_LIST_ERROR");
        jSModule0.addFirst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test93100() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test94101() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test95102() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertEquals(0, errorManager0.getErrorCount());
    }
}
