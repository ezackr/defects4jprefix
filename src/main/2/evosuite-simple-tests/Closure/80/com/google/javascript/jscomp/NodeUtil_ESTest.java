/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:33:05 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        Node node0 = new Node(104);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDOT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "+infinity", (String) null);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "+infinity");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        // Undeclared exception!
        try {
            NodeUtil.getArgumentForCallOrNew(node0, 34);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.containsFunction((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
        }
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (-27), (-27));
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "infinity", (-27), (-27));
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        Node node0 = new Node((-2000), (-2000), (-2000));
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test00912() throws Throwable {
        Node node0 = new Node(74);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_MEMBER
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01013() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01114() throws Throwable {
        Node node0 = new Node(99);
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected CALL node, got COLON
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test01215() throws Throwable {
        Node node0 = Node.newString(98, "NaN");
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        // Undeclared exception!
        try {
            NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "void", (Node) null, "void");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Node node0 = Node.newString(112, "IXF", 112, 112);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "IXF", node0, "IXF");
        assertEquals(0, node1.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Node node0 = Node.newString(112, "IXF", 112, 112);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "IXF", node0, "IXF");
        assertEquals(112, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        Node node0 = Node.newString(112, "IXF", 112, 112);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "IXF", node0, "IXF");
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01520() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cD>!MQ", 115, 115);
        int int0 = NodeUtil.getNameReferenceCount(node0, "cD>!MQ");
        assertEquals(115, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cD>!MQ", 115, 115);
        int int0 = NodeUtil.getNameReferenceCount(node0, "cD>!MQ");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test01623() throws Throwable {
        Compiler compiler0 = new Compiler();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "cD>!MQ", 115, 115);
        int int0 = NodeUtil.getNameReferenceCount(node0, "cD>!MQ");
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(30, node0, 2, 15);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01825() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test01926() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", 31, 49);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(31, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01927() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", 31, 49);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", 31, 49);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01929() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", 31, 49);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(49, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test02030() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02131() throws Throwable {
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    }

    @Test(timeout = 4000)
    public void test02333() throws Throwable {
        Node node0 = new Node(2868, 2868, (-33));
        Node node1 = new Node(26, node0, node0, node0);
        NodeUtil.getExpressionBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test02434() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02535() throws Throwable {
        Node node0 = new Node(86);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02636() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02737() throws Throwable {
        Node node0 = new Node(100, 100, 51);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02838() throws Throwable {
        Node node0 = new Node(101, 106, (-992));
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02939() throws Throwable {
        Node node0 = Node.newString(26, "W5_s");
        // Undeclared exception!
        try {
            NodeUtil.getBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test03040() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(41, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03041() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(41, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03042() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test03143() throws Throwable {
        Node node0 = Node.newNumber((-2759.3218218041475));
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03244() throws Throwable {
        Node node0 = Node.newString("for(", 105, 105);
        Node node1 = Node.newString(26, "for(", 8226, 39);
        node1.addChildrenToFront(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertEquals("false", string0);
    }

    @Test(timeout = 4000)
    public void test03245() throws Throwable {
        Node node0 = Node.newString("for(", 105, 105);
        Node node1 = Node.newString(26, "for(", 8226, 39);
        node1.addChildrenToFront(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03346() throws Throwable {
        Node node0 = Node.newString(41, ";:>B^NRR^Bm2w(f");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03447() throws Throwable {
        Node node0 = Node.newString(43, "msg.dugp.arms");
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03548() throws Throwable {
        Node node0 = Node.newString(44, "infinity");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03649() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(47, node0, 27, 33);
        NodeUtil.getExpressionBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test03750() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03851() throws Throwable {
        Node node0 = Node.newString(64, "`;m9A @anFHiXs1?`nP");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03952() throws Throwable {
        Node node0 = new Node(122, 122, 122);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04053() throws Throwable {
        Node node0 = Node.newString("", (-31), (-31));
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04255() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 115, 45);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04256() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 115, 45);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(45, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04257() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 115, 45);
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04258() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 115, 45);
        NodeUtil.getExpressionBooleanValue(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test04359() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.getBooleanValue(node0);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test04360() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.getBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04361() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.getBooleanValue(node0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04362() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.getBooleanValue(node0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04463() throws Throwable {
        Node node0 = Node.newString("p:_eLj2C4");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("p:_eLj2C4", string0);
    }

    @Test(timeout = 4000)
    public void test04564() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "LQV)%=M,?SQP3-", 63, 15);
        node0.addChildrenToFront(node1);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test04665() throws Throwable {
        Node node0 = Node.newNumber(1281.2500537156);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("1281.2500537156", string0);
    }

    @Test(timeout = 4000)
    public void test04766() throws Throwable {
        Node node0 = Node.newString(41, "infinity");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("null", string0);
    }

    @Test(timeout = 4000)
    public void test04867() throws Throwable {
        Node node0 = Node.newString(43, "msg.dugp.arms");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("false", string0);
    }

    @Test(timeout = 4000)
    public void test04968() throws Throwable {
        Node node0 = Node.newString(44, "infinity");
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("true", string0);
    }

    @Test(timeout = 4000)
    public void test05069() throws Throwable {
        Node node0 = Node.newString(64, "`;m9A @anFHiXs1?`nP");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test05070() throws Throwable {
        Node node0 = Node.newString(64, "`;m9A @anFHiXs1?`nP");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05171() throws Throwable {
        Node node0 = new Node(122, 122, 122);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test05272() throws Throwable {
        Node node0 = Node.newString(29, "p:_eLj2C4", 18, 13);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test05373() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 113);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals(98, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05374() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 113);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals(113, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05375() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 113);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test05376() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "NaN", 98, 113);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("NaN", string0);
    }

    @Test(timeout = 4000)
    public void test05477() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.arrayToString(node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test05478() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.arrayToString(node1);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test05479() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.arrayToString(node1);
        assertEquals("0", string0);
    }

    @Test(timeout = 4000)
    public void test05580() throws Throwable {
        Node node0 = Node.newString(105, "for(", 30, 105);
        Node node1 = Node.newString(26, "for(", 8226, 39);
        node1.addChildrenToFront(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test05681() throws Throwable {
        Node node0 = new Node(122);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test05782() throws Throwable {
        Node node0 = Node.newString(29, "p:_eLj2C4", 18, 13);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test05883() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test05884() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(41, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05885() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(Double.POSITIVE_INFINITY, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05886() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Infinity", 41, 41);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(41, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05987() throws Throwable {
        Node node0 = Node.newNumber(1401.0);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(1401.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06088() throws Throwable {
        Node node0 = Node.newString("VP\"YRxU`3p;=Xa<d");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06089() throws Throwable {
        Node node0 = Node.newString("VP\"YRxU`3p;=Xa<d");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test06190() throws Throwable {
        Node node0 = Node.newString(16, "==");
        Node node1 = new Node(41, node0, node0, node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06291() throws Throwable {
        Node node0 = Node.newString(43, "msg.dup.parms");
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06392() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(1.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06493() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06494() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test06595() throws Throwable {
        Node node0 = new Node(102);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test06696() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXs", 31, 49);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(31, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test06697() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXs", 31, 49);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test06698() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXs", 31, 49);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(49, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test06699() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXs", 31, 49);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test067100() throws Throwable {
        Node node0 = Node.newString("p:_eLj2C4");
        Node node1 = Node.newString(29, "p:_eLj2C4", 18, 13);
        node1.addChildrenToFront(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test068101() throws Throwable {
        Node node0 = new Node(62);
        Node node1 = Node.newString(26, "Infinity");
        node1.addChildToBack(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test069102() throws Throwable {
        Node node0 = new Node(63);
        Double double0 = NodeUtil.getNumberValue(node0);
        assertEquals(0.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070103() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("2");
        assertEquals(2.0, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070104() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("2");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test071105() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0R0TN'");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test071106() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("0R0TN'");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test072107() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("infinity");
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test073108() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test074109() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+infinity");
        assertNull(double0);
    }

    @Test(timeout = 4000)
    public void test075110() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" 5MJI");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test075111() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue(" 5MJI");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test076112() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("() {\n\t");
        assertNotNull(double0);
    }

    @Test(timeout = 4000)
    public void test076113() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("() {\n\t");
        assertEquals(Double.NaN, (double) double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test077114() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078115() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(12);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test079116() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(13);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test080117() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(160);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test081118() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(8232);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test082119() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(65279);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test083120() throws Throwable {
        boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(12288);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test084121() throws Throwable {
        Node node0 = new Node(26);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test085122() throws Throwable {
        Node node0 = Node.newString(29, "exec");
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test086123() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = NodeUtil.newVarNode("JSC_REDECLARED_VARIABLE", node0);
        node0.addChildrenToBack(node1);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test086124() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = NodeUtil.newVarNode("JSC_REDECLARED_VARIABLE", node0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test087125() throws Throwable {
        Node node0 = Node.newNumber((double) 1, 12, 2);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088126() throws Throwable {
        Node node0 = Node.newString("JSC_REDECLARED_VARIABLE");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test089127() throws Throwable {
        Node node0 = new Node(549);
        node0.setType(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test090128() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091129() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test092130() throws Throwable {
        Node node0 = new Node(122, 122, 122);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test093131() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(90, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test093132() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test093133() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093134() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test094135() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 41, 1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(41, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test094136() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 41, 1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(1, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test094137() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "NaN", 41, 1);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test095138() throws Throwable {
        Node node0 = new Node(47, (-374), 2043);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test096139() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test097140() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test098141() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099142() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        Node node1 = NodeUtil.newFunctionNode("SETVAR 55", arrayList0, node0, 34, 1);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test099143() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        ArrayList<Node> arrayList0 = new ArrayList<Node>();
        Node node1 = NodeUtil.newFunctionNode("SETVAR 55", arrayList0, node0, 34, 1);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100144() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = new Node(9, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101145() throws Throwable {
        Node node0 = Node.newString(10, "D2B5?Tr)Fam", 101, 4);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test102146() throws Throwable {
        Node node0 = new Node(11);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test103147() throws Throwable {
        Node node0 = Node.newString(12, "56z%gMm[8fn");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test104148() throws Throwable {
        Node node0 = Node.newString(13, "sg.no.pare.sw_itch", 13, 13);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test105149() throws Throwable {
        Node node0 = new Node(14, 1, (-1));
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test106150() throws Throwable {
        Node node0 = Node.newString(75, "PA73=V76D{");
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107151() throws Throwable {
        Node node0 = Node.newString(16, "exec");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test108152() throws Throwable {
        Node node0 = new Node(19, 17, 1);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test109153() throws Throwable {
        Stack<InputStream> stack0 = new Stack<InputStream>();
        Enumeration<InputStream> enumeration0 = stack0.elements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(sequenceInputStream0);
        Set<String> set0 = propertyResourceBundle0.keySet();
        Node node0 = new Node(20, 1, 8233);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test110154() throws Throwable {
        Node node0 = new Node(21);
        Stack<ByteArrayInputStream> stack0 = new Stack<ByteArrayInputStream>();
        Enumeration<ByteArrayInputStream> enumeration0 = stack0.elements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(sequenceInputStream0);
        Set<String> set0 = propertyResourceBundle0.keySet();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test111155() throws Throwable {
        Node node0 = new Node(22);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test112156() throws Throwable {
        Node node0 = Node.newString(23, "REGISTER_BOOLEAN");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test113157() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(24, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114158() throws Throwable {
        Node node0 = new Node(25, 25, 3465);
        HashSet<String> hashSet0 = new HashSet<String>();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, hashSet0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test115159() throws Throwable {
        Node node0 = new Node(122, 1878, 1073741823);
        Node node1 = new Node(26, node0, 1785, 33);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116160() throws Throwable {
        Node node0 = Node.newString(27, "on/Kis;!Nt");
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test117161() throws Throwable {
        Node node0 = Node.newString(111, "-infinipy");
        Node node1 = new Node(28, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118162() throws Throwable {
        Node node0 = Node.newString(29, "p:eLj2C4", 18, 13);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test119163() throws Throwable {
        Node node0 = Node.newString(30, "NaN");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120164() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test121165() throws Throwable {
        Node node0 = Node.newString("@d YqeA>aS#BQ", 1252, 120);
        Node node1 = new Node(32, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122166() throws Throwable {
        Node node0 = Node.newString((-2195), "G}:I-SL[zy");
        node0.setType(34);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test123167() throws Throwable {
        Node node0 = Node.newString(35, "EQ9b}dyH)4aj?5");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124168() throws Throwable {
        Node node0 = Node.newString(36, "");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125169() throws Throwable {
        Node node0 = new Node(37, 64, 1421);
        Locale locale0 = Locale.CHINA;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126170() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "prototype", 41, 2825);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertEquals(2825, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test126171() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "prototype", 41, 2825);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126172() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "prototype", 41, 2825);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertEquals(41, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test126173() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "prototype", 41, 2825);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test127174() throws Throwable {
        Node node0 = Node.newNumber((double) 2, 40, 0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test128175() throws Throwable {
        Node node0 = Node.newString(41, "infinity");
        Locale locale0 = Locale.ROOT;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test129176() throws Throwable {
        Node node0 = Node.newString("G}:I-SL[zy");
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130177() throws Throwable {
        Node node0 = Node.newString(43, "msg.dup.parms");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test131178() throws Throwable {
        Node node0 = Node.newString(44, "infinity");
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
        Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132179() throws Throwable {
        Node node0 = new Node(46);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test133180() throws Throwable {
        Node node0 = Node.newString("<fby", 10, 17);
        Node node1 = new Node(18, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134181() throws Throwable {
        Node node0 = new Node(122, 22, 31);
        Node node1 = new Node(33, node0, 112, 44);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test135182() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136183() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137184() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("6jVI.\"<D{", "6jVI.\"<D{");
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test138185() throws Throwable {
        Node node0 = new Node(292, 292, 60);
        Node node1 = new Node(9, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test139186() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140187() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141188() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142189() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143190() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144191() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test145192() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146193() throws Throwable {
        Node node0 = Node.newString(17, "infinity");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test147194() throws Throwable {
        Node node0 = new Node(18, 18, 18);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test148195() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test149196() throws Throwable {
        Node node0 = Node.newString(20, "p:_eLj2C4", (-3039), 92);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test150197() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test151198() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test152199() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153200() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154201() throws Throwable {
        Node node0 = Node.newString(25, "OKDAIlOaS0");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test155202() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156203() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157204() throws Throwable {
        Node node0 = new Node((-1857));
        Node node1 = new Node(28, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test158205() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159206() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test160207() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = new Node(31, node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDELPROP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test161208() throws Throwable {
        Node node0 = new Node(32, 77, 32);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test162209() throws Throwable {
        Node node0 = Node.newString(33, "PA73=V|6D{");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test163210() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test164211() throws Throwable {
        Node node0 = new Node(75, (-1542), 75);
        Node node1 = new Node(35, node0, node0, 65279, 122);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165212() throws Throwable {
        Node node0 = new Node(36);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETELEM
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test166213() throws Throwable {
        Node node0 = Node.newString(37, "4z#ZxCdg\"rW{!>", 37, 37);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test167214() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "W5_s", 84, (-2189));
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test167215() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "W5_s", 84, (-2189));
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test168216() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test169217() throws Throwable {
        Node node0 = new Node(45, 4095, 16);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test170218() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test171219() throws Throwable {
        Node node0 = Node.newString((-4706), "msg.dup.parms");
        Node node1 = new Node(47, node0, 30, (-776));
        boolean boolean0 = NodeUtil.isSimpleOperator(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test172220() throws Throwable {
        Node node0 = Node.newNumber((double) 84);
        Node node1 = new Node(49, node0, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTHROW
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test173221() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETHROW 50
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test174222() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test175223() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test176224() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test177225() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGETVAR 54
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test178226() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test179227() throws Throwable {
        Node node0 = new Node(56);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCATCH_SCOPE
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test180228() throws Throwable {
        Node node0 = new Node(57, (-3931), (-3931));
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_KEYS
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test181229() throws Throwable {
        Node node0 = new Node(58);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_VALUES
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test182230() throws Throwable {
        Node node0 = new Node(59);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_NEXT
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test183231() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184232() throws Throwable {
        Node node0 = Node.newString(62, "prototype", 2825, 62);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETURN_RESULT prototype 2825
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test185233() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test186234() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test187235() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGET_REF 65
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test188236() throws Throwable {
        Node node0 = new Node(66);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSET_REF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test189237() throws Throwable {
        Node node0 = new Node(67);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEL_REF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test190238() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_CALL 68
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test191239() throws Throwable {
        Node node0 = new Node(69, 85, 1436);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test192240() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEFAULTNAMESPACE 70
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test193241() throws Throwable {
        Node node0 = new Node(71, 71, 71);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLATTR 71
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test194242() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_MEMBER 73
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test195243() throws Throwable {
        Node node0 = new Node(76, 128, 76);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test196244() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTRY 77
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test197245() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSEMI 78
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test198246() throws Throwable {
        Node node0 = new Node(79);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLB
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test199247() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test200248() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLC 81
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test201249() throws Throwable {
        Node node0 = new Node(82);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRC
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test202250() throws Throwable {
        Node node0 = new Node(83, 83, 83);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLP 83
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test203251() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test204252() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test205253() throws Throwable {
        Node node0 = new Node(86);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test206254() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test207255() throws Throwable {
        Node node0 = new Node(88);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test208256() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test209257() throws Throwable {
        Node node0 = new Node(90, 9, 9);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test210258() throws Throwable {
        Node node0 = Node.newString(91, " #QeUe6 bmw6E", 91, 100);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test211259() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test212260() throws Throwable {
        Node node0 = new Node(93);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test213261() throws Throwable {
        Node node0 = Node.newString(112, "infinity", 112, 112);
        Node node1 = new Node(94, node0, 10, 36);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test214262() throws Throwable {
        Node node0 = new Node(95);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test215263() throws Throwable {
        Node node0 = new Node(96);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test216264() throws Throwable {
        Node node0 = new Node(97, 99, 97);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test217265() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test218266() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219267() throws Throwable {
        Node node0 = Node.newString(100, "Array");
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test220268() throws Throwable {
        Node node0 = Node.newString(101, "com.google.javascript.jscomp.RenameVars$Assignment");
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test221269() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222270() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223271() throws Throwable {
        Node node0 = new Node(104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224272() throws Throwable {
        Node node0 = Node.newString(105, "PA73=V|6D{");
        boolean boolean0 = NodeUtil.isSimpleOperator(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test225273() throws Throwable {
        Node node0 = new Node(107, 107, 107);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226274() throws Throwable {
        Node node0 = new Node(108);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeIF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test227275() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test228276() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229277() throws Throwable {
        Node node0 = Node.newString(113, "com.google.common.collect.AbstractMultimap$KeySet");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test230278() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test231279() throws Throwable {
        Node node0 = new Node(118);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeVAR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test232280() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233281() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234282() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test235283() throws Throwable {
        Node node0 = Node.newString("Importer");
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test236284() throws Throwable {
        Node node0 = new Node(32, 77, 32);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test237285() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test238286() throws Throwable {
        Node node0 = Node.newString(43, "msg.dup.parms");
        Node node1 = new Node(37, node0, 14, 117);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239287() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = NodeUtil.newVarNode("JSC_REDECLARED_VARIABLE", node0);
        node0.addChildrenToBack(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test239288() throws Throwable {
        Node node0 = new Node(64);
        Node node1 = NodeUtil.newVarNode("JSC_REDECLARED_VARIABLE", node0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240289() throws Throwable {
        Node node0 = Node.newString("7MvB");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test241290() throws Throwable {
        Node node0 = Node.newString(41, "infinity");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test242291() throws Throwable {
        Node node0 = Node.newString(42, "+2J x(wPM2MPysL0$");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test243292() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test244293() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test245294() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test246295() throws Throwable {
        Node node0 = new Node(46);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test247296() throws Throwable {
        Node node0 = Node.newString(79, "infinity");
        Node node1 = new Node(47, node0, 3, 10);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test248297() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test249298() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test250299() throws Throwable {
        Node node0 = Node.newString(50, "zEoP0;p;(XDI`2a");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251300() throws Throwable {
        Node node0 = new Node(68);
        Node node1 = new Node(54, node0, 39, 24);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test252301() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test253302() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254303() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test255304() throws Throwable {
        Node node0 = Node.newString(0, "second new child has existing sibling");
        node0.setType(59);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test256305() throws Throwable {
        Node node0 = new Node(62, 62, 62);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test257306() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test258307() throws Throwable {
        Node node0 = Node.newString((-1724), "second new child has existing sibling", (-1724), (-1724));
        node0.setType(65);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test259308() throws Throwable {
        Node node0 = new Node((byte) 66);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test260309() throws Throwable {
        Node node0 = new Node(67);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test261310() throws Throwable {
        Node node0 = new Node(68, 68, 15);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test262311() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test263312() throws Throwable {
        Node node0 = new Node(71, 873, (-3429));
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test264313() throws Throwable {
        Node node0 = new Node(73);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test265314() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test266315() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test267316() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test268317() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test269318() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test270319() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test271320() throws Throwable {
        Node node0 = Node.newString(101, "com.google.javascript.jscomp.RenameVars$Assignment");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test272321() throws Throwable {
        Node node0 = Node.newString(105, "!+0/o");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test273322() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test274323() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test275324() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test276325() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test277326() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test278327() throws Throwable {
        Node node0 = Node.newString(117, "*tQ|F[Z=.V-|3EsT,V");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test279328() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = NodeUtil.newVarNode("-H4^#ZsxUt79(@j", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(94, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test279329() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = NodeUtil.newVarNode("-H4^#ZsxUt79(@j", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test279330() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        Node node1 = NodeUtil.newVarNode("-H4^#ZsxUt79(@j", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test280331() throws Throwable {
        Node node0 = new Node(124, 2758, 2758);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test281332() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test282333() throws Throwable {
        Node node0 = Node.newString(126, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test283334() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test284335() throws Throwable {
        Node node0 = new Node(129, 129, 129);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test285336() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test285337() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test286338() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test287339() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "RGj\"I&-;=s5", 69, 69);
        NodeUtil.mayHaveSideEffects(node0);
        assertEquals(69, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test287340() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "RGj\"I&-;=s5", 69, 69);
        NodeUtil.mayHaveSideEffects(node0);
        assertEquals(69, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test287341() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "RGj\"I&-;=s5", 69, 69);
        NodeUtil.mayHaveSideEffects(node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test288342() throws Throwable {
        Node node0 = Node.newString(105, "PA73=V|6D{");
        Node node1 = NodeUtil.newExpr(node0);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test288343() throws Throwable {
        Node node0 = Node.newString(105, "PA73=V|6D{");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test289344() throws Throwable {
        Node node0 = new Node(122);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test289345() throws Throwable {
        Node node0 = new Node(122);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test290346() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Expected NEW node, got LB
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test291347() throws Throwable {
        Node node0 = new Node(98);
        // Undeclared exception!
        try {
            NodeUtil.callHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test292348() throws Throwable {
        Node node0 = Node.newNumber((-1824.8543103167935));
        Node node1 = new Node(37, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test293349() throws Throwable {
        Node node0 = Node.newString(112, "/");
        // Undeclared exception!
        try {
            NodeUtil.newHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test294350() throws Throwable {
        Node node0 = new Node(127);
        Node node1 = new Node(30, node0, 2, 15);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test295351() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test296352() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        Node node1 = new Node(30, node0, 2, 15);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test297353() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test298354() throws Throwable {
        Node node0 = Node.newString(43, "msg.dup.parms");
        Node node1 = new Node(37, node0, 14, 4);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test299355() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 203, 203);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(203, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test299356() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 203, 203);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test299357() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 203, 203);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test299358() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 203, 203);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(203, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test300359() throws Throwable {
        Node node0 = Node.newString(49, "toString");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test301360() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test302361() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test303362() throws Throwable {
        Node node0 = new Node(127);
        Node node1 = new Node(30, node0, 2, 15);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test304363() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test304364() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.canBeSideEffected(node0, (Set<String>) null);
        assertEquals(120, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test304365() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.canBeSideEffected(node0, (Set<String>) null);
        assertEquals(120, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test304366() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.canBeSideEffected(node0, (Set<String>) null);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test305367() throws Throwable {
        Node node0 = Node.newString(35, "U\"|!sdjo$O=}");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test306368() throws Throwable {
        Node node0 = Node.newString(37, "4z#ZxCdg\"rW{!>", 37, 37);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test307369() throws Throwable {
        Node node0 = Node.newString(105, "arg cannot be null");
        // Undeclared exception!
        try {
            NodeUtil.canBeSideEffected(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test308370() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("cD>!MQ", "cD>!MQ");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test309371() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(68, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test309372() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test309373() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(122, node1.getType());
    }

    @Test(timeout = 4000)
    public void test310374() throws Throwable {
        int int0 = NodeUtil.precedence(4);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test311375() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(1);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for eol (type 1)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test312376() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for goto (type 5)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test313377() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(6);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifeq (type 6)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test314378() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(7);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifne (type 7)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test315379() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(8);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setname (type 8)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test316380() throws Throwable {
        int int0 = NodeUtil.precedence(9);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test317381() throws Throwable {
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test318382() throws Throwable {
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test319383() throws Throwable {
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test320384() throws Throwable {
        int int0 = NodeUtil.precedence(13);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test321385() throws Throwable {
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test322386() throws Throwable {
        int int0 = NodeUtil.precedence(15);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test323387() throws Throwable {
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test324388() throws Throwable {
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test325389() throws Throwable {
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test326390() throws Throwable {
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test327391() throws Throwable {
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test328392() throws Throwable {
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test329393() throws Throwable {
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test330394() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test331395() throws Throwable {
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test332396() throws Throwable {
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test333397() throws Throwable {
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test334398() throws Throwable {
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test335399() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test336400() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test337401() throws Throwable {
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test338402() throws Throwable {
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test339403() throws Throwable {
        int int0 = NodeUtil.precedence(32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test340404() throws Throwable {
        int int0 = NodeUtil.precedence(33);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test341405() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test342406() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test343407() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test344408() throws Throwable {
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test345409() throws Throwable {
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test346410() throws Throwable {
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test347411() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test348412() throws Throwable {
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test349413() throws Throwable {
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test350414() throws Throwable {
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test351415() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test352416() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test353417() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test354418() throws Throwable {
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test355419() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test356420() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test357421() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=50> (type 50)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test358422() throws Throwable {
        int int0 = NodeUtil.precedence(51);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test359423() throws Throwable {
        int int0 = NodeUtil.precedence(52);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test360424() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for getvar (type 54)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test361425() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setvar (type 55)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test362426() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test363427() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=58> (type 58)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test364428() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test365429() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for thisfn (type 61)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test366430() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=62> (type 62)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test367431() throws Throwable {
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test368432() throws Throwable {
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test369433() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test370434() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence((byte) 66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=66> (type 66)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test371435() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test372436() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=68> (type 68)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test373437() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test374438() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=71> (type 71)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test375439() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=72> (type 72)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test376440() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test377441() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=74> (type 74)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test378442() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test379443() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test380444() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test381445() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test382446() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test383447() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test384448() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test385449() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test386450() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test387451() throws Throwable {
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test388452() throws Throwable {
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test389453() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test390454() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test391455() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test392456() throws Throwable {
        int int0 = NodeUtil.precedence(90);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test393457() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test394458() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test395459() throws Throwable {
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test396460() throws Throwable {
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test397461() throws Throwable {
        int int0 = NodeUtil.precedence(95);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test398462() throws Throwable {
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test399463() throws Throwable {
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test400464() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test401465() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test402466() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test403467() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test404468() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test405469() throws Throwable {
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test406470() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test407471() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test408472() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test409473() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test410474() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test411475() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test412476() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test413477() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test414478() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test415479() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test416480() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test417481() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test418482() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test419483() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test420484() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test421485() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test422486() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test423487() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test424488() throws Throwable {
        int int0 = NodeUtil.precedence(122);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test425489() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(123);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for reserved (type 123)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test426490() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test427491() throws Throwable {
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            NodeUtil.mayBeString(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test428492() throws Throwable {
        Node node0 = new Node(86);
        // Undeclared exception!
        try {
            NodeUtil.mayBeString(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test429493() throws Throwable {
        Node node0 = new Node(98);
        // Undeclared exception!
        try {
            NodeUtil.mayBeString(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test430494() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(100, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test431495() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("flowS0asitiv/InlineVariables");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        Node node1 = new Node(101, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test432496() throws Throwable {
        Node node0 = Node.newString(9, "exec");
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test433497() throws Throwable {
        Node node0 = Node.newString(10, "`;m9A @anFHiXs1?`nP");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test434498() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(11, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test435499() throws Throwable {
        Node node0 = Node.newString(18, "W5_s");
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test436500() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(19, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test437501() throws Throwable {
        Node node0 = new Node(20, 20, 20);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test438502() throws Throwable {
        Node node0 = new Node(40, 40, 40);
        Node node1 = new Node(22, node0, node0, node0, node0, 20, 23);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test439503() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test440504() throws Throwable {
        Node node0 = Node.newString(24, "jscomp");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test441505() throws Throwable {
        Node node0 = Node.newString(".F+");
        Node node1 = new Node(25, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test442506() throws Throwable {
        Node node0 = new Node(27);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test443507() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(28, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test444508() throws Throwable {
        Node node0 = Node.newString(29, "exR");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test445509() throws Throwable {
        Node node0 = Node.newString(38, "exe5");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test446510() throws Throwable {
        Node node0 = Node.newNumber(1.6696924417794456);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test447511() throws Throwable {
        Node node0 = new Node(102, 102, (-406));
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test448512() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test449513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(21, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test450514() throws Throwable {
        Node node0 = Node.newString(13, "T5jpYDb", 13, 13);
        Node node1 = Node.newString(21, "T5jpYDb");
        node1.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test451515() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 1825, 0);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertEquals(1825, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test451516() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 1825, 0);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertEquals(0, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test451517() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 1825, 0);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test452518() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test452519() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertEquals(90, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test452520() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test453521() throws Throwable {
        Node node0 = Node.newString(12, "56z%gMm[8fn");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test454522() throws Throwable {
        Node node0 = Node.newString(14, "exec");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test455523() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test456524() throws Throwable {
        Node node0 = Node.newString(16, "exec");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test457525() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        Node node1 = new Node(17, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test458526() throws Throwable {
        Node node0 = Node.newString(18, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test459527() throws Throwable {
        Node node0 = new Node(19, 17, 1);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test460528() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test461529() throws Throwable {
        Node node0 = Node.newString(22, "30iHq#1Sx^aC7F");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test462530() throws Throwable {
        Node node0 = new Node(23);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test463531() throws Throwable {
        Node node0 = Node.newString(25, "toString");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test464532() throws Throwable {
        Node node0 = Node.newString(26, "W5_s");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test465533() throws Throwable {
        Node node0 = Node.newString(27, "mrtvzi>");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test466534() throws Throwable {
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test467535() throws Throwable {
        Node node0 = Node.newString(29, "XqGjy$K(D2poV$@");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test468536() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        Node node1 = new Node(30, node0, 21, (-1837));
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test469537() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = new Node(31, node0);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
        boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_MayBeStringResultPredicate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test470538() throws Throwable {
        Node node0 = Node.newString(22, "30iHq#1Sx^aC7F");
        Node node1 = new Node(32, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test471539() throws Throwable {
        Node node0 = new Node(122);
        Node node1 = new Node(34, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test472540() throws Throwable {
        Node node0 = Node.newString(35, "REGISTER_BOOLEAN");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test473541() throws Throwable {
        Node node0 = Node.newString(36, "sg.no.pare.sw_itch", 36, 36);
        Node node1 = Node.newString(21, "\b");
        node1.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test474542() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test475543() throws Throwable {
        Node node0 = Node.newNumber(0.0, 1, 1);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test476544() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test477545() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test478546() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test479547() throws Throwable {
        Node node0 = Node.newString(44, "infinity");
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test480548() throws Throwable {
        Node node0 = Node.newString(45, "TRY");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test481549() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test482550() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test483551() throws Throwable {
        Node node0 = new Node(48, 48, 48);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test484552() throws Throwable {
        Node node0 = new Node(73, 111, 73);
        Node node1 = new Node(49, node0, 3386, 7);
        boolean boolean0 = NodeUtil.mayBeString(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test485553() throws Throwable {
        Node node0 = new Node(50, 122, 50);
        boolean boolean0 = NodeUtil.mayBeString(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test486554() throws Throwable {
        Node node0 = Node.newString(66, "B''FG^");
        Node node1 = new Node(51, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test487555() throws Throwable {
        Node node0 = new Node(52, 98, 98);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test488556() throws Throwable {
        Node node0 = Node.newString(41, "infinity");
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test489557() throws Throwable {
        Node node0 = Node.newString(41, "", 23, 28);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test490558() throws Throwable {
        Node node0 = new Node(122, 122, 122);
        boolean boolean0 = NodeUtil.mayBeString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test491559() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test492560() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test493561() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test494562() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test495563() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test496564() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test497565() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(14);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test498566() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test499567() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(10);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test500568() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test501569() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test502570() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(107);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test503571() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test504572() throws Throwable {
        Node node0 = new Node(95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test505573() throws Throwable {
        Node node0 = new Node(88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test506574() throws Throwable {
        Node node0 = new Node(89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test507575() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(18, int0);
    }

    @Test(timeout = 4000)
    public void test508576() throws Throwable {
        Node node0 = new Node(92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(20, int0);
    }

    @Test(timeout = 4000)
    public void test509577() throws Throwable {
        Node node0 = new Node(93);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test510578() throws Throwable {
        Node node0 = new Node(94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test511579() throws Throwable {
        Node node0 = new Node(96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(24, int0);
    }

    @Test(timeout = 4000)
    public void test512580() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test513581() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test514582() throws Throwable {
        Node node0 = Node.newString(130, "infinity");
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test515583() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test515584() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.isGet(node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test516585() throws Throwable {
        Node node0 = Node.newString(13, "WXs");
        node0.setType(35);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test517586() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.getPrototypeClassName(node0);
        assertEquals(120, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test517587() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.getPrototypeClassName(node0);
        assertEquals(120, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test517588() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test517589() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 120);
        NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test518590() throws Throwable {
        Node node0 = new Node(127);
        Node node1 = new Node(30, node0, 2, 15);
        Node node2 = NodeUtil.getArgumentForCallOrNew(node1, 7);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test519591() throws Throwable {
        Node node0 = new Node(54);
        Node node1 = NodeUtil.newVarNode("com.google.javascript.jscomp.DisambiguateProperties$FindRenameableProperties", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test520592() throws Throwable {
        Node node0 = NodeUtil.newVarNode("\"*qx0O$*kLn_#", (Node) null);
        Node node1 = node0.getChildBefore((Node) null);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test521593() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 1065, 1065);
        Node node1 = new Node(44, node0, node0, node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test521594() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 1065, 1065);
        Node node1 = new Node(44, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(1065, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test521595() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "-infinity", 1065, 1065);
        Node node1 = new Node(44, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(1065, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test522596() throws Throwable {
        Node node0 = new Node(87);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.has(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test523597() throws Throwable {
        Node node0 = Node.newString("WXs", 112, 112);
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test524598() throws Throwable {
        Node node0 = Node.newString(79, "infinity");
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test525599() throws Throwable {
        Node node0 = Node.newString(153, "'wC2lI>U", 153, 153);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test525600() throws Throwable {
        Node node0 = Node.newString(153, "'wC2lI>U", 153, 153);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test526601() throws Throwable {
        Node node0 = new Node(86, 86, (-4024));
        boolean boolean0 = NodeUtil.isAssign(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test527602() throws Throwable {
        Node node0 = Node.newString(112, "IXF", 112, 112);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test528603() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test528604() throws Throwable {
        Node node0 = Node.newString("30iHq#1Sx^aC7F");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test529605() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test530606() throws Throwable {
        Node node0 = new Node(115);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        // Undeclared exception!
        try {
            peepholeRemoveDeadCode0.tryFoldFor(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeRemoveDeadCode", e);
        }
    }

    @Test(timeout = 4000)
    public void test531607() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test532608() throws Throwable {
        Node node0 = new Node(115);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test533609() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test534610() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test535611() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        NodeUtil.getLoopCodeBlock(node0);
        assertEquals(90, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test535612() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Infinity", 115, 90);
        NodeUtil.getLoopCodeBlock(node0);
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test536613() throws Throwable {
        Node node0 = new Node(114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test537614() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test538615() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "; k", "; k");
        Node node1 = new Node(2, node0, node0, node0, node0, 0, 29);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test539616() throws Throwable {
        Node node0 = Node.newString(105, "infinity");
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test540617() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test541618() throws Throwable {
        Node node0 = new Node(596);
        Node node1 = new Node(108, node0, node0, (-2791), 37);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test542619() throws Throwable {
        Node node0 = Node.newString(110, "G}:I-SL[zy");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test543620() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test544621() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test545622() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test546623() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test547624() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test548625() throws Throwable {
        Node node0 = Node.newString((-2195), "G}:I-SL[zy");
        Node node1 = new Node(119, node0, node0, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test549626() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test550627() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test551628() throws Throwable {
        Node node0 = Node.newString(66, "B''FG^");
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test552629() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test553630() throws Throwable {
        Node node0 = new Node(110, (-1465), 4);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test554631() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test555632() throws Throwable {
        Node node0 = Node.newString(112, "/");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test556633() throws Throwable {
        Node node0 = Node.newString(113, "Iy;>9A @anFHs1?`n2");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test557634() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test558635() throws Throwable {
        Node node0 = Node.newString(119, "com.google.javascript.jscomp.NodeUtil$BooleanResultPredicate");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test559636() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test560637() throws Throwable {
        Node node0 = Node.newString(126, "}:I-SL[z");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test561638() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test562639() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test563640() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test564641() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test565642() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test566643() throws Throwable {
        Node node0 = Node.newString(110, "&=");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // SWITCH &= does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test567644() throws Throwable {
        Node node0 = Node.newString(112, "WXs");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DEFAULT WXs does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test568645() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test569646() throws Throwable {
        Node node0 = new Node(114, 112, 114);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test570647() throws Throwable {
        Node node0 = new Node(115);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test571648() throws Throwable {
        Node node0 = Node.newString(35, "REGISTER_BOOLEAN");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // GETELEM REGISTER_BOOLEAN does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test572649() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("6jVI.\"<D{", "6jVI.\"<D{");
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test573650() throws Throwable {
        Node node0 = Node.newString(111, "exec");
        boolean boolean0 = NodeUtil.isSwitchCase(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test574651() throws Throwable {
        Node node0 = Node.newNumber((double) 86, 86, 33);
        Node node1 = NodeUtil.newVarNode("@yOK)]hV", node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // node is not a child
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test575652() throws Throwable {
        Node node0 = new Node(112);
        Node node1 = new Node(17, node0, 5, 46);
        NodeUtil.removeChild(node1, node0);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test575653() throws Throwable {
        Node node0 = new Node(112);
        Node node1 = new Node(17, node0, 5, 46);
        NodeUtil.removeChild(node1, node0);
        assertFalse(node1.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test576654() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test576655() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.jvascript.jscomp.mozlla.rhino.InterpretedFunction", (-906), (-677));
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test577656() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "xh ", 80, 80);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(80, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test577657() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "xh ", 80, 80);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test577658() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "xh ", 80, 80);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(80, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test578659() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test579660() throws Throwable {
        Node node0 = Node.newString(153, "'wC2lI>U", 153, 153);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test580661() throws Throwable {
        Node node0 = new Node(148, 148, 148);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test581662() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        node0.addChildrenToFront(node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TRY 77 of TRY 77
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test582663() throws Throwable {
        Node node0 = new Node(120);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test583664() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6jVI.GwD{", "6jVI.GwD{");
        node0.addChildrenToFront(node0);
        NodeUtil.removeChild(node0, node0);
        assertFalse(node0.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test584665() throws Throwable {
        Node node0 = new Node(132);
        node0.addChildToFront(node0);
        NodeUtil.removeChild(node0, node0);
        assertEquals(0, Node.BOTH);
    }

    @Test(timeout = 4000)
    public void test585666() throws Throwable {
        Node node0 = new Node(115);
        node0.addChildToFront(node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: FOR of FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test586667() throws Throwable {
        Node node0 = Node.newString(126, "}:I-SL[z");
        // Undeclared exception!
        try {
            NodeUtil.maybeAddFinally(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test587668() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.maybeAddFinally(node0);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test587669() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.maybeAddFinally(node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test588670() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test589671() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "6jVI.GwD", "6jVI.GwD");
        node0.addChildrenToFront(node0);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test590672() throws Throwable {
        Node node0 = Node.newNumber(Double.NaN);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        Node node2 = NodeUtil.getArgumentForCallOrNew(node1, 1156);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test591673() throws Throwable {
        Node node0 = new Node(911);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test592674() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Node node0 = compiler0.parseSyntheticCode("REGISTER_BOOLEAN", "REGISTER_BOOLEAN");
        Node node1 = new Node(42, node0, node0);
        boolean boolean0 = NodeUtil.isThis(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test593675() throws Throwable {
        Node node0 = Node.newString(43, "msg.dup.parms");
        // Undeclared exception!
        try {
            NodeUtil.isSparseArray(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test594676() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.isSparseArray(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test595677() throws Throwable {
        Node node0 = Node.newString(110, "G}:I-SL[zy");
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test596678() throws Throwable {
        Node node0 = new Node(60);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test597679() throws Throwable {
        Node node0 = Node.newNumber((-1824.8543103167935));
        Node node1 = new Node(37, node0, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test598680() throws Throwable {
        Node node0 = Node.newString(9, "exec");
        boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test599681() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test600682() throws Throwable {
        Node node0 = new Node(120);
        Node node1 = NodeUtil.newVarNode("-H4^#ZsxUt79(@j", node0);
        boolean boolean0 = NodeUtil.isLhs(node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test601683() throws Throwable {
        Node node0 = Node.newNumber(100.0);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test602684() throws Throwable {
        Node node0 = Node.newString((-186), "%7^y&k@9e&", (-186), (-186));
        Node node1 = new Node(147, node0, 21, (-186));
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test603685() throws Throwable {
        Node node0 = Node.newNumber((double) 95, 95, 95);
        String string0 = NodeUtil.getObjectLitKeyName(node0);
        assertEquals("95", string0);
    }

    @Test(timeout = 4000)
    public void test604686() throws Throwable {
        Node node0 = new Node(148, 148, 148);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // SET 148 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test605687() throws Throwable {
        Node node0 = Node.newString("j\"]8G+Sji|B;?");
        String string0 = NodeUtil.getObjectLitKeyName(node0);
        assertEquals("j\"]8G+Sji|B;?", string0);
    }

    @Test(timeout = 4000)
    public void test606688() throws Throwable {
        Node node0 = new Node(147, 147, 147);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // GET 147 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test607689() throws Throwable {
        Node node0 = new Node(95);
        // Undeclared exception!
        try {
            NodeUtil.getObjectLitKeyName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected node type: ASSIGN_MUL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test608690() throws Throwable {
        Node node0 = Node.newString("JSC_REDECLARED_VARIABLE");
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test609691() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ")", "\"EQh9");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
        assertFalse(jSType0.isTemplateType());
    }

    @Test(timeout = 4000)
    public void test610692() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test611693() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test611694() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test612695() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test613696() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test614697() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test615698() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test616699() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test617700() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test618701() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test619702() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test620703() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test621704() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test622705() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test623706() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
        assertEquals(">>>", string0);
    }

    @Test(timeout = 4000)
    public void test624707() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test625708() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test626709() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test627710() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(24);
        assertEquals("/", string0);
    }

    @Test(timeout = 4000)
    public void test628711() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test629712() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test630713() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test631714() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test632715() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test632716() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test633717() throws Throwable {
        String string0 = NodeUtil.opToStr(30);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test634718() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test635719() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
        assertEquals("typeof", string0);
    }

    @Test(timeout = 4000)
    public void test636720() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test637721() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test638722() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(35);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 35: GETELEM
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test639723() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test640724() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test641725() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test642726() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test643727() throws Throwable {
        Node node0 = Node.newString("enum{", 235, 235);
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.toSource(node0);
        assertEquals("\"enum{\"", string0);
    }

    @Test(timeout = 4000)
    public void test644728() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test645729() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test646730() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test647731() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(44);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 44: TRUE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test648732() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test648733() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test649734() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test649735() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test650736() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(47);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 47: REGEXP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test651737() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test652738() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test653739() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test654740() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test654741() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test655742() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test655743() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test656744() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test657745() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 55: SETVAR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test658746() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 56: CATCH_SCOPE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test659747() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test660748() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test661749() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test662750() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test663751() throws Throwable {
        String string0 = NodeUtil.opToStr(62);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test664752() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test665753() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test666754() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(65);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 65: GET_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test667755() throws Throwable {
        String string0 = NodeUtil.opToStr(66);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test668756() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test669757() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test670758() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test671759() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test672760() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test673761() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test674762() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test675763() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test676764() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test677765() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test678766() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 77: TRY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test679767() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test680768() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test681769() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test682770() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 81: LC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test683771() throws Throwable {
        String string0 = NodeUtil.opToStr(82);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test684772() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test685773() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test686774() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test687775() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test688776() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test689777() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test690778() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test691779() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test692780() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test693781() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test694782() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test695783() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test696784() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test697785() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test698786() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test699787() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test700788() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 99: COLON
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test701789() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test702790() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test702791() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test703792() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test704793() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(103);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 103: DEC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test705794() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test706795() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 106: EXPORT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test707796() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test708797() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test709798() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test710799() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test711800() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test712801() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test713802() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test714803() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test715804() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test716805() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 116: BREAK
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test717806() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test718807() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 118: VAR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test719808() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test720809() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 120: CATCH
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test721810() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 121: FINALLY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test722811() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test723812() throws Throwable {
        String string0 = NodeUtil.opToStr(1634);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test724813() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.newVarNode("G}:I-SL[zy", node0);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test725814() throws Throwable {
        Node node0 = new Node(47, (-374), 2043);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(42, Node.IS_CONSTANT_NAME);
    }

    @Test(timeout = 4000)
    public void test726815() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test726816() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test726817() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "IXF", (-1262), 1378);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test727818() throws Throwable {
        Node node0 = new Node((-2899));
        AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, true);
        List<Node> list0 = astParallelizer0.split();
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode("javascript", list0, node0, 25, (-3902));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test728819() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".A!_", 120, 19);
        assertEquals(19, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test728820() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".A!_", 120, 19);
        assertEquals(120, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test728821() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".A!_", 120, 19);
        assertEquals(2, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test729822() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(120, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test729823() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(192, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test729824() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test729825() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(120, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test729826() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test729827() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.mozilla.rhino.InterpretedFunction", 120, 192);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(192, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test730828() throws Throwable {
        Node node0 = Node.newString("WXs", 112, 112);
        // Undeclared exception!
        try {
            NodeUtil.getRootOfQualifiedName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test731829() throws Throwable {
        boolean boolean0 = NodeUtil.isLatin("\u0660\u06F0\u07C0\u0966\u09E6\u0A66\u0AE6\u0B66\u0BE6\u0C66\u0CE6\u0D66\u0E50\u0ED0\u0F20\u1040\u1090\u17E0\u1810\u1946\u19D0\u1B50\u1BB0\u1C40\u1C50\uA620\uA8D0\uA900\uAA50\uFF10");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test732830() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("'wC2lI>U");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test733831() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("in");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test734832() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("WXs");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test735833() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("apply", "apply");
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(9, Node.FIXUPS_PROP);
    }

    @Test(timeout = 4000)
    public void test736834() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "earch", 128, 128);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test736835() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "earch", 128, 128);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(128, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test736836() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "earch", 128, 128);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(128, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test737837() throws Throwable {
        Node node0 = Node.newString("Importer");
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test738838() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test738839() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test739840() throws Throwable {
        Node node0 = Node.newString(117, "google");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.containsType(node0, 117, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test740841() throws Throwable {
        Node node0 = Node.newString(105, "!+0/o");
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test741842() throws Throwable {
        Node node0 = new Node(125);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test742843() throws Throwable {
        Node node0 = Node.newString(105, "!+0/o");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test743844() throws Throwable {
        Node node0 = Node.newString(114, "S2Ls9#lT");
        Node node1 = NodeUtil.newVarNode("InterpretedFunction", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 160, nodeUtil_MatchDeclaration0);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test743845() throws Throwable {
        Node node0 = Node.newString(114, "S2Ls9#lT");
        Node node1 = NodeUtil.newVarNode("InterpretedFunction", node0);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 160, nodeUtil_MatchDeclaration0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test744846() throws Throwable {
        Node node0 = Node.newString(1901, "Upj/S2]9,l");
        Node node1 = new Node(22, node0, 115, (-4096));
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test745847() throws Throwable {
        Node node0 = Node.newString(440, "infinity", 514, 19);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test746848() throws Throwable {
        Node node0 = new Node(99);
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test747849() throws Throwable {
        Node node0 = new Node(113);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test748850() throws Throwable {
        Node node0 = new Node(77);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test749851() throws Throwable {
        Node node0 = Node.newString("ESCXMLATTR");
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test750852() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("@,+g+", "@,+g+");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test751853() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test752854() throws Throwable {
        Node node0 = Node.newString(105, "PA73=V|6D{");
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test753855() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", "");
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test754856() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test755857() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test756858() throws Throwable {
        Node node0 = Node.newString(75, "PA73=V|6D{");
        node0.addSuppression(":c5$}<a}z0");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertFalse(jSDocInfo0.isConstant());
    }

    @Test(timeout = 4000)
    public void test757859() throws Throwable {
        Node node0 = new Node(127);
        Node node1 = new Node(30, node0, 2, 15);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test758860() throws Throwable {
        Node node0 = Node.newString(115, "Ljava/lang/Integer;");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("Ljava/lang/Integer;", stack0, node0, 0, 1);
        assertEquals(0, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test758861() throws Throwable {
        Node node0 = Node.newString(115, "Ljava/lang/Integer;");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("Ljava/lang/Integer;", stack0, node0, 0, 1);
        assertEquals(1, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test758862() throws Throwable {
        Node node0 = Node.newString(115, "Ljava/lang/Integer;");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("Ljava/lang/Integer;", stack0, node0, 0, 1);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test758863() throws Throwable {
        Node node0 = Node.newString(115, "Ljava/lang/Integer;");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("Ljava/lang/Integer;", stack0, node0, 0, 1);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test758864() throws Throwable {
        Node node0 = Node.newString(115, "Ljava/lang/Integer;");
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("Ljava/lang/Integer;", stack0, node0, 0, 1);
        NodeUtil.getInfoForNameNode(node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test759865() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test760866() throws Throwable {
        Node node0 = new Node(86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("hI:dtr,RH(dH\"(jA0 b", stack0, node0, 1, 4729);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test761867() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("6jVI.GwD{", stack0, node0, 1, 4729);
        Node node2 = NodeUtil.newExpr(node1);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test761868() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("6jVI.GwD{", stack0, node0, 1, 4729);
        Node node2 = NodeUtil.newExpr(node1);
        assertEquals(130, node2.getType());
    }

    @Test(timeout = 4000)
    public void test761869() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("6jVI.GwD{", stack0, node0, 1, 4729);
        Node node2 = NodeUtil.newExpr(node1);
        NodeUtil.getFunctionInfo(node1);
        assertEquals(1, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test761870() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("6jVI.GwD{", stack0, node0, 1, 4729);
        Node node2 = NodeUtil.newExpr(node1);
        NodeUtil.getFunctionInfo(node1);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test761871() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        Stack<Node> stack0 = new Stack<Node>();
        Node node1 = NodeUtil.newFunctionNode("6jVI.GwD{", stack0, node0, 1, 4729);
        Node node2 = NodeUtil.newExpr(node1);
        NodeUtil.getFunctionInfo(node1);
        assertEquals(4095, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test762872() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Ly_<a!U+\"#|o", "Ly_<a!U+\"#|o");
        String string0 = NodeUtil.getSourceName(node0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test762873() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Ly_<a!U+\"#|o", "Ly_<a!U+\"#|o");
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals("Ly_<a!U+\"#|o", string0);
    }

    @Test(timeout = 4000)
    public void test763874() throws Throwable {
        String string0 = NodeUtil.getSourceName((Node) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test764875() throws Throwable {
        Node node0 = Node.newNumber(1377.71395, 120, 120);
        Node[] nodeArray0 = new Node[10];
        // Undeclared exception!
        try {
            NodeUtil.newCallNode(node0, nodeArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test765876() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test766877() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETPROP 34
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test767878() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test768879() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test769880() throws Throwable {
        Node node0 = new Node(47, 25, 25);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test770881() throws Throwable {
        Node node0 = new Node(48);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeBINDNAME
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test771882() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test772883() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test773884() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLOCAL_LOAD 53
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test774885() throws Throwable {
        Node node0 = new Node(55);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETVAR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test775886() throws Throwable {
        Node node0 = new Node(60);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_ID
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test776887() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test777888() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test778889() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NAME 75
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test779890() throws Throwable {
        Node node0 = new Node(76);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_NAME
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test780891() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRB 80
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test781892() throws Throwable {
        Node node0 = new Node(84);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test782893() throws Throwable {
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test783894() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test784895() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test785896() throws Throwable {
        Node node0 = new Node(88, (-1451), (-2242));
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test786897() throws Throwable {
        Node node0 = new Node(90, 9, 9);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test787898() throws Throwable {
        Node node0 = new Node(91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test788899() throws Throwable {
        Node node0 = new Node(92, 92, 92);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test789900() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test790901() throws Throwable {
        Node node0 = new Node(94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test791902() throws Throwable {
        Node node0 = new Node(95);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test792903() throws Throwable {
        Node node0 = new Node(96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test793904() throws Throwable {
        Node node0 = new Node(97, 97, 97);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test794905() throws Throwable {
        Node node0 = new Node(98);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test795906() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCOLON 99
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test796907() throws Throwable {
        Node node0 = new Node(100, 100, 100);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test797908() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        Node node1 = new Node(101, node0, 4, 16);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test798909() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test799910() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test800911() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test801912() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test801913() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(115, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test801914() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "infinity", 115, 115);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(115, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test802915() throws Throwable {
        Node node0 = Node.newString(".Fz++");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, ".Fz++", node0, ".Fz++");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test802916() throws Throwable {
        Node node0 = Node.newString(".Fz++");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, ".Fz++", node0, ".Fz++");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test803917() throws Throwable {
        Node node0 = new Node(48);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("!SRH;%F|gUY`=Y?/zx`", vector0, node0, 43, (-1383));
        NodeUtil.getArgumentForFunction(node1, 0);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test803918() throws Throwable {
        Node node0 = new Node(48);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("!SRH;%F|gUY`=Y?/zx`", vector0, node0, 43, (-1383));
        NodeUtil.getArgumentForFunction(node1, 0);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test803919() throws Throwable {
        Node node0 = new Node(48);
        Vector<Node> vector0 = new Vector<Node>();
        Node node1 = NodeUtil.newFunctionNode("!SRH;%F|gUY`=Y?/zx`", vector0, node0, 43, (-1383));
        NodeUtil.getArgumentForFunction(node1, 0);
        assertFalse(node0.hasOneChild());
    }
}
