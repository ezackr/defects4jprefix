/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:33:19 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.RemoveUnusedVars;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RemoveUnusedVars_ESTest extends RemoveUnusedVars_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("arguments", "arguments");
        RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
        SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
        removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.RemoveUnusedVars", "com.google.javascript.jscomp.RemoveUnusedVars");
        Node node0 = compiler0.parse(sourceFile0);
        RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, false, false, false);
        SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
        removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
        assertFalse(node0.isSetterDef());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("prttyYpe", "prttyYpe");
        RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
        SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        Node node1 = new Node(37, nodeArray0, 1, 31);
        removeUnusedVars0.process(node0, node1, simpleDefinitionFinder0);
        assertFalse(node1.isParamList());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromCode("!@Ift$H@.7", "!@Ift$H@.7", "prototype");
        compiler0.parse(sourceFile0);
        RemoveUnusedVars removeUnusedVars0 = new RemoveUnusedVars(compiler0, true, true, true);
        Node node0 = Node.newString(86, "!@Ift$H@.7");
        SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
        // Undeclared exception!
        try {
            removeUnusedVars0.process(node0, node0, simpleDefinitionFinder0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }
}
