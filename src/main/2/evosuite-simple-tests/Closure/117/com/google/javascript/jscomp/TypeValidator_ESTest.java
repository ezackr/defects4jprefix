/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:12:33 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AngularPass;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingReturn;
import com.google.javascript.jscomp.ClosureRewriteClass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.FieldCleanupPass;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MarkNoSideEffectCalls;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.PrintStream;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumElementType0, "?", enumElementType0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumElementType0, "?", enumElementType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectValidTypeofName(nodeTraversal0, (Node) null, "");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, (String) null);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
        assertNotNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, jSType0);
        String[] stringArray0 = new String[1];
        JSError jSError0 = JSError.make("", node0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Node node0 = Node.newNumber((double) 1710, 5, 1710);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        DiagnosticType diagnosticType0 = MarkNoSideEffectCalls.INVALID_NO_SIDE_EFFECT_ANNOTATION;
        String[] stringArray0 = new String[6];
        JSError jSError0 = JSError.make("_*Rz[rCQ414(7vJ?Hc", node0, checkLevel0, diagnosticType0, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
        String string0 = typeValidator_TypeMismatch0.toString();
        assertEquals("(null, null)", string0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, (Node) null, jSType0, (String) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal((JSTypeRegistry) null, "n!^");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, typedScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "n!^", "JSC_DUPLICATE_INPUT", 37, 52);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        typeValidator0.expectActualObject(nodeTraversal0, (Node) null, jSType0, "JSC_DUPLICATE_INPUT");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal((JSTypeRegistry) null, "n!^");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, typedScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "n!^", "JSC_DUPLICATE_INPUT", 37, 52);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        typeValidator0.expectActualObject(nodeTraversal0, (Node) null, jSType0, "JSC_DUPLICATE_INPUT");
        assertEquals(0, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal((JSTypeRegistry) null, "n!^");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, typedScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectActualObject(nodeTraversal0, (Node) null, jSType0, "ciiv4|.9");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal((JSTypeRegistry) null, "n!^");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, typedScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectActualObject(nodeTraversal0, (Node) null, jSType0, "ciiv4|.9");
        assertEquals(1, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, jSType0, "fG.^");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, "Named type with empty name component");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, "Named type with empty name component");
        assertEquals(1, loggerErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        AngularPass angularPass0 = new AngularPass(compiler0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, angularPass0, syntacticScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, noType0, "$inject");
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectString(nodeTraversal0, node0, enumType0, "JSC_UNKNOWN_TYPEOF_VALUE");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectString(nodeTraversal0, node0, enumType0, "JSC_UNKNOWN_TYPEOF_VALUE");
        assertEquals(0, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        typeValidator0.expectString(nodeTraversal0, (Node) null, functionType0, "K4|aV})H#V^");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, (String) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, (String) null);
        assertEquals(0, loggerErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", (Node) null, jSType0);
        typeValidator0.expectNumber(nodeTraversal0, (Node) null, enumType0, "Not declared as a type name");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", (Node) null, jSType0);
        typeValidator0.expectNumber(nodeTraversal0, (Node) null, enumType0, "Not declared as a type name");
        assertEquals(1, loggerErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "invalid node type: ");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "invalid node type: ");
        assertEquals(0, loggerErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(3);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "#_|/FAj");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal((JSTypeRegistry) null, "n!^");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, typedScopeCreator0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "n!^", "JSC_DUPLICATE_INPUT", 37, 52);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, jSType0, "Cmru");
        assertFalse(jSType0.isTemplatizedType());
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
        JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        jSTypeNativeArray0[1] = jSTypeNative0;
        jSTypeNativeArray0[2] = jSTypeNative0;
        jSTypeNativeArray0[3] = jSTypeNativeArray0[0];
        jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
        jSTypeNativeArray0[5] = jSTypeNative0;
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        typeValidator0.expectStringOrNumber((NodeTraversal) null, (Node) null, jSType0, "Not declared as a constructor");
        assertTrue(jSType0.matchesStringContext());
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        // Undeclared exception!
        try {
            typeValidator0.expectStringOrNumber((NodeTraversal) null, (Node) null, jSType0, "Object#Element");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        JSType[] jSTypeArray0 = new JSType[0];
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, (Node) null, jSType0, "Named type with empty name component", jSType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        FieldCleanupPass.QualifiedNameSearchTraversal fieldCleanupPass_QualifiedNameSearchTraversal0 = new FieldCleanupPass.QualifiedNameSearchTraversal(jSTypeRegistry0, "TightenTypes pass appears to be stuck in an infinite loop.");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, fieldCleanupPass_QualifiedNameSearchTraversal0, (ScopeCreator) null);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("%~HZC <", node0, jSType0);
        JSType jSType1 = modificationVisitor0.caseUnknownType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType1, "Unknown class name", enumType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, (Node) null, jSType0, "Object#Key", jSType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, (Node) null, jSType0, jSType0);
        assertTrue(jSType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, enumType0, jSType0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, enumType0, jSType0);
        assertEquals(1, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, jSType0);
        TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) enumType0, (Map<TemplateType, JSType>) null);
        // Undeclared exception!
        try {
            typeValidator0.expectSwitchMatchesCase(nodeTraversal0, (Node) null, jSType0, templatizedType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, jSType0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, jSType0);
        assertEquals(0, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(3);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType0, jSType0, node0, "Not declared as a constructor");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, enumType0, node0, "Not declared as a constructor");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, enumType0, node0, "Not declared as a constructor");
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        Node node0 = Node.newNumber(0.0, 113, 113);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", node0, jSType0);
        ObjectType objectType0 = enumType0.getImplicitPrototype();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType0, enumType0, node0, "Not declared as a constructor");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, (Node) null, jSType0, jSType0, "Object#Key");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}", node0, noType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}");
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(1);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}", node0, noType0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, (Node) null, jSType0, jSType0, (Node) null, 8);
        assertEquals(1, JSType.ENUMDECL);
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSTypeNative jSTypeNative1 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative1);
        // Undeclared exception!
        try {
            typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, (Node) null, jSType0, jSType1, (Node) null, 46);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        typeValidator0.expectCanOverride(nodeTraversal0, node0, enumElementType0, enumType0, "Unknown class name", enumType0);
        assertTrue(enumElementType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.SourceFile", (Node) null, jSType0);
        // Undeclared exception!
        try {
            typeValidator0.expectCanOverride((NodeTraversal) null, (Node) null, enumType0, jSType0, " properties.", jSType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        typeValidator0.expectSuperType(nodeTraversal0, (Node) null, functionType0, functionType0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectSuperType(nodeTraversal0, (Node) null, functionType0, functionType0);
        assertFalse(functionType0.isNullType());
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Object#Key", (Node) null, noType0);
        // Undeclared exception!
        try {
            typeValidator0.expectSuperType(nodeTraversal0, (Node) null, noType0, enumType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        typeValidator0.expectCanCast(nodeTraversal0, (Node) null, jSType0, jSType0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        typeValidator0.expectCanCast(nodeTraversal0, (Node) null, jSType0, jSType0);
        assertEquals(0, printStreamErrorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test4155() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("qTFeGjoX^/y$3$J/9", (Node) null, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        typeValidator0.expectCanCast(nodeTraversal0, (Node) null, enumType0, enumElementType0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("qTFeGjoX^/y$3$J/9", (Node) null, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        typeValidator0.expectCanCast(nodeTraversal0, (Node) null, enumType0, enumElementType0);
        assertTrue(enumElementType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4257() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(3);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
        // Undeclared exception!
        try {
            typeValidator0.expectUndeclaredVariable("?", (CompilerInput) null, node0, node0, (Scope.Var) null, "?", templateType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, noType0);
        assertFalse(node0.isIf());
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        Node node0 = new Node(21);
        String string0 = typeValidator0.getReadableJSTypeName(node0, false);
        assertEquals("?", string0);
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.setShouldReport(false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectBitwiseable(nodeTraversal0, (Node) null, jSType0, "Object#Key");
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make("Unknown class name", 46, (-1825), compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("qTFeGjoX^/y$3$J/9", (Node) null, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = typeValidator_TypeMismatch0.equals(enumElementType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4762() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, noType0);
        String[] stringArray0 = new String[1];
        JSError jSError0 = JSError.make("", node0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType0, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(noType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(21);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingReturn checkMissingReturn0 = new CheckMissingReturn(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingReturn0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("?", node0, noType0);
        String[] stringArray0 = new String[1];
        JSError jSError0 = JSError.make("", node0, nodeTraversal0.NODE_TRAVERSAL_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumType0, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(noType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        assertFalse(boolean0);
    }
}
