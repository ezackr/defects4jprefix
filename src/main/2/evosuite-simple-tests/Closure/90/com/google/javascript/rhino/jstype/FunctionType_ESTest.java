/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:07:14 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType0 = noObjectType0.getGreatestSubtype(errorFunctionType0);
        assertFalse(jSType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType jSType0 = functionType1.getLeastSupertype(functionType0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        JSType jSType0 = functionType1.getLeastSupertype(functionType0);
        assertTrue(jSType0.equals((Object) functionType0));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.hasEqualCallType(noType0);
        assertFalse(noType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.isReturnTypeInferred();
        assertFalse(noObjectType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.isInstanceType();
        assertFalse(noType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        boolean boolean0 = objectType0.canBeCalled();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P,L]5;C{6N/7y9-V", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
        assertFalse(functionType1.isConstructor());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P,L]5;C{6N/7y9-V", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
        assertTrue(functionType0.isFunctionType());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P,L]5;C{6N/7y9-V", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P,L]5;C{6N/7y9-V", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getGreatestSubtype(functionType0);
        assertTrue(functionType1.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(0, 0, 0);
        noType0.setSource(node0);
        assertFalse(noType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getLeastSupertype(functionType0);
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getLeastSupertype(functionType0);
        assertFalse(functionType0.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "O_X\"^\"Te");
        List<FunctionType> list0 = errorFunctionType0.getSubTypes();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a constructor", 1930, (-2147483645));
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, allType0, false);
        UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Not declared as a constructor", true);
        FunctionType functionType0 = null;
        try {
            functionType0 = new FunctionType(jSTypeRegistry0, "g|N", node0, arrowType0, unresolvedTypeExpression0, "MX0G 4", false, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType0.getGreatestSubtype(functionType1);
        assertFalse(functionType0.equals((Object) functionType1));
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString(105, "/,x");
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.ogle.javascript.rhino.jstype.FunctionParamBuilder", node0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString(1, "Not declared as a constructor");
        // Undeclared exception!
        try {
            FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        // Undeclared exception!
        try {
            jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.getLeastSupertype(objectType0);
        assertFalse(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = stringType0.autoboxesTo();
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[1] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = stringType0.autoboxesTo();
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[1] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(jSType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        assertTrue(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        int int0 = errorFunctionType0.getMinArguments();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) allType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) allType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        assertTrue(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        int int0 = errorFunctionType0.getMaxArguments();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = noType0.getPrototype();
        noType0.setPrototypeBasedOn(functionPrototypeType0);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Z|\"g- +-X", (Node) null);
        // Undeclared exception!
        try {
            functionType0.getTopMostDefiningType("Z|\"g- +-X");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "at index ");
        FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setInstanceType(functionPrototypeType0);
        boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "at index ");
        FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setInstanceType(functionPrototypeType0);
        boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getPrototype();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getPrototype();
        assertEquals(4, functionType0.getMaxArguments());
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) noType0);
        noType0.setImplementedInterfaces(linkedList0);
        noType0.getAllImplementedInterfaces();
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        linkedList0.add(objectType0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.setImplementedInterfaces(linkedList0);
        noObjectType0.getAllImplementedInterfaces();
        assertTrue(noObjectType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getAllImplementedInterfaces();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getAllImplementedInterfaces();
        assertEquals(4, functionType0.getMaxArguments());
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.findPropertyType("prototype");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.hasProperty("StringNode: str is null");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.hasProperty("StringNode: str is null");
        assertTrue(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.hasOwnDeclaredProperty("prototype");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "COLONCOLON");
        errorFunctionType0.getPropertyType("Unknown class name");
        assertFalse(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3446() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c|l4l");
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", nullType0, false, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.Multisets$AbstractEntry");
        JSType jSType0 = errorFunctionType0.getPropertyType("prototype");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.Multisets$AbstractEntry");
        JSType jSType0 = errorFunctionType0.getPropertyType("prototype");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", jSType0, false, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
        boolean boolean0 = functionType0.isPropertyTypeInferred("s$.O@t'A;M[]!u^8|.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
        boolean boolean0 = functionType0.isPropertyTypeInferred("s$.O@t'A;M[]!u^8|.");
        assertTrue(functionType0.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
        functionType0.defineProperty("s$.O@t'A;M[]!u^8|.", (JSType) null, true, true);
        boolean boolean0 = functionType0.isPropertyTypeInferred("s$.O@t'A;M[]!u^8|.");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3954() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
        functionType0.defineProperty("s$.O@t'A;M[]!u^8|.", (JSType) null, true, true);
        boolean boolean0 = functionType0.isPropertyTypeInferred("s$.O@t'A;M[]!u^8|.");
        assertFalse(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
        assertNotSame(functionType2, functionType0);
    }

    @Test(timeout = 4000)
    public void test4056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.isFunctionType());
    }

    @Test(timeout = 4000)
    public void test4057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
        assertFalse(functionType2.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = (FunctionType) functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType0);
        assertNotSame(functionType1, jSType0);
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) numberType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getGreatestSubtype(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        FunctionType functionType2 = (FunctionType) functionType1.getGreatestSubtype(functionType0);
        // Undeclared exception!
        try {
            functionType2.setImplicitPrototype(functionType1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4463() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getGreatestSubtype(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4564() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType1, (List<JSType>) linkedList0);
        functionType2.getLeastSupertype(functionType1);
        assertTrue(functionType2.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4665() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        linkedList0.add((JSType) noType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4666() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        linkedList0.add((JSType) noType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType1);
        assertNotSame(functionType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test4767() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Eg )");
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        errorFunctionType0.getGreatestSubtype(functionType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4868() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Eg )");
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getLeastSupertype(errorFunctionType0);
        assertFalse(errorFunctionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4869() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Eg )");
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getLeastSupertype(errorFunctionType0);
        assertFalse(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4970() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertTrue(functionType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test4971() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertTrue(functionType1.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4972() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertFalse(functionType1.equals((Object) functionType0));
    }

    @Test(timeout = 4000)
    public void test4973() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertFalse(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertFalse(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4975() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "4Tf4MX,:-3*P@\"", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        assertFalse(functionType1.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test5076() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5077() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType0.getGreatestSubtype(functionType1);
        assertFalse(functionType1.equals((Object) functionType0));
    }

    @Test(timeout = 4000)
    public void test5178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        // Undeclared exception!
        try {
            functionType0.getSuperClassConstructor();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        assertTrue(functionType0.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test5381() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5382() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test5483() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "COLONCOLON");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
        // Undeclared exception!
        try {
            functionType0.hasUnknownSupertype();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5584() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn(templateType0);
        boolean boolean0 = noType0.hasUnknownSupertype();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5685() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        // Undeclared exception!
        try {
            functionType0.getTopMostDefiningType("Not declared as a constructor");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5786() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        noType0.setPrototype(functionPrototypeType0);
        JSType jSType0 = noType0.getTopMostDefiningType("Named type with empty name component");
        assertTrue(jSType0.isNullable());
    }

    @Test(timeout = 4000)
    public void test5887() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = noType0.getPrototype();
        functionPrototypeType0.defineProperty("Named type with empty name component", noType0, true, true);
        NoType noType1 = (NoType) noType0.getTopMostDefiningType("Named type with empty name component");
        assertFalse(noType1.isReturnTypeInferred());
    }

    @Test(timeout = 4000)
    public void test5988() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[4];
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("L{", (Node) null);
        jSTypeArray0[3] = (JSType) functionType0;
        FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(noType0, jSTypeArray0);
        assertTrue(functionType1.isConstructor());
    }

    @Test(timeout = 4000)
    public void test6089() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
        assertEquals("Function", string0);
    }

    @Test(timeout = 4000)
    public void test6190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.toString();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.toString();
        assertEquals(4, functionType0.getMaxArguments());
    }

    @Test(timeout = 4000)
    public void test6292() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6293() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = nullType0.restrictByNotNullOrUndefined();
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
        assertEquals("function (): None", string0);
    }

    @Test(timeout = 4000)
    public void test6394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test6495() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) recordType0;
        jSTypeArray0[1] = (JSType) recordType0;
        jSTypeArray0[2] = (JSType) recordType0;
        jSTypeArray0[3] = (JSType) recordType0;
        jSTypeArray0[4] = (JSType) recordType0;
        jSTypeArray0[5] = (JSType) recordType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, node0);
        functionType0.toString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6596() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "COLONCOLON");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType2);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6597() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "COLONCOLON");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType2);
        assertSame(functionType1, jSType0);
    }

    @Test(timeout = 4000)
    public void test6698() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.Node$NumberNode");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, errorFunctionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType1);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType2);
        assertTrue(functionType2.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6699() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.Node$NumberNode");
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, errorFunctionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType1);
        JSType jSType0 = functionType1.getGreatestSubtype(functionType2);
        assertNotSame(functionType2, jSType0);
    }

    @Test(timeout = 4000)
    public void test67100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, noType0);
        JSType jSType0 = functionType2.getGreatestSubtype(functionType1);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test67101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, noType0);
        JSType jSType0 = functionType2.getGreatestSubtype(functionType1);
        assertTrue(jSType0.equals((Object) functionType2));
    }

    @Test(timeout = 4000)
    public void test68102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test68103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("prototype", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test69104() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) proxyObjectType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.hasInstanceType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test70105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.getAllImplementedInterfaces();
        boolean boolean0 = noObjectType0.hasCachedValues();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test71106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a constructor", 1930, (-2147483645));
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, allType0, false);
        EmptyScope emptyScope0 = new EmptyScope();
        UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Not declared as a constructor", true);
        Node node1 = new Node(105, node0, node0);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "g|N", node1, arrowType0, unresolvedTypeExpression0, "MX0G 4", false, true);
        functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        assertTrue(unresolvedTypeExpression0.isResolved());
    }

    @Test(timeout = 4000)
    public void test72107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "cRJe^");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test73108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, "Named type with empty name component");
        noType0.setResolvedTypeInternal(enumElementType0);
        linkedList0.add((ObjectType) noType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test74109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        EmptyScope emptyScope0 = new EmptyScope();
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test75110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.toDebugHashCodeString();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test76111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        String string0 = objectType0.toDebugHashCodeString();
        assertEquals("{18}", string0);
    }

    @Test(timeout = 4000)
    public void test77112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test77113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
        assertEquals("function ({9}): {9}", string0);
    }

    @Test(timeout = 4000)
    public void test78114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
        String string0 = functionType0.toDebugHashCodeString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test78115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
        String string0 = functionType0.toDebugHashCodeString();
        assertEquals("function (): {9}", string0);
    }

    @Test(timeout = 4000)
    public void test79116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.toDebugHashCodeString();
        assertTrue(noType0.hasCachedValues());
    }
}
