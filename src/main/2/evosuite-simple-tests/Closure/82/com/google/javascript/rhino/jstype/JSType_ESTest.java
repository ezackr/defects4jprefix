/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:38:59 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        assertFalse(noResolvedType0.isRecordType());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowEquality(noResolvedType0);
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowEquality(noResolvedType0);
        boolean boolean0 = jSType_TypePair0.typeB.differsFrom(jSType_TypePair0.typeA);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        assertFalse(instanceObjectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        assertFalse(instanceObjectType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
        assertFalse(allType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
        assertFalse(allType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderInequality(noObjectType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesStringContext();
        assertTrue(noObjectType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderInequality(noObjectType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesStringContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        assertTrue(objectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        assertFalse(objectType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        assertNotNull(objectType0);
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        assertFalse(objectType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.getJSDocInfo();
        assertFalse(numberType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        String string0 = noType0.toDebugHashCodeString();
        assertEquals("function (this:me, {9}): me", string0);
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        String string0 = noType0.toDebugHashCodeString();
        assertFalse(noType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        String string0 = noType0.toDebugHashCodeString();
        assertFalse(noType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        String string0 = noType0.toDebugHashCodeString();
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        String string0 = noType0.toDebugHashCodeString();
        assertFalse(noType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0722() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0723() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test0827() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        assertFalse(numberType0.isUnionType());
    }

    @Test(timeout = 4000)
    public void test0828() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        assertFalse(jSType0.isEnumElementType());
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(numberType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(numberType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(jSType0.isFunctionType());
    }

    @Test(timeout = 4000)
    public void test0833() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(jSType0.isVoidType());
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        assertFalse(jSType0.isNullType());
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        assertFalse(arrowType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0937() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        assertFalse(arrowType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test0938() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        assertFalse(arrowType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        assertTrue(noObjectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1040() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noObjectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
        boolean boolean0 = arrowType0.matchesStringContext();
        assertFalse(arrowType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1041() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noObjectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
        boolean boolean0 = arrowType0.matchesStringContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1042() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noObjectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
        boolean boolean0 = arrowType0.matchesStringContext();
        assertFalse(arrowType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1043() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noObjectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], true);
        boolean boolean0 = arrowType0.matchesStringContext();
        assertFalse(arrowType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        assertFalse(parameterizedType0.isFunctionType());
    }

    @Test(timeout = 4000)
    public void test1145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isNullable();
        assertFalse(parameterizedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isNullable();
        assertFalse(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isNullable();
        assertFalse(parameterizedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        boolean boolean0 = parameterizedType0.isNullable();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        allType0.unboxesTo();
        assertFalse(allType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        assertFalse(templateType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1454() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".3c,~Ai*nsUy (", ".3c,~Ai*nsUy (", (-425), (-425));
        boolean boolean0 = namedType0.isConstructor();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1455() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".3c,~Ai*nsUy (", ".3c,~Ai*nsUy (", (-425), (-425));
        boolean boolean0 = namedType0.isConstructor();
        assertFalse(namedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1456() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".3c,~Ai*nsUy (", ".3c,~Ai*nsUy (", (-425), (-425));
        boolean boolean0 = namedType0.isConstructor();
        assertFalse(namedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1457() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, ".3c,~Ai*nsUy (", ".3c,~Ai*nsUy (", (-425), (-425));
        boolean boolean0 = namedType0.isConstructor();
        assertFalse(namedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1558() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        noObjectType0.setValidator(predicate0);
        assertFalse(noObjectType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1559() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        noObjectType0.setValidator(predicate0);
        assertTrue(noObjectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1560() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        noObjectType0.setValidator(predicate0);
        assertFalse(noObjectType0.isNoType());
    }

    @Test(timeout = 4000)
    public void test1561() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        noObjectType0.setValidator(predicate0);
        assertFalse(noObjectType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test1562() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
        noObjectType0.setValidator(predicate0);
        assertFalse(noObjectType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1663() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1664() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        assertFalse(voidType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1665() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        assertFalse(voidType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1666() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        assertFalse(voidType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1767() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.canBeCalled();
        assertFalse(numberType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1768() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.canBeCalled();
        assertFalse(numberType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test1769() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.canBeCalled();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1770() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.canBeCalled();
        assertFalse(numberType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1871() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        boolean boolean0 = jSType0.hasDisplayName();
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1872() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        boolean boolean0 = jSType0.hasDisplayName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1973() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test1975() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test1976() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1977() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumber();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        assertFalse(noType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test2079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        assertFalse(noType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test2080() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2081() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2082() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        assertFalse(noType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test2183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "ki");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "ki");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test2185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "ki");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "ki");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        assertFalse(templateType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test2287() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertFalse(noObjectType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test2288() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertFalse(noObjectType0.isNoType());
    }

    @Test(timeout = 4000)
    public void test2289() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertTrue(noObjectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2290() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertFalse(noObjectType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test2291() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2292() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        assertFalse(noObjectType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test2393() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.matchesInt32Context();
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test2394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.matchesInt32Context();
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test2395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.matchesInt32Context();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2496() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        assertFalse(templateType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test2497() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test2498() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2499() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test25100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isInstanceType();
        assertFalse(nullType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test25101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isInstanceType();
        assertFalse(nullType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test25102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isInstanceType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isInstanceType();
        assertFalse(nullType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test26104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(noResolvedType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType_TypePair0.typeA);
        boolean boolean0 = indexedType0.isCheckedUnknownType();
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test26105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(noResolvedType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType_TypePair0.typeA);
        boolean boolean0 = indexedType0.isCheckedUnknownType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test27106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setResolvedTypeInternal((JSType) null);
        JSType jSType0 = noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test27107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setResolvedTypeInternal((JSType) null);
        JSType jSType0 = noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        assertTrue(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test28108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderInequality(noObjectType0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test28109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderInequality(noObjectType0);
        JSType.getGreatestSubtype(jSType_TypePair0.typeA, (JSType) noObjectType0);
        assertFalse(noObjectType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test29110() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesUint32Context();
        assertFalse(allType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test29111() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesUint32Context();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isEnumType();
        assertFalse(templateType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test30113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isEnumType();
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test30114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isEnumType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isEnumType();
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test31116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        assertFalse(functionPrototypeType0.isVoidType());
    }

    @Test(timeout = 4000)
    public void test31117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        assertFalse(functionPrototypeType0.isNullType());
    }

    @Test(timeout = 4000)
    public void test31118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test31119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        assertFalse(functionPrototypeType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test31120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        assertFalse(functionPrototypeType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test31122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        assertFalse(functionPrototypeType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test32123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test32124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        assertTrue(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test33125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.forgiveUnknownNames();
        assertFalse(voidType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test33126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.forgiveUnknownNames();
        assertFalse(voidType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test33127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.forgiveUnknownNames();
        assertFalse(voidType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test34128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.clearResolved();
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test34129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.clearResolved();
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test34130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.clearResolved();
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test35131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        assertTrue(parameterizedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test35132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        assertFalse(parameterizedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test35134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        assertFalse(parameterizedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test36135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.push((JSType) null);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        // Undeclared exception!
        try {
            unionType0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.System", e);
        }
    }

    @Test(timeout = 4000)
    public void test37136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.hasDisplayName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test37137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.hasDisplayName();
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test37138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.hasDisplayName();
        assertFalse(jSType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test37139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.hasDisplayName();
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test38140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        assertFalse(parameterizedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test38141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        assertFalse(parameterizedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test38142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
        boolean boolean0 = parameterizedType0.hasDisplayName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.offerFirst(noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        assertFalse(functionType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test39144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.offerFirst(noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        assertFalse(functionType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test39145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.offerFirst(noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test39146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        linkedList0.offerFirst(noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        assertFalse(functionType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test40147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        objectType0.getTypesUnderShallowEquality(templateType0);
        assertTrue(objectType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test41148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) nullType0, (JSType) nullType0);
        assertFalse(jSType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test41149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) nullType0, (JSType) nullType0);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test41150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) nullType0, (JSType) nullType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test42151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(noResolvedType0, (JSType) null);
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test42152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(noResolvedType0, (JSType) null);
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test42153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(noResolvedType0, (JSType) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(noResolvedType0, (JSType) null);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test43155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.isEquivalent(noType0, noType0);
        assertFalse(noType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test43156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.isEquivalent(noType0, noType0);
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test43157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.isEquivalent(noType0, noType0);
        assertFalse(noType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test43158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.isEquivalent(noType0, noType0);
        assertFalse(noType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test44159() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test45160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test45161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
        assertFalse(noResolvedType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test45162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test45163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
        assertFalse(noResolvedType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test46164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.equals(noResolvedType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.equals(noResolvedType0);
        assertFalse(templateType0.isAllType());
    }

    @Test(timeout = 4000)
    public void test46166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.equals(noResolvedType0);
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test46167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.equals(noResolvedType0);
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test46168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.equals(noResolvedType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test47169() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, (String) null);
        enumElementType0.findPropertyType("Not declared as a type name");
        assertFalse(enumElementType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test48170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test48171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test49172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test49173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test50174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test50175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType0.canAssignTo(jSType_TypePair0.typeB);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test51176() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        assertFalse(objectType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test51177() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        assertFalse(objectType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test51178() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        assertNotNull(objectType0);
    }

    @Test(timeout = 4000)
    public void test52179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test52180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test52181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        assertFalse(allType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test52182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        assertFalse(allType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test53183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test53184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test53185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test53186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test54187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(allType0);
        jSType_TypePair0.typeB.testForEqualityHelper(jSType_TypePair0.typeB, noType0);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test54188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(allType0);
        jSType_TypePair0.typeB.testForEqualityHelper(jSType_TypePair0.typeB, noType0);
        assertFalse(allType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test55189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
        jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test56190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        noResolvedType0.getTypesUnderEquality(functionType0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test56191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
        noResolvedType0.getTypesUnderEquality(functionType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test57192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
        noType0.getTypesUnderEquality(jSType0);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test58193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Wb-u.ED");
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        errorFunctionType0.getTypesUnderInequality(numberType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test59194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Kc8VoH$^Px1");
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.getTypesUnderInequality(errorFunctionType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test59195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Kc8VoH$^Px1");
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.getTypesUnderInequality(errorFunctionType0);
        assertFalse(errorFunctionType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test60196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(functionPrototypeType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getTypesUnderInequality(jSType_TypePair0.typeB);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test61197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "Named type with empty name component");
        stringType0.testForEquality(enumElementType0);
        assertTrue(enumElementType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test61198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "Named type with empty name component");
        stringType0.testForEquality(enumElementType0);
        assertFalse(stringType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test62199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test62200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        assertFalse(noType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test62201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test62202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        assertFalse(noType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test63203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test63204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noResolvedType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test64205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canTestForShallowEqualityWith(numberType0);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test64206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canTestForShallowEqualityWith(numberType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test64207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.canTestForShallowEqualityWith(numberType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test65208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getLeastSupertype(noResolvedType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test66209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test66210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        noResolvedType0.getLeastSupertype(jSType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test67211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(noResolvedType0);
        noResolvedType0.getLeastSupertype(jSType_TypePair0.typeB);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test68212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        noObjectType0.getTypesUnderShallowEquality(recordType0);
        assertTrue(noObjectType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test69213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType1 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(jSType1);
        assertFalse(jSType1.isResolved());
    }

    @Test(timeout = 4000)
    public void test69214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType1 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(jSType1);
        assertFalse(jSType1.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test69215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType1 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(jSType1);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test70216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test70217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        instanceObjectType0.getGreatestSubtype(jSType0);
        assertFalse(noResolvedType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test71218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = stringType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(stringType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test71219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = stringType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(stringType0);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test72220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderShallowEquality(allType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test73221() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        unionType0.getTypesUnderShallowEquality(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test73222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        unionType0.getTypesUnderShallowEquality(noResolvedType0);
        assertFalse(unionType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test74223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test74224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        assertFalse(jSType0.isNoResolvedType());
    }

    @Test(timeout = 4000)
    public void test74225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test74226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(true);
        assertTrue(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test75227() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = allType0.getRestrictedTypeGivenToBooleanOutcome(false);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test76228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test76229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        noResolvedType0.getTypesUnderEquality(jSType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test77230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(booleanType0);
        assertFalse(booleanType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test77231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(booleanType0);
        assertFalse(booleanType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test78232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test78233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
        noResolvedType0.getTypesUnderInequality(jSType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test79234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
        noType0.getTypesUnderInequality(jSType_TypePair0.typeA);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test80235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        jSType0.getTypesUnderShallowInequality(jSType0);
        assertFalse(jSType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test80236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        jSType0.getTypesUnderShallowInequality(jSType0);
        assertFalse(jSType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test80237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        jSType0.getTypesUnderShallowInequality(jSType0);
        assertTrue(noType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test81238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test81239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(noResolvedType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test82240() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test82241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test82242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test82243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test83244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test83245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test84246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        noResolvedType0.isSubtype(templateType0);
        assertFalse(templateType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test84247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        noResolvedType0.isSubtype(templateType0);
        assertFalse(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test84248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        noResolvedType0.isSubtype(templateType0);
        assertFalse(templateType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test84249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        noResolvedType0.isSubtype(templateType0);
        assertTrue(noResolvedType0.isEmptyType());
    }

    @Test(timeout = 4000)
    public void test85250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, errorFunctionType0);
        assertFalse(enumType0.isResolved());
    }

    @Test(timeout = 4000)
    public void test85251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, errorFunctionType0);
        enumType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        assertTrue(enumType0.isResolved());
    }
}
