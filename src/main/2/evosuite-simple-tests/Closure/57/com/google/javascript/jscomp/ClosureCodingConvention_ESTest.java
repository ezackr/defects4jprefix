/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 02:49:16 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClosureCodingConvention_ESTest extends ClosureCodingConvention_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        // Undeclared exception!
        try {
            googleCodingConvention0.extractClassNameIfRequire((Node) null, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isVarArgsParameter((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = new Node((-503));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.extractClassNameIfProvide(node0, node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getExportSymbolFunction();
        assertEquals("goog.exportSymbol", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isOptionalParameter((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isSuperClassReference((String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getAbstractMethodName();
        assertEquals("goog.abstractMethod", string0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isPrivate("D:}^z52UH9@");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getExportPropertyFunction();
        assertEquals("goog.exportProperty", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        // Undeclared exception!
        try {
            closureCodingConvention0.applySingletonGetter((FunctionType) null, (FunctionType) null, (ObjectType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ClosureCodingConvention", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        String string0 = closureCodingConvention0.getGlobalObject();
        assertEquals("goog.global", string0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Collection<CodingConvention.AssertionFunctionSpec> collection0 = googleCodingConvention0.getAssertionFunctions();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.MIXIN;
        closureCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);
        assertNull(closureCodingConvention0.getDelegateSuperclassName());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.INHERITS;
        // Undeclared exception!
        try {
            closureCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ClosureCodingConvention", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(38, "goog.isBoolean");
        Node node1 = new Node(38, node0, node0, node0);
        CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node1);
        assertNull(codingConvention_SubclassRelationship0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Node node0 = Node.newString(33, "$%SGZ0A]/", 33, 33);
        Node node1 = new Node(1, node0, node0, node0, 25, 21);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        // Undeclared exception!
        try {
            googleCodingConvention0.getClassesDefinedByCall(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ClosureCodingConvention", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node((-3));
        Node node1 = new Node(33, node0, node0, node0, 9, 34);
        CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node1);
        assertNull(codingConvention_SubclassRelationship0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Node node0 = Node.newString(38, "$P$%SGZ0A]/");
        Node node1 = new Node(1, node0, node0, node0, 25, 21);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node1);
        assertNull(codingConvention_SubclassRelationship0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";is,$OPOt2yWcxs");
        List<String> list0 = googleCodingConvention0.identifyTypeDeclarationCall(node0);
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(38, "goog.addDependency", 38, 38);
        Node node1 = new Node(4, node0);
        List<String> list0 = googleCodingConvention0.identifyTypeDeclarationCall(node1);
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Node node0 = Node.newString(38, "goog.addSingletonGetter", 38, 38);
        Node node1 = new Node(13, node0, node0, node0, 15, 41);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getSingletonGetterClassName(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Node node0 = Node.newString(38, "goog$addSingletonGetter");
        Node node1 = new Node(52, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getSingletonGetterClassName(node1);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";is,$OPOt2yWcxs");
        String string0 = googleCodingConvention0.getSingletonGetterClassName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Node node0 = Node.newString(38, "goog$addSingletonGetter");
        Node node1 = Node.newString(38, "goog$addSingletonGetter");
        Node node2 = new Node(52, node0, node1);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getSingletonGetterClassName(node2);
        assertEquals("goog$addSingletonGetter", string0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Node node0 = Node.newNumber((double) (-3715), (-3715), (-3715));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        // Undeclared exception!
        try {
            googleCodingConvention0.isPropertyTestFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        Node node1 = new Node(37, node0, node0, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = googleCodingConvention0.isPropertyTestFunction(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Node node0 = new Node((-503), (-503), (-503));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        // Undeclared exception!
        try {
            googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Node node0 = new Node((-19), (-19), (-19));
        Node node1 = new Node(37, node0, node0, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.ObjectLiteralCast codingConvention_ObjectLiteralCast0 = googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node1);
        assertNull(codingConvention_ObjectLiteralCast0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Node node0 = Node.newString(38, "goog.partial", 38, 38);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node0);
        assertNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Node node0 = Node.newString(38, "goog.partial", 38, 38);
        Node node1 = new Node(37, node0, node0, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
        assertNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Node node0 = new Node(32, 32, 32);
        Node node1 = new Node(37, node0, node0, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
        assertNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(38, "goog.bind");
        Node node1 = new Node(37, node0, node0, node0, node0);
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
        assertNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(38, "goog.bind");
        Node node1 = Node.newString(38, "goog.bind");
        Node node2 = new Node(37, node0, node0, node0, node1);
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node2);
        assertNotNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        Node node1 = new Node(37, node0, node0, node0, node0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
        assertNull(codingConvention_Bind0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Node node0 = Node.newString(38, "goog.partial", 38, 38);
        Node node1 = Node.newString((-1617265154), "goog.partial", (-5025), 15);
        Node node2 = new Node(37, node0, node1, node1, node1);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node2);
        assertNotNull(codingConvention_Bind0);
    }
}
