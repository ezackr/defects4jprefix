/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 04:44:46 GMT 2024
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehensionLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Yield;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        EmptyExpression emptyExpression0 = new EmptyExpression(9);
        astRoot0.addChildrenToFront(emptyExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        EmptyExpression emptyExpression0 = new EmptyExpression(9);
        astRoot0.addChildrenToFront(emptyExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        EmptyExpression emptyExpression0 = new EmptyExpression(9);
        astRoot0.addChildrenToFront(emptyExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        objectLiteral0.setIsDestructuring(true);
        astRoot0.addChildrenToFront(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "ci", (Config) null, errorCollector0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
        }
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(18);
        astRoot0.addChildrenToFront(objectProperty0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, toolErrorReporter0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        DoLoop doLoop0 = new DoLoop(22);
        astRoot0.addChildrenToFront(doLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ElementGet elementGet0 = new ElementGet();
        astRoot0.addChildrenToFront(elementGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Block block0 = new Block(17);
        AstRoot astRoot0 = new AstRoot();
        astRoot0.addChildrenToFront(block0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "N4FHuZLe\u0006", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Block block0 = new Block(17);
        AstRoot astRoot0 = new AstRoot();
        astRoot0.addChildrenToFront(block0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "N4FHuZLe\u0006", (Config) null, errorCollector0);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement(4);
        Name name0 = new Name(10, "error reporter");
        continueStatement0.setLabel(name0);
        astRoot0.addChildrenToFront(continueStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, toolErrorReporter0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        WhileLoop whileLoop0 = new WhileLoop(4, 5);
        astRoot0.addChildrenToFront(whileLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        NumberLiteral numberLiteral0 = new NumberLiteral(0);
        astRoot0.addChildrenToFront(numberLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression();
        astRoot0.addChildrenToFront(parenthesizedExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        AstRoot astRoot0 = new AstRoot(110);
        ThrowStatement throwStatement0 = new ThrowStatement(140, astRoot0);
        astRoot0.addChildrenToFront(throwStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        NewExpression newExpression0 = new NewExpression();
        astRoot0.addChildrenToFront(newExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral();
        astRoot0.addChildrenToFront(stringLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "/9", (Config) null, errorCollector0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Scope scope0 = new Scope(15);
        astRoot0.addChildrenToFront(scope0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        LabeledStatement labeledStatement0 = new LabeledStatement(11);
        Label label0 = new Label();
        labeledStatement0.addLabel(label0);
        AstRoot astRoot0 = new AstRoot();
        astRoot0.addChildrenToFront(labeledStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        AstRoot astRoot0 = new AstRoot(180);
        PropertyGet propertyGet0 = new PropertyGet(2, 11);
        astRoot0.addChildrenToFront(propertyGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WithStatement withStatement0 = new WithStatement(22, 5);
        astRoot0.addChildrenToFront(withStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        AstRoot astRoot0 = new AstRoot(160);
        ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(11);
        astRoot0.addChildrenToFront(arrayComprehensionLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ForLoop forLoop0 = new ForLoop(15, 2);
        astRoot0.addChildrenToFront(forLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "Z1cG}Okz", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ConditionalExpression conditionalExpression0 = new ConditionalExpression(1);
        astRoot0.addChildrenToFront(conditionalExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        AstRoot astRoot0 = new AstRoot(160);
        Yield yield0 = new Yield(24);
        astRoot0.addChildrenToFront(yield0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
        }
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Context context0 = new Context();
        AstRoot astRoot0 = new AstRoot(1);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(22, 20, token_CommentType0, "error reporter");
        astRoot0.addComment(comment0);
        Locale locale0 = Locale.PRC;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Config config0 = new Config(set0, set0, false, false);
        ErrorReporter errorReporter0 = context0.getErrorReporter();
        Node node0 = IRFactory.transformTree(astRoot0, "", config0, errorReporter0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        Context context0 = new Context();
        AstRoot astRoot0 = new AstRoot(1);
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment(22, 20, token_CommentType0, "error reporter");
        astRoot0.addComment(comment0);
        Locale locale0 = Locale.PRC;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        Config config0 = new Config(set0, set0, false, false);
        ErrorReporter errorReporter0 = context0.getErrorReporter();
        Node node0 = IRFactory.transformTree(astRoot0, "", config0, errorReporter0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral();
        regExpLiteral0.setValue("error reporter");
        astRoot0.addChildrenToFront(regExpLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(22, 20, token_CommentType0, "error reporter");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1);
        Token.CommentType token_CommentType0 = Token.CommentType.HTML;
        Comment comment0 = new Comment(22, 20, token_CommentType0, "error reporter");
        astRoot0.addComment(comment0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Token.CommentType token_CommentType0 = Token.CommentType.LINE;
        Comment comment0 = new Comment(0, 100, token_CommentType0, "language version");
        ContinueStatement continueStatement0 = new ContinueStatement(1, 8);
        continueStatement0.setJsDocNode(comment0);
        astRoot0.addChildrenToFront(continueStatement0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config config0 = new Config(treeSet0, treeSet0, false, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, "language version", config0, toolErrorReporter0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        AstRoot astRoot0 = new AstRoot(12);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "() {\n\t", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        AstRoot astRoot0 = new AstRoot(12);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "() {\n\t", (Config) null, errorCollector0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Scope scope0 = new Scope(15);
        scope0.addChildToBack(astRoot0);
        astRoot0.addChildrenToFront(scope0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(18, 6);
        arrayLiteral0.setIsDestructuring(true);
        astRoot0.addChildrenToFront(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "f!hP?*0,y:g0", (Config) null, errorCollector0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
        }
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(5, 26);
        arrayLiteral0.addElement(astRoot0);
        AstRoot astRoot1 = new AstRoot(14);
        astRoot1.addChildrenToFront(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot1, "ro)x1T0=KkS#xm,}", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral(5, 26);
        arrayLiteral0.addElement(astRoot0);
        AstRoot astRoot1 = new AstRoot(14);
        astRoot1.addChildrenToFront(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot1, "ro)x1T0=KkS#xm,}", (Config) null, errorCollector0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        AstRoot astRoot1 = new AstRoot(5);
        ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot1, false);
        astRoot0.addChildrenToFront(expressionStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        AstRoot astRoot1 = new AstRoot(5);
        ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot1, false);
        astRoot0.addChildrenToFront(expressionStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement(24, 100);
        astRoot0.addChildrenToFront(breakStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement(120);
        Name name0 = new Name(7);
        breakStatement0.setBreakLabel(name0);
        astRoot0.addChildrenToFront(breakStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, (String) null, (Config) null, toolErrorReporter0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode(5);
        astRoot0.addChildrenToFront(functionNode0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3341() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(1);
        astRoot0.addChildrenToFront(labeledStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "QE)", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        astRoot0.addChildrenToFront(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3443() throws Throwable {
        AstRoot astRoot0 = new AstRoot(1);
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        astRoot0.addChildrenToFront(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test3544() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement(160, 24);
        astRoot0.addChildrenToFront(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "msg.extend.scriptable", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3645() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement(130, 134, astRoot0);
        astRoot0.addChildrenToFront(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase();
        astRoot0.addChildrenToFront(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(2, 8);
        astRoot0.addChildrenToFront(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "*!+zAeL%@%", (Config) null, errorCollector0);
        assertEquals(132, node0.getType());
    }

    @Test(timeout = 4000)
    public void test3948() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration(2, 8);
        VariableInitializer variableInitializer0 = new VariableInitializer(2, 1);
        variableDeclaration0.addVariable(variableInitializer0);
        astRoot0.addChildrenToFront(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "*!+zAeL%@%", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4049() throws Throwable {
        AstRoot astRoot0 = new AstRoot(10);
        FunctionCall functionCall0 = new FunctionCall(150, 1);
        astRoot0.addChildrenToFront(functionCall0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        // Undeclared exception!
        try {
            IRFactory.transformTree(astRoot0, "language version", (Config) null, errorCollector0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }
}
