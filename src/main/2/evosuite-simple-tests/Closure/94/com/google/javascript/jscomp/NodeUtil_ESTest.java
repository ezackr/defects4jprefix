/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:15:44 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        Node node0 = Node.newString(11, "com.google.common.collect.AbstractMultimap$AsMap");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Node node0 = Node.newString("nL:Ea46P>", 144, 144);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.isNameReferenced(node0, "nL:Ea46P>", sourceMap_DetailLevel0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = Node.newString(86, ")%,)Xj$h");
        boolean boolean0 = NodeUtil.containsType(node0, 86);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
        boolean boolean0 = NodeUtil.containsFunction(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = new Node(20);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            NodeUtil.canBeSideEffected(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Node node0 = new Node(44);
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = new Node(84, 84, 84);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRP 84
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("#@2?^ 5MQ;2*t8@", "#@2?^ 5MQ;2*t8@");
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected CALL node, got BLOCK
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Node node0 = new Node(83, 83, 83);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Node node0 = Node.newString("undefined");
        Node node1 = NodeUtil.newName("undefined", node0, "undefined");
        Node node2 = new Node(109, node1, node1, node1, node1, 1, 17);
        Node node3 = NodeUtil.getAssignedValue(node1);
        assertNull(node3);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("#@2?^ 5MQ;2*t8@", "#@2?^ 5MQ;2*t8@");
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "#@2?^ 5MQ;2*t8@");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-2577));
        // Undeclared exception!
        try {
            NodeUtil.getNodeTypeReferenceCount((Node) null, 26, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
        }
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        NodeUtil.getBooleanValue(node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        NodeUtil.getBooleanValue(node1);
        assertTrue(node1.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        Node node1 = new Node(30, node0, node0, 98, 35);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Node node0 = Node.newString("-=");
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.referencesThis((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
        }
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02125() throws Throwable {
        Node node0 = Node.newString(101, "56V{E,");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02226() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02327() throws Throwable {
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        Node node0 = new Node(98);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        Node node0 = new Node(100);
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        Node node0 = Node.newString(101, "56V{E,");
        // Undeclared exception!
        try {
            NodeUtil.getExpressionBooleanValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        Node node0 = Node.newString("Interpreter frames not found");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", (-1488), (-1488));
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", (-1488), (-1488));
        NodeUtil.getExpressionBooleanValue(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        Node node0 = new Node(41);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        Node node0 = new Node(43, 50, 50);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03237() throws Throwable {
        Node node0 = new Node(44);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        Node node0 = new Node(47);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        Node node0 = Node.newString(63, "com.google.common.base.CharMatcher", 63, 63);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03540() throws Throwable {
        Node node0 = Node.newString(64, " ]6*a\fp2yMLX");
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        Node node0 = new Node(122);
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        Node node0 = Node.newString("");
        NodeUtil.getExpressionBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03944() throws Throwable {
        Node node0 = Node.newNumber(29.0);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04045() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", (-1488), (-1488));
        NodeUtil.getExpressionBooleanValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        Node node0 = Node.newString(92, "A*8V6rK");
        Node node1 = new Node(38, node0, node0, node0, node0, 4, (-2));
        // Undeclared exception!
        try {
            NodeUtil.getStringValue(node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // NAME is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test04247() throws Throwable {
        Node node0 = new Node(122);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test04348() throws Throwable {
        Node node0 = Node.newNumber(568.96);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("568.96", string0);
    }

    @Test(timeout = 4000)
    public void test04449() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = new Node(40, node0, node0, node0, node0, 4, 80);
        // Undeclared exception!
        try {
            NodeUtil.getStringValue(node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // String node not created with Node.newString
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test04550() throws Throwable {
        Node node0 = Node.newString(41, "Infinity", 118, 118);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("null", string0);
    }

    @Test(timeout = 4000)
    public void test04651() throws Throwable {
        Node node0 = new Node(43, 50, 50);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("false", string0);
    }

    @Test(timeout = 4000)
    public void test04752() throws Throwable {
        Node node0 = new Node(112);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04853() throws Throwable {
        Node node0 = Node.newNumber((double) 88);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("88", string0);
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertEquals(232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertEquals(232, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04958() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        String string0 = NodeUtil.getNearestFunctionName(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test05059() throws Throwable {
        Node node0 = Node.newString("^");
        Node node1 = new Node(118, node0, node0);
        node0.addChildAfter(node1, node1);
        String string0 = NodeUtil.getNearestFunctionName(node1);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        Node node0 = new Node(1405);
        Node node1 = new Node(29, node0, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05261() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1047, 1047);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(1047, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05262() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1047, 1047);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05263() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1047, 1047);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(1047, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05264() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1047, 1047);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05365() throws Throwable {
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        Node node0 = Node.newNumber((double) 50);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05466() throws Throwable {
        Node node0 = Node.newString(43, "#.cL");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05567() throws Throwable {
        Node node0 = new Node(44, 1427, 137);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05668() throws Throwable {
        Node node0 = new Node(122, 122, 43);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0, false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test05769() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 1339, 118);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(1339, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test05770() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 1339, 118);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(118, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05771() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 1339, 118);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test05772() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 1339, 118);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05873() throws Throwable {
        Node node0 = Node.newString(41, "Infinity", 118, 118);
        Node node1 = NodeUtil.newQualifiedNameNode("Infinity", node0, "hgKTj)VAi)");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05874() throws Throwable {
        Node node0 = Node.newString(41, "Infinity", 118, 118);
        Node node1 = NodeUtil.newQualifiedNameNode("Infinity", node0, "hgKTj)VAi)");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test05875() throws Throwable {
        Node node0 = Node.newString(41, "Infinity", 118, 118);
        Node node1 = NodeUtil.newQualifiedNameNode("Infinity", node0, "hgKTj)VAi)");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        assertEquals(118, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test05976() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        Node node1 = NodeUtil.newName("NaN", node0, "NaN");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06077() throws Throwable {
        Node node0 = Node.newString(47, "com.google.common.base.CharMatcher");
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06178() throws Throwable {
        Node node0 = Node.newString(63, "com.google.common.base.CharMatcher", 63, 63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06279() throws Throwable {
        Node node0 = Node.newString(64, "twx-^u-f\"5G");
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06380() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06481() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(33, node0, node0, node0, node0, 37, (-3163));
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06582() throws Throwable {
        Node node0 = Node.newString("~?{H7yV6=-Y<roi^a", 5, 5);
        Node node1 = new Node(10, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test06683() throws Throwable {
        Node node0 = Node.newString(164, "cJgYT(u");
        Node node1 = new Node(11, node0, 129, 123);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06784() throws Throwable {
        Node node0 = Node.newString(12, "&CiR^z{8X8F");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06885() throws Throwable {
        Node node0 = new Node(82, 82, 82);
        Node node1 = new Node(13, node0, 13, 1);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06986() throws Throwable {
        Node node0 = Node.newString(121, "nL:Ea46P>");
        Node node1 = new Node(14, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07087() throws Throwable {
        Node node0 = Node.newString(80, "8mPkGAAc");
        Node node1 = new Node(15, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07188() throws Throwable {
        Node node0 = new Node(100);
        Node node1 = new Node(16, node0, node0, node0, node0, 16, 31);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07289() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(17, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07390() throws Throwable {
        Node node0 = new Node(90);
        Node node1 = new Node(19, node0, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07491() throws Throwable {
        Node node0 = Node.newString(114, "nL:Ea46P>");
        Node node1 = new Node(20, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07592() throws Throwable {
        Node node0 = new Node(23, 23, 2103);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07693() throws Throwable {
        Node node0 = Node.newString(24, "&CiR^z{8X8F");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07794() throws Throwable {
        Node node0 = Node.newString(24, "VX8S");
        Node node1 = new Node(25, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07895() throws Throwable {
        Node node0 = Node.newString(28, "|=");
        Node node1 = new Node(26, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07996() throws Throwable {
        Node node0 = Node.newString("undefined", 41, 41);
        Node node1 = new Node(29, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08097() throws Throwable {
        Node node0 = Node.newString(8, "r05YEgD");
        Node node1 = new Node(30, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08198() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test08199() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertEquals(232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test081100() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test081101() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertEquals(232, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test081102() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test082103() throws Throwable {
        Node node0 = Node.newString((-930), "mz[+l6:i7K{j.j'7ZiC");
        Node node1 = new Node(32, node0, node0);
        Stack<String> stack0 = new Stack<String>();
        ListIterator<String> listIterator0 = stack0.listIterator();
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Iterator<? extends String>) listIterator0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, immutableSortedSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083104() throws Throwable {
        Node node0 = Node.newString(2114, "Expected NEW node, got ");
        Node node1 = new Node(33, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test084105() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        Node node1 = new Node(34, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test085106() throws Throwable {
        Node node0 = Node.newString(121, "k");
        Node node1 = new Node(35, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test086107() throws Throwable {
        Node node0 = Node.newString(88, "nL:Ea46P>");
        Node node1 = new Node(36, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test087108() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088109() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.withExplicitOrder((List<String>) linkedList0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test089110() throws Throwable {
        Node node0 = new Node(57);
        Node node1 = new Node(41, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test090111() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091112() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test092113() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertEquals(79, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test092114() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertEquals(79, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test092115() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test092116() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test092117() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test093118() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1031, 1031);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "stanceof";
        stringArray0[1] = "stanceof";
        stringArray0[2] = "AlwaysTrue";
        stringArray0[3] = "stanceof";
        stringArray0[4] = "stanceof";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093119() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1031, 1031);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "stanceof";
        stringArray0[1] = "stanceof";
        stringArray0[2] = "AlwaysTrue";
        stringArray0[3] = "stanceof";
        stringArray0[4] = "stanceof";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
        assertEquals(1031, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test093120() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("stanceof", 1031, 1031);
        String[] stringArray0 = new String[5];
        stringArray0[0] = "stanceof";
        stringArray0[1] = "stanceof";
        stringArray0[2] = "AlwaysTrue";
        stringArray0[3] = "stanceof";
        stringArray0[4] = "stanceof";
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf(stringArray0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, immutableSortedSet0);
        assertEquals(1031, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test094121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test095122() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertEquals(79, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test095123() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test095124() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertEquals(79, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test095125() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test095126() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test096127() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test097128() throws Throwable {
        Node node0 = new Node(9);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test098129() throws Throwable {
        Node node0 = new Node(2137);
        Node node1 = new Node(10, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test099130() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100131() throws Throwable {
        Node node0 = new Node(13);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101132() throws Throwable {
        Node node0 = Node.newString(121, "nL:Ea46P>");
        Node node1 = new Node(14, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test102133() throws Throwable {
        Node node0 = Node.newString(15, "in");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test103134() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test104135() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105136() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test106137() throws Throwable {
        Node node0 = new Node(19, 95, 19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107138() throws Throwable {
        Node node0 = new Node(67, 70, 67);
        Node node1 = new Node(21, node0, node0, 2, 2);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108139() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = new Node(22, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(119, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test108140() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = new Node(22, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertEquals(119, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test108141() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = new Node(22, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test108142() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = new Node(22, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test108143() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = new Node(22, node0, node0);
        NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test109144() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110145() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test111146() throws Throwable {
        Node node0 = new Node(25, 16, 25);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112147() throws Throwable {
        Node node0 = new Node(93);
        Node node1 = new Node(26, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test113148() throws Throwable {
        Node node0 = new Node(27);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test114149() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test115150() throws Throwable {
        Node node0 = new Node(50);
        Node node1 = new Node(29, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test116151() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117152() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test117153() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test117154() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(232, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test117155() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test118156() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119157() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test119158() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test119159() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test119160() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertEquals(4095, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test119161() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertEquals(4599, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test120162() throws Throwable {
        Node node0 = Node.newString(34, "undefined");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test121163() throws Throwable {
        Node node0 = new Node(35, (-1019), 1097);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122164() throws Throwable {
        Node node0 = Node.newString(88, "nL:Ea46P>");
        Node node1 = new Node(36, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test123165() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124166() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125167() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126168() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test127169() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test128170() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test129171() throws Throwable {
        Node node0 = Node.newString(48, "dt}I/");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test130172() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(49, node0, node0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTHROW
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test131173() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(52, ".,?;;hN$SzbXitI+");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132174() throws Throwable {
        Node node0 = new Node(53);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLOCAL_LOAD
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test133175() throws Throwable {
        Node node0 = new Node(54);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134176() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135177() throws Throwable {
        Node node0 = new Node(57);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_KEYS
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test136178() throws Throwable {
        Node node0 = new Node(58);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_INIT_VALUES
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test137179() throws Throwable {
        Node node0 = new Node(60);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, predicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeENUM_ID
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test138180() throws Throwable {
        Node node0 = new Node(61, (-166), (-29));
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test139181() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140182() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test141183() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142184() throws Throwable {
        Node node0 = Node.newString(66, "com.google.common.base.CharMatcher");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSET_REF com.google.common.base.CharMatcher
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test143185() throws Throwable {
        Node node0 = new Node(68, (-5072), (-5072));
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_CALL
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test144186() throws Throwable {
        Node node0 = Node.newString(69, "com.google.javascript.jscomp.DefaultPassConfig$38");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_SPECIAL com.google.javascript.jscomp.DefaultPassConfig$38
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test145187() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146188() throws Throwable {
        Node node0 = Node.newString(71, "l6>/%d1-\"+h");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeESCXMLATTR l6>/%d1-\"+h
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test147189() throws Throwable {
        Node node0 = new Node(72, (-3085), 72);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148190() throws Throwable {
        Node node0 = new Node(73);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_MEMBER
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test149191() throws Throwable {
        Node node0 = new Node(74);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_MEMBER
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test150192() throws Throwable {
        Node node0 = new Node(75, 35, 35);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NAME 35
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test151193() throws Throwable {
        Node node0 = Node.newString(76, "SHNE");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeREF_NS_NAME SHNE
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test152194() throws Throwable {
        Node node0 = new Node(77);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeTRY
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test153195() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSEMI 78
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test154196() throws Throwable {
        Node node0 = Node.newString(79, "'!9WA{[G*KOdJ! L5G");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLB '!9WA{[G*KOdJ! L5G
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test155197() throws Throwable {
        Node node0 = new Node(81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156198() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157199() throws Throwable {
        Node node0 = new Node(83);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test158200() throws Throwable {
        Node node0 = Node.newString(86, ")%,)Xj$h");
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test159201() throws Throwable {
        Node node0 = Node.newString(87, "The existing chil node of the parent should not be null.");
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test160202() throws Throwable {
        Node node0 = new Node(88);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test161203() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(89, "lT0NTNR+9");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0, compiler0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test162204() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test163205() throws Throwable {
        Node node0 = new Node(91);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test164206() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(92, node0, node0, 4, 2);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165207() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Xp\"H|,-dD&zvd");
        Node node1 = new Node(93, node0, node0, 13, 2075626741);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test166208() throws Throwable {
        Node node0 = new Node(94, (-3017), 94);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test167209() throws Throwable {
        Node node0 = new Node(95, 95, 99);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test168210() throws Throwable {
        Node node0 = new Node(96);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test169211() throws Throwable {
        Node node0 = new Node(97, 97, (-23));
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test170212() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test171213() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test172214() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test173215() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test174216() throws Throwable {
        Node node0 = new Node(102);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test175217() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test176218() throws Throwable {
        Node node0 = Node.newString(104, "vYJg");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDOT vYJg
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test177219() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test178220() throws Throwable {
        Node node0 = new Node(107);
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test179221() throws Throwable {
        Node node0 = Node.newString(108, "6TRyTPE*=yVaok");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeIF 6TRyTPE*=yVaok
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test180222() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test181223() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test182224() throws Throwable {
        Node node0 = Node.newString(114, "nL:Ea46P>");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test183225() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184226() throws Throwable {
        Node node0 = Node.newString(117, "com.google.common.base.CharMatcher", 117, 117);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCONTINUE com.google.common.base.CharMatcher 117
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test185227() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test186228() throws Throwable {
        Node node0 = new Node(119, 119, 101);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test187229() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test188230() throws Throwable {
        Node node0 = new Node(112);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test189231() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test190232() throws Throwable {
        Node node0 = new Node(42, 47, 47);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test191233() throws Throwable {
        Node node0 = new Node(43, 50, 50);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test192234() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test193235() throws Throwable {
        Node node0 = Node.newString(111, "");
        Node node1 = new Node(45, node0, node0, node0, node0, 1, 4);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test194236() throws Throwable {
        Node node0 = Node.newString(46, "4Hg.EKIxsZR:<e,3v");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test195237() throws Throwable {
        Node node0 = Node.newString(80, "G8qco){J");
        Node node1 = new Node(47, node0, node0, node0, node0, 1, 16);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test196238() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test197239() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test198240() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test199241() throws Throwable {
        Node node0 = new Node(57);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test200242() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201243() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test202244() throws Throwable {
        Node node0 = Node.newString(63, "com.google.common.base.CharMatcher", 63, 63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test203245() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test204246() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test205247() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test206248() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test207249() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test208250() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test209251() throws Throwable {
        Node node0 = new Node(83, 83, 83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test210252() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(84, "{vsT#t.TI[fL@RL");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test211253() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212254() throws Throwable {
        Node node0 = Node.newString(100, "6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test213255() throws Throwable {
        Node node0 = Node.newString(101, "56V{E,");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test214256() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(104, "NaN");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test215257() throws Throwable {
        Node node0 = Node.newString(108, "6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test216258() throws Throwable {
        Node node0 = new Node(109, 109, (-1));
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217259() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(110, "NaN");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test218260() throws Throwable {
        Node node0 = Node.newString(113, "-yNgJ*}?5UZl)^9 3R");
        Compiler compiler0 = new Compiler();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test219261() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(116, "]dJ");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test220262() throws Throwable {
        Node node0 = Node.newString(117, "OO{>iF&^xe@4J9$8");
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test221263() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test222264() throws Throwable {
        Node node0 = new Node(123, (-1), (-1));
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test223265() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test224266() throws Throwable {
        Node node0 = Node.newString("(WH&w&euh.Z");
        Node node1 = new Node(126, node0, node0, 0, (-1010));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1, (AbstractCompiler) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test225267() throws Throwable {
        Node node0 = Node.newString(127, "6TRyTPE*=yVaok", 127, 127);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test226268() throws Throwable {
        Node node0 = Node.newString(128, "~I'ac\"H!Tb<", (-1), 23);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227269() throws Throwable {
        Node node0 = Node.newString(129, "twJ^u-f\"5G ");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, (AbstractCompiler) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228270() throws Throwable {
        Node node0 = Node.newString(129, "twJ^u-f\"5G ", 129, 129);
        Node node1 = NodeUtil.newVarNode("twJ^u-f\"5G ", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test228271() throws Throwable {
        Node node0 = Node.newString(129, "twJ^u-f\"5G ", 129, 129);
        Node node1 = NodeUtil.newVarNode("twJ^u-f\"5G ", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228272() throws Throwable {
        Node node0 = Node.newString(129, "twJ^u-f\"5G ", 129, 129);
        Node node1 = NodeUtil.newVarNode("twJ^u-f\"5G ", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(129, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test228273() throws Throwable {
        Node node0 = Node.newString(129, "twJ^u-f\"5G ", 129, 129);
        Node node1 = NodeUtil.newVarNode("twJ^u-f\"5G ", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test229274() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test230275() throws Throwable {
        Node node0 = new Node(105);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test231276() throws Throwable {
        Node node0 = Node.newString(30, "lJVJ[yz$=-#O3o[?@^", 30, 842);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0, (AbstractCompiler) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test232277() throws Throwable {
        Node node0 = Node.newString(121, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test233278() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Xp\"H|,-dD&zvd");
        Node node1 = NodeUtil.newName("Xp\"H|,-dD&zvd", node0, "Xp\"H|,-dD&zvd");
        Node node2 = new Node(93, node1, node1, 13, 2075626741);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234279() throws Throwable {
        Node node0 = new Node(106);
        Node node1 = new Node(92, node0, node0, 4, 2);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test235280() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected NEW node, got ASSIGN_BITXOR
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test236281() throws Throwable {
        Node node0 = new Node(77);
        // Undeclared exception!
        try {
            NodeUtil.callHasLocalResult(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test237282() throws Throwable {
        Node node0 = new Node(41);
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test238283() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239284() throws Throwable {
        Node node0 = Node.newString(31, "com.google.javascript.jscomp.TypedScopeCreator");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240285() throws Throwable {
        Node node0 = Node.newString(115, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test241286() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJu-f\"5G ", 94, 94);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test241287() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJu-f\"5G ", 94, 94);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(94, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test241288() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJu-f\"5G ", 94, 94);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test241289() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJu-f\"5G ", 94, 94);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertEquals(94, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test242290() throws Throwable {
        Node node0 = Node.newString(121, "NaN");
        Node node1 = new Node(103, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test243291() throws Throwable {
        Node node0 = new Node(30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(101, 18);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test244292() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test244293() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(79, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test244294() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test244295() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertEquals(79, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test245296() throws Throwable {
        Node node0 = Node.newString(121, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.of("/v)(-z8", "twJ^u-f\"5G ", "/v)(-z8");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, immutableSortedSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test246297() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("twJ^u-f\"5G ", "twJ^u-f\"5G ", "com.google.javascript.jscomp.NodeUtil", "SourceName", ">>=");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test246298() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("twJ^u-f\"5G ", "twJ^u-f\"5G ", "com.google.javascript.jscomp.NodeUtil", "SourceName", ">>=");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertEquals(105, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test246299() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        ImmutableSet<String> immutableSet0 = ImmutableSet.of("twJ^u-f\"5G ", "twJ^u-f\"5G ", "com.google.javascript.jscomp.NodeUtil", "SourceName", ">>=");
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
        assertEquals(105, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test247300() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = Node.newNumber((double) 45, (-632), (-2));
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test248301() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("~?{H7yV6=-Y<roi^a", (-8), (-8));
        Node node1 = new Node(28, node0, node0);
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Compiler compiler0 = new Compiler();
        InlineGetters inlineGetters0 = new InlineGetters(compiler0);
        Set<String> set0 = inlineGetters0.nonMethodProperties;
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super String>) comparator0, (Iterable<? extends String>) set0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, immutableSortedSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test248302() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("~?{H7yV6=-Y<roi^a", (-8), (-8));
        Node node1 = new Node(28, node0, node0);
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        Compiler compiler0 = new Compiler();
        InlineGetters inlineGetters0 = new InlineGetters(compiler0);
        Set<String> set0 = inlineGetters0.nonMethodProperties;
        ImmutableSortedSet<String> immutableSortedSet0 = ImmutableSortedSet.copyOf((Comparator<? super String>) comparator0, (Iterable<? extends String>) set0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, immutableSortedSet0);
        assertEquals(38, node0.getType());
    }

    @Test(timeout = 4000)
    public void test249303() throws Throwable {
        int int0 = NodeUtil.precedence(4);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test250304() throws Throwable {
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test251305() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for goto (type 5)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test252306() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(6);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifeq (type 6)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test253307() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(7);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifne (type 7)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test254308() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(8);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setname (type 8)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test255309() throws Throwable {
        int int0 = NodeUtil.precedence(9);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test256310() throws Throwable {
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test257311() throws Throwable {
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test258312() throws Throwable {
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test259313() throws Throwable {
        int int0 = NodeUtil.precedence(13);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test260314() throws Throwable {
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test261315() throws Throwable {
        int int0 = NodeUtil.precedence(15);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test262316() throws Throwable {
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test263317() throws Throwable {
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test264318() throws Throwable {
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test265319() throws Throwable {
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test266320() throws Throwable {
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test267321() throws Throwable {
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test268322() throws Throwable {
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test269323() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test270324() throws Throwable {
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test271325() throws Throwable {
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test272326() throws Throwable {
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test273327() throws Throwable {
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test274328() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test275329() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test276330() throws Throwable {
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test277331() throws Throwable {
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test278332() throws Throwable {
        int int0 = NodeUtil.precedence(32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test279333() throws Throwable {
        int int0 = NodeUtil.precedence(33);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test280334() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test281335() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test282336() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test283337() throws Throwable {
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test284338() throws Throwable {
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test285339() throws Throwable {
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test286340() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test287341() throws Throwable {
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test288342() throws Throwable {
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test289343() throws Throwable {
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test290344() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test291345() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test292346() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test293347() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test294348() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test295349() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=50> (type 50)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test296350() throws Throwable {
        int int0 = NodeUtil.precedence(51);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test297351() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=53> (type 53)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test298352() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for getvar (type 54)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test299353() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(55);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setvar (type 55)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test300354() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=56> (type 56)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test301355() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test302356() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=58> (type 58)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test303357() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(59);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=59> (type 59)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test304358() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test305359() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=62> (type 62)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test306360() throws Throwable {
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test307361() throws Throwable {
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test308362() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test309363() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test310364() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ref_special (type 69)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test311365() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test312366() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=71> (type 71)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test313367() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=72> (type 72)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test314368() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test315369() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test316370() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(76);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=76> (type 76)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test317371() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test318372() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test319373() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test320374() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test321375() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test322376() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test323377() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test324378() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test325379() throws Throwable {
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test326380() throws Throwable {
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test327381() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test328382() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test329383() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test330384() throws Throwable {
        int int0 = NodeUtil.precedence(90);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test331385() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test332386() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test333387() throws Throwable {
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test334388() throws Throwable {
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test335389() throws Throwable {
        int int0 = NodeUtil.precedence(95);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test336390() throws Throwable {
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test337391() throws Throwable {
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test338392() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test339393() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test340394() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test341395() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test342396() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test343397() throws Throwable {
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test344398() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test345399() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test346400() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test347401() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test348402() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test349403() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test350404() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test351405() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test352406() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test353407() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test354408() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test355409() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test356410() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test357411() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test358412() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test359413() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test360414() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test361415() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test362416() throws Throwable {
        int int0 = NodeUtil.precedence(122);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test363417() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(123);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for reserved (type 123)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test364418() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test365419() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(1658);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=1658> (type 1658)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test366420() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test367421() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test368422() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test369423() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test370424() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test371425() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test372426() throws Throwable {
        Node node0 = Node.newString(83, "\"");
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test373427() throws Throwable {
        Node node0 = new Node(88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test374428() throws Throwable {
        Node node0 = new Node(91);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test375429() throws Throwable {
        Node node0 = Node.newString(94, "twJu-f\"5G ");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test376430() throws Throwable {
        Node node0 = Node.newString(95, "twJu-f\"5G ");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test377431() throws Throwable {
        Node node0 = new Node(96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(24, int0);
    }

    @Test(timeout = 4000)
    public void test378432() throws Throwable {
        Node node0 = new Node(97, (-1244), (-976));
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test379433() throws Throwable {
        Node node0 = new Node(67, 70, 67);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test380434() throws Throwable {
        Node node0 = Node.newString(112, "OO{>iF&^xe@4J9$8");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test381435() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertEquals(79, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test381436() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test381437() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test381438() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 79, 79);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertEquals(79, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test382439() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9yImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(119, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test382440() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9yImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(119, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test382441() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9yImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test382442() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9yImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test382443() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9yImNkwF.j_w%Nvf$-", 119, 119);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test383444() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        Node node1 = new Node(30, node0, node0, 98, 35);
        boolean boolean0 = NodeUtil.isNew(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test384445() throws Throwable {
        Node node0 = Node.newString(111, "");
        boolean boolean0 = NodeUtil.isVar(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test385446() throws Throwable {
        Node node0 = Node.newString(121, "v@");
        Node node1 = NodeUtil.newVarNode("v@", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test385447() throws Throwable {
        Node node0 = Node.newString(121, "v@");
        Node node1 = NodeUtil.newVarNode("v@", node0);
        boolean boolean0 = NodeUtil.isVar(node1);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test386448() throws Throwable {
        Node node0 = Node.newString(64, " ]6*a\fp2yMLX");
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test387449() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        Node node2 = NodeUtil.newVarNode("RjfUs", node1);
        assertEquals(118, node2.getType());
    }

    @Test(timeout = 4000)
    public void test387450() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        Node node2 = NodeUtil.newVarNode("RjfUs", node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test387451() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        Node node2 = NodeUtil.newVarNode("RjfUs", node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test387452() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.newQualifiedNameNode("sMj0-zG", node0, "sMj0-zG");
        Node node2 = NodeUtil.newVarNode("RjfUs", node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test388453() throws Throwable {
        Node node0 = Node.newString(112, "/p q(-#s*T2B$(f");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test388454() throws Throwable {
        Node node0 = Node.newString(112, "/p q(-#s*T2B$(f");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test389455() throws Throwable {
        Node node0 = Node.newString(86, "l6>/%d1-\"+h");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test390456() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isAssign(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test391457() throws Throwable {
        Node node0 = new Node(94);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test392458() throws Throwable {
        Node node0 = Node.newString(66, "stanceof");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test392459() throws Throwable {
        Node node0 = Node.newString(66, "stanceof");
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test393460() throws Throwable {
        Node node0 = Node.newString(112, "OO{>iF&^xe@4J9$8");
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test394461() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test395462() throws Throwable {
        Node node0 = Node.newString(81, "^");
        Node node1 = new Node(113, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test396463() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test397464() throws Throwable {
        Node node0 = new Node(61, (-166), (-29));
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test398465() throws Throwable {
        Node node0 = new Node(114, 371, 130);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test399466() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test400467() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = new Node(0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test401468() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test402469() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test403470() throws Throwable {
        Node node0 = new Node(110, 149, 115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test404471() throws Throwable {
        Node node0 = Node.newString(111, "v@");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test405472() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test406473() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test407474() throws Throwable {
        Node node0 = Node.newString(120, "ZHal_NF{lYU=0>", 120, 120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test408475() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test409476() throws Throwable {
        Node node0 = new Node(123, (-1), (-1));
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test410477() throws Throwable {
        Node node0 = Node.newString(108, "6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test411478() throws Throwable {
        Node node0 = Node.newString(110, "8$TDD)C<w<#QZs<yspC");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test412479() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test413480() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test414481() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(113, node0, node0, node0, node0, 98, 0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test415482() throws Throwable {
        Node node0 = Node.newString(114, "nL:Ea46P>");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test416483() throws Throwable {
        Node node0 = Node.newString(119, "J9yImNkwF.j_w%Nvf$-");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test417484() throws Throwable {
        Node node0 = Node.newString(120, "twJ^u-f\"5G ");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test418485() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test419486() throws Throwable {
        Node node0 = Node.newString(77, "NaN");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test420487() throws Throwable {
        Node node0 = Node.newString(120, "twJ^u-f\"5G ");
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test421488() throws Throwable {
        Node node0 = Node.newString(108, "6TRyTPE*=yVaok");
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test422489() throws Throwable {
        Node node0 = Node.newString("\n parent:  ");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // STRING
            //  parent:   does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test423490() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ELSE 109 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test424491() throws Throwable {
        Node node0 = Node.newString(111, "v@");
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test425492() throws Throwable {
        Node node0 = Node.newString(112, "s<9V`f--?}p$+\"Y@5/");
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DEFAULT s<9V`f--?}p$+\"Y@5/ does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test426493() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test427494() throws Throwable {
        Node node0 = Node.newString(114, "nL:Ea46P>");
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test428495() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test429496() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("6TRyTPE*=yVaok");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test430497() throws Throwable {
        Node node0 = Node.newString(77, "OFF");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TRY OFF of TRY OFF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test431498() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test432499() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test433500() throws Throwable {
        Node node0 = Node.newString(111, "malformed 'for' statement ");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test434501() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test435502() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test436503() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 106, 2328);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test436504() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 106, 2328);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(106, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test436505() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 106, 2328);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(2328, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test437506() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("L", 75, 75);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(75, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test437507() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("L", 75, 75);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test437508() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("L", 75, 75);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
        assertEquals(75, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test438509() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test439510() throws Throwable {
        Node node0 = Node.newString(1266, "#.cL");
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test440511() throws Throwable {
        Node node0 = Node.newString(118, "");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test441512() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        Node node1 = new Node(7);
        NodeUtil.removeChild(node1, node0);
        assertEquals(12, Node.REGEXP_PROP);
    }

    @Test(timeout = 4000)
    public void test442513() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: FOR 115 of FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test443514() throws Throwable {
        Node node0 = new Node(112);
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test444515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("#@2?^ 5MQ;2*t8@");
        Node node1 = new Node(1, node0, node0, 33, 100);
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test445516() throws Throwable {
        Node node0 = Node.newString(121, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "bin", sourceMap_DetailLevel0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test446517() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test447518() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.isThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test448519() throws Throwable {
        Node node0 = new Node(42, (-2173), 1);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test449520() throws Throwable {
        Node node0 = Node.newString(24, "&CiR^z{8X8F");
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test450521() throws Throwable {
        Node node0 = new Node(6);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test451522() throws Throwable {
        Node node0 = Node.newString(115, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test452523() throws Throwable {
        Node node0 = Node.newString(86, "l6>/%d1-\"+h");
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test453524() throws Throwable {
        Node node0 = Node.newString(118, "");
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test454525() throws Throwable {
        Node node0 = Node.newString("NaN");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test455526() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test455527() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test456528() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test457529() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test457530() throws Throwable {
        String string0 = NodeUtil.opToStr(10);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test458531() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test458532() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test459533() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test459534() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test460535() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test460536() throws Throwable {
        String string0 = NodeUtil.opToStr(13);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test461537() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test461538() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test462539() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test462540() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test463541() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test463542() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test464543() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test464544() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test465545() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test465546() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test466547() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test466548() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test467549() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(20);
        assertEquals(">>>", string0);
    }

    @Test(timeout = 4000)
    public void test468550() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test469551() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test470552() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test471553() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
        assertEquals("/", string0);
    }

    @Test(timeout = 4000)
    public void test472554() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test473555() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test474556() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test475557() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test476558() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test476559() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test477560() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(30);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 30: NEW
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test478561() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test479562() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
        assertEquals("typeof", string0);
    }

    @Test(timeout = 4000)
    public void test480563() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test481564() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test482565() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test483566() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(37);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 37: CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test484567() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test485568() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(39);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 39: NUMBER
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test486569() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test487570() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test488571() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test489572() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test490573() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test491574() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test492575() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test493576() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test494577() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 48: BINDNAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test495578() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test496579() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 50: RETHROW
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test497580() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test498581() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test499582() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test500583() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 54: GETVAR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test501584() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test502585() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test503586() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test504587() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test505588() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test506589() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 61: THISFN
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test507590() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 62: RETURN_RESULT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test508591() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(63);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 63: ARRAYLIT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test509592() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(64);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 64: OBJECTLIT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test510593() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test511594() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 66: SET_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test512595() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 67: DEL_REF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test513596() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 68: REF_CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test514597() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 69: REF_SPECIAL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test515598() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 70: DEFAULTNAMESPACE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test516599() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(71);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 71: ESCXMLATTR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test517600() throws Throwable {
        String string0 = NodeUtil.opToStr(72);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test518601() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 73: REF_MEMBER
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test519602() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test520603() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 75: REF_NAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test521604() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test522605() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 77: TRY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test523606() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 78: SEMI
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test524607() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 79: LB
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test525608() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 80: RB
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test526609() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 81: LC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test527610() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 82: RC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test528611() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test529612() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 84: RP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test530613() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test531614() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test532615() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test533616() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test534617() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test535618() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test536619() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test537620() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test538621() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test539622() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test540623() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test541624() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test542625() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test543626() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(98);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 98: HOOK
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test544627() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 99: COLON
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test545628() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test546629() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test547630() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test548631() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(103);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 103: DEC
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test549632() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 104: DOT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test550633() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test551634() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test552635() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 107: IMPORT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test553636() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(108);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 108: IF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test554637() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test555638() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test556639() throws Throwable {
        String string0 = NodeUtil.opToStr(111);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test557640() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test558641() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 113: WHILE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test559642() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test560643() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test561644() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test562645() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test563646() throws Throwable {
        String string0 = NodeUtil.opToStr(118);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test564647() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test565648() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 120: CATCH
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test566649() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 121: FINALLY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test567650() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test568651() throws Throwable {
        String string0 = NodeUtil.opToStr(6);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test569652() throws Throwable {
        Node node0 = Node.newString(35, "ARRAY_TYPE");
        Node node1 = NodeUtil.newVarNode("", node0);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test570653() throws Throwable {
        Node node0 = Node.newString(112, "OO{>iF&^xe@4J9$8");
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(1, Node.TARGET_PROP);
    }

    @Test(timeout = 4000)
    public void test571654() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        Node node1 = NodeUtil.newFunctionNode("$HQ`", vector0, node0, 14, 114);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test571655() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        Node node1 = NodeUtil.newFunctionNode("$HQ`", vector0, node0, 14, 114);
        assertEquals(14, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test571656() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        Node node1 = NodeUtil.newFunctionNode("$HQ`", vector0, node0, 14, 114);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test571657() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        Node node1 = NodeUtil.newFunctionNode("$HQ`", vector0, node0, 14, 114);
        assertEquals(114, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test571658() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        Node node1 = NodeUtil.newFunctionNode("$HQ`", vector0, node0, 14, 114);
        NodeUtil.getInfoForNameNode(node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test572659() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Vector<JSType> vector1 = new Vector<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector1);
        vector0.add(node0);
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode((String) null, vector0, (Node) null, 1, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // StringNode: str is null
            //
            verifyException("com.google.javascript.rhino.Node$StringNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test573660() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test573661() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(176, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test573662() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(93, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test573663() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(93, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test573664() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test573665() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("i.T%0BAF52{)", 93, 176);
        Node node1 = NodeUtil.getRootOfQualifiedName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test574666() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Xp\"H|,-dD&zvd");
        // Undeclared exception!
        try {
            NodeUtil.getRootOfQualifiedName(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test575667() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Ifnity");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test576668() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName(",1{aFsxl!:1d");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test577669() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("typeof");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test578670() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("L", 1688, 1688);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(1688, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test578671() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("L", 1688, 1688);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(1688, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test579672() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 105, 105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(105, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test579673() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 105, 105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(105, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test579674() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 105, 105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test580675() throws Throwable {
        Node node0 = Node.newString("56V{E,");
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test581676() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test581677() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(4599, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test581678() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertEquals(4095, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test581679() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NodeUtil$1", 4599, 4599);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test582680() throws Throwable {
        Node node0 = new Node(54);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test583681() throws Throwable {
        Node node0 = NodeUtil.newVarNode("", (Node) null);
        assertEquals(118, node0.getType());
    }

    @Test(timeout = 4000)
    public void test583682() throws Throwable {
        Node node0 = NodeUtil.newVarNode("", (Node) null);
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test584683() throws Throwable {
        Node node0 = Node.newString(0, "<9:g|`?_p[g");
        node0.addChildAfter(node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.newVarNode("NaN", node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test585684() throws Throwable {
        Node node0 = Node.newString("undefined");
        Node node1 = NodeUtil.newName("undefined", node0, "undefined");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "nswRtanceof", sourceMap_DetailLevel0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test586685() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "twJ^u-f\"5G ", nodeUtil_MatchShallowStatement0);
        assertEquals(105, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test586686() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "twJ^u-f\"5G ", nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test586687() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 105, 105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "twJ^u-f\"5G ", nodeUtil_MatchShallowStatement0);
        assertEquals(105, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test587688() throws Throwable {
        Node node0 = Node.newString(118, "");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test588689() throws Throwable {
        Node node0 = Node.newString(105, "MU20P:XWeI*VGy?");
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(8, Node.FLAG_NO_THROWS);
    }

    @Test(timeout = 4000)
    public void test589690() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test590691() throws Throwable {
        Node node0 = Node.newString(113, "twJ^u-f\"5G ");
        node0.addChildAfter(node0, node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test591692() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = NodeUtil.newQualifiedNameNode("<9:g|`?_p[g", 19, 19);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, nodeUtil_MatchShallowStatement0);
        assertEquals(19, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test591693() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = NodeUtil.newQualifiedNameNode("<9:g|`?_p[g", 19, 19);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, nodeUtil_MatchShallowStatement0);
        assertEquals(19, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test591694() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = NodeUtil.newQualifiedNameNode("<9:g|`?_p[g", 19, 19);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, nodeUtil_MatchShallowStatement0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test592695() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("typeof", "typeof");
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-367));
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test593696() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        node0.addChildToFront(node0);
        // Undeclared exception!
        NodeUtil.getNameReferenceCount(node0, "6TRyTPE*=yVaok");
    }

    @Test(timeout = 4000)
    public void test594697() throws Throwable {
        Node node0 = Node.newString("{lM]lz3izJS7')q1D%");
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchDeclaration0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test595698() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 121, 121);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test596699() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = NodeUtil.newQualifiedNameNode("twJ^u-f\"5G ", 121, 121);
        Node node1 = new Node(23, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test597700() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test598701() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test599702() throws Throwable {
        Node node0 = new Node((-6486), (-6486), (-6486));
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test600703() throws Throwable {
        Node node0 = Node.newString(77, "l6>/%d1-\"+h");
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test601704() throws Throwable {
        Node node0 = Node.newString(47, "com.google.common.base.CharMatcher");
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test602705() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test603706() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6TRyTPE*=yVaok");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test604707() throws Throwable {
        Node node0 = Node.newString("Ifnity");
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test605708() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        assertEquals(105, node1.getType());
    }

    @Test(timeout = 4000)
    public void test605709() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(110, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test605710() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(3, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test605711() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(12, node2.getCharno());
    }

    @Test(timeout = 4000)
    public void test605712() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(83, node2.getType());
    }

    @Test(timeout = 4000)
    public void test605713() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(12, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test605714() throws Throwable {
        Vector<Node> vector0 = new Vector<Node>();
        Node node0 = new Node(1050, 1050, 1050);
        Node node1 = NodeUtil.newFunctionNode("g,2]7$~pm", vector0, node0, 110, 12);
        Node node2 = NodeUtil.getFnParameters(node1);
        assertEquals(110, node2.getLineno());
    }

    @Test(timeout = 4000)
    public void test606715() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("hEy;J*o2RJ", "hEy;J*o2RJ");
        assertEquals(15, Node.CASEARRAY_PROP);
    }

    @Test(timeout = 4000)
    public void test607716() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode((String) null, "com.google.javascript.jscomp.NodeUtil$MatchNodeType");
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test608717() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test609718() throws Throwable {
        Node node0 = Node.newString(3694, "rd3Wy>99,b", 3694, 20);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test610719() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        node0.addSuppression("nstancoj");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNotNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test610720() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        node0.addSuppression("nstancoj");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertEquals(70, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test610721() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        node0.addSuppression("nstancoj");
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertEquals(70, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test611722() throws Throwable {
        Node node0 = Node.newString("^");
        Node node1 = new Node(118, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test612723() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(232, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test612724() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertEquals(232, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test612725() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test612726() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro^totype", 232, 232);
        Node node1 = new Node(31, node0, node0);
        NodeUtil.getInfoForNameNode(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test613727() throws Throwable {
        Node node0 = new Node(43, 50, 50);
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test614728() throws Throwable {
        Node node0 = Node.newString(105, "MU20P:XWeI*VGy?");
        // Undeclared exception!
        try {
            NodeUtil.getFunctionInfo(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test615729() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("<9Lghp?_p[g");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        String string0 = NodeUtil.getSourceName(node0);
        assertEquals("<9Lghp?_p[g", string0);
    }

    @Test(timeout = 4000)
    public void test616730() throws Throwable {
        Node node0 = new Node(119);
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test617731() throws Throwable {
        Node node0 = Node.newString("Ifnity");
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        assertEquals(37, node1.getType());
    }

    @Test(timeout = 4000)
    public void test618732() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("~>W]7gE&_7$Mk7N", 22, 306);
        Node[] nodeArray0 = new Node[1];
        // Undeclared exception!
        try {
            NodeUtil.newCallNode(node0, nodeArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test619733() throws Throwable {
        Node node0 = new Node(67, 70, 67);
        Node node1 = new Node(30, node0, node0, 35, 35);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test620734() throws Throwable {
        Node node0 = Node.newString(91, ".prototype");
        Node node1 = new Node(31, node0, node0);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDELPROP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test621735() throws Throwable {
        Node node0 = Node.newString("e*O9L*l,rFO5jnKvno");
        Node node1 = new Node(32, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test622736() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test622737() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(119, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test622738() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test622739() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertEquals(119, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test622740() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("J9ImNkwF.j_w%Nvf$-", 119, 119);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test623741() throws Throwable {
        Node node0 = Node.newString(111, "");
        Node node1 = new Node(34, node0, node0);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, predicate0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETPROP
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test624742() throws Throwable {
        Node node0 = Node.newString(121, "k");
        Node node1 = new Node(35, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test625743() throws Throwable {
        Node node0 = Node.newString(88, "nL:Ea46P>");
        Node node1 = new Node(36, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeSETELEM
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test626744() throws Throwable {
        Node node0 = Node.newString(42, "twJ^u-f\"5G ");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test627745() throws Throwable {
        Node node0 = Node.newString(111, "twJ^u-f\"5G ");
        Node node1 = new Node(47, node0, node0);
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(19);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test628746() throws Throwable {
        Node node0 = Node.newString(48, "twJu-f\"5G ");
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeBINDNAME twJu-f\"5G
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test629747() throws Throwable {
        Node node0 = Node.newString(50, "SUPPRESS_DOC");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETHROW SUPPRESS_DOC
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test630748() throws Throwable {
        Node node0 = new Node(51);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test631749() throws Throwable {
        Node node0 = new Node(54);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGETVAR
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test632750() throws Throwable {
        Node node0 = Node.newString(62, "`PzcjY&es[");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRETURN_RESULT `PzcjY&es[
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test633751() throws Throwable {
        Node node0 = Node.newString(63, "com.google.common.base.CharMatcher", 63, 63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test634752() throws Throwable {
        Node node0 = new Node(64);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test635753() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeGET_REF 65
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test636754() throws Throwable {
        Node node0 = new Node(67);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEL_REF
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test637755() throws Throwable {
        Node node0 = Node.newString(70, "L");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeDEFAULTNAMESPACE L
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test638756() throws Throwable {
        Node node0 = Node.newString(80, "Number");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRB Number
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test639757() throws Throwable {
        Node node0 = Node.newString(81, "L");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeLC L
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test640758() throws Throwable {
        Node node0 = new Node(82);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeRC
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test641759() throws Throwable {
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test642760() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test643761() throws Throwable {
        Node node0 = new Node(87);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test644762() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test645763() throws Throwable {
        Node node0 = new Node(89);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test646764() throws Throwable {
        Node node0 = Node.newString(90, "Object");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test647765() throws Throwable {
        Node node0 = new Node(91, 91, 91);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test648766() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test649767() throws Throwable {
        Node node0 = new Node(93);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test650768() throws Throwable {
        Node node0 = new Node(94, (-1864), 94);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test651769() throws Throwable {
        Node node0 = new Node(95, 95, 2863);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test652770() throws Throwable {
        Node node0 = Node.newString(96, "NaN");
        NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNotFunction0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test653771() throws Throwable {
        Node node0 = Node.newString(97, "L");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test654772() throws Throwable {
        Node node0 = new Node(98);
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test655773() throws Throwable {
        Node node0 = Node.newString(99, "nstanceof");
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected expression nodeCOLON nstanceof
            //  parent:null
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test656774() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        // Undeclared exception!
        try {
            NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test657775() throws Throwable {
        Node node0 = new Node(102, 2326, 88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test658776() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test659777() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test660778() throws Throwable {
        Node node0 = Node.newString(101, "56V{E,");
        Node node1 = Node.newString("E^", (-804), 2);
        node0.addChildrenToBack(node1);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test661779() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertEquals(70, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test661780() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertEquals(70, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test661781() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("bin", 70, 70);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test662782() throws Throwable {
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        Node node0 = Node.newString(121, "twJ^u-f\"5G ");
        Node node1 = new Node(37, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        assertTrue(boolean0);
    }
}
