/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:43:41 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RecordType_ESTest extends RecordType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("pU1uPI", (RecordTypeBuilder.RecordProperty) null);
        // Undeclared exception!
        try {
            jSTypeRegistry0.createRecordType(hashMap0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // RecordProperty associated with a property should not be null!
            //
            verifyException("com.google.javascript.rhino.jstype.RecordType", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString(0, "Named type with empty name component", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, recordType0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        enumType0.defineDeclaredProperty("Not declared as a constructor", recordType1, node0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, recordType1);
        recordType1.getGreatestSubtypeHelper(enumType1);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        assertFalse(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType1.getGreatestSubtypeHelper(recordType1);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(recordType1, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = recordType2.getGreatestSubtypeHelper(recordType2);
        recordType1.getGreatestSubtypeHelper(jSType0);
        assertTrue(jSType0.equals((Object) recordType2));
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(recordType1, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = recordType2.getGreatestSubtypeHelper(recordType2);
        recordType1.getGreatestSubtypeHelper(jSType0);
        assertFalse(recordType2.equals((Object) recordType1));
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(0);
        boolean boolean0 = recordType0.defineProperty("Unknown class name", recordType0, true, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = recordType1.getGreatestSubtypeHelper(recordType0);
        assertTrue(recordType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = recordType1.getGreatestSubtypeHelper(recordType0);
        assertTrue(jSType0.equals((Object) recordType1));
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getGreatestSubtypeHelper(recordType1);
        assertTrue(recordType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = recordType0.getGreatestSubtypeHelper(noObjectType0);
        assertFalse(jSType0.isFunctionPrototypeType());
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, arrowType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "j.'d");
        JSType jSType0 = errorFunctionType0.getPropertyType("Named type with empty name component");
        enumType0.defineDeclaredProperty("Not declared as a constructor", jSType0, node0);
        recordType1.getGreatestSubtypeHelper(enumType0);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 0, 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, recordType0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        enumType0.defineDeclaredProperty("Not declared as a constructor", (JSType) null, node0);
        recordType1.getGreatestSubtypeHelper(enumType0);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString((-396), "?", (-396), (-396));
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(unknownType0, node0);
        hashMap0.put("", recordTypeBuilder_RecordProperty0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, unknownType0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        enumType0.defineDeclaredProperty("", unknownType0, node0);
        recordType0.getGreatestSubtypeHelper(enumType0);
        assertTrue(recordType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", (Node) null, recordType0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        enumType0.defineDeclaredProperty("Not declared as a constructor", recordType1, (Node) null);
        recordType1.getGreatestSubtypeHelper(enumType0);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString(1, "Unknown class name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, recordType0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        enumType0.defineDeclaredProperty("Not declared as a constructor", recordType0, node0);
        recordType1.getGreatestSubtypeHelper(enumType0);
        assertTrue(recordType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType1.isSubtype(recordType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType1.isSubtype(recordType0);
        assertFalse(recordType1.equals((Object) recordType0));
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = RecordType.isSubtype((ObjectType) noResolvedType0, recordType1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString(0, "Not declared as a type name");
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = RecordType.isSubtype((ObjectType) noResolvedType0, recordType1);
        assertFalse(recordType1.equals((Object) recordType0));
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("Not declared as a type name");
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.removeProperty("Unknown class name");
        boolean boolean1 = RecordType.isSubtype((ObjectType) noType0, recordType0);
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("Not declared as a type name");
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.removeProperty("Unknown class name");
        boolean boolean1 = RecordType.isSubtype((ObjectType) noType0, recordType0);
        assertTrue(boolean1);
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("Not declared as a type name", 1, 1);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = RecordType.isSubtype((ObjectType) noType0, recordType0);
        assertTrue(noType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString("Not declared as a type name", 1, 1);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = RecordType.isSubtype((ObjectType) noType0, recordType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("#:2r$", node0, recordType1);
        JSType jSType0 = recordType1.resolveInternal(simpleErrorReporter0, enumType0);
        assertFalse(jSType0.equals((Object) recordType0));
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = Node.newString("Not declared as a type name", 1, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("#:2r$", node0, recordType1);
        recordType0.setResolvedTypeInternal((JSType) null);
        JSType jSType0 = recordType1.resolveInternal(simpleErrorReporter0, enumType0);
        assertFalse(jSType0.equals((Object) recordType0));
    }
}
