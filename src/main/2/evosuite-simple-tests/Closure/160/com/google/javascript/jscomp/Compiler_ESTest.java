/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:15:53 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource((JSModule) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        // Undeclared exception!
        try {
            compiler0.toSource(compiler_CodeBuilder0, 1448, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray((JSModule) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.init((JSSourceFile[]) null, (JSModule[]) null, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Logger logger0 = Logger.getLogger("Bad module: ");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.resetUniqueNameId();
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5STic0pVZ~?GY");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5STic0pVZ~?GY");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.check();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5STic0pVZ~?GY");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.check();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Compiler.setLoggingLevel((Level) null);
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("// Input %num%", "// Input %num%");
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
        assertNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("5");
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSSourceFile0, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallableWithLargeStack((Callable<Normalize>) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.languageMode();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parse();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5STic0pVZ~?GY");
        // Undeclared exception!
        try {
            compiler0.check();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("fw");
        String string0 = compiler0.toSource(node0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("fw");
        String string0 = compiler0.toSource(node0);
        assertEquals("fw", string0);
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
    }

    @Test(timeout = 4000)
    public void test04245() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        JSError[] jSErrorArray0 = compiler0.getMessages();
        assertEquals(0, jSErrorArray0.length);
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test04649() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test04750() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
        assertNull(referenceCollectingCallback_ReferenceMap0);
    }

    @Test(timeout = 4000)
    public void test04851() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04952() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test05053() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05154() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test05356() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("ptP?SA6N");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        // Undeclared exception!
        try {
            compiler0.parseTestCode((String) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
        }
    }

    @Test(timeout = 4000)
    public void test05457() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "B$*YWEi";
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "B$*YWEi";
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Kx`w&4QjOXSt", (String) null);
        arrayList0.add(jSSourceFile0);
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Kx`w&4QjOXSt", (String) null);
        arrayList0.add(jSSourceFile0);
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Vector<JSModule> vector0 = new Vector<JSModule>();
        // Undeclared exception!
        try {
            compiler0.compileModules(arrayList0, vector0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        JSModule jSModule0 = new JSModule(" does not have a condition.");
        vector0.add(jSModule0);
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        JSModule jSModule0 = new JSModule(" does not have a condition.");
        vector0.add(jSModule0);
        compiler0.compileModules(arrayList0, vector0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test05966() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn(compilerOptions0).when(callable0).call();
        Object object0 = Compiler.runCallable(callable0, false, false);
        assertSame(object0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn(compilerOptions0).when(callable0).call();
        CompilerOptions compilerOptions1 = (CompilerOptions) Compiler.runCallable(callable0, false, true);
        assertFalse(compilerOptions1.removeDeadCode);
    }

    @Test(timeout = 4000)
    public void test06168() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallable((Callable<Object>) null, false, false);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        // Undeclared exception!
        try {
            Compiler.runCallable((Callable<Object>) null, false, true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test06572() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("~N$%(");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.optimize();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06774() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode(" [testcode] ");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.startPass((String) null);
        // Undeclared exception!
        try {
            compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripTypePrefixes);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06875() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06976() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.reportCodeChange();
        Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertTrue(result0.success);
    }

    @Test(timeout = 4000)
    public void test06977() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.reportCodeChange();
        Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compilerOptions0.checkTypes);
    }

    @Test(timeout = 4000)
    public void test07078() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.options;
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test07179() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("~N$%(");
        compiler0.areNodesEqualForInlining(node0, node0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07280() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.newExternInput((String) null);
        compiler0.removeInput((String) null);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07381() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("~N$%(");
        compiler0.removeInput("~N$%(");
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Kx`w&4QjOXSt");
        arrayList0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name Kx`w&4QjOXSt
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("fw");
        SourceFile sourceFile0 = SourceFile.fromCode("fw", "h(!U|lI8+NwypFr");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("fw");
        SourceFile sourceFile0 = SourceFile.fromCode("fw", "h(!U|lI8+NwypFr");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn("TN,w10R").when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("", sourceFile_Generator0);
        linkedList0.add(jSSourceFile0);
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.replaceIncrementalSourceAst(jsAst0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test07786() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("toSourceArray", (Charset) null);
        linkedList0.add(jSSourceFile0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) vector0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("toSourceArray", (Charset) null);
        linkedList0.add(jSSourceFile0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) vector0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
        Scope scope0 = new Scope(node0, compiler0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07889() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
        Scope scope0 = new Scope(node0, compiler0);
        assertEquals(1, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test07990() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getReverseAbstractInterpreter();
        compiler0.getReverseAbstractInterpreter();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getReverseAbstractInterpreter();
        compiler0.getReverseAbstractInterpreter();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test08092() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
        Scope scope0 = new Scope(node0, compiler0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkProvides);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08093() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
        Scope scope0 = new Scope(node0, compiler0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkProvides);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test08194() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test08195() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertTrue(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test08196() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test08197() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test08298() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("", sourceFile_Generator0);
        linkedList0.add(jSSourceFile0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) vector0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.parseInputs();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // FAILED ASSERTION
            //
            verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
        }
    }

    @Test(timeout = 4000)
    public void test08399() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("toSourceArray", (Charset) null);
        linkedList0.add(jSSourceFile0);
        Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) vector0, compilerOptions0);
        compiler0.parseInputs();
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test084100() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("/*\n");
        assertEquals("/*\n", compiler_CodeBuilder1.toString());
    }

    @Test(timeout = 4000)
    public void test085101() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("@)");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test086102() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("{eZ\" A#&`");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test087103() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append(" r2 ol=r|Uso'Kj]_IG");
        boolean boolean0 = compiler_CodeBuilder1.endsWith(" [testcode] ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088104() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("V", "V");
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088105() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("V", "V");
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test088106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("V", "V");
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test089107() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSError jSError0 = JSError.make((String) null, 1102, 1102, compilerOptions0.reportUnknownTypes, compiler0.MOTION_ITERATIONS_ERROR, (String[]) null);
        compiler0.report(jSError0);
        assertEquals(1102, jSError0.lineNumber);
    }

    @Test(timeout = 4000)
    public void test090108() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("Sanity Check failed", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // Sanity Check failed
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test091109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ek+RC&EaD<0n0tT}");
        CompilerOptions compilerOptions0 = compiler0.options;
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compilerOptions0.ideMode = true;
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>(linkedList0);
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test092110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("7E$,e{tcode] ");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        Vector<JSModule> vector0 = new Vector<JSModule>();
        // Undeclared exception!
        try {
            compiler0.compileModules((List<JSSourceFile>) null, vector0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test093111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("~N$%(", 0);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test094112() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.getSourceRegion((String) null, 2957);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test095113() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("~N$!%(");
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test096114() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test096115() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(4096, node0.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test097116() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("~N$!%(");
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("~N$!%(", sourceFile_Generator0);
        jSModule0.add(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test098117() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test099118() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> RETURN [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test099119() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test100120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode(" [testcode] ");
        compiler0.getErrorManager();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test100121() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode(" [testcode] ");
        compiler0.getErrorManager();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test101122() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test101123() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertNotNull(errorManager0);
    }

    @Test(timeout = 4000)
    public void test102124() throws Throwable {
        Compiler compiler0 = new Compiler();
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = compiler0.parseSyntheticCode("c]", "c]");
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test103125() throws Throwable {
        Compiler compiler0 = new Compiler();
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = Node.newString(2937, "S ;j/3Y", 2937, 2937);
        // Undeclared exception!
        try {
            compiler0.updateGlobalVarReferences(treeMap0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }
}
