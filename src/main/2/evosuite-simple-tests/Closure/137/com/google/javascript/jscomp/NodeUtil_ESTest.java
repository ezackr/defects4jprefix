/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:20:36 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = Node.newString(105, "N9Ud");
        // Undeclared exception!
        try {
            NodeUtil.isVarArgsFunction(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.getPrototypePropertyName((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        boolean boolean0 = NodeUtil.containsCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Node node0 = Node.newString(132, "*X @W`<");
        boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 15);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 13);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 6);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 6);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" does not have a condition.", 112, 1705);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, " does not have a condition.");
        assertEquals(112, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" does not have a condition.", 112, 1705);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, " does not have a condition.");
        assertEquals(1705, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" does not have a condition.", 112, 1705);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, " does not have a condition.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(" does not have a condition.", 112, 1705);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, " does not have a condition.");
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test00914() throws Throwable {
        Node node0 = Node.newString(93, "p]ve2FOTXvCkpGA3");
        int int0 = NodeUtil.getNameReferenceCount(node0, "p]ve2FOTXvCkpGA3");
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        Node node0 = Node.newString(268, "CgB", 268, 268);
        Node node1 = NodeUtil.newQualifiedNameNode("NaN", node0, "CgB");
        node0.addChildToFront(node1);
        assertEquals(268, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test01016() throws Throwable {
        Node node0 = Node.newString(268, "CgB", 268, 268);
        Node node1 = NodeUtil.newQualifiedNameNode("NaN", node0, "CgB");
        node0.addChildToFront(node1);
        assertEquals(0, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01017() throws Throwable {
        Node node0 = Node.newString(268, "CgB", 268, 268);
        Node node1 = NodeUtil.newQualifiedNameNode("NaN", node0, "CgB");
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "NaN");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getFunctionBody(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.referencesThis(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01322() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01423() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 16, 2945);
        assertTrue(node0.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01424() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 16, 2945);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(2945, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test01425() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 16, 2945);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01426() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 16, 2945);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(16, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test01527() throws Throwable {
        Node node0 = Node.newNumber(2706.7);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01628() throws Throwable {
        Node node0 = Node.newString("", (-421), 39);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01729() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(41, node0, 28, 4);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01730() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(41, node0, 28, 4);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01831() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01932() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02033() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02134() throws Throwable {
        Node node0 = Node.newNumber((-898.76647553), 124, 124);
        node0.setType(63);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02235() throws Throwable {
        Node node0 = new Node(64);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02336() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        assertEquals(122, node0.getType());
    }

    @Test(timeout = 4000)
    public void test02337() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02438() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        // Undeclared exception!
        try {
            NodeUtil.getBooleanValue(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Non-literal value: DO
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02539() throws Throwable {
        Node node0 = Node.newString("end index");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02640() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02741() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 106, 124);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02742() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 106, 124);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(106, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test02743() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 106, 124);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        assertEquals(124, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test02844() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("ERROR_TYPE", node0, "ERROR_TYPE");
        // Undeclared exception!
        try {
            NodeUtil.getBooleanValue(node1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Non-literal value: NAME ERROR_TYPE [originalname: java.lang.String@0000000005]
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test02945() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        // Undeclared exception!
        try {
            NodeUtil.getStringValue(node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // NAME 38 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test03046() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("undefined", string0);
    }

    @Test(timeout = 4000)
    public void test03147() throws Throwable {
        Node node0 = Node.newNumber(762.64953274, 1662, 1662);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("762.64953274", string0);
    }

    @Test(timeout = 4000)
    public void test03248() throws Throwable {
        Node node0 = Node.newString("U}byIzd&?#9/2");
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("U}byIzd&?#9/2", string0);
    }

    @Test(timeout = 4000)
    public void test03349() throws Throwable {
        Node node0 = new Node(41);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("null", string0);
    }

    @Test(timeout = 4000)
    public void test03450() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("false", string0);
    }

    @Test(timeout = 4000)
    public void test03551() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("true", string0);
    }

    @Test(timeout = 4000)
    public void test03652() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        String string0 = NodeUtil.getStringValue(node0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test03753() throws Throwable {
        Node node0 = Node.newNumber(0.0, 1678, 1678);
        String string0 = NodeUtil.getStringValue(node0);
        assertEquals("0", string0);
    }

    @Test(timeout = 4000)
    public void test03854() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(35, node0, node0, node0, node0);
        NodeUtil.getFunctionName(node1, node0);
        assertEquals(32, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test03855() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(35, node0, node0, node0, node0);
        NodeUtil.getFunctionName(node1, node0);
        assertEquals(32, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test03956() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("IRP00!8ZJg;AhTC", node0);
        String string0 = NodeUtil.getFunctionName(node1, node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test03957() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("IRP00!8ZJg;AhTC", node0);
        String string0 = NodeUtil.getFunctionName(node1, node1);
        assertEquals("IRP00!8ZJg;AhTC", string0);
    }

    @Test(timeout = 4000)
    public void test03958() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("IRP00!8ZJg;AhTC", node0);
        String string0 = NodeUtil.getFunctionName(node1, node1);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test03959() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("IRP00!8ZJg;AhTC", node0);
        String string0 = NodeUtil.getFunctionName(node1, node1);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04060() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("");
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, 4, 0);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals(4, functionNode0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04061() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("");
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, 4, 0);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test04062() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("");
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, 4, 0);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals("", functionNode0.getFunctionName());
    }

    @Test(timeout = 4000)
    public void test04063() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("");
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, 4, 0);
        String string0 = NodeUtil.getFunctionName(functionNode0, functionNode0);
        assertEquals(0, functionNode0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        // Undeclared exception!
        try {
            NodeUtil.isLiteralValue(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test04265() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04366() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("*X @W`<", 20, 2);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(20, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04367() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("*X @W`<", 20, 2);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04368() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("*X @W`<", 20, 2);
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(2, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test04469() throws Throwable {
        Node node0 = Node.newNumber((double) 96);
        Node node1 = new Node(96, node0, node0, node0, 1, 20);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test04570() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04671() throws Throwable {
        Node node0 = new Node(41, 105, 41);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04772() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04873() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(44);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test04974() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = new Node(7, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05075() throws Throwable {
        Node node0 = Node.newString("J7x~f!]/K-", 43, 125);
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05076() throws Throwable {
        Node node0 = Node.newString("J7x~f!]/K-", 43, 125);
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test05077() throws Throwable {
        Node node0 = Node.newString("J7x~f!]/K-", 43, 125);
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertEquals(125, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test05178() throws Throwable {
        Node node0 = new Node(109);
        Node node1 = NodeUtil.newName("Infinity", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05179() throws Throwable {
        Node node0 = new Node(109);
        Node node1 = NodeUtil.newName("Infinity", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test05280() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("NaN", node0, "");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05281() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("NaN", node0, "");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test05382() throws Throwable {
        Node node0 = new Node(47, 47, 47);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05483() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05584() throws Throwable {
        Node node0 = new Node(9);
        Locale locale0 = Locale.ENGLISH;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test05685() throws Throwable {
        Node node0 = new Node(10);
        Locale locale0 = Locale.CHINA;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test05786() throws Throwable {
        Node node0 = new Node(124);
        Node node1 = new Node(11, node0, node0, node0, 4095, 2969);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05887() throws Throwable {
        Node node0 = new Node(12, 37, 112);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test05988() throws Throwable {
        Node node0 = new Node(13, 95, 95);
        Locale locale0 = Locale.JAPANESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06089() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node node0 = new Node(14, 14, 14);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06190() throws Throwable {
        Node node0 = new Node(15, 15, 15);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06291() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node node0 = new Node(16, 16, 16);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06392() throws Throwable {
        Node node0 = new Node(78, 705, 7680);
        Node node1 = new Node(17, node0, 17, 6);
        Locale locale0 = Locale.forLanguageTag("y&3bcJ+");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06493() throws Throwable {
        Node node0 = new Node(18);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06594() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(19, node0, node0, node0, node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06695() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node node0 = new Node(20, 20, 20);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06796() throws Throwable {
        Node node0 = new Node(21, 20, 21);
        Locale locale0 = Locale.ENGLISH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06897() throws Throwable {
        Node node0 = new Node(22, 27, 1);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test06998() throws Throwable {
        Node node0 = new Node(23, 23, 23);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07099() throws Throwable {
        Node node0 = new Node(24, 24, 95);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test071100() throws Throwable {
        Node node0 = new Node(25, 124, 25);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test072101() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node node0 = new Node(26, (-421), 93);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, set0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test073102() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(27, node0, node0, node0, node0);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074103() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(576);
        Node node1 = new Node(28, node0, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test075104() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        // Undeclared exception!
        try {
            NodeUtil.isValidDefineValue(node0, (Set<String>) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test076105() throws Throwable {
        Node node0 = new Node(30);
        Locale locale0 = Locale.GERMAN;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test077106() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078107() throws Throwable {
        Node node0 = new Node(124, 117, 102);
        Node node1 = new Node(32, node0, 93, 115);
        Locale locale0 = Locale.CANADA_FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079108() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(33, node0, 27, 17);
        Locale locale0 = Locale.KOREAN;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test080109() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test081110() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        Locale locale0 = Locale.JAPAN;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test082111() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083112() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test084113() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgB", 4, 4);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test084114() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgB", 4, 4);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertEquals(4, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test084115() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgB", 4, 4);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test085116() throws Throwable {
        Node node0 = Node.newNumber(146.230444832881);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test086117() throws Throwable {
        Node node0 = Node.newString("R");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test087118() throws Throwable {
        Node node0 = Node.newString(41, "Og;;DB l*Jd_T", 21, 11);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088119() throws Throwable {
        Node node0 = Node.newString("B~m8XLkzq,k,_");
        Node node1 = new Node(42, node0, node0, node0, 24, 35);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test089120() throws Throwable {
        Node node0 = new Node(43);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test090121() throws Throwable {
        Locale locale0 = Locale.CHINA;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091122() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("XMLHttpRequest", node0, "XMLHttpRequest");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("XMLHttpRequest");
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test091123() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName("XMLHttpRequest", node0, "XMLHttpRequest");
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("XMLHttpRequest");
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test092124() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093125() throws Throwable {
        Node node0 = Node.newString(".^");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test094126() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test095127() throws Throwable {
        Node node0 = new Node(9, 9, 9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test096128() throws Throwable {
        Node node0 = new Node(10);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test097129() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test098130() throws Throwable {
        Node node0 = new Node(12);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099131() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test100132() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101133() throws Throwable {
        Node node0 = new Node(15);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test102134() throws Throwable {
        Node node0 = new Node(16);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103135() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test104136() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105137() throws Throwable {
        Node node0 = new Node(19, 19, 40);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106138() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(20, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test107139() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108140() throws Throwable {
        Node node0 = new Node(22);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109141() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110142() throws Throwable {
        Node node0 = new Node(24);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111143() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test112144() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test113145() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(27, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test114146() throws Throwable {
        Node node0 = new Node(28, 28, 28);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test115147() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test116148() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test117149() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test118150() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node node1 = new Node(32, node0, node0, 16, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test119151() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test120152() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(34, node0, node0, node0, 12, 1);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test121153() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(32, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test121154() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(32, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test121155() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122156() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test123157() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test124158() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test125159() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126160() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test127161() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test128162() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test129163() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130164() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test131165() throws Throwable {
        Node node0 = new Node(45, 45, 45);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132166() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133167() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test134168() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(48, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test135169() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136170() throws Throwable {
        Node node0 = new Node(50);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test137171() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test138172() throws Throwable {
        Node node0 = new Node(52, 52, 148);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139173() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test140174() throws Throwable {
        Node node0 = new Node(54, 54, 54);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test141175() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test142176() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test143177() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144178() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test145179() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test146180() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test147181() throws Throwable {
        Node node0 = new Node(62, 62, 62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test148182() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test149183() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test150184() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test151185() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test152186() throws Throwable {
        Node node0 = new Node(67, 67, 67);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153187() throws Throwable {
        Node node0 = new Node(68);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test154188() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test155189() throws Throwable {
        Node node0 = new Node(70, 70, 70);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test156190() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test157191() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test158192() throws Throwable {
        Node node0 = new Node(73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test159193() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test160194() throws Throwable {
        Node node0 = new Node(75);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test161195() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test162196() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test163197() throws Throwable {
        Node node0 = new Node(78);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test164198() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test165199() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test166200() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test167201() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test168202() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test169203() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test170204() throws Throwable {
        Node node0 = new Node(87);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test171205() throws Throwable {
        Node node0 = new Node(88);
        // Undeclared exception!
        try {
            NodeUtil.mayHaveSideEffects(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test172206() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test173207() throws Throwable {
        Node node0 = new Node(91);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test174208() throws Throwable {
        Node node0 = new Node(92);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test175209() throws Throwable {
        Node node0 = new Node(94, 94, 107);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test176210() throws Throwable {
        Node node0 = Node.newString(95, "79apI_aN:");
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test177211() throws Throwable {
        Node node0 = new Node(97);
        // Undeclared exception!
        try {
            NodeUtil.mayEffectMutableState(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test178212() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test179213() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test180214() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test181215() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test182216() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test183217() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(103, node0, node0, node0, 35, 103);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test184218() throws Throwable {
        Node node0 = new Node(104);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test185219() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test186220() throws Throwable {
        Node node0 = new Node(106);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test187221() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test188222() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test189223() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test190224() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test191225() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test192226() throws Throwable {
        Node node0 = new Node(112, 19, 51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test193227() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test194228() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test195229() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test196230() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test197231() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test198232() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test199233() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test200234() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test201235() throws Throwable {
        Node node0 = new Node(121, 121, 121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test202236() throws Throwable {
        Node node0 = Node.newString(128, "prev is not a child of this node.");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test203237() throws Throwable {
        Node node0 = Node.newString("|^");
        Node node1 = new Node(30, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test204238() throws Throwable {
        Node node0 = Node.newString("0PV");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test205239() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test206240() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test207241() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test208242() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test209243() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test210244() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test211245() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test212246() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test213247() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test214248() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test215249() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test216250() throws Throwable {
        Node node0 = new Node(84, 5, (-1734));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test217251() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test218252() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test219253() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(101, node0, 39, 22);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test220254() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test221255() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(110, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test221256() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(110, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(110, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test221257() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(110, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        assertEquals(110, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test222258() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode(".^", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test222259() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode(".^", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(118, node1.getType());
    }

    @Test(timeout = 4000)
    public void test222260() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode(".^", node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertEquals(1, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test223261() throws Throwable {
        Node node0 = new Node(123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test224262() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test225263() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test226264() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test227265() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test228266() throws Throwable {
        Node node0 = new Node(129, 129, 129);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test229267() throws Throwable {
        Node node0 = new Node(130, 130, 130);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test230268() throws Throwable {
        Node node0 = new Node(105);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test231269() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test232270() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        node0.putBooleanProp(42, true);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test233271() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        Node node1 = Node.newString(89, "nq u'i(q", 11, 1);
        node1.addChildToFront(node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test234272() throws Throwable {
        Node node0 = Node.newString(93, "p]ve2FOTXvCkpGA3");
        Node node1 = new Node(1, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        Node node2 = Node.newNumber(84.706217647143, 16, 42);
        node0.addChildToFront(node2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test235273() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        // Undeclared exception!
        try {
            NodeUtil.constructorCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected NEW node, got SET_REF
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test236274() throws Throwable {
        Node node0 = Node.newString("|^");
        Node node1 = new Node(30, node0, node0);
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test237275() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        // Undeclared exception!
        try {
            NodeUtil.functionCallHasSideEffects(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Expected CALL node, got NAME
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test238276() throws Throwable {
        Node node0 = new Node(37);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test239277() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test240278() throws Throwable {
        Node node0 = new Node(95, 95, 95);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test241279() throws Throwable {
        Node node0 = Node.newString("|^");
        Node node1 = new Node(30, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test242280() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(31, node0, node0, node0, 35, 31);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test243281() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("[Uy,Tz^w", node0, "[Uy,Tz^w");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test244282() throws Throwable {
        Node node0 = Node.newString(106, "NaN");
        Node node1 = new Node(49, node0, node0, node0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test245283() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = new Node(102, node0, node0, node0, (-611), (-611));
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test246284() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(103, node0, node0, node0, 35, 103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test247285() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test248286() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test249287() throws Throwable {
        Node node0 = new Node(31, 31, 31);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test250288() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test251289() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test252290() throws Throwable {
        Node node0 = new Node(36, 72, 2);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test253291() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254292() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test254293() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test254294() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(850, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test254295() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        assertEquals(850, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test255296() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test256297() throws Throwable {
        int int0 = NodeUtil.precedence(4);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test257298() throws Throwable {
        int int0 = NodeUtil.precedence(85);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test258299() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(5);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for goto (type 5)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test259300() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(6);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifeq (type 6)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test260301() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(7);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ifne (type 7)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test261302() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(8);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setname (type 8)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test262303() throws Throwable {
        int int0 = NodeUtil.precedence(9);
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test263304() throws Throwable {
        int int0 = NodeUtil.precedence(10);
        assertEquals(6, int0);
    }

    @Test(timeout = 4000)
    public void test264305() throws Throwable {
        int int0 = NodeUtil.precedence(11);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test265306() throws Throwable {
        int int0 = NodeUtil.precedence(12);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test266307() throws Throwable {
        int int0 = NodeUtil.precedence(13);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test267308() throws Throwable {
        int int0 = NodeUtil.precedence(14);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test268309() throws Throwable {
        int int0 = NodeUtil.precedence(15);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test269310() throws Throwable {
        int int0 = NodeUtil.precedence(16);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test270311() throws Throwable {
        int int0 = NodeUtil.precedence(17);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test271312() throws Throwable {
        int int0 = NodeUtil.precedence(18);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test272313() throws Throwable {
        int int0 = NodeUtil.precedence(19);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test273314() throws Throwable {
        int int0 = NodeUtil.precedence(20);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test274315() throws Throwable {
        int int0 = NodeUtil.precedence(21);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test275316() throws Throwable {
        int int0 = NodeUtil.precedence(22);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test276317() throws Throwable {
        int int0 = NodeUtil.precedence(23);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test277318() throws Throwable {
        int int0 = NodeUtil.precedence(24);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test278319() throws Throwable {
        int int0 = NodeUtil.precedence(25);
        assertEquals(12, int0);
    }

    @Test(timeout = 4000)
    public void test279320() throws Throwable {
        int int0 = NodeUtil.precedence(26);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test280321() throws Throwable {
        int int0 = NodeUtil.precedence(27);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test281322() throws Throwable {
        int int0 = NodeUtil.precedence(28);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test282323() throws Throwable {
        int int0 = NodeUtil.precedence(29);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test283324() throws Throwable {
        int int0 = NodeUtil.precedence(30);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test284325() throws Throwable {
        int int0 = NodeUtil.precedence(31);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test285326() throws Throwable {
        int int0 = NodeUtil.precedence(32);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test286327() throws Throwable {
        int int0 = NodeUtil.precedence(33);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test287328() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(34);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setprop (type 34)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test288329() throws Throwable {
        int int0 = NodeUtil.precedence(35);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test289330() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for setelem (type 36)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test290331() throws Throwable {
        int int0 = NodeUtil.precedence(37);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test291332() throws Throwable {
        int int0 = NodeUtil.precedence(38);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test292333() throws Throwable {
        int int0 = NodeUtil.precedence(39);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test293334() throws Throwable {
        int int0 = NodeUtil.precedence(40);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test294335() throws Throwable {
        int int0 = NodeUtil.precedence(41);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test295336() throws Throwable {
        int int0 = NodeUtil.precedence(42);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test296337() throws Throwable {
        int int0 = NodeUtil.precedence(43);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test297338() throws Throwable {
        int int0 = NodeUtil.precedence(44);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test298339() throws Throwable {
        int int0 = NodeUtil.precedence(45);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test299340() throws Throwable {
        int int0 = NodeUtil.precedence(46);
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test300341() throws Throwable {
        int int0 = NodeUtil.precedence(47);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test301342() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(48);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for bindname (type 48)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test302343() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for throw (type 49)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test303344() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(50);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=50> (type 50)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test304345() throws Throwable {
        int int0 = NodeUtil.precedence(51);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test305346() throws Throwable {
        int int0 = NodeUtil.precedence(52);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test306347() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=53> (type 53)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test307348() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for getvar (type 54)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test308349() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(56);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=56> (type 56)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test309350() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=57> (type 57)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test310351() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(58);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=58> (type 58)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test311352() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(59);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=59> (type 59)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test312353() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(60);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=60> (type 60)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test313354() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(61);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for thisfn (type 61)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test314355() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(62);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=62> (type 62)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test315356() throws Throwable {
        int int0 = NodeUtil.precedence(63);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test316357() throws Throwable {
        int int0 = NodeUtil.precedence(64);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test317358() throws Throwable {
        int int0 = NodeUtil.precedence(65);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test318359() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(66);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=66> (type 66)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test319360() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(67);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=67> (type 67)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test320361() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=68> (type 68)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test321362() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for ref_special (type 69)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test322363() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(70);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=70> (type 70)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test323364() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(72);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=72> (type 72)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test324365() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(73);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=73> (type 73)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test325366() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=74> (type 74)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test326367() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(75);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=75> (type 75)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test327368() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(76);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=76> (type 76)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test328369() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(77);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for try (type 77)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test329370() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for semi (type 78)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test330371() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(79);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lb (type 79)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test331372() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rb (type 80)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test332373() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(81);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for lc (type 81)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test333374() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(82);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rc (type 82)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test334375() throws Throwable {
        int int0 = NodeUtil.precedence(83);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test335376() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for rp (type 84)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test336377() throws Throwable {
        int int0 = NodeUtil.precedence(86);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test337378() throws Throwable {
        int int0 = NodeUtil.precedence(87);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test338379() throws Throwable {
        int int0 = NodeUtil.precedence(88);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test339380() throws Throwable {
        int int0 = NodeUtil.precedence(89);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test340381() throws Throwable {
        int int0 = NodeUtil.precedence(90);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test341382() throws Throwable {
        int int0 = NodeUtil.precedence(91);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test342383() throws Throwable {
        int int0 = NodeUtil.precedence(92);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test343384() throws Throwable {
        int int0 = NodeUtil.precedence(93);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test344385() throws Throwable {
        int int0 = NodeUtil.precedence(94);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test345386() throws Throwable {
        int int0 = NodeUtil.precedence(95);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test346387() throws Throwable {
        int int0 = NodeUtil.precedence(96);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test347388() throws Throwable {
        int int0 = NodeUtil.precedence(97);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test348389() throws Throwable {
        int int0 = NodeUtil.precedence(98);
        assertEquals(2, int0);
    }

    @Test(timeout = 4000)
    public void test349390() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(99);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for colon (type 99)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test350391() throws Throwable {
        int int0 = NodeUtil.precedence(100);
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test351392() throws Throwable {
        int int0 = NodeUtil.precedence(101);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test352393() throws Throwable {
        int int0 = NodeUtil.precedence(102);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test353394() throws Throwable {
        int int0 = NodeUtil.precedence(103);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test354395() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(104);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for dot (type 104)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test355396() throws Throwable {
        int int0 = NodeUtil.precedence(105);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test356397() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(106);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for export (type 106)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test357398() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(107);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for import (type 107)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test358399() throws Throwable {
        int int0 = NodeUtil.precedence(108);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test359400() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(109);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for else (type 109)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test360401() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(110);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for switch (type 110)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test361402() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for case (type 111)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test362403() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(112);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for default (type 112)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test363404() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(113);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for while (type 113)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test364405() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(114);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for do (type 114)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test365406() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for for (type 115)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test366407() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for break (type 116)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test367408() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(117);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for continue (type 117)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test368409() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for var (type 118)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test369410() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for with (type 119)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test370411() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(120);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for catch (type 120)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test371412() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for finally (type 121)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test372413() throws Throwable {
        int int0 = NodeUtil.precedence(122);
        assertEquals(13, int0);
    }

    @Test(timeout = 4000)
    public void test373414() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(123);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for reserved (type 123)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test374415() throws Throwable {
        int int0 = NodeUtil.precedence(124);
        assertEquals(15, int0);
    }

    @Test(timeout = 4000)
    public void test375416() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.precedence(2208);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=2208> (type 2208)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test376417() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test377418() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(15);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test378419() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test379420() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test380421() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test381422() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test382423() throws Throwable {
        Node node0 = new Node(87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(9, int0);
    }

    @Test(timeout = 4000)
    public void test383424() throws Throwable {
        Node node0 = Node.newNumber((double) 96);
        // Undeclared exception!
        try {
            NodeUtil.getOpFromAssignmentOp(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Not an assiment op
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test384425() throws Throwable {
        Node node0 = new Node(88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(10, int0);
    }

    @Test(timeout = 4000)
    public void test385426() throws Throwable {
        Node node0 = new Node(89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(11, int0);
    }

    @Test(timeout = 4000)
    public void test386427() throws Throwable {
        Node node0 = Node.newString(90, "7pI_aN:");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(18, int0);
    }

    @Test(timeout = 4000)
    public void test387428() throws Throwable {
        Node node0 = Node.newString(91, "79apI_aN:");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(19, int0);
    }

    @Test(timeout = 4000)
    public void test388429() throws Throwable {
        Node node0 = new Node(92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(20, int0);
    }

    @Test(timeout = 4000)
    public void test389430() throws Throwable {
        Node node0 = new Node(93);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(21, int0);
    }

    @Test(timeout = 4000)
    public void test390431() throws Throwable {
        Node node0 = new Node(94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(22, int0);
    }

    @Test(timeout = 4000)
    public void test391432() throws Throwable {
        Node node0 = Node.newString(95, "79apI_aN:");
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(23, int0);
    }

    @Test(timeout = 4000)
    public void test392433() throws Throwable {
        Node node0 = Node.newNumber((double) 96);
        Node node1 = new Node(96, node0, node0, node0, 1369, 20);
        int int0 = NodeUtil.getOpFromAssignmentOp(node1);
        assertEquals(24, int0);
    }

    @Test(timeout = 4000)
    public void test393434() throws Throwable {
        Node node0 = new Node(97);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
        assertEquals(25, int0);
    }

    @Test(timeout = 4000)
    public void test394435() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test395436() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExpressionNode(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test396437() throws Throwable {
        Node node0 = new Node(33, (-105), 20);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test397438() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test398439() throws Throwable {
        Node node0 = new Node(35, (-3092), 7);
        boolean boolean0 = NodeUtil.isGet(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test399440() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getAssignedValue(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test400441() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNew(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test401442() throws Throwable {
        Node node0 = Node.newString(".^");
        Node node1 = new Node(30, node0, node0);
        boolean boolean0 = NodeUtil.isNew(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test402443() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("*X @W`<", 20, 2);
        Node node1 = new Node(86, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(20, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test402444() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("*X @W`<", 20, 2);
        Node node1 = new Node(86, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(2, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test403445() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("\"whl~oZ$J[;~;}fRT", 6, 4095);
        Node node1 = new Node(118, node0, 20, 35);
        Node node2 = NodeUtil.getAssignedValue(node0);
        assertEquals(6, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test403446() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("\"whl~oZ$J[;~;}fRT", 6, 4095);
        Node node1 = new Node(118, node0, 20, 35);
        Node node2 = NodeUtil.getAssignedValue(node0);
        assertEquals(4095, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test403447() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("\"whl~oZ$J[;~;}fRT", 6, 4095);
        Node node1 = new Node(118, node0, 20, 35);
        Node node2 = NodeUtil.getAssignedValue(node0);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test404448() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test405449() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("[Uy,TzVq^w", (-929), (-929));
        Node node1 = NodeUtil.newExpr(node0);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test405450() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("[Uy,TzVq^w", (-929), (-929));
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test406451() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(118, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test406452() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(118, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertEquals(110, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test406453() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(118, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
        assertEquals(110, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test407454() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgB", 4, 4);
        Node node1 = new Node(22, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(4, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test407455() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgB", 4, 4);
        Node node1 = new Node(22, node0, node0, node0, node0);
        NodeUtil.getAssignedValue(node0);
        assertEquals(4, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test408456() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isString(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test409457() throws Throwable {
        Node node0 = Node.newString("R");
        boolean boolean0 = NodeUtil.isString(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test410458() throws Throwable {
        Node node0 = new Node(84, 5, (-1734));
        boolean boolean0 = NodeUtil.isExprAssign(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test411459() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test411460() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test412461() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isExprCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test413462() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test414463() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test414464() throws Throwable {
        Node node0 = Node.newNumber((double) 51);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test415465() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test416466() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test417467() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        Node node1 = Node.newString(106, "l");
        node0.addChildToFront(node1);
        node0.addChildrenToFront(node0);
        boolean boolean0 = NodeUtil.isForIn(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test418468() throws Throwable {
        Node node0 = new Node(113, 105, 4);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test419469() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test420470() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test421471() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test422472() throws Throwable {
        Node node0 = Node.newString(304, "B'8XLzkzq,k;_");
        Node node1 = new Node(113, node0, node0, node0, node0);
        Node node2 = NodeUtil.getLoopCodeBlock(node1);
        assertEquals(0, Node.BOTH);
    }

    @Test(timeout = 4000)
    public void test423473() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test424474() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertFalse(node1.equals((Object) node0));
    }

    @Test(timeout = 4000)
    public void test425475() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
        assertEquals(0, Node.LABEL_ID_PROP);
    }

    @Test(timeout = 4000)
    public void test426476() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test427477() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.isControlStructureCodeBlock(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test428478() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test429479() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test430480() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test431481() throws Throwable {
        Node node0 = new Node(113, 21, 113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test432482() throws Throwable {
        Node node0 = Node.newNumber(167.19437239162275);
        node0.setType(114);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test433483() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test434484() throws Throwable {
        Node node0 = new Node(119, 93, 102);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test435485() throws Throwable {
        Node node0 = new Node(8, 8, 8);
        node0.setType(120);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test436486() throws Throwable {
        Node node0 = Node.newString(126, "vBlError");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test437487() throws Throwable {
        Node node0 = new Node(77, (-2553), (-2553));
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test438488() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(108, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test439489() throws Throwable {
        Node node0 = new Node(110, 1683, 118);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test440490() throws Throwable {
        Node node0 = Node.newString("|^");
        Node node1 = new Node(111, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test441491() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test442492() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test443493() throws Throwable {
        Node node0 = Node.newString(".^");
        Node node1 = new Node(114, node0, node0, 1511, 11);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test444494() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test445495() throws Throwable {
        Node node0 = new Node(119, 8, 1382);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test446496() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test447497() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test448498() throws Throwable {
        Node node0 = new Node(126);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test449499() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test450500() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test451501() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("/", 16, 2);
        Node node2 = new Node(77, node0, node0, node0, node1);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node2, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test451502() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("/", 16, 2);
        Node node2 = new Node(77, node0, node0, node0, node1);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node2, node1);
        assertEquals(16, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test451503() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("/", 16, 2);
        Node node2 = new Node(77, node0, node0, node0, node1);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node2, node1);
        assertFalse(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test451504() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("/", 16, 2);
        Node node2 = new Node(77, node0, node0, node0, node1);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node2, node1);
        assertEquals(2, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test452505() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test453506() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test454507() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test455508() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // NAME  110 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test456509() throws Throwable {
        Node node0 = new Node(109, 109, 109);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ELSE 109 does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test457510() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("", 110, 110);
        Node node1 = new Node(110, node0, node0, node0, node0);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // SWITCH does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test458511() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test459512() throws Throwable {
        Node node0 = Node.newNumber((double) 1678);
        node0.setType(112);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // DEFAULT does not have a condition.
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test460513() throws Throwable {
        Node node0 = new Node(113, 153, 22);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test461514() throws Throwable {
        Node node0 = new Node(114);
        Node node1 = NodeUtil.getConditionExpression(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test462515() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        // Undeclared exception!
        try {
            NodeUtil.getConditionExpression(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test463516() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.setType(115);
        Node node1 = Node.newString(46, "mG6v4vcU6~f9|");
        node0.addChildToFront(node1);
        node0.addChildrenToFront(node0);
        Node node2 = NodeUtil.getConditionExpression(node0);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test464517() throws Throwable {
        Node node0 = Node.newString(132, "*X @W`<");
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test465518() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(13, node0, 12, 125);
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test466519() throws Throwable {
        Node node0 = new Node(125);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test467520() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test468521() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0, node0, 35, 126);
        boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test469522() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test470523() throws Throwable {
        Node node0 = new Node(112, 850, 91);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test471524() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test472525() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test473526() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        Node node1 = NodeUtil.newName("o`-c+P1`", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isLabelName(node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test473527() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        Node node1 = NodeUtil.newName("o`-c+P1`", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isLabelName(node1);
        assertEquals(117, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test474528() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        assertEquals(130, node1.getType());
    }

    @Test(timeout = 4000)
    public void test474529() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test474530() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertEquals(850, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test474531() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("SIV", 850, 850);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isLabelName(node0);
        assertEquals(850, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test475532() throws Throwable {
        Node node0 = new Node(77);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: TRY of TRY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test476533() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("DIV", node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node1, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // node is not a child
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test477534() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = Node.newString("");
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, 4, 0);
        functionNode0.setType(118);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(functionNode0, functionNode0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // node is not a child
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test478535() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = NodeUtil.newName("9F&5)l", node0);
        NodeUtil.removeChild(node1, node0);
        assertEquals(125, node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test478536() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = NodeUtil.newName("9F&5)l", node0);
        NodeUtil.removeChild(node1, node0);
        assertEquals(38, node1.getType());
    }

    @Test(timeout = 4000)
    public void test478537() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = NodeUtil.newName("9F&5)l", node0);
        NodeUtil.removeChild(node1, node0);
        assertTrue(node1.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test479538() throws Throwable {
        Node node0 = new Node(126, 126, 85);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: LABEL 126 of LABEL 126
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test480539() throws Throwable {
        Node node0 = new Node(126, 126, 85);
        node0.addChildrenToBack(node0);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test481540() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        // Undeclared exception!
        try {
            NodeUtil.removeChild(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Invalid attempt to remove node: FOR 115 of FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test482541() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.tryMergeBlock(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test483542() throws Throwable {
        Node node0 = new Node(2586, 2586, 2586);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test484543() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCall(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test485544() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.isThis(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test486545() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test487546() throws Throwable {
        Node node0 = Node.newString(105, "N9Ud");
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test488547() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test489548() throws Throwable {
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            NodeUtil.isAnonymousFunction(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test490549() throws Throwable {
        Node node0 = new Node(105);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test491550() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test492551() throws Throwable {
        Node node0 = Node.newString(132, "*X @W`<");
        Node node1 = new Node(86, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isLhs(node0, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test493552() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test494553() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test495554() throws Throwable {
        Node node0 = Node.newString("9DqEjqw;I4eE9Dp(J'");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test496555() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test496556() throws Throwable {
        String string0 = NodeUtil.opToStr(9);
        assertEquals("|", string0);
    }

    @Test(timeout = 4000)
    public void test497557() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test498558() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
        assertEquals("^", string0);
    }

    @Test(timeout = 4000)
    public void test499559() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(11);
        assertEquals("&", string0);
    }

    @Test(timeout = 4000)
    public void test500560() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
        assertEquals("==", string0);
    }

    @Test(timeout = 4000)
    public void test501561() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
        assertEquals("!=", string0);
    }

    @Test(timeout = 4000)
    public void test502562() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(14);
        assertEquals("<", string0);
    }

    @Test(timeout = 4000)
    public void test503563() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
        assertEquals("<=", string0);
    }

    @Test(timeout = 4000)
    public void test504564() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
        assertEquals(">", string0);
    }

    @Test(timeout = 4000)
    public void test505565() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
        assertEquals(">=", string0);
    }

    @Test(timeout = 4000)
    public void test506566() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(18);
        assertEquals("<<", string0);
    }

    @Test(timeout = 4000)
    public void test507567() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
        assertEquals(">>", string0);
    }

    @Test(timeout = 4000)
    public void test508568() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
        assertEquals(">>>", string0);
    }

    @Test(timeout = 4000)
    public void test509569() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test510570() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(22);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test511571() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
        assertEquals("*", string0);
    }

    @Test(timeout = 4000)
    public void test512572() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(24);
        assertEquals("/", string0);
    }

    @Test(timeout = 4000)
    public void test513573() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(25);
        assertEquals("%", string0);
    }

    @Test(timeout = 4000)
    public void test514574() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
        assertEquals("!", string0);
    }

    @Test(timeout = 4000)
    public void test515575() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
        assertEquals("~", string0);
    }

    @Test(timeout = 4000)
    public void test516576() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
        assertEquals("+", string0);
    }

    @Test(timeout = 4000)
    public void test517577() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test517578() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test518579() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(30);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 30: NEW
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test519580() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test520581() throws Throwable {
        String string0 = NodeUtil.opToStr(32);
        assertEquals("typeof", string0);
    }

    @Test(timeout = 4000)
    public void test521582() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test522583() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test523584() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(35);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 35: GETELEM
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test524585() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(36);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 36: SETELEM
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test525586() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test526587() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(38);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 38: NAME
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test527588() throws Throwable {
        String string0 = NodeUtil.opToStr(39);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test528589() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test529590() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test530591() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test531592() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test532593() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(44);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 44: TRUE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test533594() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test533595() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
        assertEquals("===", string0);
    }

    @Test(timeout = 4000)
    public void test534596() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(46);
        assertEquals("!==", string0);
    }

    @Test(timeout = 4000)
    public void test535597() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test536598() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test537599() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(49);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 49: THROW
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test538600() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test539601() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
        assertEquals("in", string0);
    }

    @Test(timeout = 4000)
    public void test539602() throws Throwable {
        String string0 = NodeUtil.opToStr(51);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test540603() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
        assertEquals("instanceof", string0);
    }

    @Test(timeout = 4000)
    public void test541604() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(53);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 53: LOCAL_LOAD
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test542605() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(54);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 54: GETVAR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test543606() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test544607() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test545608() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(57);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 57: ENUM_INIT_KEYS
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test546609() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test547610() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test548611() throws Throwable {
        String string0 = NodeUtil.opToStr(60);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test549612() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test550613() throws Throwable {
        String string0 = NodeUtil.opToStr(62);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test551614() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(63);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 63: ARRAYLIT
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test552615() throws Throwable {
        String string0 = NodeUtil.opToStr(64);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test553616() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test554617() throws Throwable {
        String string0 = NodeUtil.opToStr(66);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test555618() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test556619() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(68);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 68: REF_CALL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test557620() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(69);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 69: REF_SPECIAL
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test558621() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test559622() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test560623() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test561624() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(74);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 74: REF_NS_MEMBER
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test562625() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test563626() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test564627() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(78);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 78: SEMI
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test565628() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test566629() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(80);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 80: RB
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test567630() throws Throwable {
        String string0 = NodeUtil.opToStr(81);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test568631() throws Throwable {
        String string0 = NodeUtil.opToStr(82);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test569632() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test570633() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(84);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 84: RP
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test571634() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test572635() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test572636() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
        assertEquals("=", string0);
    }

    @Test(timeout = 4000)
    public void test573637() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
        assertEquals("|=", string0);
    }

    @Test(timeout = 4000)
    public void test574638() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
        assertEquals("^=", string0);
    }

    @Test(timeout = 4000)
    public void test575639() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
        assertEquals("&=", string0);
    }

    @Test(timeout = 4000)
    public void test576640() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
        assertEquals("<<=", string0);
    }

    @Test(timeout = 4000)
    public void test577641() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
        assertEquals(">>=", string0);
    }

    @Test(timeout = 4000)
    public void test578642() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(92);
        assertEquals(">>>=", string0);
    }

    @Test(timeout = 4000)
    public void test579643() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(93);
        assertEquals("+=", string0);
    }

    @Test(timeout = 4000)
    public void test580644() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
        assertEquals("-=", string0);
    }

    @Test(timeout = 4000)
    public void test581645() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
        assertEquals("*=", string0);
    }

    @Test(timeout = 4000)
    public void test582646() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(96);
        assertEquals("/=", string0);
    }

    @Test(timeout = 4000)
    public void test583647() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
        assertEquals("%=", string0);
    }

    @Test(timeout = 4000)
    public void test584648() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test585649() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test586650() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test586651() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
        assertEquals("||", string0);
    }

    @Test(timeout = 4000)
    public void test587652() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
        assertEquals("&&", string0);
    }

    @Test(timeout = 4000)
    public void test588653() throws Throwable {
        String string0 = NodeUtil.opToStr(102);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test589654() throws Throwable {
        String string0 = NodeUtil.opToStr(103);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test590655() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test591656() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(105);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 105: FUNCTION
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test592657() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test593658() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test594659() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(108);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 108: IF
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test595660() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test596661() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test597662() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(111);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 111: CASE
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test598663() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test599664() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test600665() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test601666() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(115);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 115: FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test602667() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(116);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 116: BREAK
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test603668() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test604669() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(118);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 118: VAR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test605670() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(119);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 119: WITH
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test606671() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test607672() throws Throwable {
        // Undeclared exception!
        try {
            NodeUtil.opToStrNoFail(121);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown op 121: FINALLY
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test608673() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
        assertEquals("void", string0);
    }

    @Test(timeout = 4000)
    public void test609674() throws Throwable {
        String string0 = NodeUtil.opToStr(2);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test610675() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.copyNameAnnotations(node0, node0);
        assertEquals(46, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test611676() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        node0.putIntProp(43, 43);
        NodeUtil.copyNameAnnotations(node0, node0);
        assertFalse(node0.isNoSideEffectsCall());
    }

    @Test(timeout = 4000)
    public void test612677() throws Throwable {
        Node node0 = Node.newString("B~m8XLkzq,k,_");
        Node node1 = NodeUtil.newVarNode("B~m8XLkzq,k,_", node0);
        NodeUtil.newVarNode("B~m8XLkzq,k,_", node1);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test613678() throws Throwable {
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        Node node0 = NodeUtil.newUndefinedNode();
        linkedList0.add(node0);
        // Undeclared exception!
        try {
            NodeUtil.newFunctionNode("4%@5;|z-AV1", linkedList0, node0, 29, 41);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test614679() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("undefined");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test615680() throws Throwable {
        boolean boolean0 = NodeUtil.isLatin("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000\u00A0\u180E\u202F");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test616681() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("<No stack trace available>");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test617682() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("typeof");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test618683() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(13, Node.CASES_PROP);
    }

    @Test(timeout = 4000)
    public void test619684() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(2, node0, 42, 41);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(32, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test619685() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("CgEAB", 32, 32);
        Node node1 = new Node(2, node0, 42, 41);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(32, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test620686() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("NE", node0);
        Node node2 = NodeUtil.newVarNode("NE", node1);
        // Undeclared exception!
        try {
            NodeUtil.redeclareVarsInsideBranch(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test621687() throws Throwable {
        Node node0 = Node.newString("|^=");
        Node node1 = NodeUtil.newQualifiedNameNode("|^=", node0, "|^=");
        boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test622688() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test623689() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(88, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test623690() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test623691() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(83, node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test623692() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test623693() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals(33, node0.getType());
    }

    @Test(timeout = 4000)
    public void test623694() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.rhinN.Token", 88, 83);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test624695() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", (-1885), 30);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals((-1), node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test624696() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", (-1885), 30);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertTrue(node1.isUnscopedQualifiedName());
    }

    @Test(timeout = 4000)
    public void test624697() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", (-1885), 30);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test624698() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype", (-1885), 30);
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        assertNotNull(node1);
    }

    @Test(timeout = 4000)
    public void test625699() throws Throwable {
        Node node0 = NodeUtil.newVarNode("aoYFD", (Node) null);
        // Undeclared exception!
        try {
            NodeUtil.hasCatchHandler(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test626700() throws Throwable {
        Node node0 = Node.newNumber((double) (-1466));
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
        boolean boolean0 = NodeUtil.containsType(node0, 31, nodeUtil_MatchNodeType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test627701() throws Throwable {
        Node node0 = Node.newNumber(762.64953274, 1681, 1681);
        Node node1 = NodeUtil.newName("com.google.javascript.jscomp.NodeUtil$1", node0);
        int int0 = NodeUtil.getNameReferenceCount(node1, "com.google.javascript.jscomp.NodeUtil$1");
        assertEquals(1681, node1.getCharno());
    }

    @Test(timeout = 4000)
    public void test627702() throws Throwable {
        Node node0 = Node.newNumber(762.64953274, 1681, 1681);
        Node node1 = NodeUtil.newName("com.google.javascript.jscomp.NodeUtil$1", node0);
        int int0 = NodeUtil.getNameReferenceCount(node1, "com.google.javascript.jscomp.NodeUtil$1");
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test628703() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        assertEquals(49, Node.LAST_PROP);
    }

    @Test(timeout = 4000)
    public void test629704() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(8239);
        Node node0 = Node.newNumber((double) 8239);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test630705() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(8259);
        Node node0 = new Node(8259);
        Node node1 = new Node(8259, node0, node0, node0, 36, 48);
        // Undeclared exception!
        try {
            NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test631706() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.hasFinally(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test632707() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test633708() throws Throwable {
        Node node0 = new Node(80, 80, 80);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test634709() throws Throwable {
        Node node0 = new Node(77);
        // Undeclared exception!
        try {
            NodeUtil.getCatchBlock(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test635710() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test636711() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test637712() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test638713() throws Throwable {
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            NodeUtil.getFnParameters(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test639714() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test640715() throws Throwable {
        Node node0 = new Node(72);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test641716() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
        assertFalse(jSDocInfo1.isExterns());
    }

    @Test(timeout = 4000)
    public void test642717() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(2, node0, node0, node0, node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test643718() throws Throwable {
        Node node0 = Node.newString(105, "N9Ud");
        node0.addChildToFront(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test644719() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        String string0 = NodeUtil.getSourceName(node0);
        assertNull(string0);
    }
}
