/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:17:39 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerPass;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MakeDeclaredNamesUnique_ESTest extends MakeDeclaredNamesUnique_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerPass compilerPass0 = MakeDeclaredNamesUnique.getContextualRenameInverter(compiler0);
        // Undeclared exception!
        try {
            compilerPass0.process((Node) null, (Node) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer", "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
        assertEquals(2, Node.ATTRIBUTE_FLAG);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(supplier0, "UINT64", true);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique(makeDeclaredNamesUnique_InlineRenamer0);
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("UINT64");
        Node node0 = compiler0.parseSyntheticCode("UINT64", "UINT64");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
        assertTrue(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MakeDeclaredNamesUnique.ContextualRenamer makeDeclaredNamesUnique_ContextualRenamer0 = new MakeDeclaredNamesUnique.ContextualRenamer();
        boolean boolean0 = makeDeclaredNamesUnique_ContextualRenamer0.stripConstIfReplaced();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MakeDeclaredNamesUnique.ContextualRenamer makeDeclaredNamesUnique_ContextualRenamer0 = new MakeDeclaredNamesUnique.ContextualRenamer();
        makeDeclaredNamesUnique_ContextualRenamer0.addDeclaredName("com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer");
        MakeDeclaredNamesUnique.ContextualRenamer makeDeclaredNamesUnique_ContextualRenamer1 = (MakeDeclaredNamesUnique.ContextualRenamer) makeDeclaredNamesUnique_ContextualRenamer0.forChildScope();
        makeDeclaredNamesUnique_ContextualRenamer1.addDeclaredName("com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer");
        assertFalse(makeDeclaredNamesUnique_ContextualRenamer1.equals((Object) makeDeclaredNamesUnique_ContextualRenamer0));
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = new Node(120);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer((Supplier<String>) null, "msg.change.configurable.false.to.true", false);
        makeDeclaredNamesUnique_InlineRenamer0.forChildScope();
        assertFalse(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String string0 = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName("$$");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = Node.newNumber((double) 105);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(105);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique((MakeDeclaredNamesUnique.Renamer) null);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = new Node(105, 105, 105);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = new Node(105);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
        // Undeclared exception!
        try {
            makeDeclaredNamesUnique0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ArrayDeque", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
        Node node0 = Node.newNumber((double) 120);
        Node node1 = new Node(120, node0, node0, node0);
        // Undeclared exception!
        try {
            makeDeclaredNamesUnique0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.ArrayDeque", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(supplier0, "UINT64", false);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique(makeDeclaredNamesUnique_InlineRenamer0);
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("UINT64");
        Node node0 = compiler0.parseSyntheticCode("UINT64", "UINT64");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
        assertFalse(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = Node.newNumber((double) 105);
        Node node1 = Node.newNumber((double) 105);
        Node node2 = new Node(105, node1, node0, node0);
        Node node3 = new Node(33, node2, 11, 9);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node3, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        Node node0 = new Node(105);
        Node node1 = new Node(126, node0, node0, node0);
        // Undeclared exception!
        try {
            NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) makeDeclaredNamesUnique0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String string0 = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName("tK|");
        assertEquals("tK|", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique.ContextualRenameInverter makeDeclaredNamesUnique_ContextualRenameInverter0 = (MakeDeclaredNamesUnique.ContextualRenameInverter) MakeDeclaredNamesUnique.getContextualRenameInverter(compiler0);
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseSyntheticCode("com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer", "com.google.javascript.jscomp.MakeDeclaredNamesUnique$InlineRenamer");
        NodeTraversal.traverse((AbstractCompiler) compiler0, (Node) scriptOrFnNode0, (NodeTraversal.Callback) makeDeclaredNamesUnique_ContextualRenameInverter0);
        assertFalse(scriptOrFnNode0.isOptionalArg());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        MakeDeclaredNamesUnique.ContextualRenameInverter makeDeclaredNamesUnique_ContextualRenameInverter0 = (MakeDeclaredNamesUnique.ContextualRenameInverter) MakeDeclaredNamesUnique.getContextualRenameInverter(compiler0);
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseSyntheticCode("$$", "$$");
        NodeTraversal.traverse((AbstractCompiler) compiler0, (Node) scriptOrFnNode0, (NodeTraversal.Callback) makeDeclaredNamesUnique_ContextualRenameInverter0);
        assertEquals(2, Node.ATTRIBUTE_FLAG);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MakeDeclaredNamesUnique.ContextualRenamer makeDeclaredNamesUnique_ContextualRenamer0 = new MakeDeclaredNamesUnique.ContextualRenamer();
        MakeDeclaredNamesUnique.ContextualRenamer makeDeclaredNamesUnique_ContextualRenamer1 = (MakeDeclaredNamesUnique.ContextualRenamer) makeDeclaredNamesUnique_ContextualRenamer0.forChildScope();
        makeDeclaredNamesUnique_ContextualRenamer1.addDeclaredName("8");
        makeDeclaredNamesUnique_ContextualRenamer1.addDeclaredName("8");
        assertFalse(makeDeclaredNamesUnique_ContextualRenamer1.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = null;
        try {
            makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(supplier0, "", false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(supplier0, "u#]pnip", false);
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("u#]pnip");
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("u#]pnip");
        assertFalse(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer((Supplier<String>) null, "msg.change.configurable.false.to.true", false);
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("");
        assertFalse(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.InlineRenamer makeDeclaredNamesUnique_InlineRenamer0 = new MakeDeclaredNamesUnique.InlineRenamer(supplier0, "9VD)[F{[", false);
        makeDeclaredNamesUnique_InlineRenamer0.addDeclaredName("$$");
        assertFalse(makeDeclaredNamesUnique_InlineRenamer0.stripConstIfReplaced());
    }
}
