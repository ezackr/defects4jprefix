/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 08:24:04 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function(warng, exp){}");
        Node node1 = new Node(8, node0, node0, 2, 36);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$DuplicateDeclarationHandler");
        Node node1 = new Node(17, node0, node0, 1, 10);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
        assertEquals(1, Node.SPECIALCALL_EVAL);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node0 = Node.newString(0, "E1wKu0iW&PNp3Tz");
        // Undeclared exception!
        try {
            normalize_VerifyConstants0.process(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.gvo$le.javascript.jsco+p.Nor/alizR$D>plicateDeclarati0nHanler");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node1 = new Node(2355, node0, node0);
        // Undeclared exception!
        try {
            normalize_VerifyConstants0.process(node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseTestCode("com.google.javascript.jscomp.Nor/alizR$D>plicateDeclarationHandler");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal.traverse((AbstractCompiler) compiler0, (Node) scriptOrFnNode0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        assertEquals(0, scriptOrFnNode0.getEncodedSourceStart());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseTestCode("function(arningexp){}");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal.traverse((AbstractCompiler) compiler0, (Node) scriptOrFnNode0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, (Node) scriptOrFnNode0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        assertNull(scriptOrFnNode0.getSourceName());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function(warning, exp){}");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        assertEquals(2, Node.SPECIALCALL_WITH);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        Node node1 = new Node(116, node0, node0, 2, 40);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Node node0 = new Node(126);
        Node node1 = new Node(7, node0, node0, 49, 21);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // Normalize constraints violated:
            // LABEL normalization
            //
            verifyException("com.google.javascript.jscomp.Normalize$NormalizeStatements", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("tg");
        Node node1 = new Node(113, node0, node0, (-2), (-449));
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //   Node(SCRIPT):  [testcode] :1:0
            // [source unknown]
            //   Parent(FOR):  [testcode] :-1:-1
            // [source unknown]
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Node node0 = new Node(126);
        Node node1 = new Node(117, node0, node0, 49, 40);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        Node node1 = new Node(119, node0, node0, 2450, 40);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Node node0 = new Node(126);
        Node node1 = new Node(123, node0, node0, 2450, 40);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126, 126, 126);
        node0.addChildrenToFront(node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("'?i");
        Node node1 = new Node(115, node0, node0, 34, 14);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PropogateConstantAnnotations");
        Node node1 = new Node(118, node0, node0, 118, 37);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PropogateConstantAnnotations");
        Node node1 = new Node(118, node0, node0, 118, 37);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        // Undeclared exception!
        try {
            normalize0.process(node1, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Node node0 = new Node(143);
        Node node1 = new Node(105, node0, node0, 49, 36);
        node0.addChildrenToFront(node1);
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        // Undeclared exception!
        try {
            normalize0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function(warning, exp){}");
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node1 = new Node(105, node0, node0, node0, 49, 4095);
        // Undeclared exception!
        try {
            normalize0.process(node0, node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }
}
