/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 03:36:20 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(35);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(">+i>7Vd9l>)+-D", 141, 105);
        Node node1 = new Node(91, node0, 182, 1665);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(">+i>7Vd9l>)+-D", 141, 105);
        Node node1 = new Node(91, node0, 182, 1665);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("pm9] B");
        Node node1 = new Node(7, node0, node0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.process(node0, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(46, node0, node0);
        typeCheck0.processForTesting((Node) null, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(46, node0, node0);
        typeCheck0.processForTesting((Node) null, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("UhcK[`:g[z'u8]>gcS'", "AXu", "AXu");
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        Node node0 = jsAst0.getAstRoot(compiler0);
        Node node1 = new Node(23, node0);
        typeCheck0.processForTesting(node0, node0);
        Node node2 = new Node(8, node1, node1, node1, node1);
        // Undeclared exception!
        try {
            typeCheck0.process(node2, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(83);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, syntacticScopeCreator0, checkLevel0, checkLevel0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(40);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Scope scope0 = new Scope(node0, compiler0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, scope0, (ScopeCreator) null, checkLevel0, checkLevel0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node0 = new Node((-366));
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((double) 86);
        Node node1 = new Node(86, node0, node0);
        nodeTraversal0.traverse(node1);
        assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118, 118, 118);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(12, Node.REGEXP_PROP);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        node0.addSuppression("TightenTypes pass appears to be stuck in an infinite loop.");
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(30, Node.VAR_ARGS_NAME);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(4);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, Node.BOTH);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(5);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(5);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(6);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(6);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01519() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(7);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01520() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(7);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(8);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(8);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(9, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(9, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(9, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(10, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(10, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        Node node1 = new Node(11, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01929() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        Node node1 = new Node(11, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02030() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(40);
        Node node1 = new Node(12, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test02131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(13);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(14);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02333() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(15, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test02334() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(15, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02435() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(17);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test02536() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(87);
        Node node1 = new Node(18, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02537() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(87);
        Node node1 = new Node(18, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02638() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(19, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02639() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(19, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02740() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node((-1276));
        Node node1 = new Node(20, node0, 1, 14);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test02741() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node((-1276));
        Node node1 = new Node(20, node0, 1, 14);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02842() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(21, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02843() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(21, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02944() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(22, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03045() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(23, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03046() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(1.0);
        Node node1 = new Node(23, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03147() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(24, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03148() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(24, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03249() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(87);
        Node node1 = new Node(25, node0, node0, node0, node0, 28, 38);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03250() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(87);
        Node node1 = new Node(25, node0, node0, node0, node0, 28, 38);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03251() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(87);
        Node node1 = new Node(25, node0, node0, node0, node0, 28, 38);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03352() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(26);
        nodeTraversal0.traverse(node0);
        assertEquals((-2), Node.OBJECT_IDS_PROP);
    }

    @Test(timeout = 4000)
    public void test03453() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(16, 16, 16);
        Node node1 = new Node(27, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(node0.wasEmptyNode());
    }

    @Test(timeout = 4000)
    public void test03554() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(5333);
        Node node1 = new Node(28, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, Node.SPECIALCALL_WITH);
    }

    @Test(timeout = 4000)
    public void test03655() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(29);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test03756() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("M*U(-g=e", 16, 16);
        Node node1 = new Node(30, node0, 20, 31);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03857() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(32);
        nodeTraversal0.traverse(node0);
        assertFalse(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test03958() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("msg.mult.index", "msg.mult.index", "msg.mult.index");
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        Node node0 = jsAst0.getAstRoot(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03959() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("msg.mult.index", "msg.mult.index", "msg.mult.index");
        JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);
        Node node0 = jsAst0.getAstRoot(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04060() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(34);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test04061() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(34);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04162() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(36);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test04163() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(36);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04264() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(37, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test04365() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(41);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test04466() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(42);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04567() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(43);
        nodeTraversal0.traverse(node0);
        assertFalse(node0.isLocalResultCall());
    }

    @Test(timeout = 4000)
    public void test04668() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(44);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, Node.SIDE_EFFECTS_ALL);
    }

    @Test(timeout = 4000)
    public void test04769() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(45);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04870() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(47);
        nodeTraversal0.traverse(node0);
        assertEquals(27, Node.SPECIALCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test04971() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(48, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04972() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(48, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05073() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(49);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.PROPERTY_FLAG);
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135);
        Node node1 = new Node(50, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05175() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135);
        Node node1 = new Node(50, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05276() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(51);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05377() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(52, 52, 52);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05478() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05479() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05580() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(54);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05581() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(54);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05682() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(55);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05683() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(55);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05784() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05785() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05886() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(57);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05887() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(57);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05988() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(58);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05989() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(58);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06090() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(60);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06091() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(60);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test06192() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06193() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06294() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(62);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06295() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(62);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06396() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(63);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals((-1), Node.CATCH_SCOPE_PROP);
    }

    @Test(timeout = 4000)
    public void test06497() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(64, node0, 12, 11);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test06598() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(65, 134, 134);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06699() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test066100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test067101() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(67);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test067102() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(67);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test068103() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(68);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test068104() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(68);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test069105() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(69);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test070106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test070107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test071108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(71, (-23), (-2300));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test071109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(71, (-23), (-2300));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test072110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(72);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test072111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(72);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test073112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(73);
        CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, compilerOptions0.checkFunctions);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test073113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(73);
        CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, compilerOptions0.checkFunctions);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test074114() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(74, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test074115() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(74, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test075116() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(75);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test075117() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(75);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test076118() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(76, 76, 76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test076119() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(76, 76, 76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test077120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(79);
        Node node1 = new Node(77);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(27, Node.SPECIALCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test078121() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test078122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test079123() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test079124() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test080125() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(81);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test080126() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(81);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test081127() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(82);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test081128() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(82);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test082129() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(83);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test083130() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test083131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test084132() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(85, 85, 85);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test085133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 87);
        Node node1 = new Node(87, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test085134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 87);
        Node node1 = new Node(87, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test085135() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 87);
        Node node1 = new Node(87, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test086136() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(88, node0, 12, 11);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test086137() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(88, node0, 12, 11);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test087138() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(4617);
        Node node1 = new Node(89, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test087139() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(4617);
        Node node1 = new Node(89, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test088140() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 90);
        Node node1 = new Node(90, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test088141() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 90);
        Node node1 = new Node(90, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test089142() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(92);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test090143() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("", (-9), (-2662));
        Node node1 = new Node(94, node0, 32, 269);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test090144() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("", (-9), (-2662));
        Node node1 = new Node(94, node0, 32, 269);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test090145() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("", (-9), (-2662));
        Node node1 = new Node(94, node0, 32, 269);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test091146() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(95);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test092147() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 96);
        Node node1 = new Node(96, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test092148() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 96);
        Node node1 = new Node(96, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test093149() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(98);
        nodeTraversal0.traverse(node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test094150() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(99, 99, 99);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test094151() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(99, 99, 99);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test095152() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(100, 83, 83);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test096153() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(101);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test097154() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 102);
        Node node1 = new Node(102, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(46, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test098155() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(103);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test099156() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test100157() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(106);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test100158() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(106);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test101159() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(107);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test101160() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(107);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test102161() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(108);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(47, Node.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test103162() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(109);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test103163() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(109);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test104164() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test105165() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(111);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test106166() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(112);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test107167() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(113);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test108168() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(114);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(44, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test109169() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(115);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(8, Node.CODEOFFSET_PROP);
    }

    @Test(timeout = 4000)
    public void test110170() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(116);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(44, Node.IS_OPTIONAL_PARAM);
    }

    @Test(timeout = 4000)
    public void test111171() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(117);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, Node.SIDE_EFFECTS_ALL);
    }

    @Test(timeout = 4000)
    public void test112172() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(119);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test113173() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 31);
        Node node1 = new Node(120);
        typeCheck0.visit((NodeTraversal) null, node1, node0);
        assertEquals(46, Node.IS_NAMESPACE);
    }

    @Test(timeout = 4000)
    public void test114174() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(121);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test114175() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(121);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test115176() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(122);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(4095, Node.COLUMN_MASK);
    }

    @Test(timeout = 4000)
    public void test116177() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(123);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test116178() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(123);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test117179() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(124);
        nodeTraversal0.traverse(node0);
        assertEquals(16, Node.FLAG_LOCAL_RESULTS);
    }

    @Test(timeout = 4000)
    public void test118180() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(126);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals((-2), Node.OBJECT_IDS_PROP);
    }

    @Test(timeout = 4000)
    public void test119181() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(127);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test119182() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(127);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test120183() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test120184() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test121185() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(129);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test121186() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(129);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test122187() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(131);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test122188() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(131);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test123189() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(133);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test123190() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(133);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test124191() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(134);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test124192() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(134);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test125193() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135, 135, 135);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test125194() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135, 135, 135);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test126195() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test126196() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test127197() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(137);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test127198() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(137);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test128199() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(138);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test128200() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(138);
        nodeTraversal0.traverse(node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test129201() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test129202() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test130203() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test130204() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test131205() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test131206() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test132207() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(142);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test132208() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(142);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test133209() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(143);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test133210() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(143);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test134211() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(144);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test134212() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(144);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test135213() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(146);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test135214() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(146);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test136215() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(147);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(24, Node.LASTUSE_PROP);
    }

    @Test(timeout = 4000)
    public void test137216() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(148);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(47, Node.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test138217() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(149);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test138218() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(149);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test139219() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(150);
        nodeTraversal0.traverse(node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test139220() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(150);
        nodeTraversal0.traverse(node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test140221() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(151);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // 151
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test141222() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(152);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, Node.NON_SPECIALCALL);
    }

    @Test(timeout = 4000)
    public void test142223() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(153);
        nodeTraversal0.traverse(node0);
        assertEquals(7, Node.LOCAL_PROP);
    }

    @Test(timeout = 4000)
    public void test143224() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(1115);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 1115
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test144225() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test145226() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(104);
        Node node1 = new Node(46, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertNotSame(node0, node1);
    }

    @Test(timeout = 4000)
    public void test146227() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.", 27, 27);
        Node node1 = new Node(16, node0, 19, 25);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(15, Node.CASEARRAY_PROP);
    }

    @Test(timeout = 4000)
    public void test147228() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(31, 31, 31);
        Node node1 = new Node(31, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test147229() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(31, 31, 31);
        Node node1 = new Node(31, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test148230() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(64);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test149231() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test149232() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test150233() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105, 105, 105);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test151234() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 31);
        Node node1 = new Node(120);
        boolean boolean0 = typeCheck0.visitName((NodeTraversal) null, node0, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test152235() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test153236() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(118, 118, 118);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test154237() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("-%}a>9~$5qt", (-1597), (-1336));
        Node node1 = new Node(33, node0, 823, 21);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test155238() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(118, node0, 18, 29);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // VAR 118 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test156239() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(79);
        Node node1 = new Node(30, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test156240() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(79);
        Node node1 = new Node(30, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test157241() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 31);
        Node node1 = new Node(30, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node1);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test158242() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(40);
        Node node1 = new Node(37, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            nodeTraversal0.traverse(node1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test159243() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(93, 93, 93);
        Node node1 = new Node(93, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test159244() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(93, 93, 93);
        Node node1 = new Node(93, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test160245() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "%C'(<!Z$j");
        Node node1 = new Node(97, node0);
        node1.addSuppression("%C'(<!Z$j");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test160246() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "%C'(<!Z$j");
        Node node1 = new Node(97, node0);
        node1.addSuppression("%C'(<!Z$j");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test161247() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(145, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test161248() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(145, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test162249() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0.0, double0, 0.01);
    }
}
