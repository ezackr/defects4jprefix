/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:30:18 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(31);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(32);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(10, Node.VARS_PROP);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(36, node0, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(36, node0, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasChildren());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(37);
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertFalse(node1.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(11);
        Node node2 = new Node(9, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = new Node(46);
        Node node2 = new Node(10, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-31.759050832020417));
        Node node1 = new Node(24);
        Node node2 = new Node(11, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(67.94708081532937);
        Node node1 = Node.newNumber((double) 38, 45, 4);
        Node node2 = new Node(12, node0, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 32, 12, 36);
        Node node2 = new Node(13, node1, node0, node0, 55, 20);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(14, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 37);
        Node node2 = new Node(15, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.147483635698267E9));
        Node node1 = new Node(44);
        Node node2 = new Node(16, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 42, 14, 4095);
        Node node2 = new Node(17, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2030.0602184));
        Node node1 = new Node(38);
        Node node2 = new Node(19, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(41);
        Node node2 = new Node(20, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) (-2));
        Node node2 = new Node(21, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(23, Node.VARIABLE_PROP);
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(22, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(23, node1, node0, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(11);
        Node node2 = new Node(24, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(24, node3.getType());
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(18);
        Node node2 = new Node(25, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(1);
        Node node2 = new Node(28, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 32, 12, 36);
        Node node2 = new Node(30, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(46);
        Node node2 = new Node(31, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newString("n");
        Node node2 = new Node(33, node0, node1, (-1992), 0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.7625941577642505));
        Node node1 = Node.newNumber((double) 24);
        Node node2 = new Node(34, node0, node1, node0, node1, 33, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(34, node3.getType());
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Node node0 = Node.newNumber(367.6100413287);
        Node node1 = Node.newNumber((double) 35, 1, 12);
        Node node2 = new Node(35, node1, node0, 31, 39);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(38);
        Node node2 = new Node(36, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3175.975592293249));
        Node node1 = Node.newNumber((double) 29);
        Node node2 = new Node(38, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test02829() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(345.3351);
        Node node1 = new Node(31);
        Node node2 = new Node(39, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02930() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(4);
        Node node2 = new Node(40, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03031() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(41, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(16.40201785212969);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(42, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(43, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(43, node3.getType());
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.147483648E9));
        Node node1 = new Node(6);
        Node node2 = new Node(44, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(1);
        Node node2 = new Node(45, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(17.38910130140811);
        Node node1 = Node.newNumber((double) 26, 27, 51);
        Node node2 = new Node(47, node0, node1, node1, node1, 51, 24);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(29.946214005850482);
        Node node1 = new Node(1);
        Node node2 = new Node(48, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-25.668354829));
        Node node1 = new Node(33);
        Node node2 = new Node(49, node1, node0, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.5924483119569723));
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(50, node0, node1, node1, 0, 19);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(50, node3.getType());
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-17.822292534054746));
        Node node1 = new Node(24);
        Node node2 = new Node(51, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(51, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-26.499625503957944));
        Node node1 = Node.newNumber((double) 49, (-1144), 80);
        Node node2 = new Node(52, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(53, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(35.450903139846496);
        Node node1 = Node.newNumber((double) 10);
        Node node2 = new Node(54, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.7379439341954612));
        Node node1 = new Node(20);
        Node node2 = new Node(55, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(56, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 32, 12, 36);
        Node node2 = new Node(57, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(58, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        Node node0 = Node.newNumber(2647.104141);
        Node node1 = new Node(0);
        Node node2 = new Node(59, node0, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(59, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(60, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(60, node3.getType());
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        Node node0 = Node.newNumber((-2955.5546966706142));
        Node node1 = new Node((-2));
        Node node2 = new Node(61, node1, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(4095);
        Node node2 = new Node(62, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(63, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(1);
        Node node2 = new Node(64, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(35.450903139846496);
        Node node1 = Node.newNumber((double) 10);
        Node node2 = new Node(65, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1270.77291850275));
        Node node1 = new Node(46, 30, 36);
        Node node2 = new Node(66, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2952.97830055));
        Node node1 = new Node(15);
        Node node2 = new Node(67, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(68, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(68, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(46);
        Node node2 = new Node(69, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(69, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.14748364904E9));
        Node node1 = new Node(2);
        Node node2 = new Node(70, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(70, node3.getType());
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(1.314843236668201);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(71, node0, node1, node1, 2, 29);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(72, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(73, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(73, node3.getType());
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(165.0278);
        Node node1 = new Node(42);
        Node node2 = new Node(74, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        Node node0 = Node.newNumber(2647.104141);
        Node node1 = new Node(20);
        Node node2 = new Node(75, node0, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(4219.088330048861);
        Node node1 = new Node(4);
        Node node2 = new Node(76, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.3212699462434119));
        Node node1 = new Node(18);
        Node node2 = new Node(77, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06667() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(53.0);
        Node node1 = Node.newNumber((double) 30);
        Node node2 = new Node(78, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test06768() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(1.314843236668201);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(79, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06869() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(80);
        Node node2 = new Node(80, node0, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test06970() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(24);
        Node node2 = new Node(81, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07071() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(2.147483647E9);
        Node node1 = new Node(38);
        Node node2 = new Node(82, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[6];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        assertEquals(6, node1.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0));
        Node node1 = Node.newNumber((double) 49);
        Node node2 = new Node(84, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07374() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.5924483119569723));
        Node node1 = new Node(1);
        Node node2 = new Node(85, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07475() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 10);
        Node node2 = new Node(86, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test07576() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2030.0602184));
        Node node1 = new Node(38);
        Node node2 = new Node(87, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test07677() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 0, 0, 33);
        Node node2 = new Node(88, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(88, node3.getType());
    }

    @Test(timeout = 4000)
    public void test07778() throws Throwable {
        Node node0 = Node.newNumber(2647.104141);
        Node node1 = new Node(20);
        Node node2 = new Node(89, node0, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test07879() throws Throwable {
        Node node0 = Node.newNumber((-2955.6675815335925));
        Node node1 = new Node((-2));
        Node node2 = new Node(90, node1, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(90, node3.getType());
    }

    @Test(timeout = 4000)
    public void test07980() throws Throwable {
        Node node0 = Node.newNumber((-13.509227024901122));
        Node node1 = new Node(12);
        Node node2 = new Node(91, node0, node1, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08081() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-7.569411348078162));
        Node node1 = new Node(51);
        Node node2 = new Node(92, node0, node1, node1, 2, 92);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(92, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08182() throws Throwable {
        Node node0 = Node.newNumber(2656.2019063630246);
        Node node1 = Node.newNumber((double) 26);
        Node node2 = new Node(93, node1, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("Divide by 0");
        Node node1 = Node.newString(4095, "Divide by 0");
        Node node2 = new Node(94, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(94, node3.getType());
    }

    @Test(timeout = 4000)
    public void test08384() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newString("");
        Node node1 = new Node(38);
        Node node2 = new Node(95, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08485() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-7.569411348078));
        Node node1 = new Node(51);
        Node node2 = new Node(96, node0, node1, node1, 2, 96);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08586() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-3031.780478000504));
        Node node1 = new Node(1);
        Node node2 = new Node(97, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08687() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.5924483119569723));
        Node node1 = new Node(51);
        Node node2 = new Node(98, node0, node1, node1, 2, 207);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08788() throws Throwable {
        Node node0 = Node.newNumber(2647.1041406671948);
        Node node1 = new Node(17);
        Node node2 = new Node(99, node0, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test08889() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(1.314843236668201);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(100, node0, node1, node1, 2, 29);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test08990() throws Throwable {
        Node node0 = Node.newNumber((-2957.666359806904));
        Node node1 = new Node(23);
        Node node2 = new Node(101, node0, node1, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09091() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(25.40557365727157);
        Node node1 = new Node(0);
        Node node2 = new Node(1, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test09192() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.147483635698267E9));
        Node node1 = new Node(32, node0, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        Node node0 = Node.newNumber((-503.0));
        Node node1 = new Node(32);
        Node node2 = new Node(32, node1, node0, node1);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test09394() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.147483635698267E9));
        Node node1 = new Node(29, node0, node0, (-2), 4);
        Node node2 = new Node(32, node1, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(32, node3.getType());
    }

    @Test(timeout = 4000)
    public void test09495() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(43.0);
        Node node1 = new Node(41);
        Node node2 = new Node(32, node1, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09596() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(43);
        Node node1 = new Node(32, node0, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09697() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(44);
        Node node1 = new Node(32, node0, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test09798() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(29, node1, node1, node1, 79, 35);
        Node node3 = new Node(33, node0, node2, node2);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(29, node4.getType());
    }

    @Test(timeout = 4000)
    public void test09899() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2976.75));
        Node node1 = new Node(27, node0, node0);
        Node node2 = new Node(7, node1, node1, node1, 2, 0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test099100() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(26, node0, node0, node0, 46, 43);
        Node node2 = new Node(17, node1, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test100101() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = new Node(29, node0, node0, node0, node0, 38, 13);
        Node node2 = new Node(41, node1, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test101102() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(76.33355455986738);
        Node node1 = Node.newNumber((double) 2, (-2), 42);
        Node node2 = new Node(26, node1, 19, 31);
        Node node3 = new Node((-3), node0, node2, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // node is not a child
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test102103() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0));
        Node node1 = new Node(27, node0, node0);
        Node node2 = new Node(7, node1, node1, node1, 2, 0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test103104() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-26.499625503957944));
        Node node1 = Node.newNumber((double) 49, (-1144), 80);
        Node node2 = new Node(35, node0, 11, 2398);
        Node node3 = new Node(52, node2, node2, node1);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertEquals(2, node4.getChildCount());
    }

    @Test(timeout = 4000)
    public void test104105() throws Throwable {
        Node node0 = Node.newNumber(10.82693444416744);
        Node node1 = new Node(841);
        Node node2 = new Node(0, node0, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = new Node(101, node2, node1, node1, (-3), 2);
        Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
        assertTrue(node4.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test105106() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(100, node0, node1, node1, 2, 25);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test106107() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(38);
        Node node2 = new Node(101, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test107108() throws Throwable {
        Node node0 = Node.newNumber((-2955.6675815335925));
        Node node1 = new Node((-2));
        Node node2 = new Node(101, node1, node0, node0);
        node1.addChildToBack(node2);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test108109() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-32.28399317801699));
        Node node1 = new Node(49);
        Node node2 = new Node(21, node0, node1, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test109110() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0819262172687263));
        Node node1 = new Node(46);
        Node node2 = new Node(21, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test110111() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1440.841109482));
        Node node1 = new Node(24);
        Node node2 = new Node(22, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(22, node3.getType());
    }

    @Test(timeout = 4000)
    public void test111112() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 29, (-816), 34);
        Node node2 = new Node(24, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test112113() throws Throwable {
        Node node0 = Node.newNumber(2659.5193963020665);
        Node node1 = Node.newNumber((double) 49);
        Node node2 = new Node(24, node1, node1, node1, node0, 3, 31);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test113114() throws Throwable {
        Node node0 = Node.newNumber((-1036.14));
        Node node1 = Node.newNumber((double) 49);
        Node node2 = new Node(24, node1, node1, node1, node0, 3, 31);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertFalse(node3.isNoSideEffectsCall());
    }

    @Test(timeout = 4000)
    public void test114115() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber(Double.NEGATIVE_INFINITY);
        Node node2 = new Node(9, node0, node0, node0, node1, 12, 1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(1, node3.getCharno());
    }

    @Test(timeout = 4000)
    public void test115116() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-2.147483652001726E9));
        Node node1 = Node.newNumber((double) 2, 43, 85);
        Node node2 = new Node(11, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test116117() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(4.294967296E9);
        Node node1 = Node.newNumber((double) 29);
        Node node2 = new Node(11, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test117118() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0));
        Node node1 = Node.newNumber((double) 37, 30, 32);
        Node node2 = new Node(9, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test118119() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 24);
        Node node2 = new Node(11, node1, node0, 3, 49);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(3, node3.getLineno());
    }

    @Test(timeout = 4000)
    public void test119120() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(31.629717366661637);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(11, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(11, node3.getType());
    }

    @Test(timeout = 4000)
    public void test120121() throws Throwable {
        Node node0 = Node.newNumber((-2957.666359806904));
        Node node1 = Node.newNumber((double) 35, 1, 12);
        Node node2 = new Node(9, node1, node0, node0);
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test121122() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(11, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test122123() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1.0));
        Node node1 = Node.newNumber((double) 27, 7, 8);
        Node node2 = new Node(20, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test123124() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
        Node node1 = Node.newNumber((double) 31);
        Node node2 = new Node(20, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test124125() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-0.5924483119569723));
        Node node1 = Node.newNumber((-0.5924483119569723));
        Node node2 = new Node(20, node1, node0, node0, 2, 19);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test125126() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(2659.5193963020665);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(19, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test126127() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(31.46646616954468);
        Node node1 = Node.newNumber((double) 14);
        Node node2 = new Node(20, node0, node1, node1, 31, 16);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test127128() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(3.9172278460693515);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(19, node1, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
        }
    }

    @Test(timeout = 4000)
    public void test128129() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(18, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test129130() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 43, 49, 4);
        Node node2 = new Node(19, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test130131() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(165.0278);
        Node node1 = new Node(42);
        Node node2 = new Node(16, node1, node0, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(16, node3.getType());
    }

    @Test(timeout = 4000)
    public void test131132() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(6.78231612967271);
        Node node1 = new Node(40);
        Node node2 = new Node(46, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test132133() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(18.54632049182984);
        Node node1 = new Node(41);
        Node node2 = new Node(16, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test133134() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(167.64198681959738);
        Node node1 = new Node(43, 10, 394);
        Node node2 = new Node(16, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test134135() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(4);
        Node node2 = new Node(16, node0, node0, node1);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }

    @Test(timeout = 4000)
    public void test135136() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 37, 3, 4);
        Node node2 = new Node(14, node0, node1, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test136137() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber((-1006.6));
        Node node1 = Node.newNumber((-1006.6));
        Node node2 = new Node(16, node1, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test137138() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(45, node1, node0, node0);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test138139() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(46, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test139140() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 4095);
        Node node2 = new Node(15, node1, node1, node0, 43, 1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test140141() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(32.0);
        Node node1 = Node.newNumber((double) 32, 12, 36);
        Node node2 = new Node(14, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test141142() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 49);
        Node node2 = new Node(17, node0, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test142143() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(31.262238641692267);
        Node node1 = Node.newNumber((double) 1);
        Node node2 = new Node(16, node0, node1);
        // Undeclared exception!
        try {
            peepholeFoldConstants0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
        }
    }

    @Test(timeout = 4000)
    public void test143144() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(662);
        Node node1 = new Node(37, node0, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test143145() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = new Node(662);
        Node node1 = new Node(37, node0, node0, node0);
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        assertTrue(node2.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test144146() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(2);
        Node node2 = new Node(37, node1, node1, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertTrue(node3.hasChildren());
    }

    @Test(timeout = 4000)
    public void test145147() throws Throwable {
        PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
        Node node0 = Node.newNumber(0.0);
        Node node1 = Node.newNumber((double) 8);
        Node node2 = new Node(33, node1, node0, node0);
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        assertEquals(2, node3.getChildCount());
    }
}
