/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:46:10 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.InlineVariables;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InlineVariables_ESTest extends InlineVariables_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vOlue) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.LOCALS_ONLY;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);
        inlineVariables0.process(node0, node0);
        assertEquals(49, Node.FREE_CALL);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.CONSTANTS_ONLY;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);
        inlineVariables0.process(node0, node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vaZue) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        Node node1 = compiler0.parseSyntheticCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vaZue) {this[JSCompiler_set_name] = JSCompiler_set_value}}", "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vaZue) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        node0.addChildToFront(node1);
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
        inlineVariables0.process(node1, node0);
        assertEquals(16, Node.SOURCENAME_PROP);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vaZue) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        Node node1 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_vaZue) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        node0.addChildToFront(node1);
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);
        inlineVariables0.process(node0, node0);
        assertEquals(2, Node.ATTRIBUTE_FLAG);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("function JSCompilereset(JSCompiler_set_nam ) {  return function(JSCompiler_set_vaZuh) {this[JSCompiler_st_name] = JSCompier_set_vaiue}}", "JSCompilereset");
        Node node1 = compiler0.parseTestCode("function JSCompilereset(JSCompiler_set_nam ) {  return function(JSCompiler_set_vaZuh) {this[JSCompiler_st_name] = JSCompier_set_vaiue}}");
        node0.addChildToFront(node1);
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
        inlineVariables0.process(node0, node0);
        assertEquals(33, Node.NAME_PROP);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);
        inlineVariables0.process(node0, node0);
        assertEquals(29, Node.JSDOC_INFO_PROP);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("JSCompilereset");
        Node node1 = compiler0.parseTestCode("function JSCompilereset(JSCompiler_set_nam ) {  return function(JSCompiler_set_vaZuh) {this[JSCompiler_st_name] = JSCompier_set_vaiue}}");
        node1.addChildToFront(node0);
        InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;
        InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);
        inlineVariables0.process(node0, node1);
        assertEquals(20, Node.FINALLY_PROP);
    }
}
