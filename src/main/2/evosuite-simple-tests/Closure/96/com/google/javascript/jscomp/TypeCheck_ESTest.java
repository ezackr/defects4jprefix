/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 05:26:23 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckUnreachableCode;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConvertToDottedProperties;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.UnfoldCompoundAssignments;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(35, "TightenTypes pass appears to be stuck in an infinite loop.");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("JSC_I=EXISTENTdEUM_ELEMENT", "JSC_I=EXISTENTdEUM_ELEMENT");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(18, node0, node0, node0, node0, 31, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("JSC_I=EXISTENTdEUM_ELEMENT", "JSC_I=EXISTENTdEUM_ELEMENT");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(18, node0, node0, node0, node0, 31, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(">v8KK9nk{=T", "enum key {0} must be a syntactic constant");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(31, node0, node0, 1, 130);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("__default_namespace__");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "__default_namespace__");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__", (Charset) null);
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(42, node0, node0, node0, node0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.process(node1, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("JSC_I=EXISTENTdEUM_ELEMENT", "JSC_I=EXISTENTdEUM_ELEMENT");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(18, node0, node0, node0, node0, 31, 0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.process(node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "#l{kEnB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(37, node0, node0, node0, node0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node1, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("kp");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        Scope scope0 = new Scope(node0, compiler0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, checkLevel0, checkLevel0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "NRJ");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(105, "<pEiJP0");
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        // Undeclared exception!
        try {
            typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node1 = Node.newString(118, "");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(16, Node.SOURCENAME_PROP);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("q8o'/p#nfS", "q8o'/p#nfS");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        node0.addSuppression("m2:3j.sOd");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(125, node0.getType());
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(4, "__defaultnamespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(11, Node.USES_PROP);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "#l{kEnB");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(5, "element type must match enum's type");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(6, "", 0, (-1684));
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(6, "", 0, (-1684));
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("_n4", "_n4");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(7, node0, node0, node0, 0, 5);
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node1 = new Node(8, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("interface members can only be empty property declarations, empty functions{0}", "#l{kEnB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(9, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("interface members can only be empty property declarations, empty functions{0}", "#l{kEnB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(9, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(10, node0, node0, node0, 126, 0);
        typeCheck0.visit((NodeTraversal) null, node1, node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#Hl4{kEnB", "#Hl4{kEnB");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(12, node0, node0, 4095, 24);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(node1.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(13, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_>amespaceW_", "zyEgm");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(14);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_nHmespace__", "__default_nHmespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(15, "");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(16, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(node1.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("u", "u");
        compiler0.parse(jSSourceFile0);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(17, "u");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        VarCheck varCheck0 = new VarCheck(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0, (ScopeCreator) null);
        Node node1 = new Node(19, node0, node0, 151, 132);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaul|_namespace__", "__defaul|_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(20, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("prototype", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(21, node0, node0, 112, 47);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(22, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(28, Node.DEBUGSOURCE_PROP);
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(23, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(25, Node.ISNUMBER_PROP);
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "s");
        Node node0 = compiler0.parse(jSSourceFile0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(24, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals((-1), node1.getLineno());
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("#Hl4{kEnB", "#Hl4{kEnB");
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(25, node0, node0, 46, 139);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = new Node(26, 42, 41);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(36, Node.OPT_ARG_NAME);
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("enum element {0} already defined", "-vW\"v<kU_6JTqW]b");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(27, node0, node0, node0, 12, 344);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(19, Node.LABEL_PROP);
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "Sg");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(28, node0, node0, node0, node0, 19, 15);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "X");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(29, "iBg~#D-k;bC-N3");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(32, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(15, Node.CASEARRAY_PROP);
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("g6glO<^H9[u[1UhXn", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(34, "g6glO<^H9[u[1UhXn");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("g6glO<^H9[u[1UhXn", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(34, "g6glO<^H9[u[1UhXn");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(36, "__defaultnamespace__");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "#l{kEnB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(37, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(41, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(35, Node.QUOTED_PROP);
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("iq<:,", "");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(42, node0, node0, node0, 143, (-3209));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(43, "__defaultnamespace__");
        typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
        assertEquals((-1), node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_>amespaceW_", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(44, "__default_>amespaceW_");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(1, Node.PROPERTY_FLAG);
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(45, node0, node0, 15, 35);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespae__", "__default_namespae__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(46, "__default_namespae__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(47, node0, node0, 15, 35);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(41, Node.NO_SIDE_EFFECTS_CALL);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(48, "");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        nodeTraversal0.traverse(node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "SNg");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(49, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(node1.isOptionalArg());
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("overriding prototype with non-object");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(51, "");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(52, "");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("#l{kEnB", "#l{kEnB");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        RenameLabels renameLabels0 = new RenameLabels(compiler0);
        RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(53, "YGz");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = Node.newString(55, "__default_namespace__", 22, 1381);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = Node.newString(55, "__default_namespace__", 22, 1381);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05257() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("enum element {0} already defined", "-vW\"v<kU_6JTqW]b");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(58, node0, node0, 256, 203);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(59, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespae__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(60, "__default_namespae__");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "operator {0} cannot be applied to {1}");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(62, "#l{kEnB");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "operator {0} cannot be applied to {1}");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(62, "#l{kEnB");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(63, "OxNhcYud6{");
        UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(7, Node.LOCAL_PROP);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(64, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(6, Node.TEMP_PROP);
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("O<kolAAmkibQw1", (Charset) null);
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(65, "O<kolAAmkibQw1");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_>amespaceW_", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(67, "RNa,eL0fONAa9MR");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("RC?{_R;bhl{3J[~`");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0, (ScopeCreator) null);
        Node node0 = Node.newString(68, "RC?{_R;bhl{3J[~`");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(4, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(69, node0, node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CheckUnreachableCode checkUnreachableCode0 = new CheckUnreachableCode(compiler0, compilerOptions0.reportMissingOverride);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkUnreachableCode0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test06268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(70, "");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(70, "");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test06370() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(71, "enum key {0} must be a syntactic constant");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test06471() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(72, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06472() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(72, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06573() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaultnamespace__", "={.T=]82KT.d [.1");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(74, "EIslNs+%[(P$");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test06674() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(75, "__defult_namespzce__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(75, "__defult_namespzce__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06776() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(76, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06877() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(77, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(49, Node.FREE_CALL);
    }

    @Test(timeout = 4000)
    public void test06978() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("nullChecker");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(78, "nullChecker");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("^_default_namispace__", "^_default_namispace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(79, "^_default_namispace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(80, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(80, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        compiler0.parse(jSSourceFile0);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        Node node0 = Node.newString(81, "__default_namespace__");
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test07283() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        compiler0.parse(jSSourceFile0);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        Node node0 = Node.newString(81, "__default_namespace__");
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test07384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test07485() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_>amespaceW_", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(84, "RNa,eL0fONAa9MR");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test07586() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("__default_namespace__", "__default_namespace__");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(85, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test07687() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(87, "__defult_namespzce__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test07788() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node1 = Node.newString(88, "#j{kEBB");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test07889() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(89, "");
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test07990() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(91, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test08091() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(92, node0, node0, 2759, 2);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test08192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = Node.newString(93, "__default_namespace__");
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
        Node node1 = new Node(94, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(49, Node.FREE_CALL);
    }

    @Test(timeout = 4000)
    public void test08394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_nam:space__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        Node node0 = Node.newString(95, "__default_nam:space__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test08495() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(96, node0, node0, 313, 1);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(12, Node.COLUMN_BITS);
    }

    @Test(timeout = 4000)
    public void test08596() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(">", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(98, ">");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test08697() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("dfc@)fss@L_Edq|+?&j", "dfc@)fss@L_Edq|+?&j");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node1 = new Node(99, node0, node0, 1, 1189);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test08798() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(100, node0, node0, node0, 30, 3499);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(44, Node.IS_VAR_ARGS_PARAM);
    }

    @Test(timeout = 4000)
    public void test08899() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaultnamespace__", "__defaultnamespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = Node.newString(101, "__defaultnamespace__");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(36, Node.OPT_ARG_NAME);
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("KtC|d;E", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(102, "KtC|d;E");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("#j{kEBB");
        compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node0 = Node.newString(105, "#j{kEBB");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(107, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test091103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(107, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test092104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "#l{kEnB");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(108, "\"&i");
        typeCheck0.visit((NodeTraversal) null, node0, node0);
        assertFalse(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test093105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "U_\"+3[p?L+xA@xr'U");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(109, "}v");
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test094106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("#Hl{kEnB", "#Hl{kEnB");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(110, "// Input %num%");
        UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("u", "u");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(111, "]{y%");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test096108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("RC?{_R;bhl{3J[~`");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(112, "RC?{_R;bhl{3J[~`");
        typeCheck0.visit((NodeTraversal) null, node0, node0);
        assertEquals(46, Node.IS_DISPATCHER);
    }

    @Test(timeout = 4000)
    public void test097109() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defult_namespzce__", "__defult_namespzce__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node1 = new Node(113, node0, node0, node0, (-4606), 4095);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertNotSame(node1, node0);
    }

    @Test(timeout = 4000)
    public void test098110() throws Throwable {
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespae__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(114, "TightenTypes pass appears to be stuck in an infinite loop.");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.PROPERTY_FLAG);
    }

    @Test(timeout = 4000)
    public void test099111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = Node.newString(115, "JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(node0.isQuotedString());
    }

    @Test(timeout = 4000)
    public void test100112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaultnamespace__", "={.T=]82KT.d [.1");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(116, "__defaultnamespace__");
        typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
        assertEquals(17, Node.TYPE_PROP);
    }

    @Test(timeout = 4000)
    public void test101113() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        Node node1 = Node.newString(117, "#j{kEBB");
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(12, Node.COLUMN_BITS);
    }

    @Test(timeout = 4000)
    public void test102114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(119, "__default_namespace__");
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test103115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(120, "__default_namespace__");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, Node.NON_SPECIALCALL);
    }

    @Test(timeout = 4000)
    public void test104116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__", (Charset) null);
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(121, "__default_namespace__");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test105117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(122, "Wd");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(27, Node.SPECIALCALL_PROP);
    }

    @Test(timeout = 4000)
    public void test106118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("RC?{_R;bhl{3J[~`");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0, (ScopeCreator) null);
        Node node1 = Node.newString(123, "RC?{_R;bhl{3J[~`");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(4, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test107119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = Node.newString(124, "D.O");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test108120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(126, node0, (-5339), 1847);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, node0.getLineno());
    }

    @Test(timeout = 4000)
    public void test109121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Named type with empty name component", "Named type with empty name component");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = Node.newString(127, "Not declared as a constructor");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test109122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Named type with empty name component", "Named type with empty name component");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = Node.newString(127, "Not declared as a constructor");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test110123() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(128, node0, node0, 11, 1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test111124() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(129, "");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test112125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "T");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(131, node0, node0, node0, 26, 40);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test112126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "T");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(131, node0, node0, node0, 26, 40);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test113127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(133, 49, 143);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test113128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(133, 49, 143);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test114129() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.FunctionRewriter$ReductionGatherer");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0, (ScopeCreator) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(134, "");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test114130() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.FunctionRewriter$ReductionGatherer");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0, (ScopeCreator) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(134, "");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test115131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(135, node0, node0, 320, 1);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test115132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(135, node0, node0, 320, 1);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test116133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "#l{kEnB");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = Node.newString(136, "");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test117134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "U|6N`,");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(138, "#l{kEnB");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(4, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test117135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#l{kEnB", "U|6N`,");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(138, "#l{kEnB");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test118136() throws Throwable {
        Compiler compiler0 = new Compiler();
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("R*t ?rYa 325+'", charset0);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0, (ScopeCreator) null);
        Node node0 = Node.newString(139, "TightenTypes pass appears to be stuck in an infinite loop.");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test119137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(140, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test119138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(140, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test120139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "RJ");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(141, "RJ");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test120140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "RJ");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(141, "RJ");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test121141() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#j{kEBB", "#j{kEBB");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(142, "toSource");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node1, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test122142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("<q(Z6~w6 <0xQp#Uu", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(143, "V");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test122143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("<q(Z6~w6 <0xQp#Uu", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(143, "V");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test123144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_>amespaceW_", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(144, "__default_>amespaceW_");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test124145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(145, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test124146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(145, "__default_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test125147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(146, "__defaultnamespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test126148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(147, "__default_namespace__");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test126149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(147, "__default_namespace__");
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test127150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "?2T@BucW/7?");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(148, node0, node0, 37, 19);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0, syntacticScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test128151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "6/?uA$_c6[$o]m");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(149, "6/?uA$_c6[$o]m");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test129152() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("deterministic instanceof yields false", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(150, node0, node0, (-3490), 150);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test129153() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("deterministic instanceof yields false", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(150, node0, node0, (-3490), 150);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test130154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(151, "H%");
        // Undeclared exception!
        try {
            typeCheck0.visit((NodeTraversal) null, node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 151
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test131155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__default_>amespaceW_", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(152, "__default_>amespaceW_");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test132156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(153, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test133157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("__defaultnamespace__", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(1055, "vha;30^M:(-cfay");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 1055
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test134158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, "NRJ");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(105, "<pEiJP0");
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(39, Node.ORIGINALNAME_PROP);
    }

    @Test(timeout = 4000)
    public void test135159() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("enum element {0} already defined", "-vW\"v<kU_6JTqW]b");
        Node node0 = compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = Node.newNumber((double) 20, 22, 2);
        Node node2 = new Node(2294, node0, node1, 4095, (-44));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals((-1), Node.CATCH_SCOPE_PROP);
    }

    @Test(timeout = 4000)
    public void test136160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "?2T@BucW/7?");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString("__default_namespace__", 38, 628);
        Node node2 = new Node(9, node1, node0, node1, (-1), 16);
        typeCheck0.visit((NodeTraversal) null, node1, node1);
        assertEquals(2, Node.BREAK_PROP);
    }

    @Test(timeout = 4000)
    public void test137161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaul|_namespace__", "__defaul|_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(106, "__defaul|_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test137162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__defaul|_namespace__", "__defaul|_namespace__");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(106, "__defaul|_namespace__");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test138163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(86, node0, node0, node0, 42, 100000);
        FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(39, Node.ORIGINALNAME_PROP);
    }

    @Test(timeout = 4000)
    public void test139164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        File file0 = MockFile.createTempFile("JSC_INEXISTENT_ENUM_ELEMENT", "JSC_INEXISTENT_ENUM_ELEMENT");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0);
        Node node0 = compiler0.parse(jSSourceFile0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString(105, "f?#i8++#MO");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test140165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        Node node0 = Node.newString(120, "");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test141166() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("#j{kEBB");
        compiler0.parse(jSSourceFile0);
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, (Node) null, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test142167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(118, node0, node0, 80, 2);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("u", "u");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        Node node1 = Node.newString(33, "u");
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        node1.addChildrenToBack(node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // SCRIPT 1 [sourcename: java.lang.String@0000000786] [synthetic: 1] is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test144169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "__default_namespace__");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node1 = new Node(118, node0, node0, 2742, 2);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // SCRIPT 1 [sourcename: java.lang.String@0000000785] [synthetic: 1] is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test145170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("JSC_UNRESOLVED_TYPE", "JSC_UNRESOLVED_TYPE");
        Node node0 = compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = Node.newString((-879), "JSC_UNRESOLVED_TYPE");
        Node node2 = new Node(30, node1, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node2, node2);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test146171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("u", "u");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        Node node1 = new Node(11, node0, node0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test146172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("u", "u");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        Node node1 = new Node(11, node0, node0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test147173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(66, "");
        node0.addSuppression("m2:3j.sOd");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test147174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0, (ScopeCreator) null);
        Node node0 = Node.newString(66, "");
        node0.addSuppression("m2:3j.sOd");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test148175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node0 = Node.newString(137, "Jx.F1x`0");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test148176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("", (Charset) null);
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node0 = Node.newString(137, "Jx.F1x`0");
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test149177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("__default_namespace__", "vars");
        compiler0.parse(jSSourceFile0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0.0, double0, 0.01);
    }
}
