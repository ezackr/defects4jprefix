/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 02:40:59 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Visitor<NumberType> visitor0 = (Visitor<NumberType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
        doReturn(numberType0).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
        errorFunctionType0.visit(visitor0);
        assertFalse(errorFunctionType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = (NoType) voidType0.restrictByNotNullOrUndefined();
        // Undeclared exception!
        try {
            noType0.hasEqualCallType((FunctionType) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = (NoType) voidType0.restrictByNotNullOrUndefined();
        noType0.isReturnTypeInferred();
        assertFalse(noType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isInstanceType();
        assertFalse(noResolvedType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.canBeCalled();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.canBeCalled();
        assertFalse(noResolvedType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        errorFunctionType0.getExtendedInterfacesCount();
        assertFalse(errorFunctionType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setSource((Node) null);
        assertFalse(noResolvedType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        functionType0.getLeastSupertype(functionType0);
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        functionType0.getLeastSupertype(functionType0);
        assertFalse(functionType0.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        List<FunctionType> list0 = noResolvedType0.getSubTypes();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(105, "\"#S-g", 2, 1609);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Named type with empty name component", node0, node0, (JSType) noResolvedType0);
        assertTrue(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Named type with empty name component");
        // Undeclared exception!
        try {
            jSTypeRegistry0.createConstructorType("Named type with empty name component", node0, node0, (JSType) noResolvedType0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(105);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("&B=3{7", node0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(0);
        // Undeclared exception!
        try {
            FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        // Undeclared exception!
        try {
            FunctionType.forInterface(jSTypeRegistry0, (String) null, (Node) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("SETNAME", (Node) null);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(indexedType0);
        functionType0.setImplementedInterfaces(linkedList0);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("SETNAME", (Node) null);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(indexedType0);
        functionType0.setImplementedInterfaces(linkedList0);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("SETNAME", (Node) null);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(indexedType0);
        functionType0.setImplementedInterfaces(linkedList0);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertTrue(functionType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.common.base.Predicates$CompositionPredicate", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.common.base.Predicates$CompositionPredicate", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.common.base.Predicates$CompositionPredicate", (Node) null);
        boolean boolean0 = functionType0.hasImplementedInterfaces();
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMinArguments();
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        int int0 = errorFunctionType0.getMinArguments();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMinArguments();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        int int0 = noResolvedType0.getMaxArguments();
        assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        assertTrue(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        int int0 = errorFunctionType0.getMaxArguments();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        functionType0.getPropertyType("Unknown class name");
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        functionType0.getPropertyType("Unknown class name");
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "R#GWO!YR|w");
        ObjectType objectType0 = FunctionType.getTopDefiningInterface(errorFunctionType0, "prototype");
        assertFalse(objectType0.isStringValueType());
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        errorFunctionType0.hasImplementedInterfaces();
        errorFunctionType0.getOwnPropertyNames();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Set<String> set0 = noResolvedType0.getOwnPropertyNames();
        assertEquals(0, set0.size());
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
        noResolvedType0.setPrototypeBasedOn(templateType0);
        ObjectType objectType0 = noResolvedType0.getTopMostDefiningType("Not declared as a constructor");
        assertTrue(objectType0.canBeCalled());
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
        functionType0.setPrototypeBasedOn(indexedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
        functionType0.setPrototypeBasedOn(indexedType0);
        assertTrue(functionType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.setPrototype((PrototypeObjectType) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.setPrototype(noResolvedType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) stringType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
        functionType1.getLeastSupertype(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ")", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(instanceObjectType0);
        functionType0.setImplementedInterfaces(linkedList0);
        functionType0.getAllImplementedInterfaces();
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ")", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(instanceObjectType0);
        functionType0.setImplementedInterfaces(linkedList0);
        functionType0.getAllImplementedInterfaces();
        assertTrue(functionType0.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(noResolvedType0);
        noResolvedType0.setImplementedInterfaces(linkedList0);
        noResolvedType0.getAllImplementedInterfaces();
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(instanceObjectType0);
        noResolvedType0.setImplementedInterfaces(linkedList0);
        noResolvedType0.getAllImplementedInterfaces();
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Iterable<ObjectType> iterable0 = noType0.getAllExtendedInterfaces();
        assertNotNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test3546() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        try {
            noResolvedType0.setExtendedInterfaces(linkedList0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
        }
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Function", (Node) null);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        functionType0.setExtendedInterfaces(linkedList0);
        assertFalse(functionType0.isReturnTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3748() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3849() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getPropertyType("apply");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3950() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, (Node) null);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
        Node node0 = Node.newNumber((double) 1);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", jSType0, false, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.setPrototype(noResolvedType0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", noResolvedType0, false, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = noObjectType0.getLeastSupertype(noObjectType0);
        assertTrue(jSType0.matchesNumberContext());
    }

    @Test(timeout = 4000)
    public void test4355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSType[] jSTypeArray0 = new JSType[1];
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(functionType1);
        assertFalse(jSType0.equals((Object) functionType1));
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSType[] jSTypeArray0 = new JSType[1];
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(functionType1);
        assertTrue(functionType1.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test4357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSType[] jSTypeArray0 = new JSType[1];
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(functionType1);
        assertFalse(functionType1.hasInstanceType());
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSType[] jSTypeArray0 = new JSType[1];
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(functionType1);
        assertFalse(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
        functionType0.getLeastSupertype(functionType1);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4460() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
        functionType0.getLeastSupertype(functionType1);
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType0.getLeastSupertype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4562() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType0.getLeastSupertype(functionType1);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4663() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4664() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getGreatestSubtype(functionType1);
        assertSame(functionType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test4765() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("XvX] bLkl7", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType2.setInstanceType(functionType1);
        JSType jSType0 = functionType1.getLeastSupertype(functionType2);
        assertTrue(functionType2.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4766() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("XvX] bLkl7", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType2.setInstanceType(functionType1);
        JSType jSType0 = functionType1.getLeastSupertype(functionType2);
        assertSame(functionType1, jSType0);
    }

    @Test(timeout = 4000)
    public void test4867() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4968() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@Q%JOx76D=8}");
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(errorFunctionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        JSType jSType1 = functionType0.getLeastSupertype(functionType1);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4969() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@Q%JOx76D=8}");
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(errorFunctionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        JSType jSType1 = functionType0.getLeastSupertype(functionType1);
        assertTrue(jSType1.equals((Object) functionType1));
    }

    @Test(timeout = 4000)
    public void test5070() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C5C2&\"JfO*L");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(errorFunctionType1);
        errorFunctionType1.getGreatestSubtype(jSType0);
        assertTrue(errorFunctionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, " dsWX");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        jSType0.getTypesUnderShallowEquality(functionType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, " dsWX");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
        JSType jSType0 = errorFunctionType0.getLeastSupertype(functionType0);
        jSType0.getTypesUnderShallowEquality(functionType0);
        assertFalse(errorFunctionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test5273() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ENUM_INIT_KEYS");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(errorFunctionType1);
        FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
        functionType0.getLeastSupertype(errorFunctionType1);
        assertTrue(errorFunctionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5274() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ENUM_INIT_KEYS");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType0.getLeastSupertype(errorFunctionType1);
        FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
        functionType0.getLeastSupertype(errorFunctionType1);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        jSType0.getTypesUnderShallowEquality(errorFunctionType0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5476() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry1);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry1.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5477() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry1);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry1.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        assertTrue(functionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test5578() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        // Undeclared exception!
        try {
            functionType0.getSuperClassConstructor();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5679() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        functionType0.setPrototypeBasedOn(noResolvedType0);
        assertTrue(noResolvedType0.isFunctionPrototypeType());
    }

    @Test(timeout = 4000)
    public void test5680() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        functionType0.setPrototypeBasedOn(noResolvedType0);
        functionType0.getTopMostDefiningType("Not declared as a constructor");
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test5781() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        // Undeclared exception!
        try {
            errorFunctionType0.getTopMostDefiningType("call");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5882() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, jSTypeArray0);
        // Undeclared exception!
        try {
            functionType0.getTopMostDefiningType("Not declared as a type name");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5983() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@Q%JOx76D=8}");
        errorFunctionType0.toString();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6084() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@Q%JOx76D=8}");
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(errorFunctionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        String string0 = functionType1.toString();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6085() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@Q%JOx76D=8}");
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, jSTypeArray0);
        JSType jSType0 = functionType0.getLeastSupertype(errorFunctionType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
        String string0 = functionType1.toString();
        assertEquals("function (): Function", string0);
    }

    @Test(timeout = 4000)
    public void test6186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        functionType0.toString();
        assertFalse(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test6187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", (Node) null);
        functionType0.toString();
        assertTrue(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6288() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) unknownType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) unknownType0, jSTypeArray0);
        functionType0.toString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[3];
        jSTypeArray0[0] = (JSType) voidType0;
        jSTypeArray0[1] = (JSType) voidType0;
        jSTypeArray0[2] = (JSType) voidType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, jSTypeArray0);
        functionType0.toString();
        assertFalse(functionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6490() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("XvX] bb_Lkl7", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        JSType[] jSTypeArray0 = new JSType[0];
        functionType1.setInstanceType(functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType2.setInstanceType(functionType1);
        functionType2.getLeastSupertype(functionType1);
        assertTrue(functionType2.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6591() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6592() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = jSType0.isSubtype(errorFunctionType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6693() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noObjectType0, noObjectType0);
        assertTrue(functionType0.isConstructor());
    }

    @Test(timeout = 4000)
    public void test6794() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
        ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        assertTrue(errorFunctionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6895() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType0.setPrototypeBasedOn(functionType1);
        assertTrue(functionType1.isFunctionPrototypeType());
    }

    @Test(timeout = 4000)
    public void test6896() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, jSTypeArray0);
        functionType0.setPrototypeBasedOn(functionType1);
        assertTrue(functionType0.isOrdinaryFunction());
    }

    @Test(timeout = 4000)
    public void test6997() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.hasImplementedInterfaces();
        boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype(noResolvedType0, noResolvedType0);
        assertTrue(noResolvedType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test6998() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.hasImplementedInterfaces();
        boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype(noResolvedType0, noResolvedType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7099() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
        FunctionType functionType1 = (FunctionType) functionType0.getLeastSupertype(noResolvedType0);
        // Undeclared exception!
        try {
            functionType1.setImplicitPrototype(noResolvedType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test71100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ")", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(instanceObjectType0);
        functionType0.setImplementedInterfaces(linkedList0);
        JSType jSType0 = functionType0.resolveInternal(simpleErrorReporter0, instanceObjectType0);
        assertSame(functionType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test72101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ")", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.setResolvedTypeInternal(functionType0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.offerLast(instanceObjectType0);
        functionType0.setImplementedInterfaces(linkedList0);
        JSType jSType0 = functionType0.resolveInternal(simpleErrorReporter0, instanceObjectType0);
        assertSame(functionType0, jSType0);
    }

    @Test(timeout = 4000)
    public void test73102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "7`J=dETiL");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType1.getLeastSupertype(errorFunctionType0);
        String string0 = jSType0.toDebugHashCodeString();
        assertTrue(errorFunctionType1.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test73103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "7`J=dETiL");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = errorFunctionType1.getLeastSupertype(errorFunctionType0);
        String string0 = jSType0.toDebugHashCodeString();
        assertEquals("{18}", string0);
    }

    @Test(timeout = 4000)
    public void test74104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        String string0 = jSType0.toDebugHashCodeString();
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test74105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        String string0 = jSType0.toDebugHashCodeString();
        assertEquals("function ({({3045982},{11},{6})}, {12}, {12}, {12}): {3045982}", string0);
    }

    @Test(timeout = 4000)
    public void test75106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a constructor", (Node) null);
        String string0 = functionType0.toDebugHashCodeString();
        assertEquals("function (this:{-1389929658}): {9}", string0);
    }

    @Test(timeout = 4000)
    public void test76107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.toDebugHashCodeString();
        assertTrue(noResolvedType0.hasCachedValues());
    }
}
