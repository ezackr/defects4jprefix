/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 10:21:33 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.io.File;
import java.io.PrintStream;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Scope_ESTest extends Scope_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        // Undeclared exception!
        try {
            scope_Arguments0.getSourceFile();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Scope$Var", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isLocal();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isLocal();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isLocal();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        // Undeclared exception!
        try {
            scope_Arguments0.isGlobal();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Scope$Var", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        scope_Arguments0.getJSDocInfo();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        scope_Arguments0.getJSDocInfo();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getName();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getName();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getName();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope.Var scope_Var0 = scope_Arguments0.getSymbol();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope.Var scope_Var0 = scope_Arguments0.getSymbol();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        SyntheticAst syntheticAst0 = new SyntheticAst("e_~T #]>Q*#[uBJci<");
        InputId inputId0 = syntheticAst0.getInputId();
        CompilerInput compilerInput0 = new CompilerInput(jsAst0, inputId0, false);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", (Node) null, (JSType) null, compilerInput0);
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
        referenceCollectingCallback0.getReferences(scope_Var0);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        SyntheticAst syntheticAst0 = new SyntheticAst("e_~T #]>Q*#[uBJci<");
        InputId inputId0 = syntheticAst0.getInputId();
        CompilerInput compilerInput0 = new CompilerInput(jsAst0, inputId0, false);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", (Node) null, (JSType) null, compilerInput0);
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
        referenceCollectingCallback0.getReferences(scope_Var0);
        assertEquals("e_~T #]>Q*#[uBJci<", scope_Var0.getInputName());
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", "com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        SyntheticAst syntheticAst0 = new SyntheticAst("e_~T #]>Q*#[uBJci<");
        InputId inputId0 = syntheticAst0.getInputId();
        CompilerInput compilerInput0 = new CompilerInput(jsAst0, inputId0, false);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate", (Node) null, (JSType) null, compilerInput0);
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
        referenceCollectingCallback0.getReferences(scope_Var0);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        scope_Arguments0.getNameNode();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        scope_Arguments0.getNameNode();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getScope();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getScope();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getInput();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test0920() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getInput();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getType();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getType();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getNode();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope_Arguments0.getNode();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        // Undeclared exception!
        try {
            scope_Arguments0.setType((JSType) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        boolean boolean0 = scope_Arguments0.isDefine();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        boolean boolean0 = scope_Arguments0.isDefine();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        // Undeclared exception!
        try {
            scope_Arguments0.isBleedingFunction();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1529() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        String string0 = scope_Arguments0.toString();
        assertEquals("Scope.Var arguments{null}", string0);
    }

    @Test(timeout = 4000)
    public void test1530() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        String string0 = scope_Arguments0.toString();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        String string0 = scope_Arguments0.toString();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test1632() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.getReferences((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.getReferences((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test1734() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            SyntacticScopeCreator.generateUntypedTopScope(compiler0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Iterable<Scope.Var> iterable0 = scope0.getAllSymbols();
        assertNotNull(iterable0);
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Iterator<Scope.Var> iterator0 = scope0.getDeclarativelyUnboundVarsWithoutTypes();
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test2037() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        boolean boolean0 = scope0.isBottom();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2138() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope0.getReferences((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test2139() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope0.getReferences((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test2240() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        StaticSlot<JSType> staticSlot0 = scope0.getSlot("yield");
        assertNull(staticSlot0);
    }

    @Test(timeout = 4000)
    public void test2341() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope0.getScope((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test2342() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        scope0.getScope((Scope.Var) scope_Arguments0);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test2443() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments0);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test2444() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments0);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test2445() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2546() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        int int0 = scope0.getDepth();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2647() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        int int0 = scope0.getVarCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2748() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
        JSType jSType0 = linkedFlowScope0.getTypeOfThis();
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test2849() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("yield");
        assertNull(staticSlot0);
    }

    @Test(timeout = 4000)
    public void test2950() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "Scope.Var ");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        assertEquals(1, scope1.getVarCount());
    }

    @Test(timeout = 4000)
    public void test2951() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "Scope.Var ");
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        assertFalse(scope1.isGlobal());
    }

    @Test(timeout = 4000)
    public void test3052() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QJhV<\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QJhV<\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var1 = scope_Var0.getDeclaration();
        assertNotNull(scope_Var1);
    }

    @Test(timeout = 4000)
    public void test3053() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QJhV<\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QJhV<\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var1 = scope_Var0.getDeclaration();
        assertTrue(scope_Var1.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3054() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QJhV<\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QJhV<\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var1 = scope_Var0.getDeclaration();
        assertFalse(scope_Var1.isDefine());
    }

    @Test(timeout = 4000)
    public void test3155() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope.Var scope_Var0 = scope_Arguments0.getDeclaration();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3156() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope.Var scope_Var0 = scope_Arguments0.getDeclaration();
        assertNull(scope_Var0);
    }

    @Test(timeout = 4000)
    public void test3157() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope.Var scope_Var0 = scope_Arguments0.getDeclaration();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3258() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isExtern();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3259() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isExtern();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3260() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isExtern();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3361() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, false);
        boolean boolean0 = scope_Var0.isExtern();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3362() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, false);
        boolean boolean0 = scope_Var0.isExtern();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3363() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, false);
        boolean boolean0 = scope_Var0.isExtern();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3464() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        CompilerInput compilerInput1 = new CompilerInput(syntheticAst0, "D", true);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        boolean boolean0 = scope_Var0.isExtern();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3465() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        CompilerInput compilerInput1 = new CompilerInput(syntheticAst0, "D", true);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        boolean boolean0 = scope_Var0.isExtern();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3466() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        CompilerInput compilerInput1 = new CompilerInput(syntheticAst0, "D", true);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        boolean boolean0 = scope_Var0.isExtern();
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3467() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        CompilerInput compilerInput1 = new CompilerInput(syntheticAst0, "D", true);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        boolean boolean0 = scope_Var0.isExtern();
        assertEquals("D", scope_Var0.getInputName());
    }

    @Test(timeout = 4000)
    public void test3568() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isConst();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3569() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isConst();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3570() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isConst();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3671() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        boolean boolean0 = scope_Var0.isConst();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3672() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        boolean boolean0 = scope_Var0.isConst();
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3673() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        boolean boolean0 = scope_Var0.isConst();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3774() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(118, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3775() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(118, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        Node node2 = scope_Var0.getInitialValue();
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3776() throws Throwable {
        Node node0 = new Node(1);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(118, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, true);
        Node node2 = scope_Var0.getInitialValue();
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test3877() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(105, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3878() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(105, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3879() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(105, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test3880() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(105, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Supliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertEquals(105, node2.getType());
    }

    @Test(timeout = 4000)
    public void test3981() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(86, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("S2]mrgpP66mZF;)&o.", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test3982() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(86, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("S2]mrgpP66mZF;)&o.", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test3983() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(86, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("S2]mrgpP66mZF;)&o.", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(86, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("S2]mrgpP66mZF;)&o.", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertEquals(1201, node2.getCharno());
    }

    @Test(timeout = 4000)
    public void test4085() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(27, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$Var", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test4086() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(27, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$Var", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test4087() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Node node1 = new Node(27, node0, node0);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$Var", node0, (JSType) null, (CompilerInput) null, false);
        Node node2 = scope_Var0.getInitialValue();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4188() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        scope_Arguments0.resolveType(simpleErrorReporter0);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4189() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        scope_Arguments0.resolveType(simpleErrorReporter0);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test4290() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        String string0 = scope_Var0.getInputName();
        assertEquals("D", string0);
    }

    @Test(timeout = 4000)
    public void test4291() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        String string0 = scope_Var0.getInputName();
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4292() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        SyntheticAst syntheticAst0 = new SyntheticAst("D");
        CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
        Scope.Var scope_Var0 = scope0.declare("D", (Node) null, (JSType) null, compilerInput0, true);
        String string0 = scope_Var0.getInputName();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test4393() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getInputName();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4394() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getInputName();
        assertEquals("<non-file>", string0);
    }

    @Test(timeout = 4000)
    public void test4395() throws Throwable {
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        String string0 = scope_Arguments0.getInputName();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test4496() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isNoShadow();
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4497() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isNoShadow();
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test4498() throws Throwable {
        Node node0 = new Node(1201, 1201, 1201);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.isNoShadow();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4599() throws Throwable {
        Node node0 = new Node(24);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        node0.addSuppression("com.google.common.base.Suppliers$SupplierComposition");
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Suppliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.isNoShadow();
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test45100() throws Throwable {
        Node node0 = new Node(24);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        node0.addSuppression("com.google.common.base.Suppliers$SupplierComposition");
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Suppliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.isNoShadow();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test45101() throws Throwable {
        Node node0 = new Node(24);
        Scope scope0 = new Scope(node0, (ObjectType) null);
        node0.addSuppression("com.google.common.base.Suppliers$SupplierComposition");
        Scope.Var scope_Var0 = scope0.declare("com.google.common.base.Suppliers$SupplierComposition", node0, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.isNoShadow();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46102() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QhV<G\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test46103() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QhV<G\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test46104() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", (String) null);
        Scope.Var scope_Var0 = scope0.declare("QhV<G\"(`", node0, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47105() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", (Node) null, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.equals((Object) null);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test47106() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", (Node) null, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47107() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", (Node) null, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope_Var0.equals((Object) null);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test48108() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("omo8", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test48109() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("omo8", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test48110() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare("omo8", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Var0.equals(scope_Arguments0);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test49111() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals((Object) null);
        assertFalse(scope_Arguments0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test49112() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test49113() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        boolean boolean0 = scope_Arguments0.equals((Object) null);
        assertFalse(scope_Arguments0.isDefine());
    }

    @Test(timeout = 4000)
    public void test50114() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", "QhV<G\"(`");
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope scope1 = new Scope(scope0, node0);
        Scope.Arguments scope_Arguments1 = new Scope.Arguments(scope1);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments1);
        assertFalse(scope_Arguments1.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test50115() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", "QhV<G\"(`");
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope scope1 = new Scope(scope0, node0);
        Scope.Arguments scope_Arguments1 = new Scope.Arguments(scope1);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments1);
        assertFalse(scope_Arguments1.isDefine());
    }

    @Test(timeout = 4000)
    public void test50116() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "QhV<G\"(`", "QhV<G\"(`");
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        Scope scope1 = new Scope(scope0, node0);
        Scope.Arguments scope_Arguments1 = new Scope.Arguments(scope1);
        boolean boolean0 = scope_Arguments0.equals(scope_Arguments1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test51117() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope scope1 = null;
        try {
            scope1 = new Scope(scope0, (Node) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test52118() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "Scope.Var ");
        Scope scope1 = new Scope(scope0, node0);
        Scope scope2 = scope1.getGlobalScope();
        assertTrue(scope2.isGlobal());
    }

    @Test(timeout = 4000)
    public void test53119() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        // Undeclared exception!
        try {
            scope0.declare((String) null, (Node) null, (JSType) null, (CompilerInput) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test54120() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        // Undeclared exception!
        try {
            scope0.declare("", (Node) null, (JSType) null, (CompilerInput) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test55121() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.declare("omo8", (Node) null, (JSType) null, (CompilerInput) null);
        // Undeclared exception!
        try {
            scope0.declare("omo8", (Node) null, (JSType) null, (CompilerInput) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test56122() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments((Scope) null);
        // Undeclared exception!
        try {
            scope0.undeclare(scope_Arguments0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test57123() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        scope0.undeclare(scope_Var0);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test57124() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        scope0.undeclare(scope_Var0);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test58125() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Arguments scope_Arguments0 = new Scope.Arguments(scope0);
        // Undeclared exception!
        try {
            scope0.undeclare(scope_Arguments0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test59126() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var0 = scope0.getVar(":DgTUs:ql(=UK");
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test59127() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var0 = scope0.getVar(":DgTUs:ql(=UK");
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test59128() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        Scope.Var scope_Var0 = scope0.getVar(":DgTUs:ql(=UK");
        assertNotNull(scope_Var0);
    }

    @Test(timeout = 4000)
    public void test60129() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.getArgumentsVar();
        Scope.Var scope_Var0 = scope0.getArgumentsVar();
        assertFalse(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test60130() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.getArgumentsVar();
        Scope.Var scope_Var0 = scope0.getArgumentsVar();
        assertNotNull(scope_Var0);
    }

    @Test(timeout = 4000)
    public void test60131() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        scope0.getArgumentsVar();
        Scope.Var scope_Var0 = scope0.getArgumentsVar();
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test61132() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        assertTrue(scope_Var0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test61133() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        assertFalse(scope_Var0.isDefine());
    }

    @Test(timeout = 4000)
    public void test61134() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Scope.Var scope_Var0 = scope0.declare(":DgTUs:ql(=UK", (Node) null, (JSType) null, (CompilerInput) null);
        boolean boolean0 = scope0.isDeclared(":DgTUs:ql(=UK", true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test62135() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "Scope.Var ");
        Scope scope1 = new Scope(scope0, node0);
        boolean boolean0 = scope1.isDeclared("#?&7\"!6#d]i,6", true);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test63136() throws Throwable {
        Scope scope0 = new Scope((Node) null, (ObjectType) null);
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Scope.Var ", "Scope.Var ");
        Scope scope1 = new Scope(scope0, node0);
        boolean boolean0 = scope1.isLocal();
        assertTrue(boolean0);
    }
}
