/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 07:18:09 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.PrintStream;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GlobalNamespace_ESTest extends GlobalNamespace_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.head.JavScriptException");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSCompiler_IgnoreCajaProperties_");
        MockPrintStream mockPrintStream0 = new MockPrintStream("JSCompiler_IgnoreCajaProperties_");
        GlobalNamespace.Tracker globalNamespace_Tracker0 = new GlobalNamespace.Tracker(compiler0, mockPrintStream0, (Predicate<String>) null);
        globalNamespace_Tracker0.process(node0, node0);
        assertFalse(node0.isBreak());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$FindReferences$NodeAccumulator");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        GlobalNamespace.Name globalNamespace_Name0 = globalNamespace0.getSlot("Property disambiguator skipping instances of property {0} on type {1}. {2}");
        assertNull(globalNamespace_Name0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Node node0 = new Node(1873);
        Compiler compiler0 = new Compiler((PrintStream) null);
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        StaticScope<JSType> staticScope0 = globalNamespace0.getParentScope();
        assertNull(staticScope0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, (Node) null);
        StaticScope<JSType> staticScope0 = globalNamespace0.getScope(globalNamespace_Name0);
        assertSame(globalNamespace0, staticScope0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$FindReferences$NodeAccumulator");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Node node0 = Node.newString("5t%BUNA|}DoY[tdSph.", 32, 32);
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        // Undeclared exception!
        try {
            globalNamespace0.getAllSymbols();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = new Node(6);
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        Node node1 = globalNamespace0.getRootNode();
        assertNull(node1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$FindReferences$NodeAccumulator");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        JSType jSType0 = globalNamespace0.getTypeOfThis();
        assertFalse(jSType0.isTemplatizedType());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        GlobalNamespace.Ref globalNamespace_Ref0 = globalNamespace_Name0.getDeclaration();
        assertNull(globalNamespace_Ref0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.isDeclaredType();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        JSType jSType0 = globalNamespace_Name0.getType();
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        String string0 = globalNamespace_Name0.toString();
        assertEquals(" (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        JSDocInfo jSDocInfo0 = globalNamespace_Name0.getJSDocInfo();
        assertNull(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, true);
        String string0 = globalNamespace_Name0.getBaseName();
        assertEquals(" (", string0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.isTypeInferred();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "violatedModuleDep");
        JSModule jSModule0 = new JSModule("violatedModuleDep");
        Scope scope0 = Scope.createLatticeBottom(node0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = new GlobalNamespace.Ref(jSModule0, scope0, node0, (GlobalNamespace.Name) null, globalNamespace_Ref_Type0, 52);
        String string0 = globalNamespace_Ref0.getSourceName();
        assertEquals("[testcode]", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DELETE_PROP;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        JSModule jSModule0 = globalNamespace_Ref0.getModule();
        assertNull(jSModule0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DELETE_PROP;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        StaticSlot<JSType> staticSlot0 = globalNamespace_Ref0.getSymbol();
        assertNull(staticSlot0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
        assertNull(globalNamespace_Ref1);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        StaticSourceFile staticSourceFile0 = globalNamespace_Ref0.getSourceFile();
        assertNull(staticSourceFile0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        Node node0 = globalNamespace_Ref0.getNode();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, (Node) null);
        boolean boolean0 = globalNamespace0.hasExternsRoot();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Node node0 = Node.newString("#CALL_GET");
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        boolean boolean0 = globalNamespace0.hasExternsRoot();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.head.JavScriptException");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        globalNamespace0.getOwnSlot("com.google.javascript.rhino.head.JavScriptException");
        // Undeclared exception!
        try {
            globalNamespace0.getReferences((GlobalNamespace.Name) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.GlobalNamespace", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Compiler compiler0 = new Compiler();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, (Node) null);
        Vector<GlobalNamespace.AstChange> vector0 = new Vector<GlobalNamespace.AstChange>();
        globalNamespace0.scanNewNodes(vector0);
        assertEquals("[]", vector0.toString());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "violatedModuleDep");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        JSModule jSModule0 = new JSModule("violatedModuleDep");
        Scope scope0 = Scope.createLatticeBottom(node0);
        GlobalNamespace.AstChange globalNamespace_AstChange0 = new GlobalNamespace.AstChange(jSModule0, scope0, node0);
        ImmutableList<GlobalNamespace.AstChange> immutableList0 = ImmutableList.of(globalNamespace_AstChange0, globalNamespace_AstChange0, globalNamespace_AstChange0, globalNamespace_AstChange0, globalNamespace_AstChange0, globalNamespace_AstChange0, globalNamespace_AstChange0);
        globalNamespace0.scanNewNodes(immutableList0);
        assertEquals(7, immutableList0.size());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "D=dKRO");
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
        GlobalNamespace.Name globalNamespace_Name0 = globalNamespace0.getOwnSlot(">D|#Sf~i{[/HL\"j.y3");
        assertNull(globalNamespace_Name0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addProperty(" (", true);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty(" (", true);
        assertNotSame(globalNamespace_Name1, globalNamespace_Name0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addProperty(" (", true);
        GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty(" (", true);
        assertNotNull(globalNamespace_Name1);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("]", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("]", globalNamespace_Name0, false);
        String string0 = globalNamespace_Name1.getName();
        assertEquals("].]", string0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name((String) null, (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("D=dKRO", (GlobalNamespace.Name) null, true);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        // Undeclared exception!
        try {
            globalNamespace_Name0.isSimpleStubDeclaration();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.GlobalNamespace$Name", e);
        }
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name((String) null, (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DELETE_PROP;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("fUi)9JQ", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.removeRef((GlobalNamespace.Ref) null);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("=BJ{", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name((String) null, (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        globalNamespace_Name0.addRef(globalNamespace_Ref1);
        globalNamespace_Name0.removeRef(globalNamespace_Ref1);
        assertFalse(globalNamespace_Ref1.equals((Object) globalNamespace_Ref0));
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("msg.syntax", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("msg.syntax", (GlobalNamespace.Name) null, true);
        globalNamespace_Name0.addRef(globalNamespace_Ref0);
        globalNamespace_Name0.removeRef(globalNamespace_Ref0);
        assertFalse(globalNamespace_Name0.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(", callGets=", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.isSimpleStubDeclaration();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(", callGets=", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.canEliminate();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("fUi)9JQ", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("T", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.setDeclaredType();
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(" (", globalNamespace_Name0, false);
        boolean boolean0 = globalNamespace_Name1.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("]", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.localSets = 67;
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("fUi)9JQ", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.globalSets = 154;
        globalNamespace_Name0.deleteProps = 154;
        boolean boolean0 = globalNamespace_Name0.canCollapse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.shouldKeepKeys();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.globalSets = 32;
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        globalNamespace_Name0.localSets = 39;
        boolean boolean0 = globalNamespace_Name0.needsToBeStubbed();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("T", (GlobalNamespace.Name) null, false);
        GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("T", globalNamespace_Name0, false);
        globalNamespace_Name1.setDeclaredType();
        assertFalse(globalNamespace_Name1.isTypeInferred());
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
        boolean boolean0 = globalNamespace_Name0.isNamespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, true);
        GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("", globalNamespace_Name0, true);
        boolean boolean0 = globalNamespace_Name1.isSimpleName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(" (", (GlobalNamespace.Name) null, false);
        boolean boolean0 = globalNamespace_Name0.isSimpleName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        String string0 = globalNamespace_Ref0.getSourceName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        boolean boolean0 = globalNamespace_Ref0.isSet();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        // Undeclared exception!
        try {
            GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
        assertFalse(globalNamespace_Ref0.equals((Object) globalNamespace_Ref1));
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        // Undeclared exception!
        try {
            GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
        assertFalse(globalNamespace_Ref0.equals((Object) globalNamespace_Ref1));
    }

    @Test(timeout = 4000)
    public void test6566() throws Throwable {
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
        GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
        GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
        GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
        assertFalse(globalNamespace_Ref1.equals((Object) globalNamespace_Ref0));
    }
}
