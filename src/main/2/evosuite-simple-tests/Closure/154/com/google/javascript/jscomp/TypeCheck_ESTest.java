/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:40:35 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(35);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node((-682), (-682), (-682));
        Node node1 = new Node(92, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node((-682), (-682), (-682));
        Node node1 = new Node(92, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.PeepholeRemoveDeadCode", "com.google.javascript.jscomp.PeepholeRemoveDeadCode");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.PeepholeRemoveDeadCode", "com.google.javascript.jscomp.PeepholeRemoveDeadCode");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        Node node1 = new Node(150, node0, node0, node0, node0, 1039, 8);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.process(node1, node1);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("b#", "HxM7[w.;");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node1 = new Node(109, node0, node0, node0, node0, 4, 1933);
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.processForTesting((Node) null, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        Node node1 = new Node(150, node0, node0, node0, node0, 1039, 8);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.process(node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        Node node1 = new Node(150, node0, node0, node0, node0, 1039, 8);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.processForTesting(node0, node0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node1, (Node) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Scope scope0 = new Scope(node0, compiler0);
        defaultPassConfig0.topScope = scope0;
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        // Undeclared exception!
        try {
            typeCheck0.processForTesting(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(80);
        Node node1 = new Node(86, node0, node0, 9, 5);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(118, 118, 118);
        node0.addSuppression("+W&");
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(66);
        Node node1 = new Node(4, 1, 25);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(40, Node.BRACELESS_TYPE);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(5);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(5);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(42);
        Node node1 = new Node(6, node0, node0, node0, node0, 5, 2);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(42);
        Node node1 = new Node(6, node0, node0, node0, node0, 5, 2);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01519() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(66);
        Node node1 = new Node(7, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01520() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(66);
        Node node1 = new Node(7, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(8);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01622() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(8);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(82, 82, 82);
        Node node1 = new Node(9, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01724() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(82, 82, 82);
        Node node1 = new Node(9, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01825() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(119);
        Node node1 = new Node(10, node0, node0, 136, 33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(119);
        Node node1 = new Node(10, node0, node0, 136, 33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(119);
        Node node1 = new Node(10, node0, node0, 136, 33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-4096));
        Node node1 = new Node(11, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test01929() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-4096));
        Node node1 = new Node(11, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02030() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(12);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02131() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        Node node1 = new Node(13, node0, node0, node0, 30, 1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(node0.equals((Object) node1));
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-6042));
        Node node1 = new Node(14, node0, node0, 4095, (-1));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(12, Node.COLUMN_BITS);
    }

    @Test(timeout = 4000)
    public void test02333() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(15);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02434() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(21);
        Node node1 = new Node(16, node0, node0, 2, 10);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(49, Node.FREE_CALL);
    }

    @Test(timeout = 4000)
    public void test02535() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(17);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test02636() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node((byte) 0);
        Node node1 = new Node(18, node0, node0, node0, node0, 10, 15);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02637() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node((byte) 0);
        Node node1 = new Node(18, node0, node0, node0, node0, 10, 15);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test02738() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node((-1360));
        Node node1 = new Node(19, node0, node0, 2, 8);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02739() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node((-1360));
        Node node1 = new Node(19, node0, node0, 2, 8);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02840() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(20, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02841() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(20, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test02842() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(20, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test02943() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock");
        Node node1 = new Node(21, node0, node0, node0, node0, 36, 16);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test02944() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock");
        Node node1 = new Node(21, node0, node0, node0, node0, 36, 16);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test02945() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock");
        Node node1 = new Node(21, node0, node0, node0, node0, 36, 16);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03046() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(22, node0, (-1031), 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03047() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(22, node0, (-1031), 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03148() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        Node node1 = new Node(23, node0, node0, 6, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03149() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        Node node1 = new Node(23, node0, node0, 6, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03150() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        Node node1 = new Node(23, node0, node0, 6, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03251() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-448));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(24, node0, node0, 1592, 6);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03252() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-448));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(24, node0, node0, 1592, 6);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03353() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-5998));
        Node node1 = new Node(25, node0, node0, 41, 128);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03354() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-5998));
        Node node1 = new Node(25, node0, node0, 41, 128);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03455() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(21);
        Node node1 = new Node(27, node0, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(44, Node.IS_VAR_ARGS_PARAM);
    }

    @Test(timeout = 4000)
    public void test03556() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(28);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test03657() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(33);
        Node node1 = new Node(29, node0, node0, node0, node0, 2, 18);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertTrue(node1.hasChildren());
    }

    @Test(timeout = 4000)
    public void test03758() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(31, node0, node0, node0, node0, 2, 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test03759() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(31, node0, node0, node0, node0, 2, 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test03860() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(138);
        Node node1 = new Node(32, node0, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(35, Node.QUOTED_PROP);
    }

    @Test(timeout = 4000)
    public void test03961() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(34);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test03962() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(34);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test04063() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-4137));
        Node node1 = new Node(36, node0, node0, 4, 35);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test04064() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node((-4137));
        Node node1 = new Node(36, node0, node0, 4, 35);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test04165() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(732);
        Node node1 = new Node(37, node0, node0, 0, 12);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test04266() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(41);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(41, Node.SIDE_EFFECT_FLAGS);
    }

    @Test(timeout = 4000)
    public void test04367() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newString(42, "TightenTypes pass appears to be stuck in an infinite loop.", 42, 42);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04468() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(43);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(4, Node.DESCENDANTS_FLAG);
    }

    @Test(timeout = 4000)
    public void test04569() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(44, "ENUc5MuINIT)ALUES", 44, 70);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.LEFT);
    }

    @Test(timeout = 4000)
    public void test04670() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(45, 36, 12);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test04771() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(105);
        Node node1 = new Node(46, node0, node0, 0, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(7, Node.LOCAL_PROP);
    }

    @Test(timeout = 4000)
    public void test04872() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(29, Node.VAR_ARGS_NAME);
    }

    @Test(timeout = 4000)
    public void test04973() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test04974() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05075() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(49);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals((-1), node0.getCharno());
    }

    @Test(timeout = 4000)
    public void test05176() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110);
        Node node1 = new Node(50, node0, node0, node0, node0, 1, 48);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05177() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110);
        Node node1 = new Node(50, node0, node0, node0, node0, 1, 48);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test05278() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(51);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05379() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(52);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test05480() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(53, 53, 53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05481() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(53, 53, 53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05582() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(54, 54, 54);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05583() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(54, 54, 54);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05684() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(55);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05685() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(55);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05786() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05787() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05888() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(57);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05889() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(57);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test05990() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test05991() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06092() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06093() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06194() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(60);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06195() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(60);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06296() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test06297() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06398() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(62);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test06399() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(62);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test064100() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(63);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(5, Node.FUNCTION_PROP);
    }

    @Test(timeout = 4000)
    public void test065101() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(64);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test066102() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(65);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test067103() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test067104() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test068105() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(67);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test068106() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(67);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test069107() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(68);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test069108() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(68);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test070109() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(69);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test071110() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(71, 71, 71);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test071111() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(71, 71, 71);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test072112() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(72);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test072113() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(72);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test073114() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(73, 73, 73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test073115() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(73, 73, 73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test074116() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(74);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test074117() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(74);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test075118() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(75);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test075119() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(75);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test076120() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test076121() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test077122() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newString(77, "TightenTypes pass appears to be stuck in an infinite loop.", 77, 77);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test078123() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newString(78, "TightenTypes pass appears to be stuck in an infinite loop.", 78, 78);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test078124() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newString(78, "TightenTypes pass appears to be stuck in an infinite loop.", 78, 78);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test079125() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(79);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test079126() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(79);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test080127() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test080128() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test081129() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(81, 81, 81);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test081130() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(81, 81, 81);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test082131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(82, 82, 82);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test082132() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(82, 82, 82);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test083133() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(47, Node.DIRECTIVES);
    }

    @Test(timeout = 4000)
    public void test084134() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test084135() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test085136() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(85);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test086137() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(")I");
        Node node1 = new Node(87, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test086138() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(")I");
        Node node1 = new Node(87, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test086139() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(")I");
        Node node1 = new Node(87, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test087140() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(48);
        Node node1 = new Node(89, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test087141() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(48);
        Node node1 = new Node(89, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test088142() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        Node node1 = new Node(90, node0, node0, node0, node0, 3, 15);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test088143() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        Node node1 = new Node(90, node0, node0, node0, node0, 3, 15);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test089144() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(91, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test089145() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(91, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test090146() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70, 70, 70);
        Node node1 = new Node(93, node0, node0, node0, node0, 0, 46);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test090147() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70, 70, 70);
        Node node1 = new Node(93, node0, node0, node0, node0, 0, 46);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test091148() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(103);
        Node node1 = new Node(94, node0, node0, 34, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test091149() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(103);
        Node node1 = new Node(94, node0, node0, 34, 0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test092150() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(48);
        Node node1 = new Node(95, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test092151() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(48);
        Node node1 = new Node(95, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test092152() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(48);
        Node node1 = new Node(95, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test093153() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(97);
        Node node1 = new Node(96, node0, node0, 34, 0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test093154() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(97);
        Node node1 = new Node(96, node0, node0, 34, 0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test094155() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(97, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test094156() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(49);
        Node node1 = new Node(97, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test095157() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(98);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test096158() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(99);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test096159() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(99);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test097160() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(100);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test098161() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(101);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test099162() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(102);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test100163() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(103);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test101164() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(105);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test102165() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node0 = new Node(106);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test102166() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);
        Node node0 = new Node(106);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test103167() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(107);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test103168() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(107);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test104169() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(108);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(48, Node.DIRECT_EVAL);
    }

    @Test(timeout = 4000)
    public void test105170() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(109);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test105171() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(109);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test106172() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(110);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.isSyntheticBlock());
    }

    @Test(timeout = 4000)
    public void test107173() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(111);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test108174() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(112);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test109175() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(113);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test110176() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(114);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(32, Node.MEMBER_TYPE_PROP);
    }

    @Test(timeout = 4000)
    public void test111177() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(115, 115, 115);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, node0.getSideEffectFlags());
    }

    @Test(timeout = 4000)
    public void test112178() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(116);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(34, Node.PARENTHESIZED_PROP);
    }

    @Test(timeout = 4000)
    public void test113179() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(117);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(8, Node.CODEOFFSET_PROP);
    }

    @Test(timeout = 4000)
    public void test114180() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(119);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test115181() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test116182() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(121);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test116183() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(121);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test117184() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(122);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
    }

    @Test(timeout = 4000)
    public void test118185() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(123);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test118186() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(123);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test119187() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(124);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, Node.PROPERTY_FLAG);
    }

    @Test(timeout = 4000)
    public void test120188() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(126);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals((-3), Node.LOCAL_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test121189() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(127);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test121190() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(127);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test122191() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test122192() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test123193() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(129);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test123194() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(129);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test124195() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        Node node0 = new Node(131);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test124196() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        Node node0 = new Node(131);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test125197() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(133, 133, 133);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test125198() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(133, 133, 133);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test126199() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(134);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test126200() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(134);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test127201() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test127202() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(135);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test128203() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test128204() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test129205() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(137, 46, 137);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test129206() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(137, 46, 137);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test130207() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(138);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test130208() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(138);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test131209() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test131210() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test132211() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test132212() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test133213() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test133214() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test134215() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(142);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test134216() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(142);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test135217() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(143);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test135218() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(143);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test136219() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(144);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test136220() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(144);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test137221() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node0 = new Node(145);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test137222() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node0 = new Node(145);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test138223() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(146);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test138224() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(146);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test139225() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(147);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(8, Node.FLAG_NO_THROWS);
    }

    @Test(timeout = 4000)
    public void test140226() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(148);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(42, Node.IS_CONSTANT_NAME);
    }

    @Test(timeout = 4000)
    public void test141227() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(149);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test141228() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(149);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test142229() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(150);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test142230() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(150);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test143231() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(151);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 151
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test144232() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(152);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(6, Node.TEMP_PROP);
    }

    @Test(timeout = 4000)
    public void test145233() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(153);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertFalse(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test146234() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(225);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 225
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test147235() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(83);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.TypeCheck", e);
        }
    }

    @Test(timeout = 4000)
    public void test148236() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(64, node0, node0, node0, node0, 86, 31);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(22, Node.TARGETBLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test149237() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 24);
        Node node1 = new Node(8, node0, node0, node0, node0, 14, 1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(0, nodeTraversal0.getLineNumber());
    }

    @Test(timeout = 4000)
    public void test150238() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = Node.newString("2%+ziSKrxO", 117, 149);
        Node node1 = new Node(64, node0, node0, node0, node0, 2691, 8);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
    }

    @Test(timeout = 4000)
    public void test151239() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(33);
        Node node1 = new Node(31, node0, node0, 2, 29);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test152240() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock");
        Node node1 = new Node(64, node0, node0, node0, node0, 8, 8);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unexpected node type: SCRIPT 1 [sourcename: java.lang.String@0000000718] [synthetic: 1]
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test153241() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode((String) null, "!aaPx");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node1 = new Node(49, node0, node0, node0, node0, 1, 16);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Scope scope0 = typeCheck0.processForTesting(node0, node0);
        assertEquals(33, scope0.getVarCount());
    }

    @Test(timeout = 4000)
    public void test154242() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(104);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test154243() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(104);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test155244() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(105);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test156245() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test157246() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test158247() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test159248() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(82, 82, 82);
        Node node1 = new Node(118, node0, node0, 33, 26);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        // Undeclared exception!
        try {
            typeCheck0.visit(nodeTraversal0, node1, node0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // RC 82 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test160249() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(162);
        Node node1 = Node.newString("com.google.javascript.jscomp.graph.LinkedDirectedGraph", 1, 27);
        Node node2 = Node.newString("com.google.javascript.jscomp.graph.LinkedDirectedGraph", 22, 23);
        Node node3 = new Node(30, node0, node2, node2, node1, 10, 48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node3, node1);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test161250() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(88);
        Node node1 = new Node(88, node0, node0, node0, node0, 8, 8);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test161251() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        Node node0 = new Node(88);
        Node node1 = new Node(88, node0, node0, node0, node0, 8, 8);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test162252() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        node0.addSuppression("+W&");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertEquals(1, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test162253() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70);
        node0.addSuppression("+W&");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test163254() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("b#", "HxM7[w.;");
        Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0, (ScopeCreator) null);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node1 = new Node(30, node0, node0, node0, node0, 119, 2);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0, compiler0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test163255() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("b#", "HxM7[w.;");
        Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0, (ScopeCreator) null);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Node node1 = new Node(30, node0, node0, node0, node0, 119, 2);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(100.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test164256() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        double double0 = typeCheck0.getTypedPercent();
        assertEquals(0.0, double0, 0.01);
    }
}
