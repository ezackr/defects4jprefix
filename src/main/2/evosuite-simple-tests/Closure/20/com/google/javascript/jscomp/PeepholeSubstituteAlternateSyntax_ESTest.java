/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 00:48:11 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeSubstituteAlternateSyntax_ESTest extends PeepholeSubstituteAlternateSyntax_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newNumber((double) 13);
        Node node1 = new Node(113, node0);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.areMatchingExits(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = new Node(13, 13, 13);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = new Node(26, node0, node0);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Node node0 = new Node(43);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertFalse(node1.isStringKey());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Node node0 = new Node(44);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = Node.newNumber((double) 115);
        Node node1 = new Node(115, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Node node0 = new Node(130);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = Node.newNumber((-3117.7102528435444));
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(51, Node.STATIC_SOURCE_FILE);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Node node0 = new Node(4, 4, 4);
        Node node1 = new Node(53, node0, node0, node0, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertNull(node2);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node0 = new Node(30, 30, 30);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertFalse(node1.isAssign());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Node node0 = new Node(101, 101, 101);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        node0.setType(37);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(115);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        node0.addChildrenToBack(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // malformed 'for' statement FOR 115
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        Node node1 = new Node(45, node0, node0, node0, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        node1.setType(37);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // NAME 38 is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node0 = compiler0.parseTestCode("9\"gzK|D$5?)v^YRBd");
        Node node1 = new Node(37, node0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertEquals(37, node2.getType());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(12, Node.COLUMN_BITS);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(0, node0, node0, node0, node0, 47, 35);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        Node node1 = new Node(0, node0, node0, node0, node0, 47, 35);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(348245, node2.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        node0.addChildToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertFalse(node1.isNull());
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = new Node(125, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Node node0 = new Node(38);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(29, Node.JSDOC_INFO_PROP);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node0 = Node.newString(38, "v=*<+BW$ 4L0?s2%i");
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertFalse(node1.isDefaultCase());
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Node node0 = new Node(38);
        Node node1 = new Node(4, node0, 39, 50);
        Node node2 = new Node(132, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // NAME is not a string node
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(4, node0, 0, 50);
        Node node2 = node1.cloneTree();
        node0.addChildrenToFront(node2);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(4, node0, 0, 50);
        Node node2 = node1.cloneTree();
        node0.addChildrenToFront(node2);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        assertEquals(50, node3.getSourcePosition());
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Node node0 = new Node(121);
        Node node1 = new Node(4, node0, 39, 50);
        Node node2 = new Node(105, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Node node0 = new Node(121);
        Node node1 = new Node(4, node0, 39, 50);
        Node node2 = new Node(105, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertTrue(node3.isReturn());
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Node node0 = new Node(4);
        Node node1 = new Node(2);
        Node node2 = new Node(36, node0, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Node node0 = new Node(4);
        Node node1 = new Node(4);
        Node node2 = new Node((-8), node0, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure((Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newString("Inlning emty method: ", 30, 30);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        Node node0 = Node.newString(108, "w5-{tfk");
        Node node1 = new Node(37, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = Node.newString(4, "Inlining empty method: ", 4, 4);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(4, node0, 0, 50);
        Node node2 = new Node(132, node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.areMatchingExits(node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = Node.newNumber((-3161.2996879997236));
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.areMatchingExits(node0, node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newNumber((-3130.1674333));
        Node node1 = new Node(4, node0);
        boolean boolean0 = peepholeSubstituteAlternateSyntax0.areMatchingExits(node1, node1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(26);
        Node node1 = new Node(12, node0, node0, node0, node0);
        Node node2 = new Node(26, node1);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newString("", 26, 26);
        Node node1 = new Node(45, node0, 1, 40);
        Node node2 = new Node(26, node1);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = new Node(26);
        Node node1 = new Node(46, node0, node0, node0);
        Node node2 = new Node(26, node1);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = new Node(108, node0);
        Compiler compiler0 = new Compiler();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        node0.setType(43);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertNotNull(node2);
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        Node node0 = new Node(108, 108, 108);
        Node node1 = new Node(108, node0);
        Compiler compiler0 = new Compiler();
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        node0.setType(43);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        assertFalse(node3.isNumber());
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = new Node(108, node0);
        node1.addChildrenToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertEquals(16, Node.SOURCENAME_PROP);
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = Node.newString("", 26, 26);
        Node node1 = new Node(26, node0, node0, node0, 1, 29);
        Node node2 = new Node(26, node1);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node(122);
        node0.setType(100);
        Node node1 = new Node(26, node0);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        Node node0 = new Node(26);
        node0.addChildToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.rhino.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-378), (-378), 26);
        Node node1 = new Node(26, node0, node0, node0, 8, 29);
        Node node2 = new Node(26, node1);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        assertNotNull(node3);
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node0 = new Node((-378), (-378), 26);
        Node node1 = new Node(26, node0, node0, node0, 8, 29);
        Node node2 = new Node(26, node1);
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
        assertEquals((-1), node3.getCharno());
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node0 = Node.newString("Invariant faiwed.  ", 26, 26);
        Node node1 = new Node(26, node0, node0, node0, 1, 29);
        Node node2 = new Node(26, node1);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        Node node1 = Node.newString(31, "fvu2_<Ub$]0$z<J", 45, 47);
        node0.addChildToFront(node1);
        node0.addChildrenToFront(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(4095, Node.COLUMN_MASK);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node0 = new Node(30, 30, 30);
        Node node1 = new Node(30, node0, node0, 51, 43);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertFalse(node2.isArrayLit());
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Compiler compiler0 = new Compiler();
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        peepholeSubstituteAlternateSyntax0.beginTraversal(compiler0);
        Node node1 = new Node(37, node0);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        Node node0 = new Node(43);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        // Undeclared exception!
        try {
            peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
        }
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Node node1 = new Node(63, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertEquals(41, Node.BRACELESS_TYPE);
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        Node node1 = new Node(63, node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
        node0.setType(40);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        assertFalse(node2.isContinue());
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        Node node0 = new Node(63);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        assertEquals(50, Node.FREE_CALL);
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("4hjMxPeO>2|js'I");
        assertTrue(boolean0);
    }
}
