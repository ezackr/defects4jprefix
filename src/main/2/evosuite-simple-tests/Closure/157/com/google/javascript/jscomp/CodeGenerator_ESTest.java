/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 09:58:14 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = Node.newNumber(0.0);
        // Undeclared exception!
        try {
            codeGenerator0.addArrayList(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("rxHqb:1ME#V]>(P");
        assertEquals("/rxHqb:1ME#V]>(P/", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000\u00A0\u180E\u202F");
        assertEquals("/\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\\u00a0\\u180e\\u202f/", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.tagAsStrict();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("/!n-u:--]]>C");
        assertEquals("\"/!n-u:--]]\\>C\"", string0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addCaseBody((Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = new Node((-456));
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, false);
            fail("Expecting exception: Error");
        } catch (Error e) {
            //
            // Unknown precedence for <unknown=-456> (type -456)
            //
            verifyException("com.google.javascript.jscomp.NodeUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Charset charset0 = Charset.forName("default");
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = Node.newNumber((double) 72, 72, 72);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, false, codeGenerator_Context0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node(51);
        // Undeclared exception!
        try {
            codeGenerator0.addList(node0, false, codeGenerator_Context0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addList((Node) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addArrayList((Node) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addAllSiblings((Node) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        // Undeclared exception!
        try {
            codeGenerator0.addAllSiblings(node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.CodeGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String string0 = CodeGenerator.jsString("'////'8</scriptpt</scriptttptstyle type=<!--criptttt--y></scriptttype=\"text/css\">body, td, p {font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {marein-top:3px; margin-left:24px; padding-left:0px2padding-bottom: 4px}<!--cript>text/c-</scripttttt--y></scripttpltype=\"text/css\">body, td, p{font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;d li {marein-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}<!--criptptte>>body, td, p {font-ramily: arial; font-size: 83%} ul {margin-top:2px; margin-<!--:0px; padding-left:1em;} li {marein-top3px; margin-left:24px; padding-left:0px;padding-bottom: px}</scripttttte>8'////'", (CharsetEncoder) null);
        assertEquals("\"'////'8<\\/scriptpt<\\/scriptttptstyle type=<\\!--criptttt--y><\\/scriptttype=\\\"text/css\\\">body, td, p {font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {marein-top:3px; margin-left:24px; padding-left:0px2padding-bottom: 4px}<\\!--cript>text/c-<\\/scripttttt--y><\\/scripttpltype=\\\"text/css\\\">body, td, p{font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;d li {marein-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}<\\!--criptptte>>body, td, p {font-ramily: arial; font-size: 83%} ul {margin-top:2px; margin-<\\!--:0px; padding-left:1em;} li {marein-top3px; margin-left:24px; padding-left:0px;padding-bottom: px}<\\/scripttttte>8'////'\"", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        String string0 = CodeGenerator.jsString("<!--l></scripttyle type=\"text/css\">body, td, p {font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {marein-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</script", (CharsetEncoder) null);
        assertEquals("'<\\!--l><\\/scripttyle type=\"text/css\">body, td, p {font-family: arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {marein-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}<\\/script'", string0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString(">TR[X;");
        assertEquals("\">TR[X;\"", string0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("+!o>m&->8f%JA7");
        assertEquals("/+!o>m&->8f%JA7/", string0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("+0i> <!-->8f!--");
        assertEquals("/+0i> <\\!--\\>8f!--/", string0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        String string0 = CodeGenerator.regexpEscape("(q#=x8t", charsetEncoder0);
        assertEquals("/(q#=x8t/", string0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("\t\n\u000B\f\r \u0085\u1680\u2029\u205F\u3000\u00A0\u180E\u202F");
        assertEquals("\\u0009\\u000a\\u000b\\u000c\\u000d \\u0085\\u1680\\u2029\\u205f\\u3000\\u00a0\\u180e\\u202f", string0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("60*~ B)Zt{363R");
        assertEquals("60*~ B)Zt{363R", string0);
    }
}
