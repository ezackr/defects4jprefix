/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:07:08 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "vh$3$");
        Node node0 = compiler0.parseTestCode("vh$3$");
        processCommonJSModules0.process(node0, node0);
        processCommonJSModules0.process(node0, node0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "vh$3$");
        Node node0 = compiler0.parseTestCode("vh$3$");
        processCommonJSModules0.process(node0, node0);
        processCommonJSModules0.process(node0, node0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "jq", false);
        JSModule jSModule0 = processCommonJSModules0.getModule();
        assertNull(jSModule0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "9");
        Node node0 = compiler0.parseTestCode("module.exports");
        processCommonJSModules0.process(node0, node0);
        assertEquals(2, Node.POST_FLAG);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "V0_=b//");
        Node node0 = compiler0.parseSyntheticCode("V0_=b//", "V0_=b//");
        // Undeclared exception!
        try {
            processCommonJSModules0.process(node0, node0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("./jquery?li&Wses", "./jquery?li&Wses");
        assertEquals("module$jquery?li&Wses", string0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("../jzquerAliases", "../jzquerAliases");
        assertEquals("module$..$..$jzquerAliases", string0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("jqueryAliases", "jqueryAliases");
        assertEquals("module$jqueryAliases", string0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ";aQ(,");
        Node node0 = compiler0.parseTestCode("var JSCompiler_stubMap = [];function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {  return function() {    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(        this, arguments);  };}function JSCompiler_unstubMethod(    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] =       JSCompiler_unstubMethod_body;}");
        processCommonJSModules0.process(node0, node0);
        assertEquals(1, Node.DECR_FLAG);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "vh$3$");
        Node node0 = compiler0.parseTestCode("vh$3$");
        Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "vh$3$", "./");
        node0.addChildToBack(node1);
        // Undeclared exception!
        try {
            processCommonJSModules0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
            //   Node(SCRIPT): [testcode]:1:0
            // vh$3$
            //   Parent: NULL
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "&$/", "&$/");
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "&$/", false);
        processCommonJSModules0.process(node0, node0);
        assertEquals(54, Node.SLASH_V);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "exports");
        Node node0 = compiler0.parseTestCode("exports");
        processCommonJSModules0.process(node0, node0);
        assertFalse(node0.isCall());
    }
}
