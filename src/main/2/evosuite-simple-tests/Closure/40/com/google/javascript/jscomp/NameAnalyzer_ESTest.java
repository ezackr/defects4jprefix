/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:53:09 GMT 2024
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NameAnalyzer_ESTest extends NameAnalyzer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node0);
        assertTrue(node0.hasChildren());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node0);
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        Node node1 = new Node(54, node0, node0, 12, 44);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        nameAnalyzer0.process(node0, node1);
        String string0 = nameAnalyzer0.getHtmlReport();
        assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"JSCompiler_emptyFn\">JSCompiler_emptyFn</a><ul><li>REFERENCED BY: </li></ul></li><li><a name=\"window\">window</a><ul><li>REFERS TO: <a href=\"#JSCompiler_emptyFn\">JSCompiler_emptyFn</a></li></ul></li></ul></body></html>", string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " argument(s)", " argument(s)");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node0);
        assertEquals(54, Node.SLASH_V);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node1 = new Node(44, node0, node0, node0, 40, 47);
        nameAnalyzer0.process(node1, node0);
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node1 = new Node(44, node0, node0, node0, 40, 47);
        nameAnalyzer0.process(node1, node0);
        assertEquals(0, node0.getChildCount());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("goog.globalJCompiler_um=tyFn", "goog.globalJCompiler_um=tyFn");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        nameAnalyzer0.process(node0, node0);
        assertEquals(35, Node.PARENTHESIZED_PROP);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("functionYJCompiler_emptyF() { return function() {}}", "functionYJCompiler_emptyF() { return function() {}}");
        Node node1 = new Node(147, node0, node0, 43, 4);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        // Undeclared exception!
        try {
            nameAnalyzer0.process(node0, node1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog.global", "goog.global");
        node0.setType(118);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        // Undeclared exception!
        try {
            nameAnalyzer0.process(node0, node0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("P~.dS]@z~", "P~.dS]@z~");
        Node node1 = new Node(118, node0, node0, 1, 125);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node1);
        assertFalse(node0.isName());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node1 = new Node(49, node0, node0, node0, node0);
        nameAnalyzer0.process(node0, node1);
        assertFalse(node0.isNE());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, " ", " ");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node1 = new Node(108, node0, node0, 54, 50);
        nameAnalyzer0.process(node1, node1);
        assertEquals(29, Node.JSDOC_INFO_PROP);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        Node node1 = new Node(113, node0, node0, 39, 8);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node1);
        assertFalse(node0.isQualifiedName());
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("ZL\"lUUjJ", "ZL\"lUUjJ");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        Node node1 = new Node(119, node0, node0, 2, 2);
        nameAnalyzer0.process(node1, node1);
        assertEquals(51, Node.STATIC_SOURCE_FILE);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        node0.setType(110);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node0);
        assertEquals(16, Node.FLAG_LOCAL_RESULTS);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JCompiler_emptyFn() { return function() {}}", "function JCompiler_emptyFn() { return function() {}}");
        Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "function JCompiler_emptyFn() { return function() {}}", "function JCompiler_emptyFn() { return function() {}}");
        Node node2 = new Node(111, node1, node0, 39, 38);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        nameAnalyzer0.process(node2, node2);
        assertFalse(node2.isTypeOf());
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("unexpected language mode");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node1 = new Node(114, node0, node0, 45, 2);
        nameAnalyzer0.process(node1, node1);
        assertFalse(node1.hasMoreThanOneChild());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "window", "window");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        nameAnalyzer0.process(node0, node0);
        assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        Node node1 = new Node(54, node0, node0, 12, 44);
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        nameAnalyzer0.process(node0, node1);
        nameAnalyzer0.process(node1, node1);
        assertFalse(node1.isNoSideEffectsCall());
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations", "com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
        Node node1 = new Node(37, node0, node0, 53, 31);
        nameAnalyzer0.process(node0, node1);
        assertEquals(48, Node.DIRECTIVES);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
        NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
        nameAnalyzer0.process(node0, node0);
        String string0 = nameAnalyzer0.getHtmlReport();
        assertEquals("<html><body><style type=\"text/css\">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\"Function\">Function</a><ul></li></ul></li><li><a name=\"JSCompiler_emptyFn\">JSCompiler_emptyFn</a><ul></li></ul></li><li><a name=\"window\">window</a><ul></li></ul></li></ul></body></html>", string0);
    }
}
