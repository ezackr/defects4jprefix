/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 01:50:19 GMT 2024
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "0'*8R~3|*#<:7.RQTz[");
        Node node0 = errorFunctionType0.getParametersNode();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
        hashMap0.put("0'*8R~3|*#<:7.RQTz[", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "0'*8R~3|*#<:7.RQTz[");
        Node node0 = errorFunctionType0.getParametersNode();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
        hashMap0.put("0'*8R~3|*#<:7.RQTz[", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
        assertEquals("{0'*8R~3|*#<:7.RQTz[: function (new:0'*8R~3|*#<:7.RQTz[, *=, *=, *=): 0'*8R~3|*#<:7.RQTz[}", string0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "valueOf", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "valueOf", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        assertTrue(instanceObjectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "valueOf", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        assertFalse(instanceObjectType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        boolean boolean0 = objectType0.matchesObjectContext();
        assertFalse(objectType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        boolean boolean0 = objectType0.matchesObjectContext();
        assertFalse(objectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        boolean boolean0 = objectType0.matchesObjectContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        Node node0 = Node.newString("Unknown class name", 0, 1);
        boolean boolean0 = errorFunctionType0.defineProperty("s8C(~9;NVC-k", errorFunctionType0, false, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        Node node0 = Node.newString("Unknown class name", 0, 1);
        boolean boolean0 = errorFunctionType0.defineProperty("s8C(~9;NVC-k", errorFunctionType0, false, node0);
        int int0 = errorFunctionType0.getPropertiesCount();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        Node node0 = Node.newString("Unknown class name", 0, 1);
        boolean boolean0 = errorFunctionType0.defineProperty("s8C(~9;NVC-k", errorFunctionType0, false, node0);
        int int0 = errorFunctionType0.getPropertiesCount();
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        Node node0 = Node.newString("Unknown class name", 0, 1);
        errorFunctionType0.defineProperty("s8C(~9;NVC-k", errorFunctionType0, false, node0);
        jSTypeRegistry0.resetImplicitPrototype(errorFunctionType0, errorFunctionType0);
        // Undeclared exception!
        errorFunctionType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "kN)EFp>AY@=KY");
        JSType[] jSTypeArray0 = new JSType[5];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) templateType0, false, jSTypeArray0);
        functionType0.setImplicitPrototype(templateType0);
        boolean boolean0 = functionType0.hasProperty("Named type with empty name component");
        assertFalse(functionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "kN)EFp>AY@=KY");
        JSType[] jSTypeArray0 = new JSType[5];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) templateType0, false, jSTypeArray0);
        functionType0.setImplicitPrototype(templateType0);
        boolean boolean0 = functionType0.hasProperty("Named type with empty name component");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "4A/trnndxPwr')|kn");
        errorFunctionType0.setPropertyJSDocInfo("call", jSDocInfo0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared("Named type with empty name component");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared("Named type with empty name component");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.defineProperty("String", errorFunctionType0, false, (Node) null);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test0920() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.defineProperty("String", errorFunctionType0, false, (Node) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        Node node0 = new Node(0);
        errorFunctionType0.defineProperty("Iuo|MyA", errorFunctionType0, false, node0);
        Locale locale0 = Locale.CHINESE;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        // Undeclared exception!
        try {
            errorFunctionType0.collectPropertyNames(set0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.AbstractCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getPropertyNames();
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getPropertyNames();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("toString");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("toString");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("SHNE");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("SHNE");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns(".e#Xxu.g}h\"q");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns(".e#Xxu.g}h\"q");
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns(".e#Xxu.g}h\"q");
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSType jSType0 = jSTypeRegistry0.createNamedType("Vhz[.\"Tq|T6v)c`tS5", "Vhz[.\"Tq|T6v)c`tS5", 479, (-1994091957));
        Node node0 = Node.newString("Not declared as a constructor");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, node0);
        hashMap0.put("Vhz[.\"Tq|T6v)c`tS5", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.isPropertyInExterns("Vhz[.\"Tq|T6v)c`tS5");
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSType jSType0 = jSTypeRegistry0.createNamedType("Vhz[.\"Tq|T6v)c`tS5", "Vhz[.\"Tq|T6v)c`tS5", 479, (-1994091957));
        Node node0 = Node.newString("Not declared as a constructor");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, node0);
        hashMap0.put("Vhz[.\"Tq|T6v)c`tS5", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.isPropertyInExterns("Vhz[.\"Tq|T6v)c`tS5");
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",W0f6m~5KbMlm$-|");
        boolean boolean0 = errorFunctionType0.removeProperty(",W0f6m~5KbMlm$-|");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",W0f6m~5KbMlm$-|");
        boolean boolean0 = errorFunctionType0.removeProperty(",W0f6m~5KbMlm$-|");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1735() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("String");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("String");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P");
        errorFunctionType0.getPropertyNode("P");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test1938() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1939() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
        Node node1 = enumType0.getPropertyNode("");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
        Node node1 = enumType0.getPropertyNode("");
        assertNotNull(node1);
    }

    @Test(timeout = 4000)
    public void test2041() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "PxI~~");
        errorFunctionType0.getOwnPropertyJSDocInfo("PxI~~");
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test2142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "PxI~~");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("PxI~~", jSDocInfo0);
        errorFunctionType0.getOwnPropertyJSDocInfo("PxI~~");
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Yf:&&rzG(+6ub~50(");
        errorFunctionType0.setPropertyJSDocInfo("Yf:&&rzG(+6ub~50(", (JSDocInfo) null);
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test2244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Yf:&&rzG(+6ub~50(");
        errorFunctionType0.setPropertyJSDocInfo("Yf:&&rzG(+6ub~50(", (JSDocInfo) null);
        assertFalse(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "vsg_G*!u^op@[q~d");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("vsg_G*!u^op@[q~d", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("vsg_G*!u^op@[q~d", jSDocInfo0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2446() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.setPropertyJSDocInfo("{...}", jSDocInfo0);
        assertTrue(recordType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test2547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesNumberContext();
        assertTrue(jSType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test2548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesNumberContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test2650() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test2651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2752() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2753() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        assertTrue(instanceObjectType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test2854() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test2855() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2956() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2957() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(instanceObjectType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test3058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3059() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(instanceObjectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        assertTrue(instanceObjectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
        assertTrue(jSType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test3263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) noResolvedType0;
        jSTypeArray0[1] = (JSType) instanceObjectType0;
        jSTypeArray0[2] = (JSType) instanceObjectType0;
        jSTypeArray0[3] = (JSType) noResolvedType0;
        jSTypeArray0[4] = (JSType) instanceObjectType0;
        jSTypeArray0[5] = (JSType) noResolvedType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(instanceObjectType0, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) noResolvedType0;
        jSTypeArray0[1] = (JSType) instanceObjectType0;
        jSTypeArray0[2] = (JSType) instanceObjectType0;
        jSTypeArray0[3] = (JSType) noResolvedType0;
        jSTypeArray0[4] = (JSType) instanceObjectType0;
        jSTypeArray0[5] = (JSType) noResolvedType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(instanceObjectType0, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3466() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test3467() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s8C(~9;NVC-k");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3568() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.matchesStringContext();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3669() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
        assertFalse(recordType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test3670() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3671() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
        assertNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test3772() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        assertTrue(instanceObjectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3773() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        assertNotNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test3874() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
        assertNotNull(jSType1);
    }

    @Test(timeout = 4000)
    public void test3875() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
        assertTrue(jSType0.isNominalType());
    }

    @Test(timeout = 4000)
    public void test3976() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) linkedList0);
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test3977() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) linkedList0);
        recordType0.setOwnerFunction(functionType0);
        String string0 = recordType0.toStringHelper(false);
        assertEquals("null.prototype", string0);
    }

    @Test(timeout = 4000)
    public void test4078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        assertFalse(instanceObjectType0.isNativeObjectType());
    }

    @Test(timeout = 4000)
    public void test4079() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        assertEquals("{...}", string0);
    }

    @Test(timeout = 4000)
    public void test4080() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        String string0 = instanceObjectType0.toStringHelper(true);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
        assertEquals("{Not declared as a type name: number, valueOf: number}", string0);
    }

    @Test(timeout = 4000)
    public void test4283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("fCKai(S1~9DhRC8+", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("UNKNOWN", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(true);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4284() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("fCKai(S1~9DhRC8+", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("UNKNOWN", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(true);
        assertEquals("{Named type with empty name component: Number, UNKNOWN: Number, Unknown class name: Number, fCKai(S1~9DhRC8+: Number, ...}", string0);
    }

    @Test(timeout = 4000)
    public void test4385() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        FunctionType.getTopDefiningInterface(recordType0, "Not declared as a type name");
        // Undeclared exception!
        try {
            recordType0.setImplicitPrototype((ObjectType) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test4486() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9CA<");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test4487() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9CA<");
        FunctionType functionType0 = errorFunctionType0.getBindReturnType(0);
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4588() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{...}");
        boolean boolean0 = errorFunctionType0.isNumber();
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test4589() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{...}");
        boolean boolean0 = errorFunctionType0.isNumber();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4690() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isSubtype(recordType0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4691() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isSubtype(recordType0);
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test4692() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isSubtype(recordType0);
        assertFalse(recordType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test4793() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "1oNTG>^)M", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        assertTrue(instanceObjectType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test4794() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "1oNTG>^)M", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4895() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{...}");
        ObjectType objectType0 = errorFunctionType0.getPrototype();
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(1, nodeArray0);
        errorFunctionType0.setPrototypeBasedOn(objectType0, node0);
        assertTrue(objectType0.hasReferenceName());
    }

    @Test(timeout = 4000)
    public void test4896() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{...}");
        ObjectType objectType0 = errorFunctionType0.getPrototype();
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(1, nodeArray0);
        errorFunctionType0.setPrototypeBasedOn(objectType0, node0);
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test4997() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, true, jSTypeArray0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.setOwnerFunction(functionType0);
        // Undeclared exception!
        try {
            recordType0.setOwnerFunction(functionType0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5098() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a^vr(A?hM>");
        errorFunctionType0.getCtorImplementedInterfaces();
        assertTrue(errorFunctionType0.isNominalConstructor());
    }

    @Test(timeout = 4000)
    public void test5199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sett|CI8? P7zxsQI");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("sett|CI8? P7zxsQI", jSDocInfo0);
        assertTrue(errorFunctionType0.hasCachedValues());
    }

    @Test(timeout = 4000)
    public void test51100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sett|CI8? P7zxsQI");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("sett|CI8? P7zxsQI", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        assertTrue(errorFunctionType0.isNominalConstructor());
    }
}
