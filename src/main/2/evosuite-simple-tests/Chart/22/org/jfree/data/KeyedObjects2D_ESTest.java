/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:40:44 GMT 2024
 */
package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.KeyedObjects2D;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class KeyedObjects2D_ESTest extends KeyedObjects2D_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.getRowKey(0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.removeColumn((Comparable) "^Z%1uW6^");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Column key (^Z%1uW6^) not recognised.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.removeColumn(0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 0, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.removeRow((Comparable) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.hashCode();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("org.jfree.data.KeyedObjects", "org.jfree.data.KeyedObjects", "org.jfree.data.KeyedObjects");
        keyedObjects2D0.addObject("s$?[}7Jv!Lis;e", "s$?[}7Jv!Lis;e", "s$?[}7Jv!Lis;e");
        Object object0 = keyedObjects2D0.clone();
        boolean boolean0 = keyedObjects2D0.equals(object0);
        assertEquals(2, keyedObjects2D0.getColumnCount());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("org.jfree.data.KeyedObjects", "org.jfree.data.KeyedObjects", "org.jfree.data.KeyedObjects");
        keyedObjects2D0.addObject("s$?[}7Jv!Lis;e", "s$?[}7Jv!Lis;e", "s$?[}7Jv!Lis;e");
        Object object0 = keyedObjects2D0.clone();
        boolean boolean0 = keyedObjects2D0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.getObject((Comparable) "Row fkey (", (Comparable) "Row fkey (");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Row key (Row fkey () not recognised.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.getObject((Comparable) null, (Comparable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'rowKey' argument.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.getObject((Comparable) 871, (Comparable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'columnKey' argument.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("Row fkey (", "Row fkey (", "Row fkey (");
        Object object0 = keyedObjects2D0.getObject((Comparable) "Row fkey (", (Comparable) "Row fkey (");
        assertEquals("Row fkey (", object0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("Row fkey ", "Row fkey ", 0);
        // Undeclared exception!
        try {
            keyedObjects2D0.getObject((Comparable) "Row fkey ", (Comparable) "Row fkey ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Column key (Row fkey ) not recognised.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.removeObject((Comparable) null, (Comparable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'rowKey' argument.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        // Undeclared exception!
        try {
            keyedObjects2D0.removeObject(0, (Comparable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'columnKey' argument.
            //
            verifyException("org.jfree.data.KeyedObjects2D", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.removeObject("5IAOM", "5IAOM");
        KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
        boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
        assertEquals(0, keyedObjects2D0.getRowCount());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.removeObject("5IAOM", "5IAOM");
        KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
        boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("5IAOM", "5IAOM", 0);
        keyedObjects2D0.removeObject("5IAOM", "5IAOM");
        assertEquals(2, keyedObjects2D0.getColumnCount());
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("^Z%1uW6^", "^Z%1uW6^", "^Z%1uW6^");
        keyedObjects2D0.removeColumn((Comparable) "^Z%1uW6^");
        assertEquals(1, keyedObjects2D0.getRowCount());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        boolean boolean0 = keyedObjects2D0.equals(keyedObjects2D0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("}'K*YTw", "}'K*YTw", "}'K*YTw");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        assertTrue(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("}'K*YTw", "}'K*YTw", "}'K*YTw");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        keyedObjects2D1.setObject(keyedObjects2D0, "}'K*YTw", "}'K*YTw");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("}'K*YTw", "}'K*YTw", "}'K*YTw");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        keyedObjects2D1.setObject(keyedObjects2D0, "}'K*YTw", "}'K*YTw");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
        assertTrue(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
        keyedObjects2D1.setObject("5$OMY", "5$OMY", "5$OMY");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        KeyedObjects2D keyedObjects2D1 = new KeyedObjects2D();
        keyedObjects2D1.setObject("5$OMY", "5$OMY", "5$OMY");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        assertTrue(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        keyedObjects2D1.addObject((Object) null, "org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        KeyedObjects2D keyedObjects2D0 = new KeyedObjects2D();
        keyedObjects2D0.addObject("org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct");
        KeyedObjects2D keyedObjects2D1 = (KeyedObjects2D) keyedObjects2D0.clone();
        keyedObjects2D1.addObject((Object) null, "org.jfree._ata.KeyedObNct", "org.jfree._ata.KeyedObNct");
        boolean boolean0 = keyedObjects2D1.equals(keyedObjects2D0);
        assertFalse(keyedObjects2D1.equals((Object) keyedObjects2D0));
    }
}
