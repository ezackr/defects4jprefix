/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:49:21 GMT 2024
 */
package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Axis_ESTest extends Axis_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "Null 'paint' argument.";
        stringArray0[1] = "Null 'paint' argument.";
        SymbolAxis symbolAxis0 = new SymbolAxis("Null 'paint' argument.", stringArray0);
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(422.472F, 59, 0.8F, 59);
        RectangleEdge rectangleEdge0 = combinedRangeCategoryPlot0.getRangeAxisEdge(500);
        // Undeclared exception!
        try {
            symbolAxis0.draw(graphics2D0, 500, rectangle2D_Float0, rectangle2D_Float0, rectangleEdge0, (PlotRenderingInfo) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.SymbolAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelURL("z#^jy>Mo&d");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setAxisLineVisible(false);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setAxisLineVisible(false);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertNotSame(dateAxis1, dateAxis0);
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0313() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test0314() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0315() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0316() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0318() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = (DateAxis) dateAxis0.clone();
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0422() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0423() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0424() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test0425() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.getLabelURL();
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0527() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0528() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0529() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0530() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0531() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0532() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("z");
        dateAxis0.getLabelToolTip();
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test0633() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test0634() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0635() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0636() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0637() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0638() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0639() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setVisible(true);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0740() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0741() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0742() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0743() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0744() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test0745() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0746() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel("Q@7");
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0847() throws Throwable {
        LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'end' argument.");
        logarithmicAxis0.setLabel("34ob$|u*");
        assertEquals("34ob$|u*", logarithmicAxis0.getLabel());
    }

    @Test(timeout = 4000)
    public void test0948() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertTrue(cyclicNumberAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test0949() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test0950() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertTrue(cyclicNumberAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test0951() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0952() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test0953() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertTrue(cyclicNumberAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test0954() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "X Value");
        cyclicNumberAxis0.setLabel("X Value");
        assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1055() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test1056() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test1057() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1058() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test1059() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1060() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1061() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabel((String) null);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test1162() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1163() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1164() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1165() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test1166() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test1167() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test1168() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test1269() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setLabelFont((Font) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'font' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test1370() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1371() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test1372() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1373() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test1374() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test1375() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test1376() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1377() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1378() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Color color0 = Color.YELLOW;
        dateAxis0.setLabelPaint(color0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test1479() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setLabelPaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test1580() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1581() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test1582() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1583() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test1584() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test1585() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test1586() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1687() throws Throwable {
        SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("ST,E,ZpBy%y");
        // Undeclared exception!
        try {
            subCategoryAxis0.setLabelInsets((RectangleInsets) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'insets' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test1788() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1789() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test1790() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1791() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test1792() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test1793() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test1794() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test1795() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test1796() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        RectangleInsets rectangleInsets0 = RectangleInsets.ZERO_INSETS;
        dateAxis0.setLabelInsets(rectangleInsets0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1897() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setAxisLinePaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test1998() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1999() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test19100() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test19101() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test19102() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test19103() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test19104() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test19105() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        dateAxis0.setAxisLineStroke(fastScatterPlot0.DEFAULT_OUTLINE_STROKE);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test20106() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setAxisLineStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test21107() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test21108() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test21109() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test21110() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test21111() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test21112() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test21113() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickLabelsVisible(true);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test22114() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setTickLabelFont((Font) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'font' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test23115() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setTickLabelPaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test24116() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setTickLabelInsets((RectangleInsets) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'insets' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test25117() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        assertTrue(numberAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test25118() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test25119() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test25120() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertTrue(numberAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test25121() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertTrue(numberAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test25122() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertTrue(numberAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test25123() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        numberAxis0.setTickMarksVisible(true);
        assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test26124() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26125() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test26126() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test26127() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test26128() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test26129() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test26130() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test26131() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicStroke basicStroke0 = (BasicStroke) PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
        dateAxis0.setTickMarkStroke(basicStroke0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test27132() throws Throwable {
        NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
        // Undeclared exception!
        try {
            numberAxis3D0.setTickMarkStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test28133() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test28134() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test28135() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test28136() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test28137() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test28138() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test28139() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test29140() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        // Undeclared exception!
        try {
            dateAxis0.setTickMarkPaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test30141() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test30142() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test30143() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test30144() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test30145() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test30146() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test30147() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) dateAxis0);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test31148() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test31149() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test31150() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test31151() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test31152() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test31153() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test31154() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CompassPlot compassPlot0 = new CompassPlot();
        dateAxis0.removeChangeListener(compassPlot0);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test32155() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test32156() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32157() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test32158() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test32159() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test32160() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test32161() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test32162() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
        boolean boolean0 = dateAxis0.hasListener(basicComboBoxEditor_UIResource0);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test33163() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test33164() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test33165() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test33166() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test33167() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test33168() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test33169() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test33170() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        boolean boolean0 = dateAxis0.hasListener(combinedRangeCategoryPlot0);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test34171() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertTrue(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test34172() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertTrue(dateAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test34173() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test34174() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertTrue(dateAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test34175() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test34176() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test34177() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        dateAxis0.setTickMarkStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
        assertTrue(dateAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test35178() throws Throwable {
        SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
        // Undeclared exception!
        try {
            jFreeChart0.createBufferedImage(87, 500);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.SubCategoryAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test36179() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("u_R|{d");
        JFreeChart jFreeChart0 = new JFreeChart("u_R|{d", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
        JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
        Rectangle rectangle0 = jTableHeader0.getHeaderRect(15);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        AxisSpace axisSpace0 = new AxisSpace();
        subCategoryAxis0.reserveSpace(graphics2D0, combinedRangeCategoryPlot0, rectangle0, rectangleEdge0, axisSpace0);
        assertEquals(24.1328125, axisSpace0.getRight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test36180() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("u_R|{d");
        JFreeChart jFreeChart0 = new JFreeChart("u_R|{d", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
        JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
        Rectangle rectangle0 = jTableHeader0.getHeaderRect(15);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        AxisSpace axisSpace0 = new AxisSpace();
        subCategoryAxis0.reserveSpace(graphics2D0, combinedRangeCategoryPlot0, rectangle0, rectangleEdge0, axisSpace0);
        assertFalse(subCategoryAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test37181() throws Throwable {
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        JFreeChart jFreeChart0 = new JFreeChart(fastScatterPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        assertEquals(0, bufferedImage0.getMinX());
    }

    @Test(timeout = 4000)
    public void test38182() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertEquals(490.153487838, axisState0.getCursor(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38183() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38184() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertTrue(numberAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test38185() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test38186() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertTrue(numberAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test38187() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test38188() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        NumberAxis numberAxis0 = new NumberAxis("");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        float[] floatArray0 = new float[7];
        RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
        RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
        Rectangle2D rectangle2D0 = rescaleOp0.getBounds2D(bufferedImage0);
        RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 6, (-5807), (-1), 6, (-1), 15, true, true, false, false, true, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        AxisState axisState0 = numberAxis0.draw(graphics2D0, 467.153487838, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
    }

    @Test(timeout = 4000)
    public void test39189() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test39190() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test39191() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertEquals((-35.91015624), axisState0.getCursor(), 0.01);
    }

    @Test(timeout = 4000)
    public void test39192() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertTrue(cyclicNumberAxis0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test39193() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test39194() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertTrue(cyclicNumberAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test39195() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("ull 'state' arument.");
        CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
        JFreeChart jFreeChart0 = new JFreeChart("G9'*", dateAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainCategoryPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.6072557852786553), "ZOOM_RESET_BOTH");
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 10);
        FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, true);
        Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
        RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
        AxisState axisState0 = cyclicNumberAxis0.draw(graphics2D0, 1.0E-8, rectangle2D0, rectangle2D0, rectangleEdge0, plotRenderingInfo0);
        dateAxis0.drawLabel("Null 'yFormat' argument.", graphics2D0, rectangle2D0, rectangle2D0, (RectangleEdge) null, axisState0, plotRenderingInfo0);
        assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test40196() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test40197() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test40198() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test40199() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertTrue(cyclicNumberAxis0.isVisible());
    }

    @Test(timeout = 4000)
    public void test40200() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertTrue(cyclicNumberAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test40201() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test40202() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
    }

    @Test(timeout = 4000)
    public void test40203() throws Throwable {
        DateAxis dateAxis0 = new DateAxis(")");
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 3.0);
        JFreeChart jFreeChart0 = new JFreeChart(")", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeCategoryPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
        jFreeChart0.createBufferedImage(500, 1354, 10, chartRenderingInfo0);
        assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41204() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis();
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.05, 0.0F, 500, 500);
        StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
        // Undeclared exception!
        try {
            categoryAxis0.draw((Graphics2D) null, 500.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test42205() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeCategoryPlot0);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("SFdE:LLhr");
        Rectangle rectangle0 = new Rectangle(0, (-1789569704));
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(54);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        // Undeclared exception!
        try {
            subCategoryAxis0.draw(graphics2D0, 999, rectangle0, (Rectangle2D) null, rectangleEdge0, plotRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test43206() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        CategoryAxis categoryAxis0 = new CategoryAxis();
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
        StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
        RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge(0);
        // Undeclared exception!
        try {
            categoryAxis0.draw((Graphics2D) null, 0.0, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test44207() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis();
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        // Undeclared exception!
        try {
            categoryAxis0.draw((Graphics2D) null, 0.0F, rectangle2D_Double0, rectangle2D_Double0, (RectangleEdge) null, plotRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.Axis", e);
        }
    }

    @Test(timeout = 4000)
    public void test45208() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test45209() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test45210() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test45211() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test45212() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test45213() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test45214() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test45215() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test46216() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setVisible(false);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test46217() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setVisible(false);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47218() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test47219() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test47220() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test47221() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertTrue(categoryAxis3D0.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test47222() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertTrue(categoryAxis3D0.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test47223() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertFalse(categoryAxis3D0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test47224() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47225() throws Throwable {
        CategoryAxis categoryAxis0 = new CategoryAxis("ZvrD}(Di=I-))D6Z'f");
        CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
        boolean boolean0 = categoryAxis0.equals(categoryAxis3D0);
        assertTrue(categoryAxis3D0.isVisible());
    }

    @Test(timeout = 4000)
    public void test48226() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        assertTrue(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test48227() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test48228() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setLabelFont(dateAxis0.DEFAULT_TICK_LABEL_FONT);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test49229() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setLabelAngle(0.05);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals(0.05, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test49230() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setLabelAngle(0.05);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test50231() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test50232() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test50233() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test50234() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test50235() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test50236() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test50237() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test50238() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setLabelToolTip("hx[6T3w(V$8[?evey}`");
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test51239() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        assertTrue(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test51240() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setAxisLinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test51241() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setAxisLinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test52242() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelsVisible(false);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test52243() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelsVisible(false);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test53244() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickLabelsVisible());
    }

    @Test(timeout = 4000)
    public void test53245() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isAxisLineVisible());
    }

    @Test(timeout = 4000)
    public void test53246() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test53247() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test53248() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test53249() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void test53250() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test53251() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        Font font0 = Font.decode("$~?KeX;");
        dateAxis0.setTickLabelFont(font0);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertTrue(dateAxis1.isVisible());
    }

    @Test(timeout = 4000)
    public void test54252() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        assertTrue(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test54253() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test54254() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test55255() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        assertTrue(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test55256() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test55257() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickLabelInsets(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test56258() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarksVisible(false);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(dateAxis0.isTickMarksVisible());
    }

    @Test(timeout = 4000)
    public void test56259() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        dateAxis0.setTickMarksVisible(false);
        DateAxis dateAxis1 = new DateAxis();
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test57260() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkInsideLength(500.0F);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(500.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test57261() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkInsideLength(500.0F);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test58262() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkOutsideLength(0.8F);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertEquals(0.8F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
    }

    @Test(timeout = 4000)
    public void test58263() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkOutsideLength(0.8F);
        boolean boolean0 = dateAxis0.equals(dateAxis1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test59264() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        assertTrue(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test59265() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(dateAxis1.equals((Object) dateAxis0));
    }

    @Test(timeout = 4000)
    public void test59266() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setTickMarkPaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test60267() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setFixedDimension((-425.9));
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertEquals((-425.9), dateAxis1.getFixedDimension(), 0.01);
    }

    @Test(timeout = 4000)
    public void test60268() throws Throwable {
        DateAxis dateAxis0 = new DateAxis();
        DateAxis dateAxis1 = new DateAxis();
        dateAxis1.setFixedDimension((-425.9));
        boolean boolean0 = dateAxis1.equals(dateAxis0);
        assertFalse(boolean0);
    }
}
