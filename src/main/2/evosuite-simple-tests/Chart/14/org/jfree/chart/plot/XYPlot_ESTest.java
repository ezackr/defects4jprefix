/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:18:05 GMT 2024
 */
package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        Short short0 = new Short((short) 546);
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) short0);
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
        RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
        assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        NumberAxis numberAxis0 = new NumberAxis();
        combinedDomainXYPlot0.setRangeAxis(24, (ValueAxis) numberAxis0);
        assertEquals(25, combinedDomainXYPlot0.getRangeAxisCount());
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setRangeAxisLocation((-1), axisLocation0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires index >= 0.
            //
            verifyException("org.jfree.chart.util.AbstractObjectList", e);
        }
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00310() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00311() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
        Color color0 = (Color) combinedDomainXYPlot0.getDomainZeroBaselinePaint();
        assertEquals(0, color0.getBlue());
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
        Color color0 = (Color) combinedDomainXYPlot0.getDomainZeroBaselinePaint();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00414() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
        Color color0 = (Color) combinedDomainXYPlot0.getDomainZeroBaselinePaint();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00415() throws Throwable {
        NumberAxis numberAxis0 = new NumberAxis();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
        Color color0 = (Color) combinedDomainXYPlot0.getDomainZeroBaselinePaint();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00516() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
    }

    @Test(timeout = 4000)
    public void test00517() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2332), "Z]wbb3qfX<");
        DateAxis dateAxis0 = new DateAxis("Z]wbb3qfX<", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00619() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2332), "Z]wbb3qfX<");
        DateAxis dateAxis0 = new DateAxis("Z]wbb3qfX<", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00620() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2332), "Z]wbb3qfX<");
        DateAxis dateAxis0 = new DateAxis("Z]wbb3qfX<", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00621() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2332), "Z]wbb3qfX<");
        DateAxis dateAxis0 = new DateAxis("Z]wbb3qfX<", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        BasicStroke basicStroke0 = (BasicStroke) combinedRangeXYPlot0.getRangeZeroBaselineStroke();
        assertEquals(2, basicStroke0.getEndCap());
    }

    @Test(timeout = 4000)
    public void test00722() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
        combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00723() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
        combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00724() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
        combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00825() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
        assertNotNull(axisLocation0);
    }

    @Test(timeout = 4000)
    public void test00826() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
        combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00827() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
        combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00828() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
        combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00929() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test00930() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test00931() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01032() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainCrosshairValue(1.7976931348623157E308);
        assertEquals(1.7976931348623157E308, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01133() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        xYPlot0.isRangeCrosshairLockedOnData();
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01234() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
        combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01335() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
        combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01336() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
        combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01437() throws Throwable {
        PeriodAxis periodAxis0 = new PeriodAxis("");
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
        combinedRangeXYPlot0.getRangeAxisCount();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01438() throws Throwable {
        PeriodAxis periodAxis0 = new PeriodAxis("");
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
        combinedRangeXYPlot0.getRangeAxisCount();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01539() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test01540() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01541() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, true);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test01642() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getAnnotations();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01643() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getAnnotations();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test01644() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getAnnotations();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01745() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Locale locale0 = Locale.JAPAN;
        NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
        StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
        CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, false, standardXYZToolTipGenerator0);
        combinedDomainXYPlot0.setRenderer(1166, (XYItemRenderer) candlestickRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getWeight());
    }

    @Test(timeout = 4000)
    public void test01746() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Locale locale0 = Locale.JAPAN;
        NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
        StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
        CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, false, standardXYZToolTipGenerator0);
        combinedDomainXYPlot0.setRenderer(1166, (XYItemRenderer) candlestickRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01747() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Locale locale0 = Locale.JAPAN;
        NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
        StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
        CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, false, standardXYZToolTipGenerator0);
        combinedDomainXYPlot0.setRenderer(1166, (XYItemRenderer) candlestickRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01748() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Locale locale0 = Locale.JAPAN;
        NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
        StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
        CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, false, standardXYZToolTipGenerator0);
        combinedDomainXYPlot0.setRenderer(1166, (XYItemRenderer) candlestickRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test01749() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Locale locale0 = Locale.JAPAN;
        NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
        StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
        CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F, false, standardXYZToolTipGenerator0);
        combinedDomainXYPlot0.setRenderer(1166, (XYItemRenderer) candlestickRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01850() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
        assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
    }

    @Test(timeout = 4000)
    public void test01851() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01852() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01853() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test01954() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
        combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test01955() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
        combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
        assertEquals((-16777216), color0.getRGB());
    }

    @Test(timeout = 4000)
    public void test01956() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeZeroBaselinePaint();
        combinedDomainXYPlot0.setRangeCrosshairPaint(color0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02057() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
        combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
        assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test02058() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
        combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02059() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
        combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02160() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeCrosshairValue(123.89453222253104);
        assertEquals(123.89453222253104, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test02261() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearAnnotations();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02262() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearAnnotations();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02363() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        xYPlot0.setRangeCrosshairVisible(true);
        JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        jFreeChart0.createBufferedImage(284, 500);
        assertTrue(xYPlot0.isRangeCrosshairVisible());
    }

    @Test(timeout = 4000)
    public void test02464() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.add(xYPlot0, 10);
        assertEquals(10, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02465() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.add(xYPlot0, 10);
        assertEquals(1, xYPlot0.getDomainAxisCount());
    }

    @Test(timeout = 4000)
    public void test02566() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getDomainZeroBaselineStroke();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02567() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getDomainZeroBaselineStroke();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02568() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getDomainZeroBaselineStroke();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02669() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1448.362771800717));
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
        LegendItemCollection legendItemCollection0 = cyclicXYItemRenderer0.getLegendItems();
        assertEquals(0, legendItemCollection0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test02770() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.rendererChanged((RendererChangeEvent) null);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02771() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.rendererChanged((RendererChangeEvent) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02772() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.rendererChanged((RendererChangeEvent) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02873() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F);
        combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
        combinedDomainXYPlot0.clearDomainMarkers();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test02874() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F);
        combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
        combinedDomainXYPlot0.clearDomainMarkers();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02975() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test02976() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
    }

    @Test(timeout = 4000)
    public void test03077() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03078() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03079() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03180() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
        combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, false);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03281() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
        combinedDomainXYPlot0.getDomainAxisCount();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03282() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
        combinedDomainXYPlot0.getDomainAxisCount();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03283() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
        combinedDomainXYPlot0.getDomainAxisCount();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03384() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
        ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
        ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        combinedRangeXYPlot0.zoomRangeAxes((-2019.92986), 0.0, plotRenderingInfo0, (Point2D) null);
        assertTrue(chartPanel0.getRefreshBuffer());
    }

    @Test(timeout = 4000)
    public void test03485() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getDomainMarkers((Layer) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03486() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getDomainMarkers((Layer) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03587() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getDomainCrosshairPaint();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03588() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getDomainCrosshairPaint();
        assertEquals(0, color0.getGreen());
    }

    @Test(timeout = 4000)
    public void test03589() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getDomainCrosshairPaint();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03690() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Point point0 = new Point(10, 1653);
        combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (PlotRenderingInfo) null, (Point2D) point0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test03691() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Point point0 = new Point(10, 1653);
        combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (PlotRenderingInfo) null, (Point2D) point0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03692() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Point point0 = new Point(10, 1653);
        combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (PlotRenderingInfo) null, (Point2D) point0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03793() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("@(cL");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
        Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03794() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("@(cL");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
        Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03795() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("@(cL");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
        Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
        assertEquals(0.0, point2D_Double0.y, 0.01);
    }

    @Test(timeout = 4000)
    public void test03796() throws Throwable {
        DateAxis dateAxis0 = new DateAxis("@(cL");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
        Point2D.Double point2D_Double0 = (Point2D.Double) combinedDomainXYPlot0.getQuadrantOrigin();
        assertEquals(0.0, point2D_Double0.x, 0.01);
    }

    @Test(timeout = 4000)
    public void test03897() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        int int0 = combinedDomainXYPlot0.getSeriesCount();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test03898() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        int int0 = combinedDomainXYPlot0.getSeriesCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test03899() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        int int0 = combinedDomainXYPlot0.getSeriesCount();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test038100() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        int int0 = combinedDomainXYPlot0.getSeriesCount();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test039101() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687), (-1449.3398049104687));
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500);
        XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
        xYPlot0.getPlotType();
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test040102() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test041103() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        AxisSpace axisSpace0 = new AxisSpace();
        xYPlot0.setFixedRangeAxisSpace(axisSpace0);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test041104() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        AxisSpace axisSpace0 = new AxisSpace();
        xYPlot0.setFixedRangeAxisSpace(axisSpace0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test041105() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        AxisSpace axisSpace0 = new AxisSpace();
        xYPlot0.setFixedRangeAxisSpace(axisSpace0);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test042106() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
        NumberAxis numberAxis0 = new NumberAxis("Z]wbb3qfX<");
        XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
        int int0 = xYPlot0.getWeight();
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test042107() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
        NumberAxis numberAxis0 = new NumberAxis("Z]wbb3qfX<");
        XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
        int int0 = xYPlot0.getWeight();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test042108() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1205);
        NumberAxis numberAxis0 = new NumberAxis("Z]wbb3qfX<");
        XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, numberAxis0, xYAreaRenderer0);
        int int0 = xYPlot0.getWeight();
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test043109() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeTickBandPaint((Paint) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test043110() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeTickBandPaint((Paint) null);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test043111() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeTickBandPaint((Paint) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test044112() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
        jFreeChart0.createBufferedImage(10, 10);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test045113() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
        combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test045114() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
        combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test046115() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        boolean boolean0 = xYPlot0.isDomainCrosshairLockedOnData();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test047116() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getFixedRangeAxisSpace();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test047117() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.getFixedRangeAxisSpace();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test048118() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        combinedRangeXYPlot0.zoomRangeAxes(2039.18, plotRenderingInfo0, (Point2D) point2D_Double0);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test048119() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        combinedRangeXYPlot0.zoomRangeAxes(2039.18, plotRenderingInfo0, (Point2D) point2D_Double0);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test049120() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getDomainCrosshairStroke();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test049121() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getDomainCrosshairStroke();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test049122() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getDomainCrosshairStroke();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test050123() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        combinedDomainXYPlot0.setOrientation(plotOrientation0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test050124() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        combinedDomainXYPlot0.setOrientation(plotOrientation0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getWeight());
    }

    @Test(timeout = 4000)
    public void test050125() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        combinedDomainXYPlot0.setOrientation(plotOrientation0);
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test051126() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setOrientation((PlotOrientation) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'orientation' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test052127() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
        combinedRangeXYPlot0.setOrientation(plotOrientation0);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test052128() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
        combinedRangeXYPlot0.setOrientation(plotOrientation0);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test053129() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        combinedRangeXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test053130() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        combinedRangeXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test053131() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        combinedRangeXYPlot0.setAxisOffset(dateAxis0.DEFAULT_TICK_LABEL_INSETS);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test054132() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'offset' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test055133() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        xYPlot0.setDomainAxis(1, (ValueAxis) cyclicNumberAxis0);
        JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        jFreeChart0.createBufferedImage(335, 500);
        assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056134() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueAxis[] valueAxisArray0 = new ValueAxis[2];
        combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
        assertEquals(2, combinedDomainXYPlot0.getDomainAxisCount());
    }

    @Test(timeout = 4000)
    public void test057135() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearDomainAxes();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test057136() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearDomainAxes();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test057137() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearDomainAxes();
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test058138() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearDomainAxes();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test058139() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearDomainAxes();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test058140() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearDomainAxes();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test059141() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'location' for index 0 not permitted.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test060142() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0, 10);
        assertEquals(10, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test060143() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0, 10);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test061144() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        xYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test062145() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.clearRangeAxes();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test063146() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearRangeAxes();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test063147() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearRangeAxes();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test063148() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.clearRangeAxes();
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test064149() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        ValueAxis[] valueAxisArray0 = new ValueAxis[9];
        valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
        xYPlot0.setRangeAxes(valueAxisArray0);
        JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        // Undeclared exception!
        try {
            jFreeChart0.createBufferedImage(329, 500);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test065150() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'location' for index 0 not permitted.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test066151() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
        xYPlot0.setDataset(0, (XYDataset) defaultBoxAndWhiskerXYDataset0);
        assertEquals(1, xYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test067152() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDataset(10, (XYDataset) null);
        assertEquals(11, combinedDomainXYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test068153() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        int int0 = xYPlot0.indexOf(defaultXYDataset0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test068154() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        int int0 = xYPlot0.indexOf(defaultXYDataset0);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test068155() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        int int0 = xYPlot0.indexOf(defaultXYDataset0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test069156() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
        Rectangle rectangle0 = new Rectangle(10, 10);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        // Undeclared exception!
        try {
            clusteredXYBarRenderer0.initialise((Graphics2D) null, rectangle0, combinedDomainXYPlot0, (XYDataset) null, plotRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.renderer.xy.XYBarRenderer", e);
        }
    }

    @Test(timeout = 4000)
    public void test070157() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
        xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
        combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
        combinedDomainXYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test070158() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
        xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
        combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
        combinedDomainXYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test071159() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
        combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test071160() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
        combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test071161() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
        combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test072162() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'order' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test073163() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'order' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test074164() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2137, "org.jfree.chart.labels.AbstractXYItemLabelGenerator");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
        combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test074165() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2137, "org.jfree.chart.labels.AbstractXYItemLabelGenerator");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
        combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test074166() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2137, "org.jfree.chart.labels.AbstractXYItemLabelGenerator");
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
        combinedDomainXYPlot0.getRendererForDataset(timeSeriesCollection0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test075167() throws Throwable {
        HistogramDataset histogramDataset0 = new HistogramDataset();
        DateAxis dateAxis0 = new DateAxis((String) null);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, dateAxis0, numberAxis3D0, (XYItemRenderer) null);
        XYBarRenderer xYBarRenderer0 = new XYBarRenderer(1.0E7);
        JFreeChart jFreeChart0 = new JFreeChart("S]", xYBarRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        jFreeChart0.createBufferedImage(500, 36, 10, chartRenderingInfo0);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test075168() throws Throwable {
        HistogramDataset histogramDataset0 = new HistogramDataset();
        DateAxis dateAxis0 = new DateAxis((String) null);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, dateAxis0, numberAxis3D0, (XYItemRenderer) null);
        XYBarRenderer xYBarRenderer0 = new XYBarRenderer(1.0E7);
        JFreeChart jFreeChart0 = new JFreeChart("S]", xYBarRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        jFreeChart0.createBufferedImage(500, 36, 10, chartRenderingInfo0);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test076169() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainGridlinesVisible(true);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test076170() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainGridlinesVisible(true);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test077171() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainGridlinesVisible(false);
        assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
    }

    @Test(timeout = 4000)
    public void test078172() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test079173() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SystemColor systemColor0 = SystemColor.textInactiveText;
        combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test079174() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SystemColor systemColor0 = SystemColor.textInactiveText;
        combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test079175() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SystemColor systemColor0 = SystemColor.textInactiveText;
        combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test080176() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test081177() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlinesVisible(true);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test081178() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlinesVisible(true);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test081179() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlinesVisible(true);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test082180() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test082181() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test082182() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test083183() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test084184() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test085185() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainZeroBaselineStroke(cyclicXYItemRenderer0.DEFAULT_OUTLINE_STROKE);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test086186() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test087187() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeGridlinePaint();
        combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test087188() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeGridlinePaint();
        combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test087189() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) combinedDomainXYPlot0.getRangeGridlinePaint();
        combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
        assertEquals(255, color0.getRed());
    }

    @Test(timeout = 4000)
    public void test088190() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test089191() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        AreaRenderer areaRenderer0 = new AreaRenderer();
        Stroke stroke0 = areaRenderer0.getBaseOutlineStroke();
        combinedDomainXYPlot0.setRangeZeroBaselineStroke(stroke0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test090192() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test091193() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test091194() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test092195() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test093196() throws Throwable {
        Point point0 = new Point(10, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setQuadrantOrigin(point0);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test093197() throws Throwable {
        Point point0 = new Point(10, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setQuadrantOrigin(point0);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test093198() throws Throwable {
        Point point0 = new Point(10, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setQuadrantOrigin(point0);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test094199() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'origin' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test095200() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.getQuadrantPaint((-16));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The index value (-16) should be in the range 0 to 3.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test096201() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        xYPlot0.getQuadrantPaint(2);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test097202() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        // Undeclared exception!
        try {
            xYPlot0.getQuadrantPaint(10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The index value (10) should be in the range 0 to 3.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test098203() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Color color0 = (Color) AbstractRenderer.DEFAULT_OUTLINE_PAINT;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setQuadrantPaint((-439), color0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The index value (-439) should be in the range 0 to 3.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test099204() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setQuadrantPaint(2, (Paint) null);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test099205() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setQuadrantPaint(2, (Paint) null);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test100206() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setQuadrantPaint(93, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The index value (93) should be in the range 0 to 3.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test101207() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0, false);
        combinedRangeXYPlot0.clearDomainMarkers();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test101208() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0, false);
        combinedRangeXYPlot0.clearDomainMarkers();
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test102209() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Layer layer0 = Layer.FOREGROUND;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.addDomainMarker(10, (Marker) null, layer0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'marker' not permitted.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test103210() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(2540, 2540);
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.addDomainMarker(2540, (Marker) intervalMarker0, (Layer) null, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'layer' not permitted.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test104211() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        BasicStroke basicStroke0 = new BasicStroke();
        IntervalMarker intervalMarker0 = new IntervalMarker((-1316.60636575387), (-3894.6), xYPlot0.DEFAULT_CROSSHAIR_PAINT, basicStroke0, xYPlot0.DEFAULT_OUTLINE_PAINT, basicStroke0, 0.0F);
        Layer layer0 = Layer.FOREGROUND;
        xYPlot0.addDomainMarker(29, (Marker) intervalMarker0, layer0, false);
        xYPlot0.addDomainMarker(29, (Marker) intervalMarker0, layer0, false);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test104212() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        BasicStroke basicStroke0 = new BasicStroke();
        IntervalMarker intervalMarker0 = new IntervalMarker((-1316.60636575387), (-3894.6), xYPlot0.DEFAULT_CROSSHAIR_PAINT, basicStroke0, xYPlot0.DEFAULT_OUTLINE_PAINT, basicStroke0, 0.0F);
        Layer layer0 = Layer.FOREGROUND;
        xYPlot0.addDomainMarker(29, (Marker) intervalMarker0, layer0, false);
        xYPlot0.addDomainMarker(29, (Marker) intervalMarker0, layer0, false);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test105213() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Layer layer0 = Layer.BACKGROUND;
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) categoryMarker0, layer0, false);
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) categoryMarker0, layer0, true);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test105214() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Layer layer0 = Layer.BACKGROUND;
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) categoryMarker0, layer0, false);
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) categoryMarker0, layer0, true);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test106215() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 15);
        ValueMarker valueMarker0 = new ValueMarker(0.5F);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
        combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test106216() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(0.5F, 15);
        ValueMarker valueMarker0 = new ValueMarker(0.5F);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
        combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test107217() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test107218() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test107219() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2305), "HiN^CI*");
        DateAxis dateAxis0 = new DateAxis("HiN^CI*", simpleTimeZone0);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
        ValueMarker valueMarker0 = new ValueMarker(688.32824277761);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
        boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker(0, (Marker) valueMarker0, layer0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108220() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Layer layer0 = Layer.BACKGROUND;
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
        combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
        combinedDomainXYPlot0.clearRangeMarkers();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test109221() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Layer layer0 = Layer.FOREGROUND;
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
        combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
        combinedDomainXYPlot0.clearRangeMarkers();
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test110222() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, true);
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test110223() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, true);
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, false);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test111224() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test111225() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test111226() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, (Layer) null);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test112227() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, true);
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test112228() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, true);
        combinedRangeXYPlot0.addRangeMarker(51, (Marker) intervalMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test113229() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.removeRangeMarker((Marker) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'marker' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test114230() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, true);
        boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test114231() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, true);
        boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0, true);
        combinedRangeXYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0, true);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test115232() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addRangeMarker(91, (Marker) intervalMarker0, layer0, true);
        boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(91, (Marker) intervalMarker0, layer0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test115233() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addRangeMarker(91, (Marker) intervalMarker0, layer0, true);
        boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(91, (Marker) intervalMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test115234() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
        Layer layer0 = Layer.BACKGROUND;
        combinedRangeXYPlot0.addRangeMarker(91, (Marker) intervalMarker0, layer0, true);
        boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(91, (Marker) intervalMarker0, layer0, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test116235() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.addAnnotation((XYAnnotation) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'annotation' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test117236() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test117237() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test118238() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'annotation' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test119239() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1047.47591), 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test119240() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1047.47591), 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test119241() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1047.47591), 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test119242() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, (-1047.47591), 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, true);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test120243() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.NaN, 10, 1.0F, 45.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, false);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test120244() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.NaN, 10, 1.0F, 45.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test120245() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(Double.NaN, 10, 1.0F, 45.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
        boolean boolean0 = combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0, false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test121246() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        DefaultCaret defaultCaret0 = new DefaultCaret();
        combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, defaultCaret0, (AxisSpace) null);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test121247() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        DefaultCaret defaultCaret0 = new DefaultCaret();
        combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, defaultCaret0, (AxisSpace) null);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test121248() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        DefaultCaret defaultCaret0 = new DefaultCaret();
        combinedRangeXYPlot0.calculateDomainAxisSpace((Graphics2D) null, defaultCaret0, (AxisSpace) null);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test122249() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.calculateRangeAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test122250() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.calculateRangeAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test122251() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.calculateRangeAxisSpace((Graphics2D) null, (Rectangle2D) null, (AxisSpace) null);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test123252() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
        jFreeChart0.createBufferedImage(10, 10);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test123253() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
        jFreeChart0.createBufferedImage(10, 10);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test124254() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        JFreeChart jFreeChart0 = new JFreeChart("QLdaTL]$?rXr+'@V8", (Font) null, xYPlot0, false);
        jFreeChart0.createBufferedImage(247, 10);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test124255() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        JFreeChart jFreeChart0 = new JFreeChart("QLdaTL]$?rXr+'@V8", (Font) null, xYPlot0, false);
        jFreeChart0.createBufferedImage(247, 10);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test125256() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
        // Undeclared exception!
        try {
            jFreeChart0.createBufferedImage(15, 15, 10, chartRenderingInfo0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test126257() throws Throwable {
        BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.85F, 1.0F, 0.85F, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Map map0 = combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test126258() throws Throwable {
        BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.85F, 1.0F, 0.85F, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Map map0 = combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
        assertEquals(1, map0.size());
    }

    @Test(timeout = 4000)
    public void test126259() throws Throwable {
        BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.85F, 1.0F, 0.85F, 10);
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Map map0 = combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Float0, rectangle2D_Float0, (PlotRenderingInfo) null);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test127260() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        ValueAxis[] valueAxisArray0 = new ValueAxis[9];
        valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
        valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
        xYPlot0.setRangeAxes(valueAxisArray0);
        JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        jFreeChart0.createBufferedImage(329, 500);
        assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127261() throws Throwable {
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.7706614772);
        XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
        HistogramDataset histogramDataset0 = new HistogramDataset();
        XYPlot xYPlot0 = new XYPlot(histogramDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYAreaRenderer0);
        ValueAxis[] valueAxisArray0 = new ValueAxis[9];
        valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
        valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
        xYPlot0.setRangeAxes(valueAxisArray0);
        JFreeChart jFreeChart0 = new JFreeChart((String) null, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        jFreeChart0.createBufferedImage(329, 500);
        assertTrue(xYPlot0.isRangeGridlinesVisible());
    }

    @Test(timeout = 4000)
    public void test128262() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.getDomainAxisForDataset((-9));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index -9 out of bounds.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test129263() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.getDomainAxisForDataset(1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index 1 out of bounds.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test130264() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687));
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
        xYPlot0.setDataset(8, (XYDataset) timeSeriesCollection0);
        xYPlot0.getDomainAxisForDataset(8);
        assertEquals(9, xYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test131265() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.getRangeAxisForDataset((-3631));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index -3631 out of bounds.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test132266() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.getRangeAxisForDataset(10);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index 10 out of bounds.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test133267() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687));
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500);
        XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
        xYPlot0.setDataset(8, (XYDataset) timeSeriesCollection0);
        xYPlot0.getRangeAxisForDataset(3);
        assertEquals(9, xYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test134268() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(2455);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addDomainMarker(2455, (Marker) valueMarker0, layer0, true);
        Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(2455, layer0);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test134269() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(2455);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addDomainMarker(2455, (Marker) valueMarker0, layer0, true);
        Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(2455, layer0);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test134270() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(2455);
        Layer layer0 = Layer.FOREGROUND;
        combinedRangeXYPlot0.addDomainMarker(2455, (Marker) valueMarker0, layer0, true);
        Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(2455, layer0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test135271() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getRangeMarkers((Layer) null);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test135272() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getRangeMarkers((Layer) null);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test135273() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.getRangeMarkers((Layer) null);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test136274() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        Layer layer0 = Layer.FOREGROUND;
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
        Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(0, layer0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test136275() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        Layer layer0 = Layer.FOREGROUND;
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
        Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(0, layer0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test136276() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        Layer layer0 = Layer.FOREGROUND;
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
        Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(0, layer0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test136277() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
        Layer layer0 = Layer.FOREGROUND;
        combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
        Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(0, layer0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test137278() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test138279() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        PolarPlot polarPlot0 = new PolarPlot();
        PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
        combinedRangeXYPlot0.setOrientation(plotOrientation0);
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test139280() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test139281() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test139282() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test140283() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        Line2D.Float line2D_Float0 = new Line2D.Float(10, 1.0F, 0.0F, 10);
        Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, (PlotOrientation) null, (-1608.8123), valueAxis0, valueAxis0.DEFAULT_AXIS_LINE_STROKE, valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test140284() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        Line2D.Float line2D_Float0 = new Line2D.Float(10, 1.0F, 0.0F, 10);
        Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
        DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
        ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D0, (PlotOrientation) null, (-1608.8123), valueAxis0, valueAxis0.DEFAULT_AXIS_LINE_STROKE, valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test141285() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 233.8671875, (String) null);
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test142286() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 233.8671875, (String) null);
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.drawDomainCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test143287() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        TextBox textBox0 = new TextBox("~.)sxFdg");
        Stroke stroke0 = textBox0.getOutlineStroke();
        Color color0 = (Color) FastScatterPlot.DEFAULT_GRIDLINE_PAINT;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 0.7999999999999999, stroke0, color0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.NumberAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test144288() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        combinedDomainXYPlot0.setOrientation(plotOrientation0);
        JFreeChart jFreeChart0 = new JFreeChart("7", cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3020, 2);
        Graphics2D graphics2D0 = bufferedImage0.createGraphics();
        Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double) Plot.DEFAULT_LEGEND_ITEM_BOX;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle2D_Double0, (double) cyclicXYItemRenderer0.ZERO, cyclicXYItemRenderer0.DEFAULT_OUTLINE_STROKE, cyclicXYItemRenderer0.DEFAULT_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test145289() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, 18.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test145290() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, 18.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test145291() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, 18.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test145292() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Float0, 18.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test146293() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 2.0F, numberAxis3D0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test146294() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 2.0F, numberAxis3D0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test147295() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1.0E-8, numberAxis3D0, (Stroke) null, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.axis.NumberAxis", e);
        }
    }

    @Test(timeout = 4000)
    public void test148296() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        xYPlot0.handleClick(10, 10, plotRenderingInfo0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test149297() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
        MockDate mockDate0 = new MockDate(3466, 4, 500, (-278), 10);
        Day day0 = new Day(mockDate0);
        PeriodAxis periodAxis0 = new PeriodAxis("S1gRX.}VYC%6Aa", day0, day0);
        xYPlot0.setDomainAxis(10, (ValueAxis) periodAxis0);
        xYPlot0.setDataset(8, (XYDataset) defaultBoxAndWhiskerXYDataset0);
        assertEquals(9, xYPlot0.getDatasetCount());
    }

    @Test(timeout = 4000)
    public void test150298() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1449.3398049104687), (-1449.3398049104687));
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(500);
        XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, cyclicXYItemRenderer0);
        FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
        xYPlot0.setParent(fastScatterPlot0);
        xYPlot0.setDataset(4, (XYDataset) timeSeriesCollection0);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test151299() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainCrosshairVisible(false);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test151300() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainCrosshairVisible(false);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test152301() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setDomainCrosshairVisible(true);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairVisible());
    }

    @Test(timeout = 4000)
    public void test153302() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test153303() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test153304() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test154305() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        BasicStroke basicStroke0 = (BasicStroke) PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
        combinedDomainXYPlot0.setDomainCrosshairStroke(basicStroke0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test154306() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        BasicStroke basicStroke0 = (BasicStroke) PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
        combinedDomainXYPlot0.setDomainCrosshairStroke(basicStroke0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test155307() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        // Undeclared exception!
        try {
            xYPlot0.setDomainCrosshairStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test156308() throws Throwable {
        LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("U{,oFLxdD");
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
        combinedRangeXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test156309() throws Throwable {
        LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("U{,oFLxdD");
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
        combinedRangeXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test157310() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test158311() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeCrosshairVisible(false);
        assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test158312() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeCrosshairVisible(false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test158313() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setRangeCrosshairVisible(false);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test159314() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test159315() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test160316() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
        assertFalse(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test161317() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setRangeCrosshairVisible(true);
        combinedDomainXYPlot0.setRangeCrosshairValue((double) 2.0F, true);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
    }

    @Test(timeout = 4000)
    public void test162318() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        BasicStroke basicStroke0 = (BasicStroke) FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
        combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test162319() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        BasicStroke basicStroke0 = (BasicStroke) FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
        combinedDomainXYPlot0.setRangeCrosshairStroke(basicStroke0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test163320() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'stroke' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test164321() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'paint' argument.
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test165322() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test165323() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test166324() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test166325() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test166326() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        combinedDomainXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test167327() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.zoomDomainAxes((double) 10, (PlotRenderingInfo) null, (Point2D) null, true);
        assertEquals(1, combinedRangeXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test167328() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        combinedRangeXYPlot0.zoomDomainAxes((double) 10, (PlotRenderingInfo) null, (Point2D) null, true);
        assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test168329() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Point point0 = new Point(10, 10);
        // Undeclared exception!
        try {
            combinedDomainXYPlot0.zoomDomainAxes((double) 10, (PlotRenderingInfo) null, (Point2D) point0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test169330() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        Point point0 = new Point();
        combinedDomainXYPlot0.zoomDomainAxes(2767.9518371531863, 2767.9518371531863, plotRenderingInfo0, (Point2D) point0);
        assertEquals(1, combinedDomainXYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test169331() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        Point point0 = new Point();
        combinedDomainXYPlot0.zoomDomainAxes(2767.9518371531863, 2767.9518371531863, plotRenderingInfo0, (Point2D) point0);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test169332() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        Point point0 = new Point();
        combinedDomainXYPlot0.zoomDomainAxes(2767.9518371531863, 2767.9518371531863, plotRenderingInfo0, (Point2D) point0);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test170333() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 10);
        xYPlot0.zoomDomainAxes(7.2E7, 7.2E7, plotRenderingInfo0, (Point2D) point2D_Float0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test170334() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
        PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
        Point2D.Float point2D_Float0 = new Point2D.Float(0.0F, 10);
        xYPlot0.zoomDomainAxes(7.2E7, 7.2E7, plotRenderingInfo0, (Point2D) point2D_Float0);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test171335() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        Point point0 = new Point(10, 10);
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, (PlotRenderingInfo) null, (Point2D) point0, false);
        assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test172336() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        Point2D.Double point2D_Double0 = new Point2D.Double();
        // Undeclared exception!
        try {
            combinedRangeXYPlot0.zoomRangeAxes(0.0, (PlotRenderingInfo) null, (Point2D) point2D_Double0, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.plot.XYPlot", e);
        }
    }

    @Test(timeout = 4000)
    public void test173337() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        Point2D.Double point2D_Double0 = new Point2D.Double(10, 482.0);
        xYPlot0.zoomRangeAxes((-707.0), (-707.0), plotRenderingInfo0, (Point2D) point2D_Double0);
        assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test173338() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
        PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
        Point2D.Double point2D_Double0 = new Point2D.Double(10, 482.0);
        xYPlot0.zoomRangeAxes((-707.0), (-707.0), plotRenderingInfo0, (Point2D) point2D_Double0);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test174339() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, (ValueAxis) null, (ValueAxis) null, cyclicXYItemRenderer0);
        int int0 = xYPlot0.getSeriesCount();
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test174340() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, (ValueAxis) null, (ValueAxis) null, cyclicXYItemRenderer0);
        int int0 = xYPlot0.getSeriesCount();
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test174341() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, (ValueAxis) null, (ValueAxis) null, cyclicXYItemRenderer0);
        int int0 = xYPlot0.getSeriesCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test175342() throws Throwable {
        DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, numberAxis3D0, numberAxis3D0, (XYItemRenderer) null);
        xYPlot0.getLegendItems();
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test176343() throws Throwable {
        CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
        DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1);
        NumberAxis3D numberAxis3D0 = new NumberAxis3D();
        XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
        JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(691, 500);
        assertEquals(3, bufferedImage0.getTransparency());
    }

    @Test(timeout = 4000)
    public void test177344() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test177345() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test177346() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getWeight());
    }

    @Test(timeout = 4000)
    public void test177347() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test178348() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        boolean boolean0 = xYPlot0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test178349() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        boolean boolean0 = xYPlot0.equals((Object) null);
        assertEquals(1, xYPlot0.getWeight());
    }

    @Test(timeout = 4000)
    public void test178350() throws Throwable {
        XYPlot xYPlot0 = new XYPlot();
        boolean boolean0 = xYPlot0.equals((Object) null);
        assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test179351() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ThermometerPlot thermometerPlot0 = new ThermometerPlot();
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getWeight());
    }

    @Test(timeout = 4000)
    public void test179352() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ThermometerPlot thermometerPlot0 = new ThermometerPlot();
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test179353() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        ThermometerPlot thermometerPlot0 = new ThermometerPlot();
        ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test180354() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test180355() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
        combinedDomainXYPlot1.setDomainAxisLocation(10, axisLocation0, false);
        boolean boolean0 = combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test181356() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        combinedDomainXYPlot1.setRangeGridlinesVisible(false);
        boolean boolean0 = combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
        assertFalse(combinedDomainXYPlot1.isRangeGridlinesVisible());
    }

    @Test(timeout = 4000)
    public void test181357() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        combinedDomainXYPlot1.setRangeGridlinesVisible(false);
        boolean boolean0 = combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test182358() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        combinedDomainXYPlot1.setDomainCrosshairLockedOnData(false);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test182359() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        combinedDomainXYPlot1.setDomainCrosshairLockedOnData(false);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test183360() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test183361() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("$-W'R,@l4");
        combinedDomainXYPlot1.setRangeAxis((ValueAxis) logarithmicAxis0);
        combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
    }

    @Test(timeout = 4000)
    public void test184362() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test184363() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        combinedDomainXYPlot1.setDomainGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test184364() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        combinedDomainXYPlot1.setDomainGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test185365() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test185366() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        SystemColor systemColor0 = SystemColor.menuText;
        combinedDomainXYPlot1.setRangeGridlinePaint(systemColor0);
        combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test186367() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test186368() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot) combinedDomainXYPlot0.clone();
        CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
        combinedDomainXYPlot1.addRangeMarker((Marker) categoryMarker0);
        combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
    }

    @Test(timeout = 4000)
    public void test187369() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        assertTrue(combinedDomainXYPlot1.equals((Object) combinedDomainXYPlot0));
    }

    @Test(timeout = 4000)
    public void test187370() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
        combinedDomainXYPlot1.setDomainTickBandPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
        boolean boolean0 = combinedDomainXYPlot0.equals(combinedDomainXYPlot1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test188371() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
        assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
    }

    @Test(timeout = 4000)
    public void test188372() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
        assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
    }

    @Test(timeout = 4000)
    public void test188373() throws Throwable {
        CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
        CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot) combinedRangeXYPlot0.clone();
        assertEquals(1, combinedRangeXYPlot1.getWeight());
    }

    @Test(timeout = 4000)
    public void test189374() throws Throwable {
        CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
        SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(10);
        combinedDomainXYPlot0.setDataset(4, (XYDataset) simpleHistogramDataset0);
        combinedDomainXYPlot0.clone();
        assertEquals(5, combinedDomainXYPlot0.getDatasetCount());
    }
}
