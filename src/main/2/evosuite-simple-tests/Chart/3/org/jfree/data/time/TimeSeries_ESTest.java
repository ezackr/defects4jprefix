/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 20:50:30 GMT 2024
 */
package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.setDomainDescription("]%w+2\"}Z[+");
        assertEquals("]%w+2\"}Z[+", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
        timeSeries0.addAndOrUpdate(timeSeries0);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertNotSame(timeSeries1, timeSeries0);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals("Time", timeSeries1.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals("Value", timeSeries1.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test0313() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test0314() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test0315() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getItems();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getTimePeriodClass();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test0625() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0626() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test0627() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMaxY();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.setRangeDescription("");
        assertEquals("", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test0833() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test0835() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        double double0 = timeSeries0.getMinY();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        timeSeries0.setMaximumItemCount(0);
        assertEquals(0, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test1037() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        // Undeclared exception!
        try {
            timeSeries0.add(timeSeriesDataItem0, true);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test1138() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.getNextTimePeriod();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1239() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.setMaximumItemCount((-839));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Negative 'maximum' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test1340() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test1341() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 0);
        assertEquals(0, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test1442() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.setMaximumItemAge((-835L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Negative 'periods' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test1543() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test1544() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1545() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1546() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test1547() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test1548() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getDataItem((RegularTimePeriod) hour0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test1649() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1650() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test1651() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1652() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test1653() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test1654() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.getRawDataItem(second0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test1755() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 59);
        timeSeries0.getRawDataItem(second0);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1856() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (Number) 0);
        timeSeries0.getTimePeriods();
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1957() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.add((RegularTimePeriod) second0, (double) 0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        assertEquals(1, timeSeries1.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1958() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.add((RegularTimePeriod) second0, (double) 0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        assertEquals(0.0, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2059() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.delete((RegularTimePeriod) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'period' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test2160() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test2161() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test2162() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2163() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test2164() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2165() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.getValue((RegularTimePeriod) quarter0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test2266() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
        timeSeries0.getValue((RegularTimePeriod) second0);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test2367() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.add((TimeSeriesDataItem) null, true);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'item' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test2468() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        Class<TimeSeries> class0 = TimeSeries.class;
        timeSeries0.timePeriodClass = class0;
        // Undeclared exception!
        try {
            timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test2569() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.update(regularTimePeriod0, (Number) 4);
        assertEquals(2, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test2670() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 0, false);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test2771() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
        timeSeries0.update((RegularTimePeriod) quarter0, (Number) 4);
        assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2872() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.update((RegularTimePeriod) second0, (Number) 0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // There is no existing value for the specified 'period'.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test2973() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        timeSeries0.update(0, (Number) null);
        timeSeries0.update(0, (Number) 59);
        assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3074() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test3075() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3076() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test3077() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3078() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test3079() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.update(0, (Number) null);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test3180() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
        timeSeries0.addOrUpdate(regularTimePeriod1, (double) 0);
        timeSeries0.update(0, (Number) 4);
        assertEquals(3, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test3281() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
        TimeSeries timeSeries1 = new TimeSeries(quarter0);
        timeSeries1.addAndOrUpdate(timeSeries0);
        assertEquals(1, timeSeries1.getItemCount());
    }

    @Test(timeout = 4000)
    public void test3382() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'period' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test3483() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 59);
        Week week0 = new Week();
        // Undeclared exception!
        try {
            timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test3584() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        assertNotNull(timeSeriesDataItem0);
    }

    @Test(timeout = 4000)
    public void test3585() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test3586() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test3587() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3588() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test3589() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test3590() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) null);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3691() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
        timeSeriesDataItem0.setValue(59);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3792() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1);
        assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3893() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 59);
        assertEquals(0, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test3994() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 4);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.setMaximumItemAge(4);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test4095() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 4);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.setMaximumItemAge(1);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test4196() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test4197() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test4198() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test4199() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test41100() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test41101() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test42102() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 59);
        timeSeries0.removeAgedItems((long) 0, true);
        timeSeries0.removeAgedItems((long) 0, true);
        assertEquals(59.0, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test43103() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 4);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter1, (double) 1);
        timeSeries0.setMaximumItemAge(4);
        assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test43104() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 4);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter1, (double) 1);
        timeSeries0.setMaximumItemAge(4);
        timeSeries0.removeAgedItems((long) 4, true);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test44105() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 4);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter1, (double) 1);
        timeSeries0.setMaximumItemAge(4);
        timeSeries0.removeAgedItems((long) 1, false);
        assertEquals(0, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test45106() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test45107() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test45108() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test45109() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test45110() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test45111() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.clear();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test46112() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 59);
        timeSeries0.clear();
        assertEquals(0, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test47113() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test47114() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test47115() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test47116() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test47117() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test47118() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.delete((RegularTimePeriod) quarter0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test48119() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(second0, (Number) null);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        timeSeries0.delete((RegularTimePeriod) second0);
        assertEquals(0, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test49120() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.delete(regularTimePeriod0);
        assertEquals(1.0, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test50121() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.delete(59, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires start <= end.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test51122() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1);
        timeSeries0.delete(1, 1, false);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test52123() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test52124() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals("Value", timeSeries1.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test52125() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test52126() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test52127() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals("Time", timeSeries1.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test52128() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test52129() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(59, 59);
        assertNotSame(timeSeries1, timeSeries0);
    }

    @Test(timeout = 4000)
    public void test53130() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.createCopy((-2), (-2));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires start >= 0.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test54131() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.createCopy(59, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires start <= end.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test55132() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
        assertEquals(59.0, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test56133() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'start' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test57134() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        // Undeclared exception!
        try {
            timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'end' argument.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test58135() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        RegularTimePeriod regularTimePeriod0 = quarter0.previous();
        // Undeclared exception!
        try {
            timeSeries0.createCopy((RegularTimePeriod) quarter0, regularTimePeriod0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires start on or before end.
            //
            verifyException("org.jfree.data.time.TimeSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test59136() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
        assertEquals(4.0, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test60137() throws Throwable {
        Quarter quarter0 = new Quarter();
        Quarter quarter1 = new Quarter(1, 1);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 4);
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
        assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61138() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test61139() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61140() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test61141() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test61142() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test61143() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test61144() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test62145() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test62146() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test62147() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test62148() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test62149() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test62150() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test62151() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        boolean boolean0 = timeSeries0.equals(quarter0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test63152() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals("Tim&", timeSeries1.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test63153() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test63154() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals("Tim&", timeSeries1.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test63155() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test63156() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test63157() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test63158() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test63159() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test63160() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Tim&", "Tim&");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test64161() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test64162() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test64163() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test64164() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test64165() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test64166() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0, "Time", "Time");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test65167() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(59.0, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test65168() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test66169() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test66170() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.setMaximumItemAge(0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(timeSeries1.equals((Object) timeSeries0));
    }

    @Test(timeout = 4000)
    public void test66171() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.setMaximumItemAge(0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test67172() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.setMaximumItemCount(0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(0, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test67173() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.setMaximumItemCount(0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test68174() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
        timeSeries1.data = (List) arrayList0;
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertEquals(1, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test68175() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        ArrayList<Panel> arrayList0 = new ArrayList<Panel>();
        timeSeries1.data = (List) arrayList0;
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test69176() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.add((RegularTimePeriod) second0, (double) 59);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertEquals(59.0, timeSeries1.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test69177() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        TimeSeries timeSeries1 = new TimeSeries(second0);
        timeSeries1.add((RegularTimePeriod) second0, (double) 59);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test70178() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, (String) null);
        timeSeries0.hashCode();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test70179() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, (String) null);
        timeSeries0.hashCode();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test70180() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, (String) null);
        timeSeries0.hashCode();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test70181() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, (String) null, (String) null);
        timeSeries0.hashCode();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test71182() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test71183() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals("Time", timeSeries0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test71184() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
    }

    @Test(timeout = 4000)
    public void test71185() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test71186() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals("Value", timeSeries0.getRangeDescription());
    }

    @Test(timeout = 4000)
    public void test71187() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.hashCode();
        assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test72188() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.hashCode();
        assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test73189() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1);
        timeSeries0.hashCode();
        assertEquals(2, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test74190() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
        RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 1);
        timeSeries0.add(regularTimePeriod1, (double) 4);
        timeSeries0.hashCode();
        assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void test75191() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, Double.NaN);
        timeSeries0.delete((RegularTimePeriod) second0);
        assertEquals(0, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test76192() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, Double.NaN);
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(0);
        timeSeriesDataItem0.setValue(59);
        timeSeries0.delete((RegularTimePeriod) second0);
        assertEquals(0, timeSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test77193() throws Throwable {
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        timeSeries0.addOrUpdate(regularTimePeriod0, (double) 4);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, Double.NaN);
        assertEquals(2, timeSeries0.getItemCount());
    }
}
