/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:05:35 GMT 2024
 */
package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JScrollPane;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.StrokeBorder;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ShapeUtilities_ESTest extends ShapeUtilities_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Shape shape0 = ShapeUtilities.createUpTriangle(0);
        Path2D.Double path2D_Double0 = (Path2D.Double) ShapeUtilities.rotateShape(shape0, 0, 0, 0);
        assertEquals(1, path2D_Double0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultCaret defaultCaret0 = new DefaultCaret();
        Point2D.Double point2D_Double0 = (Point2D.Double) ShapeUtilities.getPointInRectangle(0, 0, defaultCaret0);
        assertEquals(0.0, point2D_Double0.x, 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        DefaultCaret defaultCaret0 = new DefaultCaret();
        Point2D.Double point2D_Double0 = (Point2D.Double) ShapeUtilities.getPointInRectangle(0, 0, defaultCaret0);
        assertEquals(0.0, point2D_Double0.y, 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createDiamond(0.0F);
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createDownTriangle(0);
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
        // Undeclared exception!
        try {
            ShapeUtilities.drawRotatedShape((Graphics2D) null, rectangle2D_Double0, 0.0, 0.0F, 0.0F);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jfree.chart.util.ShapeUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createDiagonalCross(0.0F, 0.0F);
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createRegularCross((-985.702F), (-985.702F));
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Polygon polygon0 = new Polygon();
        Shape shape0 = ShapeUtilities.clone(polygon0);
        assertNull(shape0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        Shape shape0 = ShapeUtilities.clone(arc2D_Float0);
        assertNotSame(arc2D_Float0, shape0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Arc2D.Double arc2D_Double0 = new Arc2D.Double(0);
        Shape shape0 = ShapeUtilities.createUpTriangle(0);
        boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, shape0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Line2D.Double line2D_Double0 = new Line2D.Double((-2230.0F), (-2230.0F), (-2230.0F), Double.NaN);
        boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        Line2D.Float line2D_Float0 = new Line2D.Float((-498.8F), (-498.8F), (-498.8F), (-498.8F));
        boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) generalPath0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(9.348484F, 9.348484F, 9.348484F, 9.348484F);
        boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(9.34848F, 9.34848F, 9.34848F, 9.34848F);
        boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Polygon polygon0 = new Polygon();
        boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Polygon polygon0 = new Polygon();
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) rectangle2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        boolean boolean0 = ShapeUtilities.equal((Line2D) null, (Line2D) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Line2D.Double line2D_Double0 = new Line2D.Double();
        boolean boolean0 = ShapeUtilities.equal((Line2D) null, (Line2D) line2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        Line2D.Float line2D_Float0 = new Line2D.Float();
        boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, (Line2D) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Line2D.Float line2D_Float0 = new Line2D.Float();
        Line2D.Double line2D_Double0 = new Line2D.Double(0.0F, (-2.147483648E9), 0.0F, 0.0F);
        boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, (Line2D) line2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Line2D.Double line2D_Double0 = new Line2D.Double();
        boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
        boolean boolean0 = ShapeUtilities.equal((Ellipse2D) null, (Ellipse2D) ellipse2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        boolean boolean0 = ShapeUtilities.equal((Ellipse2D) null, (Ellipse2D) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(2.0F, (-1.0F), (-132.0F), 2.0F);
        boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
        Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(0.0F, 0.0F, 0.5, 0.0F);
        boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        boolean boolean0 = ShapeUtilities.equal((Arc2D) null, (Arc2D) arc2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        boolean boolean0 = ShapeUtilities.equal((Arc2D) null, (Arc2D) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float(0);
        Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.0F, 0, 0.0F, 1.2346916732732693, 0.0F, 0.0F, 0);
        boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        DefaultCaret defaultCaret0 = new DefaultCaret();
        Arc2D.Double arc2D_Double0 = new Arc2D.Double(defaultCaret0, 0, 0, 0);
        Arc2D.Float arc2D_Float0 = new Arc2D.Float(defaultCaret0, (-2144216545), (-1258.6F), 0);
        boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        Rectangle rectangle0 = generalPath0.getBounds();
        Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 0.0F, 1393.5, 0);
        boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        Arc2D.Double arc2D_Double0 = new Arc2D.Double();
        Arc2D.Float arc2D_Float0 = new Arc2D.Float(1);
        boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        boolean boolean0 = ShapeUtilities.equal((Polygon) null, (Polygon) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Polygon polygon0 = new Polygon();
        boolean boolean0 = ShapeUtilities.equal((Polygon) null, polygon0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        Polygon polygon0 = new Polygon();
        boolean boolean0 = ShapeUtilities.equal(polygon0, (Polygon) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        Polygon polygon0 = new Polygon();
        Polygon polygon1 = new Polygon(polygon0.xpoints, polygon0.ypoints, 0);
        polygon1.addPoint(0, 0);
        boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        Polygon polygon0 = new Polygon();
        Polygon polygon1 = new Polygon(polygon0.xpoints, polygon0.ypoints, 0);
        boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        Polygon polygon0 = new Polygon();
        int[] intArray0 = new int[8];
        polygon0.ypoints = intArray0;
        Polygon polygon1 = new Polygon();
        boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        boolean boolean0 = ShapeUtilities.equal((GeneralPath) null, (GeneralPath) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        boolean boolean0 = ShapeUtilities.equal((GeneralPath) null, generalPath0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        boolean boolean0 = ShapeUtilities.equal(generalPath0, (GeneralPath) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        GeneralPath generalPath0 = new GeneralPath();
        GeneralPath generalPath1 = new GeneralPath(0);
        boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        Line2D.Double line2D_Double0 = new Line2D.Double();
        GeneralPath generalPath0 = new GeneralPath(line2D_Double0);
        boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        Arc2D.Double arc2D_Double0 = new Arc2D.Double();
        Path2D.Double path2D_Double0 = (Path2D.Double) ShapeUtilities.createTranslatedShape((Shape) arc2D_Double0, 0.0, 0.0);
        assertEquals(1, path2D_Double0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        // Undeclared exception!
        try {
            ShapeUtilities.createTranslatedShape((Shape) null, (-4001.5490549454), (-4001.5490549454));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'shape' argument.
            //
            verifyException("org.jfree.chart.util.ShapeUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        Arc2D.Float arc2D_Float0 = new Arc2D.Float();
        RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
        Path2D.Double path2D_Double0 = (Path2D.Double) ShapeUtilities.createTranslatedShape((Shape) arc2D_Float0, rectangleAnchor0, (double) 0.0F, (double) 0.0F);
        assertEquals(1, path2D_Double0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        // Undeclared exception!
        try {
            ShapeUtilities.createTranslatedShape((Shape) null, (RectangleAnchor) null, (double) 0.0F, (double) 0.0F);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'shape' argument.
            //
            verifyException("org.jfree.chart.util.ShapeUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        Line2D.Double line2D_Double0 = new Line2D.Double();
        // Undeclared exception!
        try {
            ShapeUtilities.createTranslatedShape((Shape) line2D_Double0, (RectangleAnchor) null, 0.0, (-1576.7835693359375));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'anchor' argument.
            //
            verifyException("org.jfree.chart.util.ShapeUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        Shape shape0 = ShapeUtilities.rotateShape((Shape) null, 1.5, 0.0F, 0.0F);
        assertNull(shape0);
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        Line2D.Float line2D_Float0 = new Line2D.Float();
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createLineRegion(line2D_Float0, 0.0F);
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        Line2D.Float line2D_Float0 = new Line2D.Float();
        line2D_Float0.setLine(1716.0, (double) 1716.0F, (double) 0.0F, 1716.0);
        GeneralPath generalPath0 = (GeneralPath) ShapeUtilities.createLineRegion(line2D_Float0, 0.0F);
        assertEquals(1, generalPath0.getWindingRule());
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        Rectangle rectangle0 = new Rectangle(6, 6, 3707, 3707);
        Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3707, 0.0F, 6, 0.0);
        boolean boolean0 = ShapeUtilities.contains(rectangle2D_Double0, rectangle0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        Polygon polygon0 = new Polygon();
        Rectangle2D rectangle2D0 = polygon0.getBounds2D();
        Rectangle2D rectangle2D1 = rectangle2D0.getFrame();
        boolean boolean0 = ShapeUtilities.contains(rectangle2D0, rectangle2D1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        DefaultCaret defaultCaret0 = new DefaultCaret();
        rectangle2D_Float0.y = (float) 6;
        Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(defaultCaret0);
        boolean boolean0 = ShapeUtilities.contains(rectangle2D0, defaultCaret0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        Rectangle rectangle0 = new Rectangle(6, 6, 6, 6);
        Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
        boolean boolean0 = ShapeUtilities.contains(rectangle2D0, rectangle0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        Polygon polygon0 = new Polygon();
        Rectangle2D rectangle2D0 = polygon0.getBounds2D();
        Rectangle rectangle0 = new Rectangle(0, 0, 0, 366);
        Rectangle2D rectangle2D1 = rectangle0.getFrame();
        boolean boolean0 = ShapeUtilities.contains(rectangle2D0, rectangle2D1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        JScrollPane jScrollPane0 = new JScrollPane();
        Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
        boolean boolean0 = ShapeUtilities.intersects(rectangle0, rectangle0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        BasicStroke basicStroke0 = new BasicStroke(0.0F, 0, 0);
        Color color0 = Color.BLACK;
        StrokeBorder strokeBorder0 = new StrokeBorder(basicStroke0, color0);
        Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) null, (Border) strokeBorder0, 0, 0, 0, (-2146313827));
        boolean boolean0 = ShapeUtilities.intersects(rectangle0, rectangle2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        rectangle2D_Float0.height = (-635.9F);
        boolean boolean0 = ShapeUtilities.intersects(rectangle2D_Float0, rectangle2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        Line2D.Double line2D_Double0 = new Line2D.Double((-596.9), 0.0F, (-2.0), 0.0F);
        Rectangle rectangle0 = line2D_Double0.getBounds();
        boolean boolean0 = ShapeUtilities.intersects(rectangle0, rectangle2D_Float0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
        boolean boolean0 = ShapeUtilities.intersects(rectangle2D_Float0, rectangle2D_Float0);
        assertTrue(boolean0);
    }
}
