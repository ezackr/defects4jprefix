/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 21:29:56 GMT 2024
 */
package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DefaultKeyedValues_ESTest extends DefaultKeyedValues_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Integer integer0 = new Integer(1013);
        defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
        Object object0 = defaultKeyedValues0.clone();
        boolean boolean0 = defaultKeyedValues0.equals(object0);
        assertNotSame(object0, defaultKeyedValues0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Integer integer0 = new Integer(1013);
        defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
        Object object0 = defaultKeyedValues0.clone();
        boolean boolean0 = defaultKeyedValues0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Float float0 = new Float(0.0F);
        // Undeclared exception!
        try {
            defaultKeyedValues0.insertValue(1, (Comparable) float0, 1570.669317736234);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 'position' out of bounds.
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) 0);
        defaultKeyedValues0.setValue((Comparable) double0, (double) 0);
        Number number0 = defaultKeyedValues0.getValue((Comparable) double0);
        assertEquals(0.0, number0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        List list0 = defaultKeyedValues0.getKeys();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        // Undeclared exception!
        try {
            defaultKeyedValues0.removeValue((Comparable) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'key' argument.
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Float float0 = new Float(0.0F);
        defaultKeyedValues0.addValue((Comparable) float0, (double) 0.0F);
        // Undeclared exception!
        try {
            defaultKeyedValues0.insertValue(1, (Comparable) float0, 1570.669317736234);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 1, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        // Undeclared exception!
        try {
            defaultKeyedValues0.getValue((Comparable) 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Key not found: 0
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        // Undeclared exception!
        try {
            defaultKeyedValues0.addValue((Comparable) null, 2009.5);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'key' argument.
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Double double0 = Double.valueOf((double) (-21));
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        // Undeclared exception!
        try {
            defaultKeyedValues0.insertValue((-21), (Comparable) double0, (Number) double0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 'position' out of bounds.
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        // Undeclared exception!
        try {
            defaultKeyedValues0.insertValue(0, (Comparable) null, (double) 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Null 'key' argument.
            //
            verifyException("org.jfree.data.DefaultKeyedValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Double double0 = Double.valueOf((double) 0);
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.setValue((Comparable) double0, (Number) double0);
        defaultKeyedValues0.insertValue(0, (Comparable) double0, (Number) double0);
        assertEquals(1, defaultKeyedValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Double double0 = Double.valueOf((double) 0);
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.addValue((Comparable) double0, (Number) double0);
        defaultKeyedValues0.removeValue((Comparable) double0);
        assertEquals(1, defaultKeyedValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Short short0 = Short.valueOf((short) (byte) 0);
        defaultKeyedValues0.setValue((Comparable) short0, (Number) short0);
        Byte byte0 = new Byte((byte) 0);
        defaultKeyedValues0.insertValue((int) (byte) 0, (Comparable) byte0, (double) (byte) 0);
        defaultKeyedValues0.removeValue((Comparable) byte0);
        assertEquals(1, defaultKeyedValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.removeValue((Comparable) 1);
        assertEquals(0, defaultKeyedValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.setValue((Comparable) 0, (double) 0);
        SortOrder sortOrder0 = SortOrder.ASCENDING;
        defaultKeyedValues0.sortByKeys(sortOrder0);
        assertEquals(1, defaultKeyedValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        boolean boolean0 = defaultKeyedValues0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) (-11));
        defaultKeyedValues0.setValue((Comparable) double0, (double) (-11));
        DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) (-11));
        defaultKeyedValues0.setValue((Comparable) double0, (double) (-11));
        DefaultKeyedValues defaultKeyedValues1 = new DefaultKeyedValues();
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) 0);
        Integer integer0 = new Integer(1013);
        defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
        defaultKeyedValues0.setValue((Comparable) double0, (double) 0);
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        assertTrue(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) 0);
        Integer integer0 = new Integer(1013);
        defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
        defaultKeyedValues0.setValue((Comparable) double0, (double) 0);
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        SortOrder sortOrder0 = SortOrder.ASCENDING;
        defaultKeyedValues1.sortByValues(sortOrder0);
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) 0);
        Integer integer0 = new Integer(1013);
        defaultKeyedValues0.setValue((Comparable) integer0, (Number) integer0);
        defaultKeyedValues0.setValue((Comparable) double0, (double) 0);
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        SortOrder sortOrder0 = SortOrder.ASCENDING;
        defaultKeyedValues1.sortByValues(sortOrder0);
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        Double double0 = Double.valueOf((double) 0);
        defaultKeyedValues0.setValue((Comparable) double0, 0.0);
        defaultKeyedValues1.insertValue(0, (Comparable) double0, (Number) null);
        boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
        assertEquals(1, defaultKeyedValues1.getItemCount());
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        Double double0 = Double.valueOf((double) 0);
        defaultKeyedValues0.setValue((Comparable) double0, 0.0);
        defaultKeyedValues1.insertValue(0, (Comparable) double0, (Number) null);
        boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        Double double0 = Double.valueOf((double) 0);
        defaultKeyedValues1.insertValue(0, (Comparable) double0, (Number) null);
        defaultKeyedValues0.addValue((Comparable) double0, (Number) null);
        boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
        assertEquals(1, defaultKeyedValues1.getItemCount());
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        Double double0 = Double.valueOf((double) 0);
        defaultKeyedValues1.insertValue(0, (Comparable) double0, (Number) null);
        defaultKeyedValues0.addValue((Comparable) double0, (Number) null);
        boolean boolean0 = defaultKeyedValues1.equals(defaultKeyedValues0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) (-11));
        defaultKeyedValues0.setValue((Comparable) double0, (double) (-11));
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        assertTrue(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) (-11));
        defaultKeyedValues0.setValue((Comparable) double0, (double) (-11));
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        defaultKeyedValues1.setValue((Comparable) double0, 1540.6401294);
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        Double double0 = Double.valueOf((double) (-11));
        defaultKeyedValues0.setValue((Comparable) double0, (double) (-11));
        DefaultKeyedValues defaultKeyedValues1 = (DefaultKeyedValues) defaultKeyedValues0.clone();
        defaultKeyedValues1.setValue((Comparable) double0, 1540.6401294);
        boolean boolean0 = defaultKeyedValues0.equals(defaultKeyedValues1);
        assertFalse(defaultKeyedValues1.equals((Object) defaultKeyedValues0));
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.hashCode();
    }
}
