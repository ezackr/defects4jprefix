/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:33:52 GMT 2024
 */
package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
        assertFalse(orderedMapIterator0.hasPrevious());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("iz");
        AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "(");
        patriciaTrie0.put("(", sortedMap0);
        assertEquals(1, sortedMap0.size());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("iz");
        AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "(");
        patriciaTrie0.put("(", sortedMap0);
        AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>(abstractMap_SimpleImmutableEntry0, "iz", 80);
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key=Trie[1]={\n  Entry(key=( [10], value={(=(this Map)}, parent=ROOT, left=ROOT, right=( [10], predecessor=( [10])\n}\n=( [80], value=iz, parent=null, left=Trie[1]={\n  Entry(key=( [10], value={(=(this Map)}, parent=ROOT, left=ROOT, right=( [10], predecessor=( [10])\n}\n=( [80], right=null, predecessor=Trie[1]={\n  Entry(key=( [10], value={(=(this Map)}, parent=ROOT, left=ROOT, right=( [10], predecessor=( [10])\n}\n=( [80])", string0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
        SortedMap<String, Comparable<Object>> sortedMap0 = patriciaTrie0.tailMap("K'f\"p8zTQRUn");
        assertTrue(sortedMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        Comparator<? super String> comparator0 = patriciaTrie0.comparator();
        assertNotNull(comparator0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("d", "d");
        assertTrue(sortedMap0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        // Undeclared exception!
        try {
            patriciaTrie0.lastKey();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        patriciaTrie0.clear();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Collection<Integer> collection0 = patriciaTrie0.values();
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(collection0, patriciaTrie0, (-3450));
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key=[] [-3450], value=Trie[0]={\n}\n, parent=null, left=[] [-3450], right=null, predecessor=[] [-3450])", string0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("*$$E-w7MjR}Qz1Y-+P", "*$$E-w7MjR}Qz1Y-+P");
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("*$$E-w7MjR}Qz1Y-+P");
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, "*$$E-w7MjR}Qz1Y-+P", 1);
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key={*$$E-w7MjR}Qz1Y-+P=*$$E-w7MjR}Qz1Y-+P} [1], value=*$$E-w7MjR}Qz1Y-+P, parent=null, left={*$$E-w7MjR}Qz1Y-+P=*$$E-w7MjR}Qz1Y-+P} [1], right=null, predecessor={*$$E-w7MjR}Qz1Y-+P=*$$E-w7MjR}Qz1Y-+P} [1])", string0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X T9pRvj]0\"#T1w", "X T9pRvj]0\"#T1w");
        Set<String> set0 = patriciaTrie0.keySet();
        AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "[m", (-1));
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals(1, set0.size());
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X T9pRvj]0\"#T1w", "X T9pRvj]0\"#T1w");
        Set<String> set0 = patriciaTrie0.keySet();
        AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "[m", (-1));
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("RootEntry(key=[X T9pRvj]0\"#T1w] [-1], value=[m, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X T9pRvj]0\"#T1w", "X T9pRvj]0\"#T1w");
        Set<String> set0 = patriciaTrie0.keySet();
        AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(set0, "[m", (-1));
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertTrue(set0.contains("X T9pRvj]0\"#T1w"));
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.putIfAbsent("#lx?K}\"g,(SX.5_K}", "#lx?K}\"g,(SX.5_K}");
        Object object0 = patriciaTrie0.selectValue("#lx?K}\"g,(SX.5_K}");
        assertEquals("#lx?K}\"g,(SX.5_K}", object0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
        // Undeclared exception!
        try {
            patriciaTrie1.put((String) null, patriciaTrie0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // Key cannot be null
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        String string0 = patriciaTrie0.remove((Object) "n");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("", "");
        Object object0 = patriciaTrie0.put("", "");
        assertEquals("", object0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer(1368);
        Integer integer1 = patriciaTrie0.put("}h&r$", integer0);
        Integer integer2 = patriciaTrie0.put("}h&r$", integer1);
        assertEquals(1368, (int) integer2);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("}h$", "n");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("n");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("H:", "H:");
        patriciaTrie0.putIfAbsent("}?_l", "}?_l");
        patriciaTrie0.put("s", "}?_l");
        BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(biFunction0).apply(anyString(), any());
        Object object0 = patriciaTrie0.computeIfPresent("}?_l", biFunction0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        String string0 = patriciaTrie0.selectKey("#lx?K}\"g,(SX.5_K}");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("Jb^nS=|X3>C|l:", "#lx?K}\"g,(SX.5_K}");
        String string0 = patriciaTrie0.selectKey("#lx?K}\"g,(SX.5_K}");
        assertEquals("Jb^nS=|X3>C|l:", string0);
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = patriciaTrie0.selectValue("");
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("Jb^nS=|X3>C|l:", "#lx?K}\"g,(SX.5_K}");
        Object object0 = patriciaTrie0.put("#lx?K}\"g,(SX.5_K}", "#lx?K}\"g,(SX.5_K}");
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("Jb^nS=|X3>C|l:", "#lx?K}\"g,(SX.5_K}");
        Object object0 = patriciaTrie0.put("#lx?K}\"g,(SX.5_K}", "#lx?K}\"g,(SX.5_K}");
        String string0 = patriciaTrie0.selectKey("#lx?K}\"g,(SX.5_K}");
        assertEquals("#lx?K}\"g,(SX.5_K}", string0);
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("Jb^nS=|X3>C|l:", "#lx?K}\"g,(SX.5_K}");
        Object object0 = patriciaTrie0.put("#lx?K}\"g,(SX.5_K}", "#lx?K}\"g,(SX.5_K}");
        String string0 = patriciaTrie0.selectKey("#lx?K}\"g,(SX.5_K}");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        boolean boolean0 = patriciaTrie0.containsKey("[jFXj$t.It");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        boolean boolean0 = patriciaTrie0.remove((Object) null, (Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
        boolean boolean0 = patriciaTrie0.containsKey("[jFXj$t.It");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("#lx?K}\"g,(SX.5_K}", "#lx?K}\"g,(SX.5_K}");
        boolean boolean0 = patriciaTrie0.containsKey("#lx?K}\"g,(SX.5_K}");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.keySet();
        Set<String> set0 = patriciaTrie0.keySet();
        assertEquals(0, set0.size());
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        Collection<Object> collection0 = patriciaTrie0.values();
        Collection<Object> collection1 = patriciaTrie0.values();
        assertSame(collection1, collection0);
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        Object object0 = patriciaTrie0.remove((Object) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("}h$", "n");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        String string0 = patriciaTrie0.remove((Object) "");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        String string0 = patriciaTrie0.remove((Object) "");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.putIfAbsent("}?_l", "}?_l");
        patriciaTrie0.put("s", "}?_l");
        BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(biFunction0).apply(anyString(), any());
        Object object0 = patriciaTrie0.computeIfPresent("}?_l", biFunction0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3136() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer((-4149));
        patriciaTrie0.put("R}b", integer0);
        PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
        patriciaTrie1.put("yq[L?E)1.hI|", integer0);
        patriciaTrie1.put("", integer0);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("Key is out of range: ");
        // Undeclared exception!
        try {
            patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test3237() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.putIfAbsent("}?_l", "}?_l");
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", (Object) null);
        patriciaTrie0.put("s", "}?_l");
        BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(biFunction0).apply(any(), any());
        Object object0 = patriciaTrie0.computeIfPresent("}?_l", biFunction0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3338() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X T9pRAj]0\"#TKw", "X T9pRAj]0\"#TKw");
        patriciaTrie0.put("[m", (Object) null);
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("N ");
        assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X T9pRAj]0\"#TKw", "X T9pRAj]0\"#TKw");
        patriciaTrie0.put("[m", (Object) null);
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("N ");
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
        PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
        Integer integer0 = new Integer((-3397));
        AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(patriciaTrie0, integer0);
        AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>((String) null, abstractMap_SimpleEntry0, 2);
        AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>) null, abstractPatriciaTrie_TrieEntry0);
        assertNull(abstractPatriciaTrie_TrieEntry1);
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
        PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
        Integer integer0 = new Integer((-3397));
        AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(patriciaTrie0, integer0);
        AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>((String) null, abstractMap_SimpleEntry0, 2);
        AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>) null, abstractPatriciaTrie_TrieEntry0);
        assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("nXp%?Qrc\"CY\"1z(n*", "X_9p vj2m]0\"#[1w^", 7);
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 7);
        patriciaTrie0.put("X_9p vj2m]0\"#[1w^", "nXp%?Qrc\"CY\"1z(n*");
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("X_9p vj2m]0\"#[1w^", patriciaTrie0, 1);
        assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("nXp%?Qrc\"CY\"1z(n*", "X_9p vj2m]0\"#[1w^", 7);
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 7);
        patriciaTrie0.put("X_9p vj2m]0\"#[1w^", "nXp%?Qrc\"CY\"1z(n*");
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("X_9p vj2m]0\"#[1w^", patriciaTrie0, 1);
        String string0 = abstractPatriciaTrie_TrieEntry1.toString();
        assertEquals("Entry(key=X_9p vj2m]0\"#[1w^ [1], value=Trie[1]={\n  Entry(key=X_9p vj2m]0\"#[1w^ [10], value=nXp%?Qrc\"CY\"1z(n*, parent=nXp%?Qrc\"CY\"1z(n* [7], left=X_9p vj2m]0\"#[1w^ [10], right=nXp%?Qrc\"CY\"1z(n* [7], predecessor=X_9p vj2m]0\"#[1w^ [10])\n  Entry(key=nXp%?Qrc\"CY\"1z(n* [7], value=X_9p vj2m]0\"#[1w^, parent=ROOT, left=X_9p vj2m]0\"#[1w^ [10], right=ROOT, predecessor=X_9p vj2m]0\"#[1w^ [10])\n}\n, parent=null, left=X_9p vj2m]0\"#[1w^ [1], right=null, predecessor=X_9p vj2m]0\"#[1w^ [1])", string0);
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("nXp%?Qrc\"CY\"1z(n*", "must have a from or to!", 7);
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 7);
        // Undeclared exception!
        patriciaTrie0.ceilingEntry("}\n");
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer((-2946));
        patriciaTrie0.put("#lx?K}\"g,(SX.5_K}", integer0);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(">1_");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test3846() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("40", (String) null);
        hashMap0.put("*$$E-w7MjR]zY-+N", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("40", (String) null);
        hashMap0.put("*$$E-w7MjR]zY-+N", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertNull(abstractPatriciaTrie_TrieEntry1);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("40", (String) null);
        hashMap0.put("*$$E-w7MjR]zY-+N", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3849() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("40", (String) null);
        hashMap0.put("*$$E-w7MjR]zY-+N", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("40", (String) null);
        hashMap0.put("*$$E-w7MjR]zY-+N", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap");
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("K'f\"p8zTQRUn", "*CR");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("a (|S`sp)U)(");
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("K'f\"p8zTQRUn", "*CR");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("a (|S`sp)U)(");
        patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("K'f\"p8zTQRUn", "*CR");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("a (|S`sp)U)(");
        patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("\"5JQKPT8>pC.:5he");
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("\"5JQKPT8>pC.:5he");
        assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4056() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("\"5JQKPT8>pC.:5he");
        assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test4157() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("qa`Q)nyT+", "qa`Q)nyT+");
        String string0 = patriciaTrie0.firstKey();
        assertEquals("qa`Q)nyT+", string0);
    }

    @Test(timeout = 4000)
    public void test4258() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        // Undeclared exception!
        try {
            patriciaTrie0.firstKey();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test4359() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("K'f\"p8zT[QRUy7", "K'f\"p8zT[QRUy7");
        String string0 = patriciaTrie0.lastKey();
        assertEquals("K'f\"p8zT[QRUy7", string0);
    }

    @Test(timeout = 4000)
    public void test4460() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        String string0 = patriciaTrie0.nextKey("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4561() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        // Undeclared exception!
        try {
            patriciaTrie0.nextKey((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test4662() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("", "");
        String string0 = patriciaTrie0.nextKey("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4763() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("", "");
        patriciaTrie0.put("V", (Object) null);
        String string0 = patriciaTrie0.nextKey("");
        assertEquals("V", string0);
    }

    @Test(timeout = 4000)
    public void test4864() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test4965() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        // Undeclared exception!
        try {
            patriciaTrie0.previousKey((String) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test5066() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test5167() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("nZGJz|d#:", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test5168() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("nZGJz|d#:", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
        assertEquals("nZGJz|d#:", string0);
    }

    @Test(timeout = 4000)
    public void test5269() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
        assertEquals(0, sortedMap0.size());
    }

    @Test(timeout = 4000)
    public void test5370() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test5471() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer(1368);
        patriciaTrie0.put("", integer0);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test5572() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer(1368);
        Integer integer1 = patriciaTrie0.put("", integer0);
        patriciaTrie0.put("}h&r$", integer1);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test5573() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer(1368);
        Integer integer1 = patriciaTrie0.put("", integer0);
        patriciaTrie0.put("}h&r$", integer1);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
        assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
    }

    @Test(timeout = 4000)
    public void test5674() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.putIfAbsent("}h&r$", "}h&r$");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("}h&r$");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test5775() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test5876() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("", "");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
        assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test5977() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("iz");
        AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(patriciaTrie0, "iz");
        patriciaTrie0.put("iz", sortedMap0);
        AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, String>(abstractMap_SimpleImmutableEntry0, "iz", 80);
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key=Trie[1]={\n  Entry(key=iz [9], value={}, parent=ROOT, left=ROOT, right=iz [9], predecessor=iz [9])\n}\n=iz [80], value=iz, parent=null, left=Trie[1]={\n  Entry(key=iz [9], value={}, parent=ROOT, left=ROOT, right=iz [9], predecessor=iz [9])\n}\n=iz [80], right=null, predecessor=Trie[1]={\n  Entry(key=iz [9], value={}, parent=ROOT, left=ROOT, right=iz [9], predecessor=iz [9])\n}\n=iz [80])", string0);
    }

    @Test(timeout = 4000)
    public void test6078() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test6179() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        patriciaTrie0.put(">1_", (Integer) null);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(">1_");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test6280() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("c");
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test6381() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test6482() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
        assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test6583() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        patriciaTrie0.put("c", (Integer) null);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("c");
        assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6684() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.putIfAbsent("}h&r$", "}h&r$");
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("}h&r$", 0, 0);
        assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test6785() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        patriciaTrie0.put("X_9 vj2m]0\"#[1w^", "X_9 vj2m]0\"#[1w^");
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("9k");
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, "X_9 vj2m]0\"#[1w^", 20);
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key={} [20], value=X_9 vj2m]0\"#[1w^, parent=null, left={} [20], right=null, predecessor={} [20])", string0);
    }

    @Test(timeout = 4000)
    public void test6886() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("C&", (-2372), (-2372));
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test6987() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
        patriciaTrie1.put("", patriciaTrie0);
        // Undeclared exception!
        try {
            patriciaTrie1.subtree("", (-1), (-1));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test7088() throws Throwable {
        PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
        Integer integer0 = new Integer(378);
        AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "?H");
        patriciaTrie0.put("", abstractMap_SimpleEntry0);
        AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("", 1, 1);
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test7189() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("j[9");
        patriciaTrie0.put("5yXZyLCV<h4I", sortedMap0);
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 240);
        assertEquals(0, sortedMap0.size());
    }

    @Test(timeout = 4000)
    public void test7190() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("j[9");
        patriciaTrie0.put("5yXZyLCV<h4I", sortedMap0);
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, (Object) null, 240);
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key={} [240], value=null, parent=null, left={} [240], right=null, predecessor={} [240])", string0);
    }

    @Test(timeout = 4000)
    public void test7291() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        Integer integer0 = new Integer(32768);
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("SU", integer0, 32768);
        abstractPatriciaTrie_TrieEntry0.predecessor = null;
        // Undeclared exception!
        try {
            patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have come from somewhere!
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
        }
    }

    @Test(timeout = 4000)
    public void test7392() throws Throwable {
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 352);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
        assertNull(abstractPatriciaTrie_TrieEntry1);
    }

    @Test(timeout = 4000)
    public void test7493() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put(" -> ", " -> ");
        hashMap0.put("?|rA,", "?|rA,");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(":D]");
        assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
    }

    @Test(timeout = 4000)
    public void test7494() throws Throwable {
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put(" -> ", " -> ");
        hashMap0.put("?|rA,", "?|rA,");
        PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
        AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(":D]");
        assertNotNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test7595() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        Integer integer0 = new Integer(2893);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 2893);
        AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
        assertNull(abstractPatriciaTrie_TrieEntry1);
    }

    @Test(timeout = 4000)
    public void test7696() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        assertNull(abstractPatriciaTrie_TrieEntry0);
    }

    @Test(timeout = 4000)
    public void test7797() throws Throwable {
        boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7898() throws Throwable {
        Integer integer0 = new Integer((-1936));
        Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
        AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-1936));
        Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
        AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable1, 64);
        abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
        assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
    }

    @Test(timeout = 4000)
    public void test7899() throws Throwable {
        Integer integer0 = new Integer((-1936));
        Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
        AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-1936));
        Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
        AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable1, 64);
        abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
        boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test79100() throws Throwable {
        Integer integer0 = new Integer(32768);
        AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-2));
        abstractPatriciaTrie_TrieEntry0.left = null;
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key=32768 [-2], value=32768, parent=null, left=null, right=null, predecessor=32768 [-2])", string0);
    }

    @Test(timeout = 4000)
    public void test80101() throws Throwable {
        PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
        AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, "*$$E-w7MjR}Qz1Y-+P", 1);
        abstractPatriciaTrie_TrieEntry0.predecessor = null;
        String string0 = abstractPatriciaTrie_TrieEntry0.toString();
        assertEquals("Entry(key=Trie[0]={\n}\n [1], value=*$$E-w7MjR}Qz1Y-+P, parent=null, left=Trie[0]={\n}\n [1], right=null, )", string0);
    }

    @Test(timeout = 4000)
    public void test81102() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        // Undeclared exception!
        try {
            patriciaTrie0.headMap((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // must have a from or to!
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test82103() throws Throwable {
        PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
        // Undeclared exception!
        try {
            patriciaTrie0.subMap("FW}l", "2.IOrl'");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // fromKey > toKey
            //
            verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
        }
    }
}
