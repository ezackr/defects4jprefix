/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:21:03 GMT 2024
 */
package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.validation.ClassValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        String string0 = writeableCommandLineImpl0.getProperty("Passes properties and values to the application");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getOptionTriggers();
        assertTrue(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty("Passes properties and values to the application", "Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Set set0 = writeableCommandLineImpl0.getProperties();
        assertEquals(0, set0.size());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getOptions();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getNormalised();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getValues("-D");
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        ClassValidator classValidator0 = new ClassValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Passes properties and values to the application", "Passes properties and values to the application", (-2143), (-2143), ':', ':', classValidator0, "Passes properties and values to the application", linkedList0, (-2143));
        Boolean boolean0 = Boolean.FALSE;
        writeableCommandLineImpl0.addValue(argumentImpl0, boolean0);
        assertEquals(':', argumentImpl0.getSubsequentSeparator());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        // Undeclared exception!
        try {
            writeableCommandLineImpl0.addSwitch(propertyOption0, false);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Switch already set.
            //
            verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.hasOption("-D");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
        List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue(propertyOption0, propertyOption0);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
        assertNotNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = writeableCommandLineImpl0.getSwitch("Passes properties and values to the application");
        assertNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "Passes properties and values to the application", "Passes properties and values to the application");
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "Passes properties and values to the application", "-D");
        assertFalse(propertyOption0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "Passes properties and values to the application", "-D");
        String string0 = writeableCommandLineImpl0.getProperty((Option) propertyOption0, "Passes properties and values to the application", "-D");
        assertEquals("-D", string0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, "Passes properties and values to the application", "-D");
        Set set0 = writeableCommandLineImpl0.getProperties((Option) propertyOption0);
        assertFalse(set0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Passes properties and values to the application");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("RV7H", "RV7H", 192);
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue((Option) null, "Passes properties and values to the application");
        List list0 = writeableCommandLineImpl0.getValues("Passes properties and values to the application");
        WriteableCommandLineImpl writeableCommandLineImpl1 = new WriteableCommandLineImpl(propertyOption0, list0);
        String string0 = writeableCommandLineImpl1.toString();
        assertEquals("\"Passes properties and values to the application\"", string0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption("H=", "H=", 192);
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.addValue((Option) null, "-D");
        List list0 = writeableCommandLineImpl0.getValues("Passes properties and values to the application");
        writeableCommandLineImpl0.addValue((Option) null, propertyOption0);
        WriteableCommandLineImpl writeableCommandLineImpl1 = new WriteableCommandLineImpl(propertyOption0, list0);
        // Undeclared exception!
        try {
            writeableCommandLineImpl1.toString();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.apache.commons.cli2.option.PropertyOption cannot be cast to java.lang.String
            //
            verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PropertyOption propertyOption0 = new PropertyOption();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
        assertEquals("-D", propertyOption0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        Boolean boolean0 = Boolean.valueOf("Passes properties and values to the application");
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        assertEquals("-D", propertyOption0.getPreferredName());
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        PropertyOption propertyOption0 = new PropertyOption();
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
        assertEquals(68, propertyOption0.getId());
    }
}
