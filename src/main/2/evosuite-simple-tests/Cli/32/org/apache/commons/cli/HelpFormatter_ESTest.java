/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:12:29 GMT 2024
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix("cmdLineSyntax not provided");
        assertEquals("cmdLineSyntax not provided", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator("?,Awg");
        assertEquals("?,Awg", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("-");
        assertEquals("-", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0520() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0524() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0525() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(1);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0627() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName(" ");
        assertEquals(" ", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0728() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("\n");
        assertEquals("\n", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("yz7~!L", options0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("yz7~!L", options0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0931() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0932() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0933() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0934() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0937() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0938() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1040() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(1);
        assertEquals(1, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("7P[(Xo6h1hJ|Gd)/cU");
        assertEquals("7P[(Xo6h1hJ|Gd)/cU", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1243() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1244() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1245() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1246() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1247() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) null, 58, "-", "-", options0, 1075, (-2), "-");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding(74);
        assertEquals(74, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1552() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(" | ", " | ", options0, " | ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1653() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1654() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1655() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1656() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1657() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1658() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test1659() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("\n", options0, false);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test1866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1971() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1973() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1974() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1975() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1976() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string0);
    }

    @Test(timeout = 4000)
    public void test1977() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1978() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2081() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test2082() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2083() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test2084() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test2085() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2086() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test2189() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2190() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2191() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2192() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2193() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2194() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test2295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2297() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2298() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2299() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test22100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test22101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test22102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test23103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(74, (String) null, " ", options0, " ");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test24104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp(3, "", "--", options0, "--");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test25105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("c", true, "c");
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Option option1 = new Option("$NNZG", "");
        optionGroup1.addOption(option1);
        Options options1 = options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("line.separator", "", options1, "org.apache.commons.cli.Option", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test25106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("c", true, "c");
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Option option1 = new Option("$NNZG", "");
        optionGroup1.addOption(option1);
        Options options1 = options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("line.separator", "", options1, "org.apache.commons.cli.Option", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test25107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("c", true, "c");
        OptionGroup optionGroup0 = new OptionGroup();
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Option option1 = new Option("$NNZG", "");
        optionGroup1.addOption(option1);
        Options options1 = options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("line.separator", "", options1, "org.apache.commons.cli.Option", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test26108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", true, " ");
        optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.setRequired(true);
        helpFormatter0.printHelp("yz7~!L", "yz7~!L", options1, "yz7~!L", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test26109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", true, " ");
        optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup0);
        optionGroup0.setRequired(true);
        helpFormatter0.printHelp("yz7~!L", "yz7~!L", options1, "yz7~!L", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test27110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.addOption((String) null, "org.apache.commons.cli.AlreadySelectedException", true, "arg");
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException", true);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test27111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.addOption((String) null, "org.apache.commons.cli.AlreadySelectedException", true, "arg");
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test28112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("gI", true, " ");
        Options options2 = options1.addOption("", "--", true, "\n");
        helpFormatter0.printHelp("--", "\n", options2, "", false);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test28113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("gI", true, " ");
        Options options2 = options1.addOption("", "--", true, "\n");
        helpFormatter0.printHelp("--", "\n", options2, "", false);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test29114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        Options options0 = new Options();
        Options options1 = options0.addOption((String) null, "usage: ", false, (String) null);
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1208, 1);
        assertEquals(35, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test30115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "--", true, "\n");
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
        // Undeclared exception!
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 0);
    }

    @Test(timeout = 4000)
    public void test31116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer(" ");
        // Undeclared exception!
        try {
            helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "Illegal option name '");
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test32117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test32118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test32119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test32120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test32121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test32122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test32123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test32124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test32125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test33126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ");
        assertEquals(0, stringBuffer1.length());
    }

    @Test(timeout = 4000)
    public void test33127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test33128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test33129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test33130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, " ");
        assertEquals("arg", helpFormatter0.getArgName());
    }
}
