/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:45:12 GMT 2024
 */
package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "!8B", "!8B", 1, 1, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(1, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(listIterator0).hasNext();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "!8B", "!8B", 1, 1, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(1, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "Argument.missing.values", 6837, 1910, true);
        groupImpl0.getAnonymous();
        assertEquals(6837, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "Argument.missing.values", 6837, 1910, true);
        groupImpl0.getAnonymous();
        assertEquals(1910, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
        assertEquals(91, int0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
        assertEquals(91, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Unexpected 2dK7j!21Y9#@- `g S while processing 2dK7j!21Y9#@- `g S
            //
            verifyException("org.apache.commons.cli2.option.GroupImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DKb|+B*}G/7%D>T.]1F", "DKb|+B*}G/7%D>T.]1F", 3, 3, false);
        groupImpl0.findOption("DKb|+B*}G/7%D>T.]1F");
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DKb|+B*}G/7%D>T.]1F", "DKb|+B*}G/7%D>T.]1F", 3, 3, false);
        groupImpl0.findOption("DKb|+B*}G/7%D>T.]1F");
        assertEquals(3, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("i?gdK8b/{oJ ", "i?gdK8b/{oJ ", (-2218), 68, '=', '=', (Validator) null, "i?gdK8b/{oJ ", linkedList0, 37);
        linkedList0.push(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        groupImpl0.toString();
        assertFalse(linkedList0.contains(argumentImpl0));
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("i?gdK8b/{oJ ", "i?gdK8b/{oJ ", (-2218), 68, '=', '=', (Validator) null, "i?gdK8b/{oJ ", linkedList0, 37);
        linkedList0.push(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        groupImpl0.toString();
        assertEquals(842, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertEquals(97, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertEquals(97, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, false);
        DefaultOption defaultOption0 = new DefaultOption("(", "(", false, "(", "(", linkedHashSet0, (Set) null, false, (Argument) null, groupImpl0, 1825);
        linkedList0.add(defaultOption0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
        boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "(");
        assertTrue(linkedList0.contains(defaultOption0));
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, false);
        DefaultOption defaultOption0 = new DefaultOption("(", "(", false, "(", "(", linkedHashSet0, (Set) null, false, (Argument) null, groupImpl0, 1825);
        linkedList0.add(defaultOption0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
        boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "(");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        assertTrue(linkedList1.contains(propertyOption0));
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "-D", (-4288));
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        assertEquals(1, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "-D", (-4288));
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals((-725), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1021() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertEquals((-725), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
        assertFalse(linkedList0.contains(argumentImpl0));
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        FileValidator fileValidator0 = new FileValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("!8B", "!8B", 1, 1, ')', ')', fileValidator0, "!8B", linkedList0, 1);
        linkedList0.add(argumentImpl0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("!8B").when(listIterator0).next();
        doReturn("!8B").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "!8B", "!8B", 1, 1, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertFalse(linkedList0.contains(argumentImpl0));
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        FileValidator fileValidator0 = new FileValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("!8B", "!8B", 1, 1, ')', ')', fileValidator0, "!8B", linkedList0, 1);
        linkedList0.add(argumentImpl0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("!8B").when(listIterator0).next();
        doReturn("!8B").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "!8B", "!8B", 1, 1, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals(1, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument;too.many.vUlues", "Argument;too.many.vUlues", (-870), (-870), true);
        PropertyOption propertyOption0 = new PropertyOption("o?z022wa0<HTA", "", (-1830));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("o?z022wa0<HTA");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals((-870), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument;too.many.vUlues", "Argument;too.many.vUlues", (-870), (-870), true);
        PropertyOption propertyOption0 = new PropertyOption("o?z022wa0<HTA", "", (-1830));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("o?z022wa0<HTA");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertEquals((-870), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1329() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument;too.many.vUlues", "Argument;too.many.vUlues", (-870), (-870), true);
        PropertyOption propertyOption0 = new PropertyOption("o?z022wa0<HTA", "", (-1830));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("o?z022wa0<HTA");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        assertTrue(listIterator0.hasNext());
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Misming.option", "Misming.option", 322, 2147483645, '`', '`', (Validator) null, "Misming.option", linkedList0, 124);
        linkedList0.add(argumentImpl0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false, false, false).when(listIterator0).hasNext();
        doReturn("Misming.option", (Object) null, (Object) null, (Object) null, (Object) null).when(listIterator0).next();
        doReturn("Misming.option", (Object) null).when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", 322, 322, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        // Undeclared exception!
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 41, 41, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Missing option Unexpected.token
            //
            verifyException("org.apache.commons.cli2.option.GroupImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1632() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        assertFalse(groupImpl0.isRequired());
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        assertEquals((-848), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test1634() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        assertEquals((-848), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test1735() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "kYk", "9<iME\nW^T", (-2596), 1882, false);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        // Undeclared exception!
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1836() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        UrlValidator urlValidator0 = new UrlValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", (-1), (-1), 'g', 'g', urlValidator0, " ", linkedList0, 181);
        linkedList0.offerLast(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " ", " ", 0, (-1), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        // Undeclared exception!
        try {
            groupImpl0.validate(writeableCommandLineImpl0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: -1
            //
            verifyException("java.util.Collections$EmptyList", e);
        }
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2888), (-4282), true);
        linkedList1.add(groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "Switch.no.disabledPrefix", (-4282), 1458, true);
        String string0 = groupImpl1.toString();
        assertEquals(1, linkedList1.size());
    }

    @Test(timeout = 4000)
    public void test1938() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2888), (-4282), true);
        linkedList1.add(groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList1, "", "Switch.no.disabledPrefix", (-4282), 1458, true);
        String string0 = groupImpl1.toString();
        assertEquals("[ ([ ()])]", string0);
    }

    @Test(timeout = 4000)
    public void test2039() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        assertEquals(94, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2040() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        assertEquals(94, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2041() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        assertTrue(groupImpl0.isRequired());
    }

    @Test(timeout = 4000)
    public void test2142() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-4288), (-1121), true);
        String string0 = groupImpl0.toString();
        assertTrue(linkedList0.contains(propertyOption0));
    }

    @Test(timeout = 4000)
    public void test2143() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-4288), (-1121), true);
        String string0 = groupImpl0.toString();
        assertEquals("[ (-D<property>=<value>|-D<property>=<value>)]", string0);
    }

    @Test(timeout = 4000)
    public void test2244() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-1131), linkedHashSet0, (Comparator) null);
        assertEquals(2590, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2245() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-1131), linkedHashSet0, (Comparator) null);
        assertEquals(2590, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2246() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-1131), linkedHashSet0, (Comparator) null);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2347() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-2137), displaySetting0.ALL, (Comparator) null);
        assertEquals(2590, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2348() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-2137), displaySetting0.ALL, (Comparator) null);
        assertEquals(2590, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2349() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 2590, 2590, true);
        List list0 = groupImpl0.helpLines((-2137), displaySetting0.ALL, (Comparator) null);
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2450() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "|", "|", (-3408), (-3408), false);
        LinkedHashSet<DisplaySetting> linkedHashSet0 = new LinkedHashSet<DisplaySetting>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Command command0 = new Command("|", "2`Fc* g.su*A7MM{hH", linkedHashSet0, false, (Argument) null, groupImpl0, 540);
        linkedList0.add(command0);
        Comparator<SourceDestArgument> comparator0 = (Comparator<SourceDestArgument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        // Undeclared exception!
        groupImpl0.helpLines(32, displaySetting0.ALL, comparator0);
    }

    @Test(timeout = 4000)
    public void test2551() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("i?gdK8b/{oJ ", "i?gdK8b/{oJ ", (-2218), 68, '=', '=', (Validator) null, "i?gdK8b/{oJ ", linkedList0, 37);
        linkedList0.push(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-1131), displaySetting0.ALL, comparator0);
        assertFalse(linkedList0.contains(argumentImpl0));
    }

    @Test(timeout = 4000)
    public void test2552() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("i?gdK8b/{oJ ", "i?gdK8b/{oJ ", (-2218), 68, '=', '=', (Validator) null, "i?gdK8b/{oJ ", linkedList0, 37);
        linkedList0.push(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-1131), displaySetting0.ALL, comparator0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test2653() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
        assertNotNull(option0);
    }

    @Test(timeout = 4000)
    public void test2654() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
        assertEquals(1859, groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2655() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
        assertEquals(1859, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2756() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", (-1584), (-1584), false);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
        assertEquals((-1584), groupImpl0.getMaximum());
    }

    @Test(timeout = 4000)
    public void test2757() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", (-1584), (-1584), false);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
        assertEquals((-1584), groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2758() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", (-1584), (-1584), false);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
        assertEquals("[Misming.option ()]", string0);
    }

    @Test(timeout = 4000)
    public void test2859() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", 2399, 2399, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test2860() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", 2399, 2399, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals(2399, groupImpl0.getMinimum());
    }

    @Test(timeout = 4000)
    public void test2961() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertFalse(linkedList0.contains(argumentImpl0));
    }

    @Test(timeout = 4000)
    public void test2962() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        assertEquals(0, linkedList0.size());
    }
}
