/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:19:19 GMT 2024
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Option_ESTest extends Option_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Option option0 = new Option("e", "e");
        option0.setValueSeparator('a');
        option0.setArgs((-2));
        option0.addValueForProcessing("Illegal option name '");
        assertEquals('a', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.getDescription();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Option option0 = new Option("", "");
        option0.getArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Option option0 = new Option("", "");
        option0.getArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setOptionalArg(true);
        boolean boolean0 = option0.acceptsArg();
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setOptionalArg(true);
        boolean boolean0 = option0.acceptsArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setRequired(true);
        assertTrue(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Option option0 = new Option("U", "U");
        Class<Object> class0 = Object.class;
        option0.setType(class0);
        String string0 = option0.toString();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Option option0 = new Option("U", "U");
        Class<Object> class0 = Object.class;
        option0.setType(class0);
        String string0 = option0.toString();
        assertEquals("[ option: U  :: U :: class java.lang.Object ]", string0);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.isRequired();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Option option0 = new Option("", false, "");
        option0.getValuesList();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Option option0 = new Option("", false, "");
        option0.getValuesList();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getLongOpt();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        Option option0 = new Option("eis", true, "eis");
        int int0 = option0.getId();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Option option0 = new Option("eis", true, "eis");
        int int0 = option0.getId();
        assertTrue(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        Option option0 = new Option("eis", true, "eis");
        int int0 = option0.getId();
        assertEquals(101, int0);
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        Option option0 = new Option("", "");
        // Undeclared exception!
        try {
            option0.addValue("");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Option option0 = new Option("eiU", "eiU");
        option0.getType();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        Option option0 = new Option("eiU", "eiU");
        option0.getType();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setDescription((String) null);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1322() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        Option option0 = new Option("", "");
        option0.getOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        Option option0 = new Option("", "");
        option0.getOpt();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        int int0 = option0.getArgs();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test1627() throws Throwable {
        Option option0 = new Option("e", "e");
        option0.clearValues();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        Option option0 = new Option("e", "e");
        option0.clearValues();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.getKey();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1830() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.hasLongOpt();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.hasLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        Option option0 = new Option("", "", false, "");
        boolean boolean0 = option0.hasLongOpt();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1933() throws Throwable {
        Option option0 = new Option("", "", false, "");
        boolean boolean0 = option0.hasLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2034() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2035() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.hasArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2136() throws Throwable {
        Option option0 = new Option("4", "4");
        option0.setArgName("4");
        boolean boolean0 = option0.hasArgName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2237() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setArgs(63);
        option0.toString();
        assertEquals(63, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test2339() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setArgs((-2));
        String string0 = option0.toString();
        assertEquals("[ option: null [ARG...] :: null ]", string0);
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        option0.addValueForProcessing((String) null);
        // Undeclared exception!
        try {
            option0.addValueForProcessing((String) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot add value, list full.
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test2541() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        // Undeclared exception!
        try {
            option0.addValueForProcessing((String) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // NO_ARGS_ALLOWED
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.setValueSeparator('e');
        option0.addValueForProcessing("eiU");
        assertEquals('e', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.addValueForProcessing("eiU");
        option0.getValue("eiU");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test2744() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.addValueForProcessing("eiU");
        option0.getValue("eiU");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2845() throws Throwable {
        Option option0 = new Option("eiU", false, "eiU");
        String string0 = option0.getValue("eiU");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2846() throws Throwable {
        Option option0 = new Option("eiU", false, "eiU");
        String string0 = option0.getValue("eiU");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2847() throws Throwable {
        Option option0 = new Option("eiU", false, "eiU");
        String string0 = option0.getValue("eiU");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2948() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        option0.addValueForProcessing((String) null);
        try {
            option0.getValue((-1));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3049() throws Throwable {
        Option option0 = new Option("", "");
        option0.getValue((-2));
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3050() throws Throwable {
        Option option0 = new Option("", "");
        option0.getValue((-2));
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3151() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.addValueForProcessing("eiU");
        String[] stringArray0 = option0.getValues();
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3152() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.addValueForProcessing("eiU");
        String[] stringArray0 = option0.getValues();
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test3153() throws Throwable {
        Option option0 = new Option("eiU", true, "eiU");
        option0.addValueForProcessing("eiU");
        String[] stringArray0 = option0.getValues();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3254() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3255() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3256() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3357() throws Throwable {
        Option option0 = new Option("", "", true, "");
        String string0 = option0.toString();
        assertEquals("[ option:    [ARG] ::  ]", string0);
    }

    @Test(timeout = 4000)
    public void test3458() throws Throwable {
        Option option0 = new Option("U", "U");
        String string0 = option0.toString();
        assertEquals("[ option: U  :: U ]", string0);
    }

    @Test(timeout = 4000)
    public void test3459() throws Throwable {
        Option option0 = new Option("U", "U");
        String string0 = option0.toString();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3560() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3561() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3562() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3663() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.equals((Object) null);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3664() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3765() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3766() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3767() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.equals("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3868() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option("", "");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3869() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option("", "");
        boolean boolean0 = option0.equals(option1);
        assertFalse(option1.equals((Object) option0));
    }

    @Test(timeout = 4000)
    public void test3870() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option("", "");
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test3871() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option("", "");
        boolean boolean0 = option0.equals(option1);
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3972() throws Throwable {
        Option option0 = new Option("2Q9r", true, "2Q9r");
        Option option1 = new Option("", true, "2Q9r");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3973() throws Throwable {
        Option option0 = new Option("2Q9r", true, "2Q9r");
        Option option1 = new Option("", true, "2Q9r");
        boolean boolean0 = option0.equals(option1);
        assertEquals("2Q9r", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test3974() throws Throwable {
        Option option0 = new Option("2Q9r", true, "2Q9r");
        Option option1 = new Option("", true, "2Q9r");
        boolean boolean0 = option0.equals(option1);
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test4075() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option((String) null, false, (String) null);
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test4076() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        Option option1 = new Option((String) null, false, (String) null);
        boolean boolean0 = option0.equals(option1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4177() throws Throwable {
        Option option0 = new Option("NO_ARGS_ALOWED", "NO_ARGS_ALOWED");
        Option option1 = new Option("NO_ARGS_ALOWED", "NO_ARGS_ALOWED", false, "NO_ARGS_ALOWED");
        boolean boolean0 = option1.equals(option0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4178() throws Throwable {
        Option option0 = new Option("NO_ARGS_ALOWED", "NO_ARGS_ALOWED");
        Option option1 = new Option("NO_ARGS_ALOWED", "NO_ARGS_ALOWED", false, "NO_ARGS_ALOWED");
        boolean boolean0 = option1.equals(option0);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test4279() throws Throwable {
        Option option0 = new Option("", "", false, "");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4280() throws Throwable {
        Option option0 = new Option("", "", false, "");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test4281() throws Throwable {
        Option option0 = new Option("", "", false, "");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertNotSame(option1, option0);
    }

    @Test(timeout = 4000)
    public void test4382() throws Throwable {
        Option option0 = new Option("", "");
        Option option1 = (Option) option0.clone();
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test4383() throws Throwable {
        Option option0 = new Option("", "");
        Option option1 = (Option) option0.clone();
        option1.setLongOpt("");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4484() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.hashCode();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test4585() throws Throwable {
        Option option0 = new Option("eiU", "eiU", true, "eiU");
        option0.hashCode();
    }

    @Test(timeout = 4000)
    public void test4686() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4687() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        boolean boolean0 = option0.requiresArg();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test4788() throws Throwable {
        Option option0 = new Option("", "");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.requiresArg();
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test4789() throws Throwable {
        Option option0 = new Option("", "");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4890() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test4891() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4992() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test4993() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.setArgs((-2));
        option0.addValueForProcessing((String) null);
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }
}
