/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:08:40 GMT 2024
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Option_ESTest extends Option_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Option option0 = new Option("", "");
        option0.setType("");
        String string0 = option0.toString();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Option option0 = new Option("", "");
        option0.setType("");
        String string0 = option0.toString();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Option option0 = new Option("", "");
        option0.setType("");
        String string0 = option0.toString();
        assertEquals("[ option:   ::  ::  ]", string0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Option option0 = new Option((String) null, true, "<5f-.U>^");
        option0.setValueSeparator('s');
        option0.addValueForProcessing("org.apache.commons.cli.Optinalidator");
        assertEquals('s', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Option option0 = new Option("m", false, "m");
        String string0 = option0.getDescription();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Option option0 = new Option("m", false, "m");
        String string0 = option0.getDescription();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Option option0 = new Option("m", false, "m");
        String string0 = option0.getDescription();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Option option0 = new Option("m", false, "m");
        String string0 = option0.getDescription();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Option option0 = new Option("W", false, "W");
        String string0 = option0.getArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Option option0 = new Option("W", false, "W");
        String string0 = option0.getArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        Option option0 = new Option("W", false, "W");
        String string0 = option0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.acceptsArg();
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.acceptsArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        Option option0 = new Option("", "");
        option0.setRequired(false);
        assertFalse(option0.isRequired());
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        Option option0 = new Option("", "");
        option0.setRequired(false);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        Option option0 = new Option("", "");
        option0.setRequired(false);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        Option option0 = new Option("", "");
        option0.setRequired(false);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.isRequired();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        Option option0 = new Option((String) null, (String) null);
        option0.isRequired();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        Option option0 = new Option("", "", false, "");
        option0.getValuesList();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        Option option0 = new Option("", "", false, "");
        option0.getValuesList();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        Option option0 = new Option("W", "W");
        String string0 = option0.getLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        Option option0 = new Option("W", "W");
        String string0 = option0.getLongOpt();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        Option option0 = new Option("W", "W");
        String string0 = option0.getLongOpt();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        Option option0 = new Option("", "");
        // Undeclared exception!
        try {
            option0.getId();
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        Option option0 = new Option("4", "4");
        // Undeclared exception!
        try {
            option0.addValue("4");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        Option option0 = new Option("", "");
        option0.getType();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        Option option0 = new Option("", "");
        option0.getType();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        Option option0 = new Option("", "");
        option0.getType();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        Option option0 = new Option("", "");
        option0.setDescription("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        Option option0 = new Option("", "");
        option0.setDescription("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        Option option0 = new Option("", "");
        option0.setDescription("");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        Option option0 = new Option("", "");
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1333() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgName("");
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        Option option0 = new Option("m", "m", false, "m");
        option0.getOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        Option option0 = new Option("m", "m", false, "m");
        option0.getOpt();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        Option option0 = new Option("", "", true, "");
        int int0 = option0.getArgs();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1537() throws Throwable {
        Option option0 = new Option("", "", true, "");
        int int0 = option0.getArgs();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        Option option0 = new Option("", "");
        option0.clearValues();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1639() throws Throwable {
        Option option0 = new Option("", "");
        option0.clearValues();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1640() throws Throwable {
        Option option0 = new Option("", "");
        option0.clearValues();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1741() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        option0.getKey();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasLongOpt();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test1843() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasLongOpt();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1844() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasLongOpt();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        Option option0 = new Option("", "");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test1946() throws Throwable {
        Option option0 = new Option("", "");
        option0.setLongOpt("");
        boolean boolean0 = option0.hasLongOpt();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2047() throws Throwable {
        Option option0 = new Option("", "", true, "");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.setArgName((String) null);
        boolean boolean0 = option0.hasArgName();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2149() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasArgName();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test2150() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasArgName();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2151() throws Throwable {
        Option option0 = new Option("", "");
        boolean boolean0 = option0.hasArgName();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2252() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs(424);
        option0.toString();
        assertEquals(424, option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2353() throws Throwable {
        Option option0 = new Option("", "");
        assertFalse(option0.hasArg());
    }

    @Test(timeout = 4000)
    public void test2354() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs((-2));
        option0.toString();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2455() throws Throwable {
        Option option0 = new Option("I", "I");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test2456() throws Throwable {
        Option option0 = new Option("I", "I");
        option0.setArgs((-2));
        option0.addValueForProcessing("I");
        option0.getValues();
        assertEquals((-2), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2557() throws Throwable {
        Option option0 = new Option("", "");
        // Undeclared exception!
        try {
            option0.addValueForProcessing("");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // NO_ARGS_ALLOWED
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        Option option0 = new Option((String) null, true, "<5f-.U>^");
        option0.setValueSeparator('s');
        option0.setArgs((-2));
        option0.addValueForProcessing("org.apache.commons.cli.Optinalidator");
        assertEquals('s', option0.getValueSeparator());
    }

    @Test(timeout = 4000)
    public void test2759() throws Throwable {
        Option option0 = new Option("", "");
        option0.setArgs((-2098));
        // Undeclared exception!
        try {
            option0.addValueForProcessing("");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Cannot add value, list full.
            //
            verifyException("org.apache.commons.cli.Option", e);
        }
    }

    @Test(timeout = 4000)
    public void test2860() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("");
        option0.getValue("");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test2861() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("");
        option0.getValue("");
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test2962() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test2963() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2964() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test2965() throws Throwable {
        Option option0 = new Option("", "");
        String string0 = option0.getValue("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3066() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.addValueForProcessing("");
        try {
            option0.getValue((-1));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3167() throws Throwable {
        Option option0 = new Option("", "", true, "");
        option0.getValue((-1));
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test3268() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3269() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3270() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3271() throws Throwable {
        Option option0 = new Option("", "");
        String[] stringArray0 = option0.getValues();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test3372() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        String string0 = option0.toString();
        assertEquals("[ option: W W  :: W ]", string0);
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        String string0 = option0.toString();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3374() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        String string0 = option0.toString();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        Option option0 = new Option("W", "W", true, "W");
        String string0 = option0.toString();
        assertEquals("[ option: W W  [ARG] :: W ]", string0);
    }

    @Test(timeout = 4000)
    public void test3476() throws Throwable {
        Option option0 = new Option("W", "W", true, "W");
        String string0 = option0.toString();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test3577() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals(option0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3578() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3579() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3580() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals(option0);
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test3681() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3682() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals((Object) null);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3683() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals((Object) null);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3684() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        boolean boolean0 = option0.equals((Object) null);
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test3785() throws Throwable {
        Option option0 = new Option("", false, "");
        boolean boolean0 = option0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3786() throws Throwable {
        Option option0 = new Option("", false, "");
        boolean boolean0 = option0.equals("");
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3787() throws Throwable {
        Option option0 = new Option("", false, "");
        boolean boolean0 = option0.equals("");
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test3788() throws Throwable {
        Option option0 = new Option("", false, "");
        boolean boolean0 = option0.equals("");
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3889() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option((String) null, (String) null, true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3890() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option((String) null, (String) null, true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3891() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option((String) null, (String) null, true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3892() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option((String) null, (String) null, true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertEquals("arg", option1.getArgName());
    }

    @Test(timeout = 4000)
    public void test3993() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertEquals("Zmm_", option1.getDescription());
    }

    @Test(timeout = 4000)
    public void test3994() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertEquals("", option1.getOpt());
    }

    @Test(timeout = 4000)
    public void test3995() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3996() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test3997() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test3998() throws Throwable {
        Option option0 = new Option("Zmm_", "Zmm_");
        Option option1 = new Option("", "Zmm_", true, "Zmm_");
        boolean boolean0 = option1.equals(option0);
        assertTrue(option1.hasArgName());
    }

    @Test(timeout = 4000)
    public void test4099() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option((String) null, true, (String) null);
        boolean boolean0 = option1.equals(option0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test40100() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        Option option1 = new Option((String) null, true, (String) null);
        boolean boolean0 = option1.equals(option0);
        assertEquals("arg", option1.getArgName());
    }

    @Test(timeout = 4000)
    public void test41101() throws Throwable {
        Option option0 = new Option("Zm", "Zm");
        Option option1 = new Option("Zm", "Zm", true, "Zm");
        boolean boolean0 = option1.equals(option0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test41102() throws Throwable {
        Option option0 = new Option("Zm", "Zm");
        Option option1 = new Option("Zm", "Zm", true, "Zm");
        boolean boolean0 = option1.equals(option0);
        assertTrue(option1.hasArgName());
    }

    @Test(timeout = 4000)
    public void test41103() throws Throwable {
        Option option0 = new Option("Zm", "Zm");
        Option option1 = new Option("Zm", "Zm", true, "Zm");
        boolean boolean0 = option1.equals(option0);
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test42104() throws Throwable {
        Option option0 = new Option("_", "_", false, "_");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertEquals((-1), option1.getArgs());
    }

    @Test(timeout = 4000)
    public void test42105() throws Throwable {
        Option option0 = new Option("_", "_", false, "_");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test42106() throws Throwable {
        Option option0 = new Option("_", "_", false, "_");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertNotSame(option1, option0);
    }

    @Test(timeout = 4000)
    public void test42107() throws Throwable {
        Option option0 = new Option("_", "_", false, "_");
        Option option1 = (Option) option0.clone();
        boolean boolean0 = option0.equals(option1);
        assertTrue(option1.hasArgName());
    }

    @Test(timeout = 4000)
    public void test43108() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        Option option1 = (Option) option0.clone();
        assertFalse(option1.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test43109() throws Throwable {
        Option option0 = new Option("Bd", "Bd");
        Option option1 = (Option) option0.clone();
        option1.setLongOpt("Bd");
        boolean boolean0 = option0.equals(option1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test44110() throws Throwable {
        Option option0 = new Option((String) null, "", false, "");
        option0.hashCode();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test44111() throws Throwable {
        Option option0 = new Option((String) null, "", false, "");
        option0.hashCode();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test44112() throws Throwable {
        Option option0 = new Option((String) null, "", false, "");
        option0.hashCode();
        assertTrue(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test45113() throws Throwable {
        Option option0 = new Option("", "");
        option0.hashCode();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test45114() throws Throwable {
        Option option0 = new Option("", "");
        option0.hashCode();
        assertFalse(option0.hasLongOpt());
    }

    @Test(timeout = 4000)
    public void test45115() throws Throwable {
        Option option0 = new Option("", "");
        option0.hashCode();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test46116() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        assertFalse(option0.hasValueSeparator());
    }

    @Test(timeout = 4000)
    public void test46117() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        option0.addValueForProcessing((String) null);
        boolean boolean0 = option0.acceptsArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46118() throws Throwable {
        Option option0 = new Option((String) null, true, (String) null);
        option0.addValueForProcessing((String) null);
        boolean boolean0 = option0.acceptsArg();
        assertEquals("arg", option0.getArgName());
    }

    @Test(timeout = 4000)
    public void test47119() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        boolean boolean0 = option0.requiresArg();
        assertTrue(option0.hasArgName());
    }

    @Test(timeout = 4000)
    public void test47120() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47121() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        boolean boolean0 = option0.requiresArg();
        assertEquals((-1), option0.getArgs());
    }

    @Test(timeout = 4000)
    public void test48122() throws Throwable {
        Option option0 = new Option("", "");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.requiresArg();
        assertTrue(option0.hasOptionalArg());
    }

    @Test(timeout = 4000)
    public void test48123() throws Throwable {
        Option option0 = new Option("", "");
        option0.setOptionalArg(true);
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test49124() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test49125() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        option0.setArgs((-2));
        boolean boolean0 = option0.requiresArg();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test50126() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        assertFalse(option0.hasArgs());
    }

    @Test(timeout = 4000)
    public void test50127() throws Throwable {
        Option option0 = new Option("W", "W", false, "W");
        option0.setArgs((-2));
        option0.addValueForProcessing("W");
        boolean boolean0 = option0.requiresArg();
        assertFalse(boolean0);
    }
}
