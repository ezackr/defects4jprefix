/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 23:06:00 GMT 2024
 */
package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(74, int0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getWidth();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptPrefix(" ");
        assertEquals(" ", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test0215() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0216() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getDescPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLongOptSeparator("--");
        assertEquals("--", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setNewLine("-");
        assertEquals("-", helpFormatter0.getNewLine());
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setLeftPadding(63);
        assertEquals(63, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setArgName(" ");
        assertEquals(" ", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test0721() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0722() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setSyntaxPrefix("");
        assertEquals("", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp(38, "n1QmwIoClAkaPdm", "n1QmwIoClAkaPdm", options0, "n1QmwIoClAkaPdm");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test0924() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("-", options0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test0925() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("-", options0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1026() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(" ", string0);
    }

    @Test(timeout = 4000)
    public void test1027() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1028() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1029() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1030() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1031() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1032() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1033() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptSeparator();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setWidth(451);
        assertEquals(451, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1235() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1236() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1237() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1238() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1239() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1240() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1241() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1242() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptPrefix("-");
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1343() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1344() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1345() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1346() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1347() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1348() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1349() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1350() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        int int0 = helpFormatter0.getLeftPadding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1451() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1452() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1453() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1454() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1455() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1456() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1457() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1458() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getArgName();
        assertEquals("arg", string0);
    }

    @Test(timeout = 4000)
    public void test1559() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
        Options options0 = new Options();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "\n", options0, (-1), (-986), "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1661() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setDescPadding((-1));
        assertEquals((-1), helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1762() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("K6@P", "K6@P", (Options) null, "K6@P");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test1866() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("\n", string0);
    }

    @Test(timeout = 4000)
    public void test1867() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test1868() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test1869() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test1870() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test1871() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getNewLine();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test1972() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp("cmdLineSyntax not provided", (Options) null, true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test2073() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test2074() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2075() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2076() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("--", string0);
    }

    @Test(timeout = 4000)
    public void test2077() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test2078() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2079() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2080() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getLongOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2181() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2182() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("usage: ", string0);
    }

    @Test(timeout = 4000)
    public void test2183() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2184() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2185() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2186() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test2187() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2188() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getSyntaxPrefix();
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2289() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test2290() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test2291() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test2292() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test2293() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2294() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2295() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test2296() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.getOptPrefix();
        assertEquals("-", string0);
    }

    @Test(timeout = 4000)
    public void test2397() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test2398() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        OptionGroup optionGroup0 = new OptionGroup();
        Option option0 = new Option("arg", "arg", false, "\"");
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Option option1 = new Option((String) null, "--", false, "usage: ");
        optionGroup1.addOption(option1);
        options0.addOptionGroup(optionGroup0);
        helpFormatter0.printHelp("^]%", (String) null, options0, (String) null, true);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test2499() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test24100() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test24101() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test24102() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test24103() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test24104() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test24105() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test24106() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        helpFormatter0.setOptionComparator(comparator0);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test25107() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test25108() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test25109() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test25110() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test25111() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test25112() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test25113() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test25114() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        helpFormatter0.setOptionComparator((Comparator) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test26115() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cmdLineSyntax not provided
            //
            verifyException("org.apache.commons.cli.HelpFormatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test27116() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("]", "\n", options0, "\n", true);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test27117() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        helpFormatter0.printHelp("]", "\n", options0, "\n", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test28118() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "arg");
        OptionGroup optionGroup0 = new OptionGroup();
        optionGroup0.setRequired(true);
        OptionGroup optionGroup1 = optionGroup0.addOption(option0);
        Options options1 = options0.addOptionGroup(optionGroup1);
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test29119() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Option option0 = new Option("arg", true, "arg");
        option0.setArgName("");
        Options options1 = options0.addOption(option0);
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test30120() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Option option0 = new Option((String) null, true, "JLT,h<'[rOX/`-VT");
        Options options0 = new Options();
        options0.addOption(option0);
        helpFormatter0.printHelp("JLT,h<'[rOX/`-VT", "JLT,h<'[rOX/`-VT", options0, "JLT,h<'[rOX/`-VT", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test30121() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Option option0 = new Option((String) null, true, "JLT,h<'[rOX/`-VT");
        Options options0 = new Options();
        options0.addOption(option0);
        helpFormatter0.printHelp("JLT,h<'[rOX/`-VT", "JLT,h<'[rOX/`-VT", options0, "JLT,h<'[rOX/`-VT", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test31122() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "-", true, "arg");
        options1.addOption("", "] FHu|", true, "arg");
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test32123() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", "-", true, "arg");
        StringBuffer stringBuffer0 = new StringBuffer(3);
        helpFormatter0.renderOptions(stringBuffer0, 72, options1, 72, 72);
        assertEquals(38, stringBuffer0.length());
    }

    @Test(timeout = 4000)
    public void test33124() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        options0.addOption("arg", "}1KO", false, (String) null);
        helpFormatter0.printHelp(" [ARG]", " [ARG]", options0, "{[i2*\"Zz", true);
        assertEquals(3, helpFormatter0.getDescPadding());
    }

    @Test(timeout = 4000)
    public void test34125() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "\n");
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test34126() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "\n");
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test34127() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        Options options0 = new Options();
        Options options1 = options0.addOption("arg", true, "\n");
        helpFormatter0.printHelp("-", "-", options1, "-", true);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }

    @Test(timeout = 4000)
    public void test35128() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "' contains an illegal character : '");
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test35129() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "' contains an illegal character : '");
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test36130() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        StringBuffer stringBuffer0 = new StringBuffer();
        // Undeclared exception!
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "\n");
    }

    @Test(timeout = 4000)
    public void test37131() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        // Undeclared exception!
        try {
            helpFormatter0.findWrapPos("\n", (-497), (-497));
            fail("Expecting exception: StringIndexOutOfBoundsException");
        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test38132() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("--", helpFormatter0.getLongOptPrefix());
    }

    @Test(timeout = 4000)
    public void test38133() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("arg", helpFormatter0.getArgName());
    }

    @Test(timeout = 4000)
    public void test38134() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(3, helpFormatter0.defaultDescPad);
    }

    @Test(timeout = 4000)
    public void test38135() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(" ", helpFormatter0.getLongOptSeparator());
    }

    @Test(timeout = 4000)
    public void test38136() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(74, helpFormatter0.defaultWidth);
    }

    @Test(timeout = 4000)
    public void test38137() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
    }

    @Test(timeout = 4000)
    public void test38138() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals("-", helpFormatter0.getOptPrefix());
    }

    @Test(timeout = 4000)
    public void test38139() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test38140() throws Throwable {
        HelpFormatter helpFormatter0 = new HelpFormatter();
        String string0 = helpFormatter0.rtrim((String) null);
        assertEquals(1, helpFormatter0.defaultLeftPad);
    }
}
