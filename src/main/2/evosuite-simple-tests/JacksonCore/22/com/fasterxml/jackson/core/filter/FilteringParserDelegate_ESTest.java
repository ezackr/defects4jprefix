/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:44:00 GMT 2024
 */
package com.fasterxml.jackson.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FilteringParserDelegate_ESTest extends FilteringParserDelegate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getFloatValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        filteringParserDelegate0.currentToken();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString("B*C!(nk4mYe)Qgt");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        filteringParserDelegate0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDoubleValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getByteValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getEmbeddedObject();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = (TokenFilterContext) filteringParserDelegate0.getParsingContext();
        assertTrue(tokenFilterContext0.isStartHandled());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getText();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDecimalValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean(true);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.hasTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getIntValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.overrideCurrentName((String) null);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Can not currently override name during filtering read
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextOffset();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt(2053);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.getMatchCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBooleanValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBigIntegerValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTokenLocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberType();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
        assertTrue(tokenFilter1.includeBinary());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getLongValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        // Undeclared exception!
        try {
            filteringParserDelegate0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextLength();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getShortValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBinaryValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble((-2.147483648E9));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        int int0 = filteringParserDelegate0.getCurrentTokenId();
        assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        int int0 = filteringParserDelegate0.getCurrentTokenId();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.getCurrentTokenId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        int int0 = filteringParserDelegate0.currentTokenId();
        assertTrue(filteringParserDelegate0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        int int0 = filteringParserDelegate0.currentTokenId();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextToken();
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.hasTokenId(6);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(4105);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.hasTokenId(106);
        assertEquals(3, filteringParserDelegate0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.hasTokenId(106);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
        boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        boolean boolean0 = filteringParserDelegate0.hasToken((JsonToken) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        assertEquals(3, filteringParserDelegate0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("qg-? -5D(%'E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 46, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("qg-? -5D(%'E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 20, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0._nextToken2();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("qg-? -5D(%'E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 46, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextToken2();
        String string0 = filteringParserDelegate0.getCurrentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        String string0 = filteringParserDelegate0.getCurrentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(106, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        filteringParserDelegate0.nextToken();
        filteringParserDelegate0.getCurrentName();
        assertTrue(filteringParserDelegate0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        charArray0[0] = ' ';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, true);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
        filteringParserDelegate0.nextToken();
        filteringParserDelegate0.clearCurrentToken();
        assertEquals(0, filteringParserDelegate0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        TokenFilterContext tokenFilterContext1 = new TokenFilterContext(4004, tokenFilterContext0, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
        // Undeclared exception!
        try {
            filteringParserDelegate1.skipChildren();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextToken();
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        assertArrayEquals(new char[] { 'Z' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextToken();
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextValue();
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 36]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1617, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0.nextToken();
        tokenFilterContext0.reset(51, tokenFilter0, false);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0.nextToken();
        tokenFilterContext0.reset(1, tokenFilter0, false);
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextToken2();
        filteringParserDelegate0.nextValue();
        assertTrue(filteringParserDelegate0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zPt%}8E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        assertEquals("{", jsonToken0.asString());
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(424, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1.nextValue();
        assertTrue(filteringParserDelegate1.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FL`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Z' (code 90)): was expecting comma to separate Array entries
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0.nextToken();
        assertArrayEquals(new char[] { ',' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test6571() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0.nextToken();
        assertEquals(JsonToken.START_ARRAY, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test6672() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zP1%%}8E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6773() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(";");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[21];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6874() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(";");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[17];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6975() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 36]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Z' (code 90)): was expecting comma to separate Array entries
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7278() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(64, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextToken2();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test7379() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[21];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7480() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("A<`'h6FmqP");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[5];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7581() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(";");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[21];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7682() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0._nextToken2();
        assertFalse(jsonToken0.isStructStart());
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 36]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test7884() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test7985() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("zP1%%}8E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8086() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(432, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextTokenWithBuffering(filteringParserDelegate0._exposedContext);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8187() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(424, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextTokenWithBuffering(tokenFilterContext1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8288() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        assertEquals("{", jsonToken0.asString());
    }

    @Test(timeout = 4000)
    public void test8389() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8490() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected problem: chain of filtered context broken
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8591() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[6];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 36]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test8692() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Internal error: failed to locate expected buffered tokens
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8793() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("qg-? -5D(%'E");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        charArray0[0] = '{';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 46, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextToken2();
        // Undeclared exception!
        try {
            filteringParserDelegate0.skipChildren();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8894() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[4];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonParser jsonParser0 = filteringParserDelegate0.skipChildren();
        assertNull(jsonParser0.currentToken());
    }

    @Test(timeout = 4000)
    public void test8995() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[1,4Z1FV`-W");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0._nextToken2();
        try {
            filteringParserDelegate0.skipChildren();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Z' (code 90)): was expecting comma to separate Array entries
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test9096() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        TokenFilterContext tokenFilterContext1 = tokenFilterContext0.reset(432, tokenFilter0, false);
        filteringParserDelegate0._exposedContext = tokenFilterContext1;
        filteringParserDelegate0.nextValue();
        tokenFilterContext1.reset(432, tokenFilter0, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.skipChildren();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }
}
