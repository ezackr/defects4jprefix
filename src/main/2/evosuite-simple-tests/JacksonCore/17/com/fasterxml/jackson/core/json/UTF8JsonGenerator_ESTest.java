/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:15:31 GMT 2024
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-369));
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 32, false);
        int int0 = uTF8JsonGenerator0.getOutputBuffered();
        assertEquals(32, int0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-369));
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2900), (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNull();
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-1), false);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-1), false);
        Object object0 = uTF8JsonGenerator0.getOutputTarget();
        assertEquals((-1), uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", false);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5062), (ObjectCodec) null, mockFileOutputStream0);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer((-5062));
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
        assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", false);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5062), (ObjectCodec) null, mockFileOutputStream0);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer((-5062));
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        int int0 = uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 603, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeFieldName("");
        assertArrayEquals(new byte[] { (byte) 34, (byte) 0, (byte) 0, (byte) 34 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 603, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeFieldName("");
        assertEquals(4, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, dataOutputStream0);
        uTF8JsonGenerator0.writeFieldName("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
        try {
            uTF8JsonGenerator0.writeFieldName("bx~{Pua:tVF;");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not write a field name, expecting a value
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 603, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber("");
        uTF8JsonGenerator0.writeFieldName("");
        assertEquals(4, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 603, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber("");
        uTF8JsonGenerator0.writeFieldName("");
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "jP`~nNSXT");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArray0, 69, false);
        uTF8JsonGenerator0.writeNumber("LKr51vHPGcDi]a~");
        uTF8JsonGenerator0.writeFieldName("");
        assertArrayEquals(new byte[] { (byte) 44 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test00712() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "jP`~nNSXT");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArray0, 69, false);
        uTF8JsonGenerator0.writeNumber("LKr51vHPGcDi]a~");
        uTF8JsonGenerator0.writeFieldName("");
        assertEquals(18L, file0.length());
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte) 0, true);
        // Undeclared exception!
        uTF8JsonGenerator0.writeFieldName("7");
    }

    @Test(timeout = 4000)
    public void test00914() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("WP``Y6ACjEjd5R|eeb");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.writeFieldName("u!$QFXx^{=))?\"n>#");
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        try {
            uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not write a field name, expecting a value
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$", false);
        MockFile mockFile0 = new MockFile("x]jjjT;,$", "x]jjjT;,$");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeEndObject();
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertArrayEquals(new byte[] { (byte) 32 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test01016() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$", false);
        MockFile mockFile0 = new MockFile("x]jjjT;,$", "x]jjjT;,$");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeEndObject();
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertEquals(3L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber((short) 48);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertEquals(8, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test01118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber((short) 48);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertArrayEquals(new byte[] { (byte) 34, (byte) 32, (byte) 34, (byte) 34, (byte) 44 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test01219() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertArrayEquals(new byte[] { (byte) 32, (byte) 34, (byte) 34, (byte) 44, (byte) 34 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test01220() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertEquals(20, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        uTF8JsonGenerator0.writeNumber("");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertArrayEquals(new byte[] { (byte) 34, (byte) 32, (byte) 44, (byte) 34, (byte) 32 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test01322() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeNumber("BWZ?:");
        uTF8JsonGenerator0.writeNumber("");
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        assertEquals(10, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test01423() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        long[] longArray0 = new long[5];
        uTF8JsonGenerator0.writeArray(longArray0, 3, 2);
        assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test01524() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeStartArray();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test01625() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "jP`~nNSXT");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream0, byteArray0, 69, false);
        try {
            uTF8JsonGenerator0.writeEndArray();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current context not an ARRAY but ROOT
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("<");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 57343, true);
        uTF8JsonGenerator0.writeStartObject();
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        try {
            uTF8JsonGenerator0.writeEndObject();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current context not an object but ROOT
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeEndObject();
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02029() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, dataOutputStream0);
        uTF8JsonGenerator0.writeFieldName("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
        try {
            uTF8JsonGenerator0._writePPFieldName("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not write a field name, expecting a value
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test02130() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        BigDecimal bigDecimal0 = new BigDecimal(4883);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
        jsonGenerator0.writeNumber(bigDecimal0);
        jsonGenerator0.writeFieldName("com.fasterxml.jackson.core.io.JsonStringEncoder");
        assertEquals(57, jsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02231() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 67, (ObjectCodec) null, byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator) uTF8JsonGenerator0.useDefaultPrettyPrinter();
        uTF8JsonGenerator1._writePPFieldName("`:QYO;=eg}t{!TV");
        assertEquals(16, uTF8JsonGenerator1.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02332() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&F`XHDbv%n");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
        try {
            uTF8JsonGenerator0._writePPFieldName(serializedString0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not write a field name, expecting a value
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test02433() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        // Undeclared exception!
        try {
            uTF8JsonGenerator0._writePPFieldName(serializedString0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test02534() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 67, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.useDefaultPrettyPrinter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02635() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.useDefaultPrettyPrinter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02736() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, dataOutputStream0);
        uTF8JsonGenerator0.writeString((String) null);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test02837() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-581), false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeString("oQ4");
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -581
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test02938() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1606, (ObjectCodec) null, pipedOutputStream0, byteArray0, 121, false);
        try {
            uTF8JsonGenerator0.writeString("");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test03039() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 587, true);
        char[] charArray0 = new char[2];
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeString(charArray0, 587, 1867);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test03140() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0);
        char[] charArray0 = iOContext0.allocTokenBuffer();
        uTF8JsonGenerator0.writeString(charArray0, 46, 46);
        assertEquals(278, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test03241() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        char[] charArray0 = new char[4];
        uTF8JsonGenerator0.writeString(charArray0, 2047, (-1224));
        assertArrayEquals(new byte[] { (byte) 34, (byte) 0, (byte) 0, (byte) 34 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test03242() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        char[] charArray0 = new char[4];
        uTF8JsonGenerator0.writeString(charArray0, 2047, (-1224));
        assertEquals(4, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test03343() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEjd5R|eeb");
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.JsonParserSequence", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 638, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test03444() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        byte[] byteArray0 = new byte[1];
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3613);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
        File file0 = MockFile.createTempFile("O_2HiN", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
        SerializedString serializedString0 = (SerializedString) uTF8JsonGenerator0._rootValueSeparator;
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test03545() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2391);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, (-5036));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test03646() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$", false);
        MockFile mockFile0 = new MockFile("x]jjjT;,$", "x]jjjT;,$");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeEndObject();
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 4096);
        assertEquals(4L, mockFile0.length());
    }

    @Test(timeout = 4000)
    public void test03647() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$", false);
        MockFile mockFile0 = new MockFile("x]jjjT;,$", "x]jjjT;,$");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeEndObject();
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 4096);
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test03748() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2710, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2817);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.ByteArrayOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test03849() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer(2);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2391);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 44, 3646);
        assertEquals(3877, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test03950() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
    }

    @Test(timeout = 4000)
    public void test03951() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
        assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04052() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        BigDecimal bigDecimal0 = new BigDecimal(4883);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
        jsonGenerator0.writeNumber(bigDecimal0);
        uTF8JsonGenerator0.writeStartArray();
        assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-369), (ObjectCodec) null, byteArrayBuilder0);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-369), (ObjectCodec) null, byteArrayBuilder0);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
    }

    @Test(timeout = 4000)
    public void test04255() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2391);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayOutputStream0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04356() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
        byte[] byteArray0 = new byte[7];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
        uTF8JsonGenerator0.writeNumber("LKr51vHPGcDi]a~");
        BigInteger bigInteger0 = BigInteger.ZERO;
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04457() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3019), (ObjectCodec) null, byteArrayBuilder0);
        char[] charArray0 = new char[4];
        uTF8JsonGenerator0.writeRaw(charArray0, 15, (-2767));
        assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
    }

    @Test(timeout = 4000)
    public void test04558() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeRaw('R');
        assertEquals(3, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test04559() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeRaw('R');
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04660() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeRaw('\u0081');
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04761() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        File file0 = MockFile.createTempFile("_m;eZ+V##8tQwV(", "_m;eZ+V##8tQwV(");
        byte[] byteArray0 = iOContext0.allocReadIOBuffer(1);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeBinary(byteArray0);
        assertEquals(2673, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test04862() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 38, true);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test04963() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeBinary(byteArray0);
        assertArrayEquals(new byte[] { (byte) 34, (byte) 81, (byte) 61, (byte) 61 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test04964() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        uTF8JsonGenerator0.writeBinary(byteArray0);
        assertEquals("\u0000\u0000\u0000\"AAAAQQ==", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test05065() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        MockFile mockFile0 = new MockFile("4", "RyxR&5%nG*9%D1/z|");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5036), (ObjectCodec) null, mockFileOutputStream0);
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (int) (byte) (-55));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05267() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", false);
        MockFile mockFile0 = new MockFile("4", "4");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5062), (ObjectCodec) null, mockFileOutputStream0);
        byte[] byteArray0 = iOContext0.allocReadIOBuffer((-5062));
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        try {
            uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 56319);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Too few bytes available: missing 48319 bytes (out of 56319)
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test05368() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 96, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((short) 97);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test05469() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeNumber((short) (byte) 53);
        assertArrayEquals(new byte[] { (byte) 53, (byte) 51, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test05470() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeNumber((short) (byte) 53);
        assertEquals(1, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test05571() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", false);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5062), (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeNumber(46);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test05672() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character)");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-69), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber(3);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void test05773() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", false);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5062), (ObjectCodec) null, mockFileOutputStream0);
        IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
        UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte) (-55), (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator1.writeNumber(46);
        assertEquals(2, uTF8JsonGenerator1.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test05874() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeNumber((-891L));
        assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test05975() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-1), false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber((long) (byte) (-51));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -1
            //
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void test06076() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 8000, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber((long) 2);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.ByteArrayOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test06177() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06278() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockPrintStream mockPrintStream0 = new MockPrintStream("WP``Y6ACjEjd5R|eeb");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        BigInteger bigInteger0 = BigInteger.TEN;
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06379() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((double) 0L);
        assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06480() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 587, true);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test06581() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3019), (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((float) 3);
        assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06682() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((float) 1);
        assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06783() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5036), (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
        assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06884() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[4];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 603, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
    }

    @Test(timeout = 4000)
    public void test06985() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        assertArrayEquals(new byte[] { (byte) 48, (byte) 34, (byte) 0, (byte) 34, (byte) 49 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test06986() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-276), (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
        assertEquals(5, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test07087() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        BigDecimal bigDecimal0 = new BigDecimal((long) 2);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W``Y6ACjEjd5R|eeb", true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test07188() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "_m;eZ+V##8tQwV(");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeBoolean(false);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test07289() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeBoolean(true);
    }

    @Test(timeout = 4000)
    public void test07390() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeStartObject();
        try {
            uTF8JsonGenerator0.writeBoolean(true);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Can not write a boolean value, expecting field name
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test07491() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        char[] charArray0 = iOContext0.allocTokenBuffer();
        uTF8JsonGenerator0.writeStartObject();
        uTF8JsonGenerator0.writeFieldName("W``Y6ACjEjd5R|eeb");
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeString(charArray0, 56320, 3);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 56320
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test07592() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.useDefaultPrettyPrinter();
        long[] longArray0 = new long[5];
        uTF8JsonGenerator0.writeArray(longArray0, 3, 2);
    }

    @Test(timeout = 4000)
    public void test07693() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-369));
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2900), (ObjectCodec) null, byteArrayBuilder0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0._verifyPrettyValueWrite("start an object", 2);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test07794() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(235);
        DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 235, (ObjectCodec) null, dataOutputStream0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0._verifyPrettyValueWrite("expected a valid value (number, String, array, object, 'true', 'false' or 'null')", 1674);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // Internal error: this code path should never get executed
            //
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test07895() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-369), (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.flush();
    }

    @Test(timeout = 4000)
    public void test07996() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.flush();
    }

    @Test(timeout = 4000)
    public void test08097() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.close();
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test08198() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        byte[] byteArray0 = new byte[4];
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-581), false);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test08299() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test083100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test084101() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("W``Y6ACjEjd5R|eeb");
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.JsonParserSequence", false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 638, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test085102() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "_m;eZ+V##8tQwV(");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test086103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1014, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 99, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber((-2597.0));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test087104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 38, true);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNullField("$Y;1Y,p-<i5w>e#8x");
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test088105() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "x]jjjT;,$e", false);
        File file0 = MockFile.createTempFile("x]jjjT;,$e", "_m;eZ+V##8tQwV(");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) 0, false);
        // Undeclared exception!
        uTF8JsonGenerator0.writeString((char[]) null, 1, 2);
    }

    @Test(timeout = 4000)
    public void test089106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
        char[] charArray0 = iOContext0.allocTokenBuffer();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.writeString(charArray0, 33, 2);
    }

    @Test(timeout = 4000)
    public void test090107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-369), (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeFieldName("YRk");
    }

    @Test(timeout = 4000)
    public void test091108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        char[] charArray0 = new char[6];
        charArray0[4] = '.';
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeString(charArray0, 1, 65599);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 6
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test092109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        File file0 = MockFile.createTempFile("RyxR&5%nG*9%D1/z|", "4", (File) null);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5036), (ObjectCodec) null, mockFileOutputStream0);
        IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
        UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte) (-55), (ObjectCodec) null, mockFileOutputStream0);
        char[] charArray0 = new char[5];
        charArray0[3] = ';';
        // Undeclared exception!
        try {
            uTF8JsonGenerator1.writeString(charArray0, 2, 7);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test093110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 136, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.writeFieldName("gOAt qhU+e\"1[\"/C");
    }

    @Test(timeout = 4000)
    public void test094111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 124, 0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test095112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, pipedOutputStream0);
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) (-24);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 23);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test096113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 108;
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-24), (ObjectCodec) null, pipedOutputStream0);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 10);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test097114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2822));
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
    }

    @Test(timeout = 4000)
    public void test098115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
        IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, byteArrayOutputStream0);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte) 13);
        try {
            uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 376);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Too few bytes available: missing 373 bytes (out of 376)
            //
            verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
        }
    }

    @Test(timeout = 4000)
    public void test099116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFile mockFile0 = new MockFile("W``Y6ACjEjd5R|eeb", "W``Y6ACjEjd5R|eeb");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0._outputSurrogates(1, 57343);
    }

    @Test(timeout = 4000)
    public void test100117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "RyxR&5%nG*9%D1/z|", true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 587, false);
        // Undeclared exception!
        try {
            uTF8JsonGenerator0.writeNumber((BigDecimal) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
}
