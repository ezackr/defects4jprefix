/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:41:18 GMT 2024
 */
package com.fasterxml.jackson.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FilteringParserDelegate_ESTest extends FilteringParserDelegate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getFloatValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        filteringParserDelegate0.currentToken();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsString("2}n{V_ X1oI45>");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getCurrentToken();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDoubleValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getByteValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getEmbeddedObject();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonStreamContext jsonStreamContext0 = filteringParserDelegate0.getParsingContext();
        assertFalse(jsonStreamContext0.hasCurrentName());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getText();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getDecimalValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean(false);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.hasTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getIntValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.overrideCurrentName("Unexpected problem: chain of filtered context broken");
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // Can not currently override name during filtering read
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextOffset();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        filteringParserDelegate0.getLastClearedToken();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt(3);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.getMatchCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBooleanValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBigIntegerValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTokenLocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getNumberType();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextCharacters();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilter tokenFilter1 = filteringParserDelegate0.getFilter();
        assertTrue(tokenFilter1.includeBinary());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsBoolean();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getLongValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.readBinaryValue((OutputStream) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getTextLength();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getShortValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getBinaryValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsInt();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsLong(0L);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0.getValueAsDouble(1.0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
        filteringParserDelegate0._currToken = jsonToken0;
        int int0 = filteringParserDelegate0.getCurrentTokenId();
        assertEquals(8, int0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        filteringParserDelegate0._currToken = jsonToken0;
        int int0 = filteringParserDelegate0.currentTokenId();
        assertEquals(5, int0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        int int0 = filteringParserDelegate0.currentTokenId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasCurrentToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasTokenId(1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasTokenId(0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        boolean boolean0 = filteringParserDelegate0.hasTokenId((-1));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        boolean boolean0 = filteringParserDelegate0.hasTokenId(1937);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.START_OBJECT;
        boolean boolean0 = filteringParserDelegate0.hasToken(jsonToken0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.hasToken((JsonToken) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        assertEquals(3, filteringParserDelegate0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextValue();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-57), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        filteringParserDelegate0._nextToken2();
        boolean boolean0 = filteringParserDelegate0.isExpectedStartObjectToken();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.nextToken();
        String string0 = filteringParserDelegate0.getCurrentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
        String string0 = filteringParserDelegate0.getCurrentName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextToken();
        filteringParserDelegate0.getCurrentName();
        assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
        filteringParserDelegate0.clearCurrentToken();
        assertEquals(0, filteringParserDelegate0.getFormatFeatures());
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.clearCurrentToken();
        assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, (TokenFilter) null, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextToken2();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test5758() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-57), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
        filteringParserDelegate0._nextToken2();
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test5859() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        filteringParserDelegate0._currToken = jsonToken0;
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test5960() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
        filteringParserDelegate0._currToken = jsonToken0;
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6061() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0.reset(1, tokenFilter0, true);
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        // Undeclared exception!
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6162() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        boolean boolean0 = filteringParserDelegate0.nextFieldName((SerializableString) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6263() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        // Undeclared exception!
        filteringParserDelegate0.nextValue();
    }

    @Test(timeout = 4000)
    public void test6364() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, (TokenFilter) null, false, true);
        // Undeclared exception!
        try {
            filteringParserDelegate1.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6465() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1.nextValue();
        assertTrue(filteringParserDelegate1.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test6566() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6667() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1.nextValue();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6768() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6869() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0.nextToken();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test6970() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0.nextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", s:econd x", false);
        StringReader stringReader0 = new StringReader(", s:econd x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        assertFalse(jsonToken0.isNumeric());
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1853, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0.nextValue();
        assertEquals("null", jsonToken0.asString());
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, false);
        filteringParserDelegate0._nextToken2();
    }

    @Test(timeout = 4000)
    public void test7374() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
        assertTrue(filteringParserDelegate0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        filteringParserDelegate1._nextToken2();
        assertEquals(3, filteringParserDelegate1.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextToken2();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test7577() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextToken2();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test7678() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B:x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B:x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7880() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        try {
            filteringParserDelegate0._nextToken2();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test7981() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0._nextToken2();
        assertEquals(11, jsonToken0.id());
    }

    @Test(timeout = 4000)
    public void test8082() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1853, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        JsonToken jsonToken0 = filteringParserDelegate0._nextToken2();
        assertFalse(jsonToken0.isStructEnd());
    }

    @Test(timeout = 4000)
    public void test8183() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextTokenWithBuffering(filteringParserDelegate0._exposedContext);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8284() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test8385() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        try {
            filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8486() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-868), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        try {
            filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Internal error: failed to locate expected buffered tokens
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 10]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8587() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate1._nextTokenWithBuffering(tokenFilterContext0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8688() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
        assertTrue(jsonToken0.isStructStart());
    }

    @Test(timeout = 4000)
    public void test8789() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B&xo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
        try {
            filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test8890() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        // Undeclared exception!
        try {
            filteringParserDelegate0._nextTokenWithBuffering((TokenFilterContext) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }

    @Test(timeout = 4000)
    public void test8991() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, ", second 0x", false);
        StringReader stringReader0 = new StringReader(", second 0x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-11), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext((TokenFilter) null);
        // Undeclared exception!
        filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
    }

    @Test(timeout = 4000)
    public void test9092() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-906), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
        assertTrue(tokenFilterContext0.isStartHandled());
    }

    @Test(timeout = 4000)
    public void test9093() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("'MROC<+e'E3tv,;=.");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-906), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
        tokenFilterContext0._startHandled = false;
        JsonToken jsonToken0 = filteringParserDelegate0._nextTokenWithBuffering(tokenFilterContext0);
        assertEquals(JsonToken.START_ARRAY, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test9194() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("{B8&fxo");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
        filteringParserDelegate0.nextToken();
        try {
            filteringParserDelegate0.skipChildren();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('B' (code 66)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test9295() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 324, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
        filteringParserDelegate0.skipChildren();
        assertFalse(readerBasedJsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test9396() throws Throwable {
        TokenFilter tokenFilter0 = new TokenFilter();
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
        TokenFilterContext tokenFilterContext0 = filteringParserDelegate0._headContext;
        tokenFilterContext0._startHandled = false;
        filteringParserDelegate0._exposedContext = tokenFilterContext0;
        filteringParserDelegate0.nextToken();
        tokenFilterContext0._startHandled = false;
        // Undeclared exception!
        try {
            filteringParserDelegate0.skipChildren();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
        }
    }
}
