/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 17:52:57 GMT 2024
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ReaderBasedJsonParser_ESTest extends ReaderBasedJsonParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, 3, false);
        readerBasedJsonParser0.nextFieldName();
        assertArrayEquals(new char[] { '8' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, 3, false);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(5, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1348), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("39E`\rZt;t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        // Undeclared exception!
        try {
            readerBasedJsonParser0.readValueAsTree();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No ObjectCodec defined for parser, needed for deserialization
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("39E`\rZt;t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-64), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        Object object0 = readerBasedJsonParser0.getInputSource();
        assertSame(stringReader0, object0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" within/between ");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.setCodec((ObjectCodec) null);
        assertNull(readerBasedJsonParser0.getCurrentToken());
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        StringWriter stringWriter0 = new StringWriter(2);
        int int0 = readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
        assertEquals(11, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        StringWriter stringWriter0 = new StringWriter(2);
        int int0 = readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
        assertEquals(7, int0);
    }

    @Test(timeout = 4000)
    public void test0068() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("]Z?_");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.releaseBuffered((Writer) null);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("9E");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextIntValue(55);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-inputexpected a digit for number exponent
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&Tc\"7z.A");
        char[] charArray0 = iOContext0.allocConcatBuffer();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 60, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 55, 2851, true);
        readerBasedJsonParser1._finishString2();
        readerBasedJsonParser0.nextTextValue();
        assertTrue(readerBasedJsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 76, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._releaseBuffers();
        readerBasedJsonParser0.nextFieldName();
        assertTrue(readerBasedJsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"*\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        stringReader0.reset();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end of base64-encoded String: base64 variant 'MIME-NO-LINEFEEDS' expects padding (one or more '=' characters) at the end
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("0Y\"2/G4^");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[0];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Reader returned 0 characters when trying to read 33
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("+INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1615), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getValueAsString((String) null);
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"e.\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character '.' (code 0x2e) in base64 content
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[numbewith %character/]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        StringWriter stringWriter0 = new StringWriter(2);
        int int0 = readerBasedJsonParser0.getText((Writer) stringWriter0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "\"E63:KE+'kF;l", false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        StringWriter stringWriter0 = new StringWriter();
        try {
            readerBasedJsonParser0.getText((Writer) stringWriter0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 31]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"*\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.getValueAsString();
        // Undeclared exception!
        try {
            readerBasedJsonParser0.getText((Writer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[numbewith %character/]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        StringWriter stringWriter0 = new StringWriter(2);
        int int0 = readerBasedJsonParser0.getText((Writer) stringWriter0);
        assertEquals(3, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[numbewith %character/]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        StringWriter stringWriter0 = new StringWriter(2);
        int int0 = readerBasedJsonParser0.getText((Writer) stringWriter0);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("+INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1615), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        // Undeclared exception!
        try {
            readerBasedJsonParser0.getText((Writer) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.util.TextBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getValueAsString();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getValueAsString();
        assertEquals(6, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getValueAsString((String) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 31]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"e.\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.getTextOffset();
        readerBasedJsonParser0.getValueAsString("b-`H1F)");
        assertEquals(6, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[number with %d characters]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.getText();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("3.0~E7}'!OWPU ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("0h;?t2c.Y\t5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("39E`\rZt;t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        String string0 = readerBasedJsonParser0._getText2(jsonToken0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("true");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        readerBasedJsonParser0.getValueAsString("true");
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("1EM,");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[14];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3687), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
        char[] charArray1 = readerBasedJsonParser0.getTextCharacters();
        assertNull(charArray1);
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("9");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getTextCharacters();
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getTextCharacters();
        assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("+INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1609), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        readerBasedJsonParser0.getTextCharacters();
        assertTrue(readerBasedJsonParser0.isNaN());
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(",&*(q#W<B?");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2380), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getTextCharacters();
        assertEquals(11, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"AE63:KE+'k@F;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getTextCharacters();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("1");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 127, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(7, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("1");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 127, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 77, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(6, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 77, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("+INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1609), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.getTextLength();
        assertTrue(readerBasedJsonParser0.isNaN());
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[numbewith %character/]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertTrue(readerBasedJsonParser0.isExpectedStartArrayToken());
    }

    @Test(timeout = 4000)
    public void test03844() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[numbewith %character/]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextLength();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test03945() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"AE63:KE+'k@F;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getTextLength();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.getTextOffset();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.getTextOffset();
        assertEquals(8, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("9");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0.getTextOffset();
        assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("null;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(33);
        readerBasedJsonParser0.getTextOffset();
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextOffset();
        assertTrue(readerBasedJsonParser0.hasTextCharacters());
    }

    @Test(timeout = 4000)
    public void test04451() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\" \"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        int int0 = readerBasedJsonParser0.getTextOffset();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test04552() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("\"\"\"B");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.getBinaryValue();
        readerBasedJsonParser0.getBinaryValue();
        assertEquals(2, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"iuZ9pJzu");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
        readerBasedJsonParser0.clearCurrentToken();
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test04855() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(" entries");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        // Undeclared exception!
        try {
            readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test04956() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("\"\"5b");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        int int0 = readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
        assertEquals(2, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("\"\"5b");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        int int0 = readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test05058() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        StringReader stringReader0 = new StringReader("\"AE63:KE+'k@F;l");
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3323), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-1170), false);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        // Undeclared exception!
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal character ':' (code 0x3a) in base64 content
            //
            verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"mF~?2g %=zN2e");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        // Undeclared exception!
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal character '~' (code 0x7e) in base64 content
            //
            verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test05260() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\".\"HB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        stringReader0.reset();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end of base64-encoded String: base64 variant 'MIME-NO-LINEFEEDS' expects padding (one or more '=' characters) at the end
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test05361() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        // Undeclared exception!
        try {
            readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal character ':' (code 0x3a) in base64 content
            //
            verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test05462() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"AE63:KE+'k@F;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test05563() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("]Z?_");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test05664() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextIntValue(0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test05765() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&TE&9\"%7.5A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextTextValue();
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('8' (code 56)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test05866() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        stringReader0.read();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.nextIntValue(0);
        assertEquals(7, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test05867() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        stringReader0.read();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        int int0 = readerBasedJsonParser0.nextIntValue(0);
        assertEquals((-8), int0);
    }

    @Test(timeout = 4000)
    public void test05968() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("1EA_}CM");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('A' (code 65)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06069() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        assertEquals(2, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test06170() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("39E`\rZt;t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('`' (code 96)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06271() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        stringReader0.read();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextIntValue(3);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('J' (code 74)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06372() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("7-kQc{(/5gR");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('-' (code 45)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06473() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("8s*$HYxF]pw%");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextLongValue(1);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('s' (code 115)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06574() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("f{84Jd;}&Tc\"7z.A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'f': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Js#", false);
        StringReader stringReader0 = new StringReader("Js#");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.finishToken();
        assertFalse(readerBasedJsonParser0.isNaN());
    }

    @Test(timeout = 4000)
    public void test06776() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.finishToken();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 31]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test06877() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("f{}4Jfdqv&Tc\"7z.A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("f{}4Jfdqv&Tc\"7z.A");
        try {
            readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'f': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test06978() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E6:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.nextFieldName((SerializableString) null);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 29]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test07079() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        SerializedString serializedString0 = new SerializedString("gvC5v44SF]z]");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1151), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        assertTrue(readerBasedJsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test07080() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        SerializedString serializedString0 = new SerializedString("gvC5v44SF]z]");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1151), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        boolean boolean0 = readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("]GVl");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("]GVl");
        try {
            readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        StringReader stringReader0 = new StringReader("f{}4Jfdqv&Tc\"7z.A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextTextValue();
        SerializedString serializedString0 = new SerializedString("f{}4Jfdqv&Tc\"7z.A");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        assertEquals(2, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test07383() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&Tc\"7z.A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextTextValue();
        SerializedString serializedString0 = new SerializedString("Current token (");
        try {
            readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('8' (code 56)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test07484() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\".F\"\"HSp9B");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in VALUE_STRING
            //  at [Source: UNKNOWN; line: 1, column: 21]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test07585() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("]Gb_");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&Tc\"7z:A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(104);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3848, stringReader0, objectCodec0, charsToNameCanonicalizer1);
        readerBasedJsonParser0.getNextChar((String) null);
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0._finishString();
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'A': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 35]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test07888() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~0");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(34, "~0");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in field name
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test07989() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(":q;M6");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 236, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(3224, ":q;M6");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'q': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08090() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(",1TsH9E ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 118, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("-Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Non-standard token '-Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
            //  at [Source: UNKNOWN; line: 1, column: 19]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("...");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08393() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("42+;i6R8_DL");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('+' (code 43)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08494() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("5");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test08595() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("63eiP6#/Xg");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('i' (code 105)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08696() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("7-kQc{(/5gR");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('-' (code 45)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08797() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("97hJZ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('h' (code 104)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08898() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(":_l%/,Z(B[h@idt#P,U");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test08999() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(";j,wpW>9UIk\tR}x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test090100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("<A|<bjVnl+%{J@>");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test091101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("=99..<}9oL:Yj9UP");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('=' (code 61)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test092102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(">Ssw*@]Di=");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('>' (code 62)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test093103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("?e\"MxLQgZNnby");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test094104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("@bpouX@\"6ge(Jn");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test095105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("ALLOW_NUMERIC_LEADING_ZEROS");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'ALLOW_NUMERIC_LEADING_ZEROS': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 55]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test096106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("BIG_DECIMAL");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'BIG_DECIMAL': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 23]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test097107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Csp&D)V");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Csp': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test098108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("DBAWh/@,%acjPB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'DBAWh': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test099109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("E6:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'E6': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test100110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("FUe`{~FZWdI;!/");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'FUe': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test101111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("GcYO@=`wJjI$O");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'GcYO': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test102112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("HM");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'HM': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test103113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("I");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'I': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test104114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Js#", false);
        StringReader stringReader0 = new StringReader("Js#");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Js': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test105115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("K&WNXZ");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'K': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test106116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("L");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'L': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test107117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("M");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'M': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test108118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("NaN");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test109119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "Operation not supported by generator of type ", false);
        StringReader stringReader0 = new StringReader("Operation not supported by generator of type ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Operation': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 10]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test110120() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("PEM");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'PEM': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test111121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Ql46[M2Cit");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Ql46': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test112122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Reader returned 0 characters when trying to read ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Reader': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test113123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("S|]0A`<");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'S': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test114124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("Trying to call same allocXxx() method second time");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Trying': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test115125() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Unexpected padding character ('");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Unexpected': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 11]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test116126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("VJ?O");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'VJ': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test117127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Wnxeu];DfwZ;7$k");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Wnxeu': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test118128() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("X:");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'X': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test119129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Y;+J:GhO #");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Y': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test120130() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("Z+5Ry/3^%sSHmp{'65?");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Z': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test121131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("[number with %d characters]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(3, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test122132() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("^p:9MHifr0f");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test123133() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("_-UbnEv9");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token '_': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test124134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("`)q&MM[r");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('`' (code 96)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test125135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("afxgG>#T");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'afxgG': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test126136() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("bJ)3x");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'bJ': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test127137() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonProcessingException");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test128138() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("dC8*Zp");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'dC8': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test129139() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("eIuf }");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'eIuf': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test130140() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("gc5r51b.2!AWX");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 111, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'gc5r51b': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 8]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test131141() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("h ]~R)aUc@~n: Jr");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'h': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test132142() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" itinbetwen ");
        char[] charArray0 = new char[13];
        charArray0[0] = '\t';
        charArray0[1] = '\t';
        charArray0[2] = '\t';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'itinbetwen': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 15]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test133143() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("j}/\"dz?03{gu}");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'j': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test134144() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("k@I[wy");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'k': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test135145() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("l\u0002&}j>4?g+\"<,");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1577), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'l\u0002': was expecting ('true', 'false' or 'null')
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test136146() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'maybe': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test137147() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("oMFeQR,UeM:]/k!n:/(");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'oMFeQR': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test138148() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("p!Ek");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2197, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'p': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test139149() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("q:6RJ6P)}");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'q': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test140150() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("r");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'r': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test141151() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("string value");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'string': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test142152() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("tqVL8M");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'tqVL8M': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 13]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test143153() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("u100Q");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'u100Q': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 11]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test144154() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(" v$^@`A48f4X");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'v$': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test145155() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'was': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test146156() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("x?vyq");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'x': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test147157() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("yv&{rx/Hd~]<");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'yv': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test148158() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("z~r3wh)");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'z': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test149159() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&T9\"%7z.5A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1484, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._parseNegNumber();
        assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test150160() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(", copied ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 909, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(11, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test151161() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[ +\td!EF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextIntValue(1);
        try {
            readerBasedJsonParser0._parseAposName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal unquoted character ((CTRL-CHAR, code 9)): has to be escaped using backslash to be included in name
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test152162() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("4");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        long long0 = readerBasedJsonParser0.nextLongValue(275);
        assertEquals(7, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test152163() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("4");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        long long0 = readerBasedJsonParser0.nextLongValue(275);
        assertEquals(4L, long0);
    }

    @Test(timeout = 4000)
    public void test153164() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        assertTrue(readerBasedJsonParser0.isClosed());
    }

    @Test(timeout = 4000)
    public void test154165() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("false");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextBooleanValue();
        assertEquals(10, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test155166() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("f{84Jfdqv&TE&9\"%7.5A");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._decodeEscaped();
        readerBasedJsonParser0.nextTextValue();
        readerBasedJsonParser0._parsePosNumber(3);
        assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test156167() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 425, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 15, 0, true);
        readerBasedJsonParser0.nextBooleanValue();
        assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test157168() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.225073858072012-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('-' (code 45)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 19]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test158169() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("3.C0~@E7!OWdaU Y=w");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('C' (code 67)) in numeric value: Decimal point not followed by a digit
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test159170() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[20];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 108, 3, false);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(8, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test160171() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("3.0E7!OWPU ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('!' (code 33)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test161172() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("0Y\"2/G4^");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 527, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-1540), false);
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Y' (code 89)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: -1537]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test162173() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("9Y\"/2G4^");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._finishString();
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('/' (code 47)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test163174() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("0Rh;?t2c?Yt5");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('R' (code 82)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 2, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test164175() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("9Y\"2/G4a^");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._finishString();
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('/' (code 47)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test165176() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("R=1e|+l>^g");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getNextChar("R=1e|+l>^g");
        readerBasedJsonParser0.getNextChar((String) null);
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('|' (code 124)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test166177() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("39E`\rZt;t");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('`' (code 96)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: UNKNOWN; line: 2, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test167178() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 2, true);
        try {
            readerBasedJsonParser0._parsePosNumber(0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test168179() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("2.2250738585072012-308");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1725), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('-' (code 45)): Expected space separating root-level values
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 20]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test169180() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("0.<m.=>bm0aJAOt[D");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-665), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('<' (code 60)) in numeric value: Decimal point not followed by a digit
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test170181() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("1EM,");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[14];
        charArray0[1] = '0';
        charArray0[2] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3687), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('M' (code 77)) in numeric value: Exponent indicator not followed by a digit
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test171182() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("4&[MjY");
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        char[] charArray0 = new char[14];
        charArray0[1] = '6';
        charArray0[2] = 'E';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, true);
        try {
            readerBasedJsonParser0.nextIntValue(3);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('&' (code 38)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test172183() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[2];
        charArray0[0] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, false);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(2, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test173184() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("-<");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[2];
        charArray0[1] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 6, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2, false);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('-' (code 45)): Expected space separating root-level values
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test174185() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", false);
        StringReader stringReader0 = new StringReader("08I>A3K");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextIntValue(2);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Invalid numeric value: Leading zeroes not allowed
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test175186() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("02%%Pv");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1914), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('%' (code 37)): Expected space separating root-level values
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test176187() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        charArray0[0] = '0';
        charArray0[1] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1348), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 33, true);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test177188() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("1EM,");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[14];
        stringReader0.read(charArray0);
        charArray0[1] = '0';
        charArray0[2] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3687), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test178189() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("HPMR");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[14];
        charArray0[1] = '0';
        charArray0[2] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3687), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
        try {
            readerBasedJsonParser0.nextToken();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('H' (code 72)): Expected space separating root-level values
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test179190() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Current token (");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        charArray0[2] = '0';
        charArray0[3] = '0';
        charArray0[4] = '0';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 93, true);
        // Undeclared exception!
        try {
            readerBasedJsonParser0._parseNegNumber();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test180191() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[9];
        charArray0[1] = 'I';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 2, true);
        try {
            readerBasedJsonParser0._parsePosNumber(0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in a Number value
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test181192() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("+INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 5, 0, true);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Non-standard token '+INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test182193() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "-INF", false);
        StringReader stringReader0 = new StringReader("-INF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3016, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test183194() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("+I2NF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('2' (code 50)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test184195() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("+Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3299), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("E");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        assertEquals(8, readerBasedJsonParser0.getCurrentTokenId());
    }

    @Test(timeout = 4000)
    public void test185196() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("-Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1060), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(1);
        assertEquals(8, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test186197() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" ithinbetwen ");
        char[] charArray0 = new char[2];
        charArray0[0] = '\t';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 40, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        JsonToken jsonToken0 = readerBasedJsonParser0._parsePosNumber(3);
        assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test187198() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("z~r3wh)");
        char[] charArray0 = new char[4];
        charArray0[0] = '\n';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        JsonToken jsonToken0 = readerBasedJsonParser0._parsePosNumber(2);
        assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test188199() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" itinbetwen ");
        char[] charArray0 = new char[7];
        charArray0[0] = '\r';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1163, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        JsonToken jsonToken0 = readerBasedJsonParser0._parsePosNumber(52);
        assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test188200() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" itinbetwen ");
        char[] charArray0 = new char[7];
        charArray0[0] = '\r';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1163, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        JsonToken jsonToken0 = readerBasedJsonParser0._parsePosNumber(52);
        assertArrayEquals(new char[] { '\r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test189201() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("8 k0oj*kgb");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 554, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test190202() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"n(K?,m");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        String string0 = readerBasedJsonParser0._parseName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test191203() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("ypYA");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        try {
            readerBasedJsonParser0._parseName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in field name
            //  at [Source: UNKNOWN; line: 2, column: 11]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test192204() throws Throwable {
        StringReader stringReader0 = new StringReader("9Y\"2/G4a^");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        // Undeclared exception!
        try {
            readerBasedJsonParser0._parseName();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test193205() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("Unrecognized character escape ");
        char[] charArray0 = iOContext0.allocTokenBuffer();
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 378, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1297, false);
        try {
            readerBasedJsonParser0._parseName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in field name
            //  at [Source: UNKNOWN; line: 1, column: 1358]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test194206() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("]Z?_");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 255, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(39, "Mnt}jhB'cT=:|mD7h");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in field name
            //  at [Source: UNKNOWN; line: 1, column: 9]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test195207() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("@3wy");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(39, "@3wy");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (''' (code 39)): was expecting double-quote to start field name
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test196208() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("}5JFL2NRsBB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-152), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(2, "}5JFL2NRsBB");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ((CTRL-CHAR, code 2)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
            //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test197209() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("v@3cwy");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 925, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(925, "v@3cwy");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input within/between root entries
            //  at [Source: UNKNOWN; line: 2, column: 22]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test198210() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0._parseAposName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in field name
            //  at [Source: UNKNOWN; line: 1, column: 23]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test199211() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        // Undeclared exception!
        try {
            readerBasedJsonParser0._parseAposName();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test200212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test201213() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(":]6");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 123, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(3276, ":]6");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (']' (code 93)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test202214() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("'<ug");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2719, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 9]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test203215() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("NaN");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2336, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        SerializedString serializedString0 = new SerializedString("6!v5dyvy2PK5PA4o");
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        assertEquals(8, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test204216() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
            //  at [Source: UNKNOWN; line: 1, column: 17]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test205217() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("-Infinity");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        stringReader0.read();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1060), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextLongValue(1);
        assertTrue(readerBasedJsonParser0.hasCurrentToken());
    }

    @Test(timeout = 4000)
    public void test206218() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("+");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in a Number value
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test207219() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonToken jsonToken0 = readerBasedJsonParser0._handleApos();
        assertEquals(JsonToken.VALUE_STRING, jsonToken0);
    }

    @Test(timeout = 4000)
    public void test208220() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[Integer with %d digits]");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = iOContext0.allocNameCopyBuffer(2920);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 743, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 22, 2248, true);
        try {
            readerBasedJsonParser0._handleApos();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 2297]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test209221() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("@3wy");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 925, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        // Undeclared exception!
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(925, "@3wy");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
        }
    }

    @Test(timeout = 4000)
    public void test210222() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("pYA");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        try {
            readerBasedJsonParser0._finishString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 2, column: 9]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test211223() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("expected padding character '");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[5];
        charArray0[0] = '\uFFF7';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-794), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2302, true);
        // Undeclared exception!
        try {
            readerBasedJsonParser0._finishString2();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 5
            //
            verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test212224() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("pYA");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._finishString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input: was expecting closing quote for a string value
            //  at [Source: UNKNOWN; line: 1, column: 9]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test213225() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("[ +\u0005d!aEF");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._skipString();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal unquoted character ((CTRL-CHAR, code 5)): has to be escaped using backslash to be included in string value
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test214226() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
    }

    @Test(timeout = 4000)
    public void test215227() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\nRequest payload : ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0._skipCR();
        assertFalse(readerBasedJsonParser0.canReadTypeId());
    }

    @Test(timeout = 4000)
    public void test216228() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("/)Q]ik");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(4428, "(V");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test217229() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" within/between ");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(451, " within/between ");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('w' (code 119)): was expecting a colon to separate field name and value
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test218230() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(":qF6");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 105, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char[] charArray0 = new char[1];
        readerBasedJsonParser0._inputBuffer = charArray0;
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(3224, ":qF6");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'qF6': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test219231() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\nRequest payload : ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 122, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(153, "\nRequest payload : ");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('R' (code 82)): was expecting a colon to separate field name and value
            //  at [Source: UNKNOWN; line: 2, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test220232() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader(" .N~");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 216, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._isNextTokenNameMaybe(54, "@S@CTk9|.p?-@Xc=1");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('.' (code 46)): was expecting a colon to separate field name and value
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test221233() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\nJequest pay>oad: ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'Jequest': was expecting ('true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 2, column: 8]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test222234() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(" / fv");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (' ' (code 32)): was expecting either '*' or '/' for a comment
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test223235() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("EO");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        char[] charArray0 = new char[7];
        charArray0[1] = '\t';
        charArray0[2] = '#';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 44, true);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test224236() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("z~r3wh)");
        char[] charArray0 = new char[5];
        charArray0[0] = '\n';
        charArray0[1] = '\n';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 3, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test225237() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader(" itinbetwen ");
        char[] charArray0 = new char[7];
        charArray0[0] = '\r';
        charArray0[1] = '\r';
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1163, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 3, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test226238() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("// fv");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.nextFieldName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test227239() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("#`|)v8974Z.wwTU5- ");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-851), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        String string0 = readerBasedJsonParser0.nextTextValue();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test228240() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("/");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in a comment
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test229241() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader(" / fv");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, true);
        try {
            readerBasedJsonParser0.nextToken();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character (' ' (code 32)): was expecting either '*' or '/' for a comment
            //  at [Source: UNKNOWN; line: 1, column: 37]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test230242() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("#*.L%lTaj");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2828), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 8, 8, false);
        long long0 = readerBasedJsonParser0.nextLongValue(1);
        assertArrayEquals(new char[] { 'j', 'a' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test230243() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("#*.L%lTaj");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[2];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2828), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 8, 8, false);
        long long0 = readerBasedJsonParser0.nextLongValue(1);
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test231244() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("pA");
        char[] charArray0 = new char[16];
        charArray0[1] = '/';
        charArray0[2] = '/';
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, '/', stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 33, true);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test232245() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._decodeEscaped();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in character escape sequence
            //  at [Source: UNKNOWN; line: 1, column: 1]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test233246() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0._decodeEscaped();
        assertEquals('\"', char0);
    }

    @Test(timeout = 4000)
    public void test234247() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("/)Q]ik");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0._decodeEscaped();
        assertEquals('/', char0);
    }

    @Test(timeout = 4000)
    public void test235248() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "]]O1'7|VHbg^CfvDI", true);
        StringReader stringReader0 = new StringReader("]]O1'7|VHbg^CfvDI");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._decodeEscaped();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized character escape ']' (code 93)
            //  at [Source: UNKNOWN; line: 1, column: 2]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test236249() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("bF|j/;BZaeEE");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 48, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0._decodeEscaped();
        assertEquals('\b', char0);
    }

    @Test(timeout = 4000)
    public void test237250() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        char char0 = readerBasedJsonParser0._decodeEscaped();
        assertEquals('\n', char0);
    }

    @Test(timeout = 4000)
    public void test238251() throws Throwable {
        StringReader stringReader0 = new StringReader("uCY!nJ.'~C4");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 2, true);
        try {
            readerBasedJsonParser0._decodeEscaped();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Y' (code 89)): expected a hex-digit for character escape sequence
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test239252() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("uCY!nJ.'~C4");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._decodeEscaped();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected character ('Y' (code 89)): expected a hex-digit for character escape sequence
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test240253() throws Throwable {
        Object object0 = new Object();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        StringReader stringReader0 = new StringReader("u");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 293, stringReader0, objectCodec0, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0._decodeEscaped();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in character escape sequence
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test241254() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        StringReader stringReader0 = new StringReader("string value");
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.getNextChar("string value");
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'tring': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test242255() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("tqVL8M");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'tqVL8M': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 13]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test243256() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("f{84Jfa}&Tc\"gz.A");
        char[] charArray0 = new char[5];
        stringReader0.read(charArray0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'fa': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 3]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test244257() throws Throwable {
        StringReader stringReader0 = new StringReader("null array");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 34, 33, true);
        readerBasedJsonParser0.nextTextValue();
        assertArrayEquals(new char[] { ' ' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test244258() throws Throwable {
        StringReader stringReader0 = new StringReader("null array");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
        char[] charArray0 = new char[1];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 34, 33, true);
        readerBasedJsonParser0.nextTextValue();
        assertEquals(35, readerBasedJsonParser0.getTokenColumnNr());
    }

    @Test(timeout = 4000)
    public void test245259() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("nfulla_ry");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextLongValue(3);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'nfulla_ry': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 19]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test246260() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("nuary");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextBooleanValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'nuary': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 11]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test247261() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("nul{;atrrub7;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextTextValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'nul': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test248262() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("null+hrqy");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextTextValue();
        assertEquals(11, readerBasedJsonParser0.currentTokenId());
    }

    @Test(timeout = 4000)
    public void test249263() throws Throwable {
        StringReader stringReader0 = new StringReader("null array");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test250264() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 6750, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        readerBasedJsonParser0.nextFieldName();
        assertArrayEquals(new char[] { 'l', '{', ';' }, charArray0);
    }

    @Test(timeout = 4000)
    public void test250265() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("null{;arr;y");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[3];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 6750, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
        readerBasedJsonParser0.nextFieldName();
        assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
    }

    @Test(timeout = 4000)
    public void test251266() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("nullray");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        try {
            readerBasedJsonParser0.nextFieldName();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'nullray': was expecting 'null', 'true', 'false' or NaN
            //  at [Source: UNKNOWN; line: 1, column: 15]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test252267() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("\"iuZ9pJzu");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in VALUE_STRING
            //  at [Source: UNKNOWN; line: 1, column: 19]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test253268() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"AE63:KE+'k@F;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character ':' (code 0x3a) in base64 content
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test254269() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E;63:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character ';' (code 0x3b) in base64 content
            //  at [Source: UNKNOWN; line: 1, column: 4]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test255270() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\".\"HB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in VALUE_STRING
            //  at [Source: UNKNOWN; line: 1, column: 11]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test256271() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\".\"HB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        stringReader0.reset();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end of base64-encoded String: base64 variant 'MIME-NO-LINEFEEDS' expects padding (one or more '=' characters) at the end
            //  at [Source: UNKNOWN; line: 1, column: 6]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test257272() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\"E6:KE+'kF;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character ':' (code 0x3a) in base64 content
            //  at [Source: UNKNOWN; line: 1, column: 5]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test258273() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"*\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end-of-input in VALUE_STRING
            //  at [Source: UNKNOWN; line: 1, column: 13]
            //
            verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
        }
    }

    @Test(timeout = 4000)
    public void test259274() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        StringReader stringReader0 = new StringReader("\"*\"HSB");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        readerBasedJsonParser0._finishString2();
        stringReader0.reset();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unexpected end of base64-encoded String: base64 variant 'MIME-NO-LINEFEEDS' expects padding (one or more '=' characters) at the end
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test260275() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringReader stringReader0 = new StringReader("\" E63:KE+'q@F;l");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        readerBasedJsonParser0.nextFieldName();
        try {
            readerBasedJsonParser0.getBinaryValue();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Failed to decode VALUE_STRING as base64 (MIME-NO-LINEFEEDS): Illegal character ':' (code 0x3a) in base64 content
            //  at [Source: UNKNOWN; line: 1, column: 7]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test261276() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        assertEquals(1, jsonLocation0.getLineNr());
    }

    @Test(timeout = 4000)
    public void test261277() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        assertEquals(0, jsonLocation0.getColumnNr());
    }

    @Test(timeout = 4000)
    public void test261278() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        assertEquals((-1L), jsonLocation0.getCharOffset());
    }

    @Test(timeout = 4000)
    public void test261279() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("~-8");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
        assertEquals((-1L), jsonLocation0.getByteOffset());
    }

    @Test(timeout = 4000)
    public void test262280() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("/JK0xy tQtGN&cP}");
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = iOContext0.allocTokenBuffer(0);
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4000, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 4000, true);
        try {
            readerBasedJsonParser0._reportInvalidToken("D", "D");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unrecognized token 'D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000...': was expecting D
            //  at [Source: UNKNOWN; line: 1, column: 259]
            //
            verifyException("com.fasterxml.jackson.core.JsonParser", e);
        }
    }
}
