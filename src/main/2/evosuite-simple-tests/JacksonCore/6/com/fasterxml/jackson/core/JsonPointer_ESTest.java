/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 16:39:01 GMT 2024
 */
package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
        jsonPointer0.hashCode();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
        jsonPointer0.hashCode();
        assertEquals("hK[02", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
        jsonPointer0.hashCode();
        assertTrue(jsonPointer0.mayMatchProperty());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
        jsonPointer0.hashCode();
        assertEquals("PhK[02", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("PhK[02");
        jsonPointer0.hashCode();
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        String string0 = jsonPointer0.getMatchingProperty();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("");
        JsonPointer jsonPointer1 = jsonPointer0.tail();
        assertNull(jsonPointer1);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        jsonPointer0.toString();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        // Undeclared exception!
        try {
            JsonPointer.valueOf("Gm");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid input: JSON Pointer expression must start with '/': \"Gm\"
            //
            verifyException("com.fasterxml.jackson.core.JsonPointer", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        int int0 = jsonPointer0.getMatchingIndex();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.valueOf((String) null);
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
        assertTrue(jsonPointer0.mayMatchProperty());
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
        assertEquals("/k`_cxBzi3DE,l`", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.compile("/k`_cxBzi3DE,l`");
        assertEquals("k`_cxBzi3DE,l`", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        boolean boolean0 = jsonPointer0.matches();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        boolean boolean0 = jsonPointer0.matches();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        boolean boolean0 = jsonPointer0.matches();
        assertTrue(jsonPointer0.mayMatchProperty());
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        boolean boolean0 = jsonPointer0.matches();
        assertEquals("", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        boolean boolean0 = jsonPointer0.matches();
        assertEquals("\"", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.matches();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.matches();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.mayMatchProperty();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.mayMatchProperty();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1227() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("21731");
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertTrue(jsonPointer0.mayMatchProperty());
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("21731");
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertEquals(1731, jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("21731");
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("21731");
        boolean boolean0 = jsonPointer0.mayMatchElement();
        assertEquals("1731", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        jsonPointer0.matchProperty("8?Ffx");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        assertTrue(jsonPointer0.mayMatchProperty());
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
        assertNotNull(jsonPointer1);
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
        assertEquals("\"", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test1436() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty("");
        assertEquals("", jsonPointer1.toString());
    }

    @Test(timeout = 4000)
    public void test1537() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
        assertEquals("E;", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test1538() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test1539() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
        assertEquals(" E;", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test1540() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1541() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail(" E;");
        JsonPointer jsonPointer1 = jsonPointer0.matchProperty(" E;");
        assertNull(jsonPointer1);
    }

    @Test(timeout = 4000)
    public void test1642() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        JsonPointer jsonPointer1 = jsonPointer0.matchElement(1734);
        assertNull(jsonPointer1);
    }

    @Test(timeout = 4000)
    public void test1743() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("30");
        JsonPointer jsonPointer1 = jsonPointer0.matchElement(0);
        assertNotNull(jsonPointer1);
    }

    @Test(timeout = 4000)
    public void test1744() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("30");
        JsonPointer jsonPointer1 = jsonPointer0.matchElement(0);
        assertEquals("0", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test1745() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("30");
        JsonPointer jsonPointer1 = jsonPointer0.matchElement(0);
        assertEquals("30", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test1746() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("30");
        JsonPointer jsonPointer1 = jsonPointer0.matchElement(0);
        assertEquals((-1), jsonPointer1.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1847() throws Throwable {
        JsonPointer jsonPointer0 = new JsonPointer();
        jsonPointer0.matchElement((-1));
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test1948() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2/22738585072012e-308", 0);
        Object object0 = new Object();
        boolean boolean0 = jsonPointer0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1949() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2/22738585072012e-308", 0);
        Object object0 = new Object();
        boolean boolean0 = jsonPointer0.equals(object0);
        assertEquals("~2", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test1950() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2/22738585072012e-308", 0);
        Object object0 = new Object();
        boolean boolean0 = jsonPointer0.equals(object0);
        assertFalse(jsonPointer0.mayMatchElement());
    }

    @Test(timeout = 4000)
    public void test2051() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        boolean boolean0 = jsonPointer0.equals(jsonPointer0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2152() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        boolean boolean0 = jsonPointer0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2253() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        JsonPointer jsonPointer1 = new JsonPointer();
        boolean boolean0 = jsonPointer0.equals(jsonPointer1);
        assertEquals((-1), jsonPointer1.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2254() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        JsonPointer jsonPointer1 = new JsonPointer();
        boolean boolean0 = jsonPointer0.equals(jsonPointer1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2355() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("G*(");
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test2356() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("G*(");
        assertEquals("*(", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2357() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("G*(");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2358() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("G*(");
        assertEquals("G*(", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test2459() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("22115797731");
        assertEquals("2115797731", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2460() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("22115797731");
        assertTrue(jsonPointer0.mayMatchElement());
    }

    @Test(timeout = 4000)
    public void test2461() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("22115797731");
        assertEquals("22115797731", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test2562() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        JsonPointer jsonPointer1 = new JsonPointer("2215797731", "2215797731", jsonPointer0);
        assertEquals((-1), jsonPointer1.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2563() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer.EMPTY;
        JsonPointer jsonPointer1 = new JsonPointer("2215797731", "2215797731", jsonPointer0);
        assertFalse(jsonPointer1.matches());
    }

    @Test(timeout = 4000)
    public void test2664() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("D8SA/dH^(\"7,)Y*e`");
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test2665() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("D8SA/dH^(\"7,)Y*e`");
        assertEquals("D8SA/dH^(\"7,)Y*e`", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test2666() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("D8SA/dH^(\"7,)Y*e`");
        assertEquals("8SA", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2667() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("D8SA/dH^(\"7,)Y*e`");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2768() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("62z~i/Xjq2");
        assertFalse(jsonPointer0.mayMatchElement());
    }

    @Test(timeout = 4000)
    public void test2769() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("62z~i/Xjq2");
        assertEquals("2z~i", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2770() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("62z~i/Xjq2");
        assertEquals("62z~i/Xjq2", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test2871() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("mN$}!tZmIy~");
        assertEquals("mN$}!tZmIy~", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test2872() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("mN$}!tZmIy~");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2873() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("mN$}!tZmIy~");
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test2874() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("mN$}!tZmIy~");
        assertEquals("N$}!tZmIy~", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2975() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("5~1IxO.~:rb[Ps+]^D");
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test2976() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("5~1IxO.~:rb[Ps+]^D");
        assertEquals("/IxO.~:rb[Ps+]^D", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test2977() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseTail("5~1IxO.~:rb[Ps+]^D");
        assertEquals("5~1IxO.~:rb[Ps+]^D", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test3078() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("mN$}!tZmIy~", 0);
        assertFalse(jsonPointer0.mayMatchElement());
    }

    @Test(timeout = 4000)
    public void test3079() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("mN$}!tZmIy~", 0);
        assertEquals("mN$}!tZmIy~", jsonPointer0.toString());
    }

    @Test(timeout = 4000)
    public void test3080() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("mN$}!tZmIy~", 0);
        assertEquals("~mN$}!tZmIy~", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test3081() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("mN$}!tZmIy~", 0);
        assertFalse(jsonPointer0.matches());
    }

    @Test(timeout = 4000)
    public void test3182() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.2250738585072012e-308", 12);
        assertEquals((-1), jsonPointer0.getMatchingIndex());
    }

    @Test(timeout = 4000)
    public void test3183() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.2250738585072012e-308", 12);
        assertEquals(".225073858~72012e-308", jsonPointer0.getMatchingProperty());
    }

    @Test(timeout = 4000)
    public void test3184() throws Throwable {
        JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.2250738585072012e-308", 12);
        assertEquals("2.2250738585072012e-308", jsonPointer0.toString());
    }
}
