/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 05:16:21 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        // Undeclared exception!
        try {
            document0.before((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell("MUt%MU7e d_.H#_^:,~");
        document0.setBaseUri("MUt%MU7e d_.H#_^:,~");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = new Document("h3");
        // Undeclared exception!
        try {
            document0.after((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Node node0 = element0.unwrap();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Node node0 = element0.unwrap();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DocumentType documentType0 = new DocumentType("'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`", "'6r0AKZYgG!E7DI.`");
        String string0 = documentType0.toString();
        assertEquals("<!DOCTYPE '6r0AKZYgG!E7DI.` PUBLIC \"'6r0AKZYgG!E7DI.`\" \"'6r0AKZYgG!E7DI.`\">", string0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Document document0 = Document.createShell("b)=");
        // Undeclared exception!
        try {
            document0.before("b)=");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(" PUBLIC \"", " PUBLIC \"");
        textNode0.toString();
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Document document0 = Document.createShell("aU8*wN9L|W@l1Z={");
        String string0 = document0.toString();
        assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        // Undeclared exception!
        try {
            document0.wrap("(T3F8(+lwLLz");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Document document0 = Document.createShell("3");
        Attributes attributes0 = document0.attributes();
        assertNotNull(attributes0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        textNode0.attr("Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals(0, node0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        textNode0.attr("Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        textNode0.attr("Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertNotSame(node0, textNode0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        Document document0 = new Document("Q#Ci>(n?qQK:FR roS");
        String string0 = document0.attr("abs:abs:MarkupDeclarationOpen");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        Document document0 = Document.createShell("abs:class");
        document0.toggleClass("abs:class");
        String string0 = document0.absUrl("abs:class");
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        Document document0 = Document.createShell("=A6eD:s<TZ9z");
        List<Node> list0 = document0.childNodesCopy();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document0.location());
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1426() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals("&g.L`<a?1r", document0.location());
    }

    @Test(timeout = 4000)
    public void test1428() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertEquals("&g.L`<a?1r", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test1436() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertNotNull(document1);
    }

    @Test(timeout = 4000)
    public void test1437() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1438() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document0.location());
    }

    @Test(timeout = 4000)
    public void test1439() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1440() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1441() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1442() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1443() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1444() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1445() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(2, document1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1446() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1447() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test1448() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test1449() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertFalse(document1.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1450() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals(0, document1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1451() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertEquals("&g.L`<a?1r", document1.location());
    }

    @Test(timeout = 4000)
    public void test1452() throws Throwable {
        Document document0 = Document.createShell("&g.L`<a?1r");
        document0.setParentNode(document0);
        Document document1 = (Document) document0.after("&g.L`<a?1r");
        assertFalse(document1.isBlock());
    }

    @Test(timeout = 4000)
    public void test1553() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test1554() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1555() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1556() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1557() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1558() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", document0.location());
    }

    @Test(timeout = 4000)
    public void test1559() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1560() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1561() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1562() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test1563() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1564() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1565() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1566() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1567() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals("(T3F8(+lwLLz", document0.location());
    }

    @Test(timeout = 4000)
    public void test1568() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1569() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1570() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals("(T3F8(+lwLLz", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1571() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1572() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1573() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertEquals("(T3F8(+lwLLz", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1574() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1575() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertSame(element0, element1);
    }

    @Test(timeout = 4000)
    public void test1576() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertSame(element1, element0);
    }

    @Test(timeout = 4000)
    public void test1577() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test1578() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1579() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test1580() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1581() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1582() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", document0.location());
    }

    @Test(timeout = 4000)
    public void test1583() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1584() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1585() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1586() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1587() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1588() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1589() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1590() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(0, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test1591() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals(0, element1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1592() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertEquals("(T3F8(+lwLLz", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test1593() throws Throwable {
        Document document0 = Document.createShell("(T3F8(+lwLLz");
        Element element0 = document0.body();
        Element element1 = element0.wrap("(T3F8(+lwLLz");
        assertTrue(element1.isBlock());
    }

    @Test(timeout = 4000)
    public void test1694() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test1695() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals("</^# `]f6", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1696() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals("</^# `]f6", document0.location());
    }

    @Test(timeout = 4000)
    public void test1697() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1698() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test1699() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test16100() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test16101() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test16102() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test16103() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test16104() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals("</^# `]f6", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test16105() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals("</^# `]f6", document0.location());
    }

    @Test(timeout = 4000)
    public void test16106() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test16107() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test16108() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test16109() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test16110() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test16111() throws Throwable {
        Document document0 = Document.createShell("</^# `]f6");
        Node node0 = document0.wrap("</^# `]f6");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test17112() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test17113() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals(")a.$!45T8R=>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test17114() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test17115() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals(")a.$!45T8R=>", document0.location());
    }

    @Test(timeout = 4000)
    public void test17116() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test17117() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test17118() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test17119() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test17120() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test17121() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test17122() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test17123() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertNotNull(document1);
    }

    @Test(timeout = 4000)
    public void test17124() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(")a.$!45T8R=>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test17125() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test17126() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test17127() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(")a.$!45T8R=>", document0.location());
    }

    @Test(timeout = 4000)
    public void test17128() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test17129() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test17130() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test17131() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test17132() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test17133() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(0, document1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test17134() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.isBlock());
    }

    @Test(timeout = 4000)
    public void test17135() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test17136() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(")a.$!45T8R=>", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test17137() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(")a.$!45T8R=>", document1.location());
    }

    @Test(timeout = 4000)
    public void test17138() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test17139() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test17140() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test17141() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertSame(document0, document2);
    }

    @Test(timeout = 4000)
    public void test17142() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertSame(document2, document0);
    }

    @Test(timeout = 4000)
    public void test17143() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertSame(document2, document1);
    }

    @Test(timeout = 4000)
    public void test17144() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertNotNull(document2);
    }

    @Test(timeout = 4000)
    public void test17145() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(")a.$!45T8R=>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test17146() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test17147() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(")a.$!45T8R=>", document0.location());
    }

    @Test(timeout = 4000)
    public void test17148() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test17149() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test17150() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test17151() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test17152() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test17153() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(0, document2.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test17154() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertFalse(document2.isBlock());
    }

    @Test(timeout = 4000)
    public void test17155() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(")a.$!45T8R=>", document2.location());
    }

    @Test(timeout = 4000)
    public void test17156() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(")a.$!45T8R=>", document2.baseUri());
    }

    @Test(timeout = 4000)
    public void test17157() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(0, document2.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test17158() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
    }

    @Test(timeout = 4000)
    public void test17159() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertEquals("#document", document2.nodeName());
    }

    @Test(timeout = 4000)
    public void test17160() throws Throwable {
        Document document0 = new Document(")a.$!45T8R=>");
        Document document1 = (Document) document0.appendChild(document0);
        Document document2 = (Document) document0.unwrap();
        assertFalse(document2.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test18161() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test18162() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test18163() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test18164() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test18165() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test18166() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test18167() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test18168() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test18169() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.location());
    }

    @Test(timeout = 4000)
    public void test18170() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test18171() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test18172() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test18173() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test18174() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test18175() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test18176() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test18177() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.location());
    }

    @Test(timeout = 4000)
    public void test18178() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals(0, document0.parentNode.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test18179() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals(0, document0.parentNode.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test18180() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        assertEquals("?bsnorg.jsoup.nod6s.nod{", document0.parentNode.baseUri());
    }

    @Test(timeout = 4000)
    public void test18181() throws Throwable {
        Document document0 = new Document("?bsnorg.jsoup.nod6s.nod{");
        document0.parentNode = (Node) document0;
        // Undeclared exception!
        try {
            document0.setParentNode(document0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.AbstractList", e);
        }
    }

    @Test(timeout = 4000)
    public void test19182() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test19183() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test19184() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test19185() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test19186() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test19187() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals("=A6eD:s<TZ9z", document0.location());
    }

    @Test(timeout = 4000)
    public void test19188() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals("=A6eD:s<TZ9z", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test19189() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test19190() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test19191() throws Throwable {
        Document document0 = new Document("=A6eD:s<TZ9z");
        // Undeclared exception!
        try {
            document0.replaceChild(document0, document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test20192() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test20193() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test20194() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test20195() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test20196() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test20197() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals("org.", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test20198() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test20199() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test20200() throws Throwable {
        Document document0 = Document.createShell("org.");
        assertEquals("org.", document0.location());
    }

    @Test(timeout = 4000)
    public void test20201() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test20202() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test20203() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test20204() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test20205() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test20206() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals("org.", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test20207() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test20208() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test20209() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals("org.", document0.location());
    }

    @Test(timeout = 4000)
    public void test20210() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test20211() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals("org.", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test20212() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test20213() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test20214() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals(1, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test20215() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test20216() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test20217() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test20218() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals("org.", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test20219() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test20220() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test20221() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals("org.", document0.location());
    }

    @Test(timeout = 4000)
    public void test20222() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test20223() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals("org.", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test20224() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test20225() throws Throwable {
        Document document0 = Document.createShell("org.");
        Element element0 = document0.body();
        element0.replaceWith(document0);
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test21226() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test21227() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test21228() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test21229() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test21230() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test21231() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test21232() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(";EZsQV", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test21233() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(";EZsQV", document0.location());
    }

    @Test(timeout = 4000)
    public void test21234() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test21235() throws Throwable {
        Document document0 = new Document(";EZsQV");
        // Undeclared exception!
        try {
            document0.removeChild(document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test22236() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test22237() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test22238() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test22239() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
    }

    @Test(timeout = 4000)
    public void test22240() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test22241() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test22242() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test22243() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test22244() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test22245() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test22246() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test22247() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
    }

    @Test(timeout = 4000)
    public void test22248() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test22249() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test22250() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test22251() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test22252() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test22253() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test22254() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test22255() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test22256() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals("abs:Crg.Xyoup|nodes.node", document0.location());
    }

    @Test(timeout = 4000)
    public void test22257() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test22258() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test22259() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test22260() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test22261() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test22262() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test22263() throws Throwable {
        Document document0 = Document.createShell("abs:Crg.Xyoup|nodes.node");
        document0.setParentNode(document0);
        List<Node> list0 = document0.siblingNodes();
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test23264() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test23265() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals("vB~.s:Q^V}x", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test23266() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test23267() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test23268() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals(" vB~.s:Q^V}x", document0.location());
    }

    @Test(timeout = 4000)
    public void test23269() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test23270() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test23271() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test23272() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test23273() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test23274() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals("vB~.s:Q^V}x", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test23275() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test23276() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test23277() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals(" vB~.s:Q^V}x", document0.location());
    }

    @Test(timeout = 4000)
    public void test23278() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test23279() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test23280() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test23281() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test23282() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test23283() throws Throwable {
        Document document0 = new Document(" vB~.s:Q^V}x");
        List<Node> list0 = document0.siblingNodes();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test24284() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test24285() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(";EZsQV", document0.location());
    }

    @Test(timeout = 4000)
    public void test24286() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test24287() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test24288() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test24289() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test24290() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test24291() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test24292() throws Throwable {
        Document document0 = new Document(";EZsQV");
        assertEquals(";EZsQV", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test24293() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test24294() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(";EZsQV", document0.location());
    }

    @Test(timeout = 4000)
    public void test24295() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test24296() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test24297() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test24298() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test24299() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test24300() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test24301() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(";EZsQV", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test24302() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test24303() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertFalse(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test24304() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(";EZsQV", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test24305() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test24306() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test24307() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(";EZsQV", document0.location());
    }

    @Test(timeout = 4000)
    public void test24308() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test24309() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test24310() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test24311() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test24312() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test24313() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test24314() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(";EZsQV", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test24315() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test24316() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertFalse(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test24317() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(";EZsQV", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test24318() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test24319() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test24320() throws Throwable {
        Document document0 = new Document(";EZsQV");
        Element element0 = document0.appendElement("9\"O23$3+=,");
        List<Node> list0 = element0.siblingNodes();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test25321() throws Throwable {
        Document document0 = Document.createShell("");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test25322() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test25323() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals("", document0.location());
    }

    @Test(timeout = 4000)
    public void test25324() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test25325() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test25326() throws Throwable {
        Document document0 = Document.createShell("");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test25327() throws Throwable {
        Document document0 = Document.createShell("");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test25328() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test25329() throws Throwable {
        Document document0 = Document.createShell("");
        assertEquals("", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test25330() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test25331() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test25332() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertNotNull(document1);
    }

    @Test(timeout = 4000)
    public void test25333() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test25334() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("", document0.location());
    }

    @Test(timeout = 4000)
    public void test25335() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test25336() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test25337() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test25338() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test25339() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test25340() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test25341() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test25342() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test25343() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(2, document1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test25344() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("", document1.location());
    }

    @Test(timeout = 4000)
    public void test25345() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.isBlock());
    }

    @Test(timeout = 4000)
    public void test25346() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test25347() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test25348() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test25349() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test25350() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test25351() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test25352() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals("", document0.location());
    }

    @Test(timeout = 4000)
    public void test25353() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test25354() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals(1, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test25355() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test25356() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test25357() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals("", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test25358() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test25359() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals("", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test25360() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test25361() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test25362() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = (Document) document0.appendChild(document0);
        Element element0 = (Element) document0.previousSibling();
        assertEquals(2, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test26363() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test26364() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test26365() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test26366() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals(")a.$!45T8R=>", document0.location());
    }

    @Test(timeout = 4000)
    public void test26367() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test26368() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals(")a.$!45T8R=>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test26369() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test26370() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test26371() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test26372() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test26373() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test26374() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test26375() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals(")a.$!45T8R=>", document0.location());
    }

    @Test(timeout = 4000)
    public void test26376() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test26377() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals(")a.$!45T8R=>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test26378() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test26379() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test26380() throws Throwable {
        Document document0 = Document.createShell(")a.$!45T8R=>");
        Node node0 = document0.previousSibling();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test27381() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test27382() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals("&+Bk.?#7b", document0.location());
    }

    @Test(timeout = 4000)
    public void test27383() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test27384() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test27385() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test27386() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test27387() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test27388() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertEquals("&+Bk.?#7b", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test27389() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test27390() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test27391() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test27392() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertNotNull(document1);
    }

    @Test(timeout = 4000)
    public void test27393() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test27394() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("&+Bk.?#7b", document0.location());
    }

    @Test(timeout = 4000)
    public void test27395() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test27396() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test27397() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test27398() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test27399() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("&+Bk.?#7b", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test27400() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test27401() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.isBlock());
    }

    @Test(timeout = 4000)
    public void test27402() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(1, document1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test27403() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test27404() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertFalse(document1.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test27405() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("&+Bk.?#7b", document1.location());
    }

    @Test(timeout = 4000)
    public void test27406() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test27407() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals("&+Bk.?#7b", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test27408() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        assertEquals(0, document1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test27409() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertSame(document0, document1);
    }

    @Test(timeout = 4000)
    public void test27410() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test27411() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test27412() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals("&+Bk.?#7b", document0.location());
    }

    @Test(timeout = 4000)
    public void test27413() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test27414() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test27415() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test27416() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test27417() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertEquals("&+Bk.?#7b", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test27418() throws Throwable {
        Document document0 = new Document("&+Bk.?#7b");
        Document document1 = (Document) document0.appendChild(document0);
        Node node0 = document0.previousSibling();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test28419() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        assertNotNull(dataNode0);
    }

    @Test(timeout = 4000)
    public void test28420() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        assertEquals(0, dataNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test28421() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        assertEquals("#data", dataNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test28422() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        assertEquals(0, dataNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test28423() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        assertEquals("", dataNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test28424() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        boolean boolean0 = dataNode0.equals("\n");
        assertEquals(0, dataNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test28425() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        boolean boolean0 = dataNode0.equals("\n");
        assertEquals("#data", dataNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test28426() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        boolean boolean0 = dataNode0.equals("\n");
        assertEquals(0, dataNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test28427() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        boolean boolean0 = dataNode0.equals("\n");
        assertEquals("", dataNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test28428() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("abs:G^C", "\n");
        boolean boolean0 = dataNode0.equals("\n");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test29429() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test29430() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test29431() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test29432() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test29433() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test29434() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertNotSame(textNode0, node0);
    }

    @Test(timeout = 4000)
    public void test29435() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertNotSame(node0, textNode0);
    }

    @Test(timeout = 4000)
    public void test29436() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test29437() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test29438() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test29439() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test29440() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test29441() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals("#text", node0.nodeName());
    }

    @Test(timeout = 4000)
    public void test29442() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals(0, node0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test29443() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals(0, node0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test29444() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertEquals("Ajo'{YRo|^]#qK", node0.baseUri());
    }

    @Test(timeout = 4000)
    public void test29445() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        assertTrue(node0.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test29446() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertNotSame(textNode0, node0);
    }

    @Test(timeout = 4000)
    public void test29447() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertNotSame(node0, textNode0);
    }

    @Test(timeout = 4000)
    public void test29448() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test29449() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test29450() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals("Ajo'{YRo|^]#qK", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test29451() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test29452() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals("#text", node0.nodeName());
    }

    @Test(timeout = 4000)
    public void test29453() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals(0, node0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test29454() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals(0, node0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test29455() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertEquals("Ajo'{YRo|^]#qK", node0.baseUri());
    }

    @Test(timeout = 4000)
    public void test29456() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test29457() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertTrue(textNode0.equals((Object) node0));
    }

    @Test(timeout = 4000)
    public void test29458() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("Ajo'{YRo|^]#qK", "Ajo'{YRo|^]#qK");
        Node node0 = textNode0.clone();
        boolean boolean0 = textNode0.equals(node0);
        assertTrue(node0.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test30459() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test30460() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test30461() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals("abs:abs:#text", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test30462() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test30463() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test30464() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test30465() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        assertEquals("abs:abs:#text", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test30466() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test30467() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertNotNull(textNode1);
    }

    @Test(timeout = 4000)
    public void test30468() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals("abs:abs:#text", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test30469() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test30470() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test30471() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test30472() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test30473() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test30474() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test30475() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test30476() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("abs:abs:#text", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test30477() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test30478() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("abs:abs:#text", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test30479() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test30480() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test30481() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test30482() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test30483() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test30484() throws Throwable {
        TextNode textNode0 = new TextNode("abs:abs:#text", "abs:abs:#text");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("abs:abs:#text", "abs:abs:#text");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test31485() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test31486() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test31487() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        assertEquals("bs:s#texE", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test31488() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test31489() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test31490() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test31491() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        assertEquals("bs:s#texE", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test31492() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test31493() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertNotNull(textNode1);
    }

    @Test(timeout = 4000)
    public void test31494() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test31495() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test31496() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertEquals("bs:s#texE", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test31497() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test31498() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test31499() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test31500() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test31501() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test31502() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals("bs:s#texE", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test31503() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test31504() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test31505() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test31506() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals("bs:s#texE", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test31507() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test31508() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test31509() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertFalse(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test31510() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("bs:s#texE", "bs:s#texE");
        textNode0.childNodes = null;
        TextNode textNode1 = new TextNode("bs:s#texE", "bs:s#texE");
        boolean boolean0 = textNode1.equals(textNode0);
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test32511() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test32512() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test32513() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32514() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test32515() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test32516() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test32517() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32518() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test32519() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test32520() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertNotNull(textNode1);
    }

    @Test(timeout = 4000)
    public void test32521() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test32522() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32523() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test32524() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test32525() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test32526() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32527() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test32528() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test32529() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test32530() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test32531() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("u<[%9?r#Pbs", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test32532() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32533() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test32534() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test32535() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test32536() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("u<[%9?r#Pbs", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test32537() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test32538() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertTrue(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test32539() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode0.childNodes = null;
        TextNode textNode1 = TextNode.createFromEncoded("u<[%9?r#Pbs", "u<[%9?r#Pbs");
        textNode1.childNodes = null;
        boolean boolean0 = textNode0.equals(textNode1);
        assertTrue(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test33540() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test33541() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        assertEquals("3", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test33542() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test33543() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33544() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33545() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test33546() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertNotNull(textNode1);
    }

    @Test(timeout = 4000)
    public void test33547() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test33548() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals("3", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test33549() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33550() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33551() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertTrue(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test33552() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test33553() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertSame(textNode0, node0);
    }

    @Test(timeout = 4000)
    public void test33554() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertNotSame(node0, textNode1);
    }

    @Test(timeout = 4000)
    public void test33555() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertSame(node0, textNode0);
    }

    @Test(timeout = 4000)
    public void test33556() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test33557() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals("3", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test33558() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test33559() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33560() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33561() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals("#text", node0.nodeName());
    }

    @Test(timeout = 4000)
    public void test33562() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals(0, node0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33563() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals(0, node0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33564() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertEquals("3", node0.baseUri());
    }

    @Test(timeout = 4000)
    public void test33565() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertFalse(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test33566() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        assertFalse(node0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test33567() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test33568() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertSame(textNode0, node0);
    }

    @Test(timeout = 4000)
    public void test33569() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode1, node0);
    }

    @Test(timeout = 4000)
    public void test33570() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test33571() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("3", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test33572() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test33573() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33574() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33575() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test33576() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("3", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test33577() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test33578() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test33579() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test33580() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test33581() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode1.equals((Object) node0));
    }

    @Test(timeout = 4000)
    public void test33582() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode0.attr("3", "3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test34583() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test34584() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34585() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test34586() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        assertEquals("3", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test34587() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34588() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test34589() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertNotNull(textNode1);
    }

    @Test(timeout = 4000)
    public void test34590() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34591() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test34592() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34593() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertEquals("3", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test34594() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        assertTrue(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test34595() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test34596() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertSame(textNode1, node0);
    }

    @Test(timeout = 4000)
    public void test34597() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertSame(node0, textNode1);
    }

    @Test(timeout = 4000)
    public void test34598() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertNotSame(node0, textNode0);
    }

    @Test(timeout = 4000)
    public void test34599() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test34600() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34601() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test34602() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34603() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals("3", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test34604() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals("3", node0.baseUri());
    }

    @Test(timeout = 4000)
    public void test34605() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals("#text", node0.nodeName());
    }

    @Test(timeout = 4000)
    public void test34606() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals(0, node0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34607() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertEquals(0, node0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34608() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test34609() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        assertFalse(node0.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test34610() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode0, textNode1);
    }

    @Test(timeout = 4000)
    public void test34611() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode0, node0);
    }

    @Test(timeout = 4000)
    public void test34612() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertNotSame(textNode1, textNode0);
    }

    @Test(timeout = 4000)
    public void test34613() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertSame(textNode1, node0);
    }

    @Test(timeout = 4000)
    public void test34614() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34615() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test34616() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("3", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test34617() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34618() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test34619() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("#text", textNode1.nodeName());
    }

    @Test(timeout = 4000)
    public void test34620() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals(0, textNode1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test34621() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertEquals("3", textNode1.baseUri());
    }

    @Test(timeout = 4000)
    public void test34622() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test34623() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode0.equals((Object) textNode1));
    }

    @Test(timeout = 4000)
    public void test34624() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode0.equals((Object) node0));
    }

    @Test(timeout = 4000)
    public void test34625() throws Throwable {
        TextNode textNode0 = new TextNode("3", "3");
        TextNode textNode1 = TextNode.createFromEncoded("3", "3");
        Node node0 = textNode1.removeAttr("3");
        boolean boolean0 = textNode0.equals(textNode1);
        assertFalse(textNode1.equals((Object) textNode0));
    }

    @Test(timeout = 4000)
    public void test35626() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        assertNotNull(textNode0);
    }

    @Test(timeout = 4000)
    public void test35627() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test35628() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test35629() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test35630() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        assertEquals(0, textNode0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test35631() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test35632() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test35633() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test35634() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        textNode0.hashCode();
        assertEquals("U:lU6|E6,<* /'i-s", textNode0.baseUri());
    }

    @Test(timeout = 4000)
    public void test35635() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        textNode0.hashCode();
        assertEquals("#text", textNode0.nodeName());
    }

    @Test(timeout = 4000)
    public void test35636() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("U:lU6|E6,<* /'i-s", "U:lU6|E6,<* /'i-s");
        textNode0.childNodes = null;
        textNode0.hashCode();
        assertEquals(0, textNode0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test36637() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test36638() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals("s(IWS;Lt", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test36639() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test36640() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test36641() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test36642() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test36643() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test36644() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test36645() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        assertEquals("s(IWS;Lt", document0.location());
    }

    @Test(timeout = 4000)
    public void test36646() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals("s(IWS;Lt", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test36647() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test36648() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test36649() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test36650() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertFalse(document0.updateMetaCharsetElement());
    }

    @Test(timeout = 4000)
    public void test36651() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test36652() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test36653() throws Throwable {
        Document document0 = new Document("s(IWS;Lt");
        document0.hashCode();
        assertEquals("s(IWS;Lt", document0.location());
    }
}
