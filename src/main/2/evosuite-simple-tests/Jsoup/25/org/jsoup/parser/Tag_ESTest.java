/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:09:20 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Tag_ESTest extends Tag_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        boolean boolean0 = tag0.isData();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        boolean boolean0 = tag0.isData();
        assertTrue(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        assertNotNull(tag0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertTrue(tag0.isInline());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.preserveWhitespace();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.formatAsBlock();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0315() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test0316() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test0318() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0319() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertTrue(tag0.isInline());
    }

    @Test(timeout = 4000)
    public void test0320() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.getName();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0422() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test0423() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0424() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0425() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test0426() throws Throwable {
        Tag tag0 = Tag.valueOf("Obect must not be nG$l");
        tag0.toString();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test0527() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0528() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0529() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test0530() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test0531() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0532() throws Throwable {
        Tag tag0 = Tag.valueOf("must be false");
        boolean boolean0 = tag0.isBlock();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0633() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0634() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0635() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test0636() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0637() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0638() throws Throwable {
        Tag tag0 = Tag.valueOf("frme");
        boolean boolean0 = tag0.canContainBlock();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test0739() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0740() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.setSelfClosing();
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0841() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        boolean boolean0 = tag0.isInline();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0942() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test0943() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test0944() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test0945() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test0946() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test0947() throws Throwable {
        Tag tag0 = Tag.valueOf(">AK");
        boolean boolean0 = tag0.isInline();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1048() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test1049() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1050() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test1051() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1052() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test1053() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isData();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test1154() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        boolean boolean0 = tag0.isSelfClosing();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1255() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test1256() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test1257() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test1258() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test1259() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1260() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.isSelfClosing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1361() throws Throwable {
        Tag tag0 = Tag.valueOf("u");
        boolean boolean0 = tag0.isSelfClosing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1462() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test1463() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test1464() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test1465() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test1466() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test1467() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test1468() throws Throwable {
        Tag tag0 = Tag.valueOf("8jfmDD");
        boolean boolean0 = tag0.isKnownTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1569() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        boolean boolean0 = tag0.isKnownTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1670() throws Throwable {
        boolean boolean0 = Tag.isKnownTag("fPame");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1771() throws Throwable {
        boolean boolean0 = Tag.isKnownTag("frame");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1872() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.isData());
    }

    @Test(timeout = 4000)
    public void test1873() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test1874() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag1.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test1875() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test1876() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag1.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test1877() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag1.isInline());
    }

    @Test(timeout = 4000)
    public void test1878() throws Throwable {
        Tag tag0 = Tag.valueOf("del");
        Tag tag1 = Tag.valueOf("4rame");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1979() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test1980() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1981() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test1982() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test1983() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test1984() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test1985() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag0);
        assertTrue(tag0.isInline());
    }

    @Test(timeout = 4000)
    public void test2086() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test2087() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test2088() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2089() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test2090() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test2091() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test2092() throws Throwable {
        Tag tag0 = Tag.valueOf("oWv<30X#&7Ri2*pE");
        boolean boolean0 = tag0.equals("oWv<30X#&7Ri2*pE");
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test2193() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test2194() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test2195() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2196() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test2197() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test2198() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag0.isInline());
    }

    @Test(timeout = 4000)
    public void test2199() throws Throwable {
        Tag tag0 = Tag.valueOf("g:BsPLB<DQ%");
        Tag tag1 = Tag.valueOf("wbr");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test22100() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        Tag tag1 = Tag.valueOf("var");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23101() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test23102() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test23103() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.isBlock());
    }

    @Test(timeout = 4000)
    public void test23104() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag0.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test23105() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test23106() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test23107() throws Throwable {
        Tag tag0 = Tag.valueOf("x+;5t5$0q-6;");
        Tag tag1 = Tag.valueOf("h1");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test24108() throws Throwable {
        Tag tag0 = Tag.valueOf("plaintext");
        Tag tag1 = Tag.valueOf("table");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25109() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag1.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test25110() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertTrue(tag1.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test25111() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test25112() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.isData());
    }

    @Test(timeout = 4000)
    public void test25113() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test25114() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test25115() throws Throwable {
        Tag tag0 = Tag.valueOf("` WW|-o!KC{.f");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag0.equals(tag1);
        assertFalse(tag1.isBlock());
    }

    @Test(timeout = 4000)
    public void test26116() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertTrue(tag1.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test26117() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(tag1.isBlock());
    }

    @Test(timeout = 4000)
    public void test26118() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(tag1.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test26119() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertTrue(tag1.canContainBlock());
    }

    @Test(timeout = 4000)
    public void test26120() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(tag1.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test26121() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test26122() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        Tag tag1 = Tag.valueOf("4O'.AE.t<");
        boolean boolean0 = tag1.equals(tag0);
        assertFalse(tag1.isData());
    }

    @Test(timeout = 4000)
    public void test27123() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.hashCode();
        assertFalse(tag0.isSelfClosing());
    }

    @Test(timeout = 4000)
    public void test27124() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.hashCode();
        assertTrue(tag0.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test27125() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.hashCode();
        assertFalse(tag0.isData());
    }

    @Test(timeout = 4000)
    public void test27126() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.hashCode();
        assertTrue(tag0.isInline());
    }

    @Test(timeout = 4000)
    public void test27127() throws Throwable {
        Tag tag0 = Tag.valueOf("4O'.AE.t<");
        tag0.hashCode();
        assertFalse(tag0.preserveWhitespace());
    }

    @Test(timeout = 4000)
    public void test28128() throws Throwable {
        Tag tag0 = Tag.valueOf("frame");
        tag0.hashCode();
    }

    @Test(timeout = 4000)
    public void test29129() throws Throwable {
        Tag tag0 = Tag.valueOf("pre");
        tag0.hashCode();
    }
}
