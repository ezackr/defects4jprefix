/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:37:33 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Token_ESTest extends Token_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        String string0 = token_StartTag0.tokenType();
        assertEquals("StartTag", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag("org.jsoup.parser.Token$Tag");
        // Undeclared exception!
        try {
            token_StartTag0.asCharacter();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Token.Comment token_Comment0 = new Token.Comment();
        // Undeclared exception!
        try {
            token_Comment0.asEndTag();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        // Undeclared exception!
        try {
            token_Doctype0.asStartTag();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        // Undeclared exception!
        try {
            token_StartTag0.asDoctype();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        // Undeclared exception!
        try {
            token_StartTag0.asComment();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("?(UTanpl$GK}pCq!");
        Attributes attributes0 = token_EndTag0.getAttributes();
        assertNull(attributes0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendAttributeName('@');
        token_StartTag0.finaliseTag();
        // Undeclared exception!
        try {
            token_StartTag0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.Token$Tag", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("\"0Sj`");
        boolean boolean0 = token_EndTag0.isSelfClosing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        // Undeclared exception!
        try {
            token_EndTag0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.Token$Tag", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Token.EOF token_EOF0 = new Token.EOF();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Token.Comment token_Comment0 = new Token.Comment();
        String string0 = token_Comment0.toString();
        assertEquals("<!---->", string0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getSystemIdentifier();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getName();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getPublicIdentifier();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isForceQuirks();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Token.Character token_Character0 = new Token.Character("org.jsoup.parser.Token$Character");
        String string0 = token_Character0.toString();
        assertEquals("org.jsoup.parser.Token$Character", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("\"0Sj`");
        token_EndTag0.newAttribute();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendAttributeName("");
        token_StartTag0.appendAttributeValue('O');
        // Undeclared exception!
        try {
            token_StartTag0.newAttribute();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeValue("=\"");
        token_EndTag0.newAttribute();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.finaliseTag();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendTagName('1');
        String string0 = token_StartTag0.name();
        assertEquals("1", string0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag("", (Attributes) null);
        // Undeclared exception!
        try {
            token_StartTag0.name();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be false
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        Token.EndTag token_EndTag1 = (Token.EndTag) token_EndTag0.name("org.jsoup.nodes.Attributes");
        token_EndTag1.appendTagName("org.jsoup.nodes.Attributes");
        assertSame(token_EndTag1, token_EndTag0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendAttributeName('@');
        token_StartTag0.appendAttributeName(' ');
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeValue("^X");
        token_EndTag0.appendAttributeValue("7iwk&vJVbjTTy9(");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag("ScriptDataEscapedDash", (Attributes) null);
        String string0 = token_StartTag0.toString();
        assertEquals("<ScriptDataEscapedDash>", string0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        // Undeclared exception!
        try {
            token_StartTag0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.Token$Tag", e);
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        boolean boolean0 = token_StartTag0.isDoctype();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isDoctype();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isDoctype();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isStartTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        boolean boolean0 = token_StartTag0.isStartTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isEndTag();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isEndTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("02`RCo%");
        boolean boolean0 = token_EndTag0.isEndTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        boolean boolean0 = token_StartTag0.isComment();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        Token.Character token_Character0 = new Token.Character("");
        Token.TokenType token_TokenType0 = Token.TokenType.Comment;
        token_Character0.type = token_TokenType0;
        boolean boolean0 = token_Character0.isComment();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isCharacter();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isCharacter();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.Character;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isCharacter();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.Character;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isCharacter();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("\"0Sj`");
        boolean boolean0 = token_EndTag0.isEOF();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag("?(UTanpl$GK}pCq!");
        Token.TokenType token_TokenType0 = Token.TokenType.EOF;
        token_EndTag0.type = token_TokenType0;
        boolean boolean0 = token_EndTag0.isEOF();
        assertTrue(boolean0);
    }
}
