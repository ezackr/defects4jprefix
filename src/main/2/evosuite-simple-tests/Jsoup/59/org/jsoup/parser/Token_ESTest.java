/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 06:14:38 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Token_ESTest extends Token_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("String must not be empty", attributes0);
        String string0 = token_StartTag1.toString();
        assertEquals("<String must not be empty>", string0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.Tag token_Tag0 = token_StartTag0.reset();
        assertSame(token_Tag0, token_StartTag0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Token.EOF token_EOF0 = new Token.EOF();
        String string0 = token_EOF0.tokenType();
        assertEquals("EOF", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        // Undeclared exception!
        try {
            token_Doctype0.asEndTag();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Token.Comment token_Comment0 = new Token.Comment();
        // Undeclared exception!
        try {
            token_Comment0.asCharacter();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Character
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.StartTag token_StartTag1 = token_StartTag0.asStartTag();
        assertSame(token_StartTag1, token_StartTag0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        // Undeclared exception!
        try {
            token_EndTag0.asDoctype();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        // Undeclared exception!
        try {
            token_EndTag0.asComment();
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
            //
            verifyException("org.jsoup.parser.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        Attributes attributes0 = token_EndTag0.getAttributes();
        assertNull(attributes0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        String string0 = token_EndTag0.normalName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        Token.Tag token_Tag0 = token_EndTag0.name("u");
        assertSame(token_Tag0, token_EndTag0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName('r');
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendTagName('g');
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isSelfClosing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        // Undeclared exception!
        try {
            token_EndTag0.toString();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be false
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Token.EOF token_EOF0 = new Token.EOF();
        Token token0 = token_EOF0.reset();
        assertSame(token_EOF0, token0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Token.Comment token_Comment0 = new Token.Comment();
        String string0 = token_Comment0.toString();
        assertEquals("<!---->", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Token.Comment token_Comment0 = new Token.Comment();
        Token token0 = token_Comment0.reset();
        assertSame(token_Comment0, token0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getSystemIdentifier();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getName();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.reset();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getPubSysKey();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        token_Doctype0.getPublicIdentifier();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isForceQuirks();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Token.Character token_Character0 = new Token.Character();
        Token token0 = token_Character0.reset();
        assertNull(token0.toString());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Token.Character token_Character0 = new Token.Character();
        Token.Character token_Character1 = token_Character0.data("2@S%=]S#Vn'lNdfz4");
        assertEquals("2@S%=]S#Vn'lNdfz4", token_Character1.toString());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Token.Character token_Character0 = new Token.Character();
        String string0 = token_Character0.toString();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Token.reset((StringBuilder) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName("Character");
        token_EndTag0.finaliseTag();
        token_EndTag0.newAttribute();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName("decare");
        int[] intArray0 = new int[7];
        token_EndTag0.appendAttributeValue(intArray0);
        token_EndTag0.finaliseTag();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName("}fclre");
        int[] intArray0 = new int[0];
        token_EndTag0.appendAttributeValue(intArray0);
        // Undeclared exception!
        try {
            token_EndTag0.finaliseTag();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName("}fclre");
        token_EndTag0.setEmptyAttributeValue();
        token_EndTag0.newAttribute();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.finaliseTag();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendTagName("-->");
        token_EndTag0.appendTagName("-->");
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeName("decare");
        token_EndTag0.appendAttributeName("l");
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        char[] charArray0 = new char[6];
        token_StartTag0.appendAttributeValue(charArray0);
        token_StartTag0.appendAttributeValue("class");
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        token_EndTag0.appendAttributeValue("");
        token_EndTag0.appendAttributeValue('\"');
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.nameAttr("", (Attributes) null);
        // Undeclared exception!
        try {
            token_StartTag0.toString();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be false
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        attributes0.put(":matches(%s)", "");
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Vj{f", attributes0);
        String string0 = token_StartTag1.toString();
        assertEquals("<Vj{f  :matches(%s)=\"\">", string0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.EOF;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isDoctype();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.EOF;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isDoctype();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isDoctype();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isDoctype();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isStartTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
        token_EndTag0.type = token_TokenType0;
        boolean boolean0 = token_EndTag0.isStartTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        Token.EOF token_EOF0 = new Token.EOF();
        boolean boolean0 = token_EOF0.isEndTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isEndTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isComment();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        boolean boolean0 = token_Doctype0.isComment();
        assertFalse(token_Doctype0.isForceQuirks());
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        Token.EOF token_EOF0 = new Token.EOF();
        Token.TokenType token_TokenType0 = Token.TokenType.Comment;
        token_EOF0.type = token_TokenType0;
        boolean boolean0 = token_EOF0.isComment();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isCharacter();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Token.Character token_Character0 = new Token.Character();
        boolean boolean0 = token_Character0.isCharacter();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        Token.EndTag token_EndTag0 = new Token.EndTag();
        boolean boolean0 = token_EndTag0.isEOF();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.EOF;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isEOF();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        Token.Doctype token_Doctype0 = new Token.Doctype();
        Token.TokenType token_TokenType0 = Token.TokenType.EOF;
        token_Doctype0.type = token_TokenType0;
        boolean boolean0 = token_Doctype0.isEOF();
        assertFalse(token_Doctype0.isForceQuirks());
    }
}
