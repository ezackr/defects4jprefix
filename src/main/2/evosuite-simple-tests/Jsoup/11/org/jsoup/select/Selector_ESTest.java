/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:29:33 GMT 2024
 */
package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Selector_ESTest extends Selector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document(":has(l) >bee~* $U[D ,[Wy");
        Elements elements0 = Selector.select(":has(l) >bee~* $U[D ,[Wy", (Element) document0);
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell(":eq(");
        // Undeclared exception!
        try {
            Selector.select(":eq(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index must be numeric
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = Document.createShell("S.{73QD9y;(");
        // Undeclared exception!
        try {
            Selector.select("S.{73QD9y;(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = Document.createShell(":lt(");
        // Undeclared exception!
        try {
            Selector.select(":lt(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index must be numeric
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = Document.createShell("H[~&=zZ#] (Z2zx}|");
        Elements elements0 = Selector.select("H[~&=zZ#] (Z2zx}|", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Document document0 = new Document(":gt(");
        // Undeclared exception!
        try {
            Selector.select(":gt(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Index must be numeric
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = Document.createShell("Yzn v4Mr>#zVO%+*");
        Elements elements0 = Selector.select("Yzn v4Mr>#zVO%+*", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = new Document(",");
        // Undeclared exception!
        try {
            Selector.select(",", (Element) document0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Unknown combinator: ,
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = new Document("uAny_JY#su`u/");
        // Undeclared exception!
        try {
            Selector.select("uAny_JY#su`u/", (Element) document0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query 'uAny_JY#su`u/': unexpected token at '`u/'
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = Document.createShell(":contains(text) query must not be empty");
        Elements elements0 = Selector.select(":contains(text) query must not be empty", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = Document.createShell(":containsOwn(");
        // Undeclared exception!
        try {
            Selector.select(":containsOwn(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // :contains(text) query must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = Document.createShell(":matches(regex) query must not be empty");
        Elements elements0 = Selector.select(":matches(regex) query must not be empty", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = Document.createShell(":matchesOwn(");
        // Undeclared exception!
        try {
            Selector.select(":matchesOwn(", (Element) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // :matches(regex) query must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = Document.createShell("XF|i?{g<<asTw!7P)1w");
        // Undeclared exception!
        try {
            Selector.select("XF|i?{g<<asTw!7P)1w", (Element) document0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query 'XF|i?{g<<asTw!7P)1w': unexpected token at '?{g<<asTw!7P)1w'
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = new Document("f[^szzu`RsZ.Z*");
        Elements elements0 = Selector.select("f[^szzu`RsZ.Z*", (Element) document0);
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = Document.createShell("[xpi~=#|oE<Z");
        Elements elements0 = Selector.select("[xpi~=#|oE<Z", (Element) document0);
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = Document.createShell(":matches(rCex)qued *=n be4kjy");
        Elements elements0 = Selector.select("[`oRpw!=Wl=F?.STK", (Element) document0);
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = Document.createShell("[xpi$=#|oE<Z");
        Elements elements0 = Selector.select("[xpi$=#|oE<Z", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Document document0 = Document.createShell("[`!*=|+*F_JT");
        Elements elements0 = Selector.select("[`!*=|+*F_JT", (Element) document0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Document document0 = Document.createShell("^0N;>l");
        Elements elements0 = Selector.select(">*", (Element) document0);
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Document document0 = Document.createShell("~*,&}#J[/0by");
        document0.title("~*,&}#J[/0by");
        Element element0 = document0.head();
        // Undeclared exception!
        try {
            Selector.select("~*,&}#J[/0by", element0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query '&}#J[/0by': unexpected token at '&}#J[/0by'
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Document document0 = new Document("Wp*jE'JN-T");
        // Undeclared exception!
        try {
            Selector.select("Wp*jE'JN-T", (Element) document0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query 'Wp*jE'JN-T': unexpected token at ''JN-T'
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Document document0 = Document.createShell("**=x:CWc7n>,&N /I");
        // Undeclared exception!
        try {
            Selector.select("**=x:CWc7n>,&N /I", (Element) document0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query '**=x:CWc7n>,&N /I': unexpected token at '=x:CWc7n>,&N /I'
            //
            verifyException("org.jsoup.select.Selector", e);
        }
    }
}
