/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 01:49:07 GMT 2024
 */
package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Whitelist whitelist0 = Whitelist.simpleText();
        boolean boolean0 = whitelist0.isSafeTag("@-dw}?TDcHSV");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Whitelist whitelist0 = Whitelist.none();
        assertNotNull(whitelist0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        whitelist0.addEnforcedAttribute("blockquote", "blockquote", "blockquote");
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("blockquote", "blockquote", "blockquote");
        assertSame(whitelist1, whitelist0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        Document document0 = Document.createShell("blockquote");
        Attribute attribute0 = Attribute.createFromEncoded("ciTe", "ciTe");
        boolean boolean0 = whitelist0.isSafeAttribute("blockquote", document0, attribute0);
        assertEquals("", attribute0.getValue());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        Document document0 = Document.createShell("blockquote");
        Attribute attribute0 = Attribute.createFromEncoded("ciTe", "ciTe");
        boolean boolean0 = whitelist0.isSafeAttribute("blockquote", document0, attribute0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        String[] stringArray0 = new String[0];
        Whitelist whitelist1 = whitelist0.addAttributes("blockquote", stringArray0);
        assertSame(whitelist0, whitelist1);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "Bd";
        stringArray0[1] = "q";
        stringArray0[2] = "Bd";
        stringArray0[3] = "Bd";
        stringArray0[4] = "Bd";
        Whitelist whitelist1 = whitelist0.addProtocols("q", "Bd", stringArray0);
        Whitelist whitelist2 = whitelist1.addProtocols("q", "Bd", stringArray0);
        assertSame(whitelist0, whitelist2);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        boolean boolean0 = whitelist0.isSafeTag("tfoot");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Document document0 = Document.createShell("blockquote");
        Attribute attribute0 = Attribute.createFromEncoded("blockquote", "d'X}oseEB7");
        boolean boolean0 = whitelist0.isSafeAttribute(".^ncl)D6juA", document0, attribute0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Document document0 = Document.createShell("blockquote");
        Attribute attribute0 = new Attribute("blockquote", "blockquote");
        boolean boolean0 = whitelist0.isSafeAttribute("blockquote", document0, attribute0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Document document0 = new Document("height");
        Attribute attribute0 = Attribute.createFromEncoded("title", "height");
        boolean boolean0 = whitelist0.isSafeAttribute("a", document0, attribute0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Document document0 = Document.createShell("blockquote");
        Attribute attribute0 = Attribute.createFromEncoded("blockquote", "d'X}oseEB7");
        String[] stringArray0 = new String[7];
        stringArray0[0] = ":all";
        stringArray0[1] = "blockquote";
        stringArray0[2] = "d'X}oseEB7";
        stringArray0[3] = ":all";
        stringArray0[4] = "blockquote";
        stringArray0[5] = ":all";
        stringArray0[6] = ":all";
        whitelist0.addAttributes(":all", stringArray0);
        boolean boolean0 = whitelist0.isSafeAttribute("d'X}oseEB7", document0, attribute0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        Document document0 = Document.createShell("blockquote");
        whitelist0.preserveRelativeLinks(true);
        Attribute attribute0 = Attribute.createFromEncoded("ciTe", "ciTe");
        boolean boolean0 = whitelist0.isSafeAttribute("blockquote", document0, attribute0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Attributes attributes0 = whitelist0.getEnforcedAttributes("q");
        assertNotNull(attributes0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        whitelist0.addEnforcedAttribute("ZIt*4g", "ZIt*4g", "ZIt*4g");
        Attributes attributes0 = whitelist0.getEnforcedAttributes("ZIt*4g");
        assertNotNull(attributes0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("Y");
        boolean boolean0 = whitelist_AttributeValue0.equals(whitelist_AttributeValue0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("SPe-^Mo^+Yv:@O");
        boolean boolean0 = whitelist_TagName0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Attribute attribute0 = Attribute.createFromEncoded("blockquote", "d'X}oseEB7");
        Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf(":all");
        boolean boolean0 = whitelist_TagName0.equals(attribute0);
        assertFalse(boolean0);
    }
}
