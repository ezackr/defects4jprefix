/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 09:21:30 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("&t}h+>w)", (Element) null, "&t}h+>w)", parser0);
        htmlTreeBuilder0.insertStartTag("optgroup");
        htmlTreeBuilder0.inSelectScope("&t}h+>w)");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inListItemScope("&t}h+>w)");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.getHeadElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = Document.createShell("p");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("p", document0, "p", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Document document0 = Document.createShell("p");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("p", document0, "p", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("p", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
        htmlTreeBuilder0.maybeSetBaseUri(formElement0);
        assertEquals("p", formElement0.baseUri());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableBodyContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.generateImpliedEndTags();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertMarkerToFormattingElements();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        FormElement formElement0 = htmlTreeBuilder0.getFormElement();
        assertNull(formElement0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableRowContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.state();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope(stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.getDocument();
        List<Node> list0 = Parser.parseFragment("GC[?th{cbf</<~H9", (Element) document0, "noscript");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope("truespeed");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String string0 = htmlTreeBuilder0.getBaseUri();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = new Element("Xq*K/~{%ft+v|Gb");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.isInActiveFormattingElements(element0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("thead");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "thead", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("thead", element0, "thead", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Element element0 = new Element("title");
        List<Node> list0 = Parser.parseFragment("title", element0, "title");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Element element0 = new Element("style");
        List<Node> list0 = Parser.parseFragment("style", element0, "style");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("script");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
        htmlTreeBuilder0.parseFragment("strong", pseudoTextElement0, "", parser0);
        Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Element element0 = new Element("noscript");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("noscript", element0, "ro)7vE^-", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.popStackToBefore("noscript");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = new Element("plaintext");
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("ynX", element0, "plaintext", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("famse");
        FormElement formElement0 = new FormElement(tag0, "famse", (Attributes) null);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("famse", formElement0, "!=", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("famse");
        FormElement formElement0 = new FormElement(tag0, "famse", (Attributes) null);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("famse", formElement0, "!=", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("input");
        assertEquals("input", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        parser0.setTrackErrors(1294);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("DLq?{]?&o", (Element) null, "DLq?{]?&o", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        parser0.setTrackErrors(1294);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("DLq?{]?&o", (Element) null, "DLq?{]?&o", parser0);
        boolean boolean0 = htmlTreeBuilder0.processEndTag("DLq?{]?&o");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("XqK/~{%ft+v|Gb");
        htmlTreeBuilder0.parseFragment("XqK/~{%ft+v|Gb", element0, "XqK/~{%ft+v|Gb", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("XqK/~{%ft+v|Gb", attributes0);
        Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        assertEquals("XqK/~{%ft+v|Gb", element1.tagName());
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("y=5?Bz[a-m%N~", (Element) null, "y=5?Bz[a-m%N~", parser0);
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("body", attributes0);
        token_StartTag0.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("y=5?Bz[a-m%N~", (Element) null, "y=5?Bz[a-m%N~", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("y=5?Bz[a-m%N~", attributes0);
        token_StartTag1.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parse("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("YbFs\"$ss", document0, "Ab{mmkZr", parser0);
        Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
        Token.StartTag token_StartTag0 = tokeniser0.startPending;
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("Ab{mmkZr", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
        assertEquals("Ab{mmkZr", formElement0.tagName());
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("tr", (Element) null, "tr", parser0);
        Token.CData token_CData0 = new Token.CData("tr");
        htmlTreeBuilder0.insert(token_CData0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("colgroup", (Element) null, "dl", parser0);
        Token.Character token_Character0 = new Token.Character();
        htmlTreeBuilder0.insertStartTag("script");
        htmlTreeBuilder0.insert(token_Character0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("$", (Element) null, "/9yHvaBs!~7|f", parser0);
        htmlTreeBuilder0.insertStartTag("style");
        Token.Character token_Character0 = new Token.Character();
        htmlTreeBuilder0.insert(token_Character0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("trues peed", (Element) null, "trues peed", parser0);
        htmlTreeBuilder0.setFosterInserts(true);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        assertEquals(2, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("trues peed", (Element) null, "trues peed", parser0);
        htmlTreeBuilder0.setFosterInserts(true);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        assertEquals("table", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("famse", (Element) null, "famse", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("input");
        assertEquals("input", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test3439() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("famse", (Element) null, "famse", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("input");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3540() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("framese", (Element) null, "framese", parser0);
        Tag tag0 = Tag.valueOf("framese");
        FormElement formElement0 = new FormElement(tag0, "framese", (Attributes) null);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        htmlTreeBuilder0.processStartTag("framese");
        formElement0.addClass("framese");
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        assertEquals(0, formElement0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3641() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("tyt89", (Element) null, "tyt89", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        htmlTreeBuilder0.insertInFosterParent(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3742() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = new Element("eZed");
        htmlTreeBuilder0.parseFragment("eZed", element0, "eZed", parser0);
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3843() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("/amse", (Element) null, "/amse", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("/amse");
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3844() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("/amse", (Element) null, "/amse", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("/amse");
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3945() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("t>2a)*Y`i");
        htmlTreeBuilder0.parseFragment("t>2a)*Y`i", element0, "t>2a)*Y`i", parser0);
        htmlTreeBuilder0.popStackToClose("t>2a)*Y`i");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inSelectScope("t>2a)*Y`i");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Should not be reachable
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4046() throws Throwable {
        Document document0 = Document.createShell("frameset");
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("frameset", document0, "frameset", parser0);
        Tag tag0 = Tag.valueOf("frameset");
        FormElement formElement0 = new FormElement(tag0, "frameset", (Attributes) null);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        boolean boolean0 = htmlTreeBuilder0.processEndTag("frameset");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test4147() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("O!o");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("", document0, "", parser0);
        String[] stringArray0 = new String[0];
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4248() throws Throwable {
        Document document0 = new Document("Noscript");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("8<e7", document0, "html", parser0);
        String[] stringArray0 = new String[8];
        stringArray0[3] = "";
        stringArray0[5] = "8<e7";
        stringArray0[6] = "html";
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4349() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = new Element("eZed");
        htmlTreeBuilder0.parseFragment("eZed", element0, "eZed", parser0);
        htmlTreeBuilder0.popStackToBefore("eZed");
        boolean boolean0 = htmlTreeBuilder0.inButtonScope("eZed");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test4450() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("eaU(");
        htmlTreeBuilder0.parseFragment("eaU(", element0, "eaU(", parser0);
        htmlTreeBuilder0.popStackToBefore("eaU(");
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4551() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = new Element("table");
        htmlTreeBuilder0.parseFragment("     ", element0, ":Pxp3 |", parser0);
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4652() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parser0);
        htmlTreeBuilder0.insertStartTag("table");
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("6 !A$6>.d`p;", (Element) null, "6 !A$6>.d`p;", parser0);
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("framese", "framese");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("framese", (Element) null, "framese", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.aboveOnStack(document0);
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        Document document0 = Parser.parseBodyFragment("eZad", "eZad");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("eZad", document0, "eZad", parser0);
        htmlTreeBuilder0.push(document0);
        Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.aboveOnStack(element0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test5056() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Tag tag0 = Tag.valueOf("AsVdz6");
        Element element0 = new Element(tag0, "AsVdz6");
        htmlTreeBuilder0.parseFragment("character is not a valid unicode code point", element0, "AsVdz6", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertOnStackAfter(element0, element0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test5157() throws Throwable {
        Document document0 = Parser.parseBodyFragment("e$d", "e$d");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("e$d", document0, "e$d", parser0);
        htmlTreeBuilder0.push(document0);
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        assertFalse(document0.hasParent());
    }

    @Test(timeout = 4000)
    public void test5258() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("[$RmB2x!", "[$RmB2x!");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("[$RmB2x!", document0, "[$RmB2x!", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test5359() throws Throwable {
        Document document0 = Parser.parse("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Ab{mmkZr", document0, "Ab{mmkZr", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5360() throws Throwable {
        Document document0 = Parser.parse("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Ab{mmkZr", document0, "Ab{mmkZr", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5461() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("eaU(");
        htmlTreeBuilder0.parseFragment("eaU(", element0, "eaU(", parser0);
        htmlTreeBuilder0.popStackToBefore("eaU(");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5562() throws Throwable {
        Tag tag0 = Tag.valueOf("select");
        Element element0 = new Element(tag0, "select");
        List<Node> list0 = Parser.parseFragment("select", element0, "noresize");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5663() throws Throwable {
        Element element0 = new Element("td");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("td", element0, "noQuirks", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5764() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parser0);
        htmlTreeBuilder0.insertStartTag("th");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5865() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("th");
        Parser parser0 = Parser.htmlParser();
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "th", attributes0);
        htmlTreeBuilder0.parseFragment("th", formElement0, "th", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("th");
        assertEquals("th", element0.nodeName());
    }

    @Test(timeout = 4000)
    public void test5966() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("tr", parseSettings0);
        Element element0 = new Element(tag0, "Ab{mmkZr");
        List<Node> list0 = Parser.parseFragment("tr", element0, "m56ozmt5|2ei8");
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6067() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("tbody");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tbody", element0, "tbody", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6168() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("tfoot");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", element0, "eZed", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6269() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("caption");
        Element element0 = new Element(tag0, "]kM:haQWg3?:");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("applet", element0, "rhj", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6370() throws Throwable {
        Tag tag0 = Tag.valueOf("colgroup", (ParseSettings) null);
        Element element0 = new Element(tag0, "|YxJ!ILX;!`.M_");
        List<Node> list0 = Parser.parseFragment("?[uk", element0, "body");
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test6471() throws Throwable {
        Document document0 = Parser.parseBodyFragment("|n", "|n");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Element element0 = document0.head();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("blockquote", element0, "|n", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6572() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("frameset");
        FormElement formElement0 = new FormElement(tag0, "frameset", (Attributes) null);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", formElement0, "frameset", parser0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6673() throws Throwable {
        Tag tag0 = Tag.valueOf("html");
        Element element0 = new Element(tag0, "6BP");
        List<Node> list0 = Parser.parseFragment(" 8H", element0, "Fxv0%Dk}ijZhEDu,(V");
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test6774() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("embed", (Element) null, "embed", parser0);
        htmlTreeBuilder0.insertStartTag("embed");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test6875() throws Throwable {
        Element element0 = new Element("noscript");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("noscript", element0, "ro)7vE^-", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.reconstructFormattingElements();
        boolean boolean0 = htmlTreeBuilder0.inButtonScope("noscript");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6976() throws Throwable {
        Document document0 = Parser.parse("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Ab{mmkZr", document0, "Ab{mmkZr", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6977() throws Throwable {
        Document document0 = Parser.parse("Ab{mmkZr", "Ab{mmkZr");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Ab{mmkZr", document0, "Ab{mmkZr", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        boolean boolean0 = htmlTreeBuilder0.inButtonScope("Ab{mmkZr");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7078() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("vY", (Element) null, "vY", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test7079() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("vY", (Element) null, "vY", parser0);
        boolean boolean0 = htmlTreeBuilder0.inTableScope("vY");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7180() throws Throwable {
        Document document0 = Parser.parse("eT*fF", "eT*fF");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("eT*fF", document0, "eT*fF", parser0);
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("eT*fF");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7281() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("0", (Element) null, "0", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("otable");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test7282() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("0", (Element) null, "0", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("otable");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("otable");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7383() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("sgPWc-I=_$ND:qo", (Element) null, "sgPWc-I=_$ND:qo", parser0);
        htmlTreeBuilder0.insertStartTag("dt");
        htmlTreeBuilder0.generateImpliedEndTags("tr");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7484() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("script");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
        htmlTreeBuilder0.parseFragment("strong", pseudoTextElement0, "", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7585() throws Throwable {
        Document document0 = Parser.parseBodyFragment("div", "div");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("div", document0, "div", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertFalse(document0.isBlock());
    }

    @Test(timeout = 4000)
    public void test7686() throws Throwable {
        Document document0 = Document.createShell(")H2&x&pu9$gXG");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment(")H2&x&pu9$gXG", document0, ")H2&x&pu9$gXG", parser0);
        htmlTreeBuilder0.push(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7787() throws Throwable {
        Document document0 = Parser.parseBodyFragment("div", "div");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("div", document0, "div", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7888() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("DLq?{]?&qo", (Element) null, "DLq?{]?&qo", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        Document document0 = Document.createShell("DLq?{]?&qo");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7989() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("framese", "framese");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("framese", (Element) null, "framese", parser0);
        Tag tag0 = Tag.valueOf("framese");
        FormElement formElement0 = new FormElement(tag0, "framese", (Attributes) null);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("framese");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean1 = htmlTreeBuilder0.processStartTag("framese");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test8090() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("O!");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "O!", attributes0);
        htmlTreeBuilder0.parseFragment("O!", formElement0, "O!", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test8191() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("script");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
        htmlTreeBuilder0.parseFragment("strong", pseudoTextElement0, "", parser0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(pseudoTextElement0);
        assertEquals(0, pseudoTextElement0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test8292() throws Throwable {
        Document document0 = Parser.parse("eT*fF", "eT*fF");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("eT*fF", document0, "eT*fF", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test8293() throws Throwable {
        Document document0 = Parser.parse("eT*fF", "eT*fF");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("eT*fF", document0, "eT*fF", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test8394() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("caption", "caption");
        Parser parser0 = Parser.xmlParser();
        Document document1 = parser0.parseInput("caption", "caption");
        htmlTreeBuilder0.parseFragment("YbFs\"$ss", document0, "caption", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements(document1);
        assertFalse(document1.hasParent());
    }

    @Test(timeout = 4000)
    public void test8495() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("y=5?Bz[a-m%~", (Element) null, "xhtml", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("xhtml");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test8596() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("caption", "caption");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("YbFs\"$ss", document0, "caption", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("style");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test8697() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("tyt89", (Element) null, "tyt89", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("table");
        element0.unwrap();
        htmlTreeBuilder0.insertInFosterParent(element0);
        assertEquals(1, element0.siblingIndex());
    }
}
