/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 05:49:01 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("[%@iye4ubd{s'");
        tokenQueue0.chompTo("K");
        assertEquals('\u0000', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("H");
        boolean boolean0 = tokenQueue0.matchesCS("H");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("[%@ioC4UbD{S'");
        // Undeclared exception!
        try {
            tokenQueue0.addFirst((Character) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.TokenQueue", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("[%@ioC0[4UbD{S'");
        tokenQueue0.chompToIgnoreCase("0zu_");
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        String string0 = tokenQueue0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("         ");
        tokenQueue0.addFirst("         ");
        assertEquals("                  ", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.parser.TokenQueue");
        char char0 = tokenQueue0.peek();
        assertEquals('o', char0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("pg35=hgt48^$@Z{");
        tokenQueue0.chompTo("pg35=hgt48^$@Z{");
        char char0 = tokenQueue0.peek();
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("pg35=hgt48^$@Z{");
        tokenQueue0.chompTo("pg35=hgt48^$@Z{");
        char char0 = tokenQueue0.peek();
        assertEquals('\u0000', char0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("|UHd[\"f&Sa29<f.p'3V");
        String[] stringArray0 = new String[0];
        tokenQueue0.consumeToAny(stringArray0);
        // Undeclared exception!
        try {
            tokenQueue0.consume("|UHd[\"f&Sa29<f.p'3V");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Queue did not match expected sequence
            //
            verifyException("org.jsoup.parser.TokenQueue", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("/");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "J1,J]G(/^;Du+1V2q|w";
        tokenQueue0.consumeToAny(stringArray0);
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("rh");
        String[] stringArray0 = new String[2];
        stringArray0[0] = "rh";
        tokenQueue0.consumeToAny(stringArray0);
        assertEquals('r', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("RaLG_m{k!Y=0B");
        tokenQueue0.consumeAttributeKey();
        assertEquals('{', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        char[] charArray0 = new char[8];
        boolean boolean0 = tokenQueue0.matchesAny(charArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("H");
        boolean boolean0 = tokenQueue0.matchesStartTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("<.6XThMvQzN*H~m?");
        boolean boolean0 = tokenQueue0.matchesStartTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("]mlc5fm}dj^i,");
        boolean boolean0 = tokenQueue0.matchesStartTag();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("<XThMvQz[N<HJ~m{");
        boolean boolean0 = tokenQueue0.matchesStartTag();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("         ");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("         ");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("m?C$GD");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("m?C$GD");
        boolean boolean0 = tokenQueue0.consumeWhitespace();
        assertEquals('m', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        boolean boolean0 = tokenQueue0.matchesWord();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        tokenQueue0.advance();
        assertTrue(tokenQueue0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("CN0ACEsMUR!kf");
        tokenQueue0.advance();
        assertEquals('N', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("         ");
        tokenQueue0.consume("         ");
        assertEquals('\u0000', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("/?AW_0<2$");
        tokenQueue0.chompToIgnoreCase("/?AW_0<2$");
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("/?AW_0<2$");
        tokenQueue0.chompToIgnoreCase("k +xm}u0 #p2mhw^k");
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("6%9,x");
        tokenQueue0.chompBalanced('L', '6');
        assertEquals("%9,x", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("[%@ioC0[4UbD{S'");
        tokenQueue0.chompBalanced('[', '[');
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        String string0 = TokenQueue.unescape("_..iv\\hfp]`&6");
        assertEquals("_..ivhfp]`&6", string0);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("m?C$GD");
        tokenQueue0.consumeWord();
        assertEquals("?C$GD", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("cG");
        tokenQueue0.consumeTagName();
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("RaLG_m{k!Y=0B");
        tokenQueue0.consumeTagName();
        assertEquals('{', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("H");
        tokenQueue0.consumeElementSelector();
        assertEquals("", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("RaLG_m{k!Y=0B");
        tokenQueue0.consumeElementSelector();
        assertEquals('{', tokenQueue0.peek());
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("");
        String string0 = tokenQueue0.consumeCssIdentifier();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("RaLG_m{k!Y=0B");
        tokenQueue0.consumeCssIdentifier();
        assertEquals("{k!Y=0B", tokenQueue0.toString());
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        TokenQueue tokenQueue0 = new TokenQueue("a");
        tokenQueue0.consumeAttributeKey();
        assertEquals("", tokenQueue0.toString());
    }
}
