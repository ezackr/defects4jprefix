/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 05:52:21 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        DocumentType documentType0 = new DocumentType("datalist", "datalist", "", "datalist");
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
        documentType0.outerHtmlHead(stringBuilder0, 1, document_OutputSettings0);
        assertEquals("<!DOCTYPE datalist PUBLIC \"datalist\">", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        DocumentType documentType0 = new DocumentType("mxEz_'PpF", "mxEz_'PpF", "mxEz_'PpF", "mxEz_'PpF");
        String string0 = documentType0.nodeName();
        assertEquals("#doctype", string0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        DocumentType documentType0 = new DocumentType("70&.kE}0EGvF", "3hQ\"~ejLg;=`mCF'-$5", "", "");
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        documentType0.outerHtmlTail(stringBuffer0, (-3715), document_OutputSettings0);
        assertEquals(1, document_OutputSettings0.indentAmount());
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        DocumentType documentType0 = new DocumentType("aW``Y", "aW``Y", "typemustmatch", "typemustmatch");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        // Undeclared exception!
        try {
            documentType0.outerHtmlHead((Appendable) null, 122, document_OutputSettings0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.DocumentType", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        DocumentType documentType0 = new DocumentType("SYSTEM", "", "datalist", "SYSTEM");
        Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
        documentType0.outerHtmlHead(stringBuilder0, 1, document_OutputSettings0);
        assertEquals("<!DOCTYPE SYSTEM \"datalist\">", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        DocumentType documentType0 = new DocumentType("", "", "", "{F=]qq_.^QC");
        StringBuilder stringBuilder0 = new StringBuilder("B#H2Cf1%+I/(e");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        documentType0.outerHtmlHead(stringBuilder0, (-3888), document_OutputSettings0);
        assertEquals("B#H2Cf1%+I/(e<!doctype>", stringBuilder0.toString());
    }
}
