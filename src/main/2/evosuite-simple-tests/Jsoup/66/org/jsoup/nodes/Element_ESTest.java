/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:01:55 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingFormatArgumentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document("xV");
        // Undeclared exception!
        try {
            document0.wrap("xV");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell(",gYG\"X6ZFAHmwTd>");
        assertFalse(document0.hasParent());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Document document0 = Document.createShell(",gYG\"X6ZFAHmwTd>");
        Elements elements0 = document0.getElementsMatchingText(",gYG\"X6ZFAHmwTd>");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Document document0 = Document.createShell(",gYG\"X6ZFAHmwTd>");
        Elements elements0 = document0.getElementsMatchingText(",gYG\"X6ZFAHmwTd>");
        assertEquals(",gYG\"X6ZFAHmwTd>", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Document document0 = Document.createShell(",gYG\"X6ZFAHmwTd>");
        Elements elements0 = document0.getElementsMatchingText(",gYG\"X6ZFAHmwTd>");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.prependElement("br");
        element0.before("br");
        document0.getElementsContainingText("tb%aD7'W");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Document document0 = Document.createShell(":sVMae");
        // Undeclared exception!
        try {
            document0.child(34);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 34, Size: 1
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000t00027");
        document0.prependText("java.lang.string@0000t00027");
        document0.data();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
        document0.dataset();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Document document0 = new Document("");
        Element element0 = document0.addClass("");
        assertSame(element0, document0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        Document document0 = Document.createShell("ava.lansring@000000007");
        // Undeclared exception!
        try {
            document0.before((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        Document document0 = Document.createShell("ScriptDaRaDoubleEscapedDash");
        Element element0 = document0.attr("ScriptDaRaDoubleEscapedDash", false);
        assertEquals("ScriptDaRaDoubleEscapedDash", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        Document document0 = Document.createShell("ScriptDaRaDoubleEscapedDash");
        Element element0 = document0.attr("ScriptDaRaDoubleEscapedDash", false);
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        Document document0 = Document.createShell("V2^%8e");
        document0.getElementsByAttributeValue("V2^%8e", "V2^%8e");
        assertEquals("V2^%8e", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        Document document0 = Document.createShell("V2^%8e");
        document0.getElementsByAttributeValue("V2^%8e", "V2^%8e");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        assertEquals("org.jsoup.nodes.Element", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        String string0 = element0.cssSelector();
        assertEquals("html > body", string0);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        String string0 = element0.cssSelector();
        assertEquals("head", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        String string0 = element0.cssSelector();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        Document document0 = Document.createShell("Z'Lb4 7~VRuBP;(.zt");
        document0.prepend("Z'Lb4 7~VRuBP;(.zt");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsMatchingOwnText("Tag name must not be empty.");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1322() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsMatchingOwnText("Tag name must not be empty.");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsMatchingOwnText("Tag name must not be empty.");
        assertEquals("Tag name must not be empty.", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        Document document0 = Document.createShell("za:q!");
        // Undeclared exception!
        try {
            document0.after("za:q!");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1525() throws Throwable {
        Document document0 = Document.createShell("ScriptDataEscapeyExdTa6Open");
        Elements elements0 = document0.getElementsByIndexLessThan(0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        Document document0 = Document.createShell("ScriptDataEscapeyExdTa6Open");
        Elements elements0 = document0.getElementsByIndexLessThan(0);
        assertEquals("ScriptDataEscapeyExdTa6Open", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1527() throws Throwable {
        Document document0 = Document.createShell("ScriptDataEscapeyExdTa6Open");
        Elements elements0 = document0.getElementsByIndexLessThan(0);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        Document document0 = new Document("u9denFUZP.I");
        document0.getElementsByAttributeStarting("u9denFUZP.I");
        assertEquals("u9denFUZP.I", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.parser.ParseSettings");
        Element element0 = document0.val("org.jsoup.parser.ParseSettings");
        assertEquals("org.jsoup.parser.ParseSettings", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1730() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.parser.ParseSettings");
        Element element0 = document0.val("org.jsoup.parser.ParseSettings");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.getElementsByAttributeValueMatching(":has", ":has");
        assertEquals(":has", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1832() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.getElementsByAttributeValueMatching(":has", ":has");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1933() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.is("br");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1934() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.is("br");
        assertEquals("br", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2035() throws Throwable {
        Document document0 = Document.createShell("area");
        document0.getElementsByAttributeValueEnding("rG*a", "area");
        assertEquals("area", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2036() throws Throwable {
        Document document0 = Document.createShell("area");
        document0.getElementsByAttributeValueEnding("rG*a", "area");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2137() throws Throwable {
        Document document0 = Document.createShell("H ");
        Elements elements0 = document0.getElementsByClass("H ");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2138() throws Throwable {
        Document document0 = Document.createShell("H ");
        Elements elements0 = document0.getElementsByClass("H ");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2139() throws Throwable {
        Document document0 = Document.createShell("H ");
        Elements elements0 = document0.getElementsByClass("H ");
        assertEquals("H ", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2240() throws Throwable {
        Document document0 = new Document("br");
        // Undeclared exception!
        try {
            document0.getElementsByAttributeValueContaining("br", (String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // String must not be empty
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2341() throws Throwable {
        Document document0 = Document.createShell("raB");
        // Undeclared exception!
        try {
            document0.after((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2442() throws Throwable {
        Document document0 = Document.createShell("raB");
        document0.setBaseUri("raB");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2443() throws Throwable {
        Document document0 = Document.createShell("raB");
        document0.setBaseUri("raB");
        assertEquals("raB", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2544() throws Throwable {
        Document document0 = Document.createShell("BeforeAttributeName");
        document0.appendTo(document0);
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2645() throws Throwable {
        Document document0 = new Document("aOZe");
        document0.getElementsByAttributeValueNot("aOZe", "aOZe");
        assertEquals("aOZe", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2746() throws Throwable {
        Document document0 = Document.createShell(" ");
        String string0 = document0.toString();
        assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test2747() throws Throwable {
        Document document0 = Document.createShell(" ");
        String string0 = document0.toString();
        assertEquals(" ", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2848() throws Throwable {
        Document document0 = Document.createShell("EndTagOpen");
        document0.getElementsByAttribute("EndTagOpen");
        assertEquals("EndTagOpen", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2849() throws Throwable {
        Document document0 = Document.createShell("EndTagOpen");
        document0.getElementsByAttribute("EndTagOpen");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2950() throws Throwable {
        Document document0 = Document.createShell("java.langstring@5000000014");
        Element element0 = document0.removeClass("java.langstring@5000000014");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3051() throws Throwable {
        Document document0 = Document.createShell("Dl[=F/GpF}w%G[y' k");
        document0.getAllElements();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3052() throws Throwable {
        Document document0 = Document.createShell("Dl[=F/GpF}w%G[y' k");
        document0.getAllElements();
        assertEquals("Dl[=F/GpF}w%G[y' k", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3153() throws Throwable {
        Document document0 = Document.createShell("Dl[=F/GpF}w%G[y' k");
        // Undeclared exception!
        try {
            document0.selectFirst("Dl[=F/GpF}w%G[y' k");
            fail("Expecting exception: MissingFormatArgumentException");
        } catch (MissingFormatArgumentException e) {
            //
            // Format specifier '%G'
            //
            verifyException("java.util.Formatter", e);
        }
    }

    @Test(timeout = 4000)
    public void test3254() throws Throwable {
        Document document0 = Document.createShell("5v{}<_p'NzRat^<zE");
        Elements elements0 = document0.getElementsByIndexGreaterThan(16);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3255() throws Throwable {
        Document document0 = Document.createShell("5v{}<_p'NzRat^<zE");
        Elements elements0 = document0.getElementsByIndexGreaterThan(16);
        assertEquals("5v{}<_p'NzRat^<zE", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3256() throws Throwable {
        Document document0 = Document.createShell("5v{}<_p'NzRat^<zE");
        Elements elements0 = document0.getElementsByIndexGreaterThan(16);
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3357() throws Throwable {
        Document document0 = Document.createShell("F");
        Element element0 = document0.body();
        element0.append("F");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3458() throws Throwable {
        Document document0 = Document.createShell(":has");
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        document0.addChildren(nodeArray0);
        document0.getElementsByIndexEquals((-45));
    }

    @Test(timeout = 4000)
    public void test3559() throws Throwable {
        Document document0 = Document.createShell(":has");
        Element element0 = document0.html(":has");
        Elements elements0 = element0.children();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3560() throws Throwable {
        Document document0 = Document.createShell(":has");
        Element element0 = document0.html(":has");
        Elements elements0 = element0.children();
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3561() throws Throwable {
        Document document0 = Document.createShell(":has");
        Element element0 = document0.html(":has");
        Elements elements0 = element0.children();
        assertEquals(":has", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3662() throws Throwable {
        Document document0 = new Document("<FQJj ,0\"A$HC>UxF");
        List<TextNode> list0 = document0.textNodes();
        Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
        assertEquals("<FQJj ,0\"A$HC>UxF", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3763() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.appendText(":has");
        document0.textNodes();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3864() throws Throwable {
        Document document0 = Document.createShell("");
        DataNode dataNode0 = DataNode.createFromEncoded("", "");
        document0.appendChild(dataNode0);
        document0.dataNodes();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3965() throws Throwable {
        Document document0 = Document.createShell("T");
        LinkedList<Document> linkedList0 = new LinkedList<Document>();
        // Undeclared exception!
        try {
            document0.insertChildren((-1064), (Collection<? extends Node>) linkedList0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4066() throws Throwable {
        Document document0 = Document.createShell("big");
        LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
        // Undeclared exception!
        try {
            document0.insertChildren(31, (Collection<? extends Node>) linkedList0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4167() throws Throwable {
        Document document0 = Document.createShell(":has");
        Node[] nodeArray0 = new Node[0];
        // Undeclared exception!
        try {
            document0.insertChildren(169, nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4268() throws Throwable {
        Document document0 = new Document("u9denVFUZP.I");
        Node[] nodeArray0 = new Node[0];
        // Undeclared exception!
        try {
            document0.insertChildren((-872), nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4369() throws Throwable {
        Document document0 = Document.createShell("p w");
        Node[] nodeArray0 = new Node[2];
        // Undeclared exception!
        try {
            document0.insertChildren(0, nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Array must not contain any null objects
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4470() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
        Element element0 = document0.toggleClass("java.lang.string@0000000027 za:q!");
        element0.cssSelector();
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4571() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        element0.tagName("head");
        String string0 = element0.cssSelector();
        assertEquals("html > head:nth-child(2)", string0);
    }

    @Test(timeout = 4000)
    public void test4572() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        element0.tagName("head");
        String string0 = element0.cssSelector();
        assertEquals("head", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4673() throws Throwable {
        Document document0 = Document.createShell("g<}'eu\"0KB");
        Element element0 = document0.body();
        Elements elements0 = element0.siblingElements();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test4674() throws Throwable {
        Document document0 = Document.createShell("g<}'eu\"0KB");
        Element element0 = document0.body();
        Elements elements0 = element0.siblingElements();
        assertEquals("g<}'eu\"0KB", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4775() throws Throwable {
        Tag tag0 = Tag.valueOf("'?");
        Element element0 = new Element(tag0, "'?");
        element0.siblingElements();
        assertEquals("'?", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4876() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test4877() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertEquals("Mr@xn[XwRFWr!*BxD", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test4878() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertEquals(1, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test4979() throws Throwable {
        Document document0 = Document.createShell("canas");
        document0.nextElementSibling();
        assertEquals("canas", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4980() throws Throwable {
        Document document0 = Document.createShell("canas");
        document0.nextElementSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5081() throws Throwable {
        Document document0 = Document.createShell("canvas");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertEquals("canvas", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5082() throws Throwable {
        Document document0 = Document.createShell("canvas");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5083() throws Throwable {
        Document document0 = Document.createShell("canvas");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5184() throws Throwable {
        Document document0 = Document.createShell("5xHq^?Gz<) :\"k.X");
        Element element0 = document0.head();
        Element element1 = element0.previousElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5185() throws Throwable {
        Document document0 = Document.createShell("5xHq^?Gz<) :\"k.X");
        Element element0 = document0.head();
        Element element1 = element0.previousElementSibling();
        assertEquals("5xHq^?Gz<) :\"k.X", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5286() throws Throwable {
        Document document0 = Document.createShell("jeva.la6g.string@0000000027 5v{<_1nrsat^<e");
        document0.previousElementSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5387() throws Throwable {
        Document document0 = Document.createShell("xHq^?Gz<) :\"k.X");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5388() throws Throwable {
        Document document0 = Document.createShell("xHq^?Gz<) :\"k.X");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertEquals(0, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5389() throws Throwable {
        Document document0 = Document.createShell("xHq^?Gz<) :\"k.X");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertEquals("xHq^?Gz<) :\"k.X", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test5490() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.prependElement("br");
        Element element1 = element0.firstElementSibling();
        assertEquals("br", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5491() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.prependElement("br");
        Element element1 = element0.firstElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5592() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5593() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertEquals("Mr@xn[XwRFWr!*BxD", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test5594() throws Throwable {
        Document document0 = Document.createShell("Mr@xn[XwRFWr!*BxD");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertEquals("head", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test5695() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.prependElement("br");
        Element element1 = element0.lastElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5696() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.prependElement("br");
        Element element1 = element0.lastElementSibling();
        assertEquals("br", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5797() throws Throwable {
        Document document0 = Document.createShell("BeforeAttributeName");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5798() throws Throwable {
        Document document0 = Document.createShell("BeforeAttributeName");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertEquals(1, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5799() throws Throwable {
        Document document0 = Document.createShell("BeforeAttributeName");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertEquals("BeforeAttributeName", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test58100() throws Throwable {
        Document document0 = Document.createShell(":sVMae");
        Element element0 = document0.doClone(document0);
        int int0 = element0.elementSiblingIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test58101() throws Throwable {
        Document document0 = Document.createShell(":sVMae");
        Element element0 = document0.doClone(document0);
        int int0 = element0.elementSiblingIndex();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test58102() throws Throwable {
        Document document0 = Document.createShell(":sVMae");
        Element element0 = document0.doClone(document0);
        int int0 = element0.elementSiblingIndex();
        assertTrue(element0.hasParent());
    }

    @Test(timeout = 4000)
    public void test58103() throws Throwable {
        Document document0 = Document.createShell(":sVMae");
        Element element0 = document0.doClone(document0);
        int int0 = element0.elementSiblingIndex();
        assertEquals(":sVMae", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test59104() throws Throwable {
        Document document0 = Document.createShell("n~p0a_I-I[`Gzx9");
        DocumentType documentType0 = new DocumentType("7g@", "7g@", "java.lang.string@0000000014", "java.lang.string@0000000014", "n~p0a_I-I[`Gzx9");
        document0.appendChild(documentType0);
        document0.getElementsContainingText("n~p0a_I-I[`Gzx9");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test60105() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        document0.appendElement("3");
        document0.getElementsContainingText("3");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test61106() throws Throwable {
        Document document0 = Document.createShell("Pattern syntax error: ");
        document0.title("Pattern syntax error: ");
        Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
        assertEquals("Pattern syntax error: ", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test61107() throws Throwable {
        Document document0 = Document.createShell("Pattern syntax error: ");
        document0.title("Pattern syntax error: ");
        Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test61108() throws Throwable {
        Document document0 = Document.createShell("Pattern syntax error: ");
        document0.title("Pattern syntax error: ");
        Elements elements0 = document0.getElementsContainingText("Pattern syntax error: ");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test62109() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        Elements elements0 = document0.getElementsContainingOwnText("br");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test62110() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        Elements elements0 = document0.getElementsContainingOwnText("br");
        assertEquals("br", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test62111() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        Elements elements0 = document0.getElementsContainingOwnText("br");
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test63112() throws Throwable {
        Document document0 = Document.createShell("br");
        DataNode dataNode0 = DataNode.createFromEncoded("br", "meta");
        document0.prependChild(dataNode0);
        document0.getElementsContainingOwnText("br");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test64113() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.prependElement("br");
        document0.prependElement("br");
        document0.getElementsContainingOwnText("KmTN9hgq{jG:<oYN");
        assertEquals(3, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test65114() throws Throwable {
        boolean boolean0 = Element.preserveWhitespace((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test66115() throws Throwable {
        Comment comment0 = new Comment("JY-bV");
        boolean boolean0 = Element.preserveWhitespace(comment0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test67116() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        boolean boolean0 = Element.preserveWhitespace(element0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test67117() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        boolean boolean0 = Element.preserveWhitespace(element0);
        assertEquals("head", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test67118() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.body();
        boolean boolean0 = Element.preserveWhitespace(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test68119() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.title(":has");
        boolean boolean0 = document0.hasText();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test68120() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.title(":has");
        boolean boolean0 = document0.hasText();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test68121() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.title(":has");
        boolean boolean0 = document0.hasText();
        assertEquals(":has", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test69122() throws Throwable {
        Document document0 = Document.createShell(";Vb@");
        document0.title("");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test69123() throws Throwable {
        Document document0 = Document.createShell(";Vb@");
        document0.title("");
        boolean boolean0 = document0.hasText();
        assertEquals(";Vb@", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test69124() throws Throwable {
        Document document0 = Document.createShell(";Vb@");
        document0.title("");
        boolean boolean0 = document0.hasText();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test70125() throws Throwable {
        Document document0 = Document.createShell("canvas");
        DocumentType documentType0 = new DocumentType("canvas", "canvas", "canvas", "sP");
        document0.prependChild(documentType0);
        boolean boolean0 = document0.hasText();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test70126() throws Throwable {
        Document document0 = Document.createShell("canvas");
        DocumentType documentType0 = new DocumentType("canvas", "canvas", "canvas", "sP");
        document0.prependChild(documentType0);
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test71127() throws Throwable {
        Document document0 = Document.createShell("0smQ_5u/yQl}p2]H");
        Node[] nodeArray0 = new Node[9];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        nodeArray0[5] = (Node) document0;
        nodeArray0[6] = (Node) document0;
        DataNode dataNode0 = new DataNode("0smQ_5u/yQl}p2]H");
        nodeArray0[7] = (Node) dataNode0;
        nodeArray0[8] = (Node) document0;
        document0.addChildren(nodeArray0);
        // Undeclared exception!
        document0.data();
    }

    @Test(timeout = 4000)
    public void test72128() throws Throwable {
        Document document0 = new Document("Dl[=F/Gp-}w%G[y' k");
        Comment comment0 = new Comment("Dl[=F/Gp-}w%G[y' k");
        document0.prependChild(comment0);
        String string0 = document0.data();
        assertEquals("Dl[=F/Gp-}w%G[y' k", string0);
    }

    @Test(timeout = 4000)
    public void test72129() throws Throwable {
        Document document0 = new Document("Dl[=F/Gp-}w%G[y' k");
        Comment comment0 = new Comment("Dl[=F/Gp-}w%G[y' k");
        document0.prependChild(comment0);
        String string0 = document0.data();
        assertEquals("Dl[=F/Gp-}w%G[y' k", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test73130() throws Throwable {
        Document document0 = new Document("*");
        document0.toggleClass("*");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test73131() throws Throwable {
        Document document0 = new Document("*");
        document0.toggleClass("*");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
        assertEquals("*", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test74132() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
        document0.toggleClass("java.lang.string@0000000027 za:q!");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000027 za:q!");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test74133() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000000027 za:q!");
        document0.toggleClass("java.lang.string@0000000027 za:q!");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000027 za:q!");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test75134() throws Throwable {
        Document document0 = new Document("*");
        Element element0 = document0.toggleClass("*");
        element0.toggleClass("java.lang.string@0000000007");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test76135() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.toggleClass("link");
        document0.toggleClass(" > ");
        document0.hasClass("link");
        assertEquals(":has", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test77136() throws Throwable {
        Document document0 = new Document("*");
        Element element0 = document0.toggleClass("*");
        document0.childNodesAsArray();
        element0.toggleClass("java.lang.string@0000000007");
        boolean boolean0 = document0.hasClass("java.lang.string@0000000007");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test78137() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.toggleClass(":has");
        document0.toggleClass(":has");
        document0.hasClass("java.lang.string@0000000027");
        assertEquals(":has", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test78138() throws Throwable {
        Document document0 = Document.createShell(":has");
        document0.toggleClass(":has");
        document0.toggleClass(":has");
        document0.hasClass("java.lang.string@0000000027");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test79139() throws Throwable {
        Document document0 = new Document("*");
        document0.toggleClass("*");
        Element element0 = document0.toggleClass("*");
        Element element1 = element0.toggleClass("*");
        assertEquals("*", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test80140() throws Throwable {
        Comment comment0 = new Comment("value");
        Attributes attributes0 = comment0.attributes();
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "Invalid character reference: %s", attributes0);
        element0.val();
        assertEquals("Invalid character reference: %s", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test81141() throws Throwable {
        Comment comment0 = new Comment("value");
        Attributes attributes0 = comment0.attributes();
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "Invalid character reference: %s", attributes0);
        element0.val(".lBDmd9~Q(");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test82142() throws Throwable {
        Document document0 = Document.createShell("&&>UN*p!(Wh");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        document0.outputSettings(document_OutputSettings0);
        String string0 = document0.html();
        assertEquals("<html><head></head><body></body></html>", string0);
    }

    @Test(timeout = 4000)
    public void test82143() throws Throwable {
        Document document0 = Document.createShell("&&>UN*p!(Wh");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        document0.outputSettings(document_OutputSettings0);
        String string0 = document0.html();
        assertEquals("&&>UN*p!(Wh", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test83144() throws Throwable {
        Document document0 = Document.createShell("br");
        Element element0 = document0.prependElement("br");
        List<Node> list0 = document0.childNodesCopy();
        element0.childNodes = list0;
        // Undeclared exception!
        try {
            document0.html();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test84145() throws Throwable {
        Document document0 = Document.createShell("br");
        Element element0 = document0.prependElement("br");
        element0.appendElement("br");
        document0.html();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test85146() throws Throwable {
        Document document0 = Document.createShell("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Element element0 = document0.prependElement("br");
        document_OutputSettings0.outline(true);
        document0.outputSettings(document_OutputSettings0);
        element0.appendElement("br");
        document0.html();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test86147() throws Throwable {
        Element element0 = new Element("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        // Undeclared exception!
        try {
            element0.outerHtmlHead((Appendable) null, 904, document_OutputSettings1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test87148() throws Throwable {
        Document document0 = Document.createShell("B");
        Element element0 = document0.getElementById("B");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test87149() throws Throwable {
        Document document0 = Document.createShell("B");
        Element element0 = document0.getElementById("B");
        String string0 = document0.html();
        assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test87150() throws Throwable {
        Document document0 = Document.createShell("B");
        Element element0 = document0.getElementById("B");
        String string0 = document0.html();
        assertEquals("B", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test88151() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.prependElement("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        Document document1 = document0.outputSettings(document_OutputSettings1);
        String string0 = document1.html();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test88152() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.prependElement("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        Document document1 = document0.outputSettings(document_OutputSettings1);
        String string0 = document1.html();
        assertEquals("<br />\n<html>\n <head></head>\n <body></body>\n</html>\n<br />\n<html>\n <head></head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test89153() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        document0.outputSettings(document_OutputSettings1);
        String string0 = document0.html();
        assertEquals("<html>\n <head>\n  <title>br</title>\n </head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test89154() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.title("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        document0.outputSettings(document_OutputSettings1);
        String string0 = document0.html();
        assertEquals("br", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test90155() throws Throwable {
        Document document0 = new Document("[@:N}OHP~*3");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[@:N}OHP~*3");
        document0.html(charBuffer0);
        assertEquals("[@:N}OHP~*3", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test91156() throws Throwable {
        Document document0 = Document.createShell("[@:N}OHP~*3");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "[@:N}OHP~*3");
        // Undeclared exception!
        try {
            document0.html(charBuffer0);
            fail("Expecting exception: ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.StringCharBuffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test92157() throws Throwable {
        Document document0 = Document.createShell(":has");
        Document document1 = (Document) document0.toggleClass(":has");
        Document document2 = (Document) document1.doClone(document0);
        assertEquals(":has", document2.baseUri());
    }

    @Test(timeout = 4000)
    public void test92158() throws Throwable {
        Document document0 = Document.createShell(":has");
        Document document1 = (Document) document0.toggleClass(":has");
        Document document2 = (Document) document1.doClone(document0);
        assertTrue(document2.hasParent());
    }

    @Test(timeout = 4000)
    public void test92159() throws Throwable {
        Document document0 = Document.createShell(":has");
        Document document1 = (Document) document0.toggleClass(":has");
        Document document2 = (Document) document1.doClone(document0);
        assertEquals(1, document1.childNodeSize());
    }
}
