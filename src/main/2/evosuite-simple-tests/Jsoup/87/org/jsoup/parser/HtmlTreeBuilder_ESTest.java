/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 08:42:26 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Parser.parse(")", ")");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment(")", document0, ")", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(")", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
        htmlTreeBuilder0.maybeSetBaseUri(formElement0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.getHeadElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@25, state=InBody, currentElement=<z>\n 5G\n <-<f655\"<z>5g></-<f655\"<z>5g>\n</z>}", "TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@25, state=InBody, currentElement=<z>\n 5G\n <-<f655\"<z>5g></-<f655\"<z>5g>\n</z>}");
        assertEquals(0, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableBodyContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "table", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        String[] stringArray0 = new String[8];
        stringArray0[3] = "table";
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.generateImpliedEndTags();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertMarkerToFormattingElements();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        FormElement formElement0 = htmlTreeBuilder0.getFormElement();
        assertNull(formElement0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableRowContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.state();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String[] stringArray0 = new String[0];
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope(stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.getDocument();
        assertNull(document0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String string0 = htmlTreeBuilder0.getBaseUri();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "table", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "table", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        boolean boolean0 = htmlTreeBuilder0.processStartTag(".d3>Zr");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.isSpecial((Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inTableScope("F+w4+l|bx");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("X$;ZQ[@l$K76P", (Element) null, "X$;ZQ[@l$K76P", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("X$;ZQ[@l$K76P", (Element) null, "X$;ZQ[@l$K76P", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("optgroup");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("iOiX*-");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("title");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "title", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("title", pseudoTextElement0, "title", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Tag tag0 = Tag.valueOf("style");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/", attributes0);
        htmlTreeBuilder0.parseFragment("colgroup", pseudoTextElement0, "/", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        Token.Character token_Character0 = new Token.Character();
        htmlTreeBuilder0.insert(token_Character0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Tag tag0 = Tag.valueOf("script");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".Iy?", attributes0);
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("script", pseudoTextElement0, "\"@=pA", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
        Token.Character token_Character0 = tokeniser0.charPending;
        htmlTreeBuilder0.insert(token_Character0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("noscript");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noscript", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", pseudoTextElement0, "noscript", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("plaintext", parseSettings0);
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "plaintext", attributes0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("plaintext", pseudoTextElement0, "novalidate", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        Tag tag0 = Tag.valueOf("th");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "-<F655J<G>%5GA?", attributes0);
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("\"Z$dp@@]x!S$|fM6J51", formElement0, "th", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
        Parser parser0 = Parser.xmlParser();
        Parser parser1 = parser0.setTrackErrors(100);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "table", parser1);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("h2", (Element) null, "h2", parser0);
        Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
        Token.StartTag token_StartTag0 = tokeniser0.startPending;
        token_StartTag0.selfClosing = true;
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insert(token_StartTag0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be false
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("yx~S<[n5eInGo)", (Element) null, "yx~S<[n5eInGo)", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("yx~S<[n5eInGo)", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.aboveOnStack(formElement0);
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("}^]R0ZvR]", (Element) null, "}^]R0ZvR]", parser0);
        Token.CData token_CData0 = new Token.CData("}^]R0ZvR]");
        htmlTreeBuilder0.insert(token_CData0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Tag tag0 = Tag.valueOf("5");
        FormElement formElement0 = new FormElement(tag0, "5", (Attributes) null);
        htmlTreeBuilder0.parseFragment("9}(8d;Ye'U[d8", formElement0, "", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("keygen", attributes0);
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
        assertEquals("", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("object");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("object", pseudoTextElement0, "object", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("-<F655JG>%5~A?", (Element) null, "-<F655JG>%5~A?", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertInFosterParent((Node) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("3T^", (Element) null, "3T^", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("3T^", (Element) null, "3T^", parser0);
        boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Document document0 = Parser.parse("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("  P            ", document0, "-<F655J<G>%5GA?", parser0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        Document document0 = Parser.parse("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("  P            ", document0, "-<F655J<G>%5GA?", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test3540() throws Throwable {
        Document document0 = Parser.parse("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("  P            ", document0, "-<F655J<G>%5GA?", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("-<F655J<G>%5GA?");
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3641() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("dl", (Element) null, "dl", parser0);
        htmlTreeBuilder0.popStackToClose("dl");
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3742() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("&gt;", (Element) null, "&gt;", parser0);
        String[] stringArray0 = new String[0];
        htmlTreeBuilder0.popStackToClose(stringArray0);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3843() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        Element element0 = new Element("yDg");
        htmlTreeBuilder0.parseFragment("]5dlLEue>n", element0, "yDg", parser0);
        htmlTreeBuilder0.popStackToBefore("yDg");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test3944() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("yDg", (Element) null, "yDg", parser0);
        htmlTreeBuilder0.popStackToBefore("html");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4045() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("US-ASCII", (Element) null, "US-ASCII", parser0);
        htmlTreeBuilder0.popStackToClose("link");
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4146() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "legend", attributes0);
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "legend", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4247() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("object", parseSettings0);
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("=xlk`xM5}-`S_\"?", pseudoTextElement0, "object", parser0);
        htmlTreeBuilder0.insertStartTag("=xlk`xM5}-`S_\"?");
        htmlTreeBuilder0.clearStackToTableContext();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ul");
        htmlTreeBuilder0.insertStartTag("ul");
        Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test4349() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ul");
        htmlTreeBuilder0.insertStartTag("ul");
        Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
        assertFalse(element1.isBlock());
    }

    @Test(timeout = 4000)
    public void test4350() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("ul");
        htmlTreeBuilder0.insertStartTag("ul");
        Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test4451() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("h2", (Element) null, "h2", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4552() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("h6", (Element) null, "h6", parser0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test4653() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        String string0 = "C\\uTKJ1+W6c1e5~";
        Element element0 = new Element("colgroup");
        htmlTreeBuilder0.parseFragment(string0, element0, "colgroup", parser0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceOnStack(element0, element0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4754() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("object", parseSettings0);
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("=xlk`xM5}-`S_\"?", pseudoTextElement0, "object", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test4755() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("object", parseSettings0);
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("=xlk`xM5}-`S_\"?", pseudoTextElement0, "object", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("=xlk`xM5}-`S_\"?");
        htmlTreeBuilder0.replaceOnStack(element0, pseudoTextElement0);
        assertEquals("object", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4856() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("select", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "th", attributes0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("select", element0, "`N.0)#zX.s}", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test4957() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("td");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tfoot", attributes0);
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("nobr", pseudoTextElement0, "summary", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5058() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("tr", parseSettings0);
        Element element0 = new Element(tag0, "#root");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("||N'^lG-R", element0, "tr", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5159() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Attributes attributes0 = new Attributes();
        ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
        Tag tag0 = Tag.valueOf("tbody", parseSettings0);
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tbody", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("BeforeDoctypeSystemIdentifier", pseudoTextElement0, "1vUA6u(S", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5260() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("thead");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "thead", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("thead", pseudoTextElement0, "thead", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("tfoot");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tfoot", attributes0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", pseudoTextElement0, "tfoot", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Attributes attributes0 = new Attributes();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("caption", parseSettings0);
        Element element0 = new Element(tag0, "th", attributes0);
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", element0, "caption", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = Document.createShell("tBoot");
        Element element0 = document0.head();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tBoot", element0, "[E]|.BM@b4t uu}", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("frameset", (ParseSettings) null);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "]!<", attributes0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", element0, "frameset", parser0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        Document document0 = Document.createShell("caption");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("caption", document0, "caption", parser0);
        Element element0 = htmlTreeBuilder0.insertStartTag("caption");
        element0.wrap("caption");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5866() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("-<F655JG>%5~A?", (Element) null, "-<F655JG>%5~A?", parser0);
        htmlTreeBuilder0.resetInsertionMode();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test5967() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test5968() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        boolean boolean0 = htmlTreeBuilder0.inScope("ul");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6069() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("US-ASCII", (Element) null, "US-ASCII", parser0);
        htmlTreeBuilder0.popStackToClose("link");
        boolean boolean0 = htmlTreeBuilder0.inScope("US-ASCII");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6170() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test6171() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        htmlTreeBuilder0.insertStartTag("ul");
        boolean boolean0 = htmlTreeBuilder0.inScope("ul");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6272() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test6273() throws Throwable {
        Document document0 = Parser.parse("e-<F655\"<Z>Y5GA?", "e-<F655\"<Z>Y5GA?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("e-<F655\"<Z>Y5GA?", document0, "e-<F655\"<Z>Y5GA?", parser0);
        htmlTreeBuilder0.insertStartTag("ul");
        boolean boolean0 = htmlTreeBuilder0.inListItemScope("e-<F655\"<Z>Y5GA?");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6374() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("US-ASCII", (Element) null, "US-ASCII", parser0);
        htmlTreeBuilder0.popStackToClose("link");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inSelectScope("US-ASCII");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Should not be reachable
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test6475() throws Throwable {
        Document document0 = Parser.parse("td", "td");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("td", document0, "td", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6476() throws Throwable {
        Document document0 = Parser.parse("td", "td");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("td", document0, "td", parser0);
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("td");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6577() throws Throwable {
        Document document0 = Parser.parse("td", "td");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("td", document0, "td", parser0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test6578() throws Throwable {
        Document document0 = Parser.parse("td", "td");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("td", document0, "td", parser0);
        htmlTreeBuilder0.insertStartTag("td");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("td");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6679() throws Throwable {
        Document document0 = Parser.parse("-<uF65:J<P>%5GA?", "-<uF65:J<P>%5GA?");
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("-<uF65:J<P>%5GA?", document0, "-<uF65:J<P>%5GA?", parser0);
        htmlTreeBuilder0.generateImpliedEndTags("-<uF65:J<P>%5GA?");
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test6780() throws Throwable {
        Document document0 = Parser.parse("8}AR", "8}AR");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("8}AR", document0, "8}AR", parser0);
        Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test6881() throws Throwable {
        Document document0 = Document.createShell("link");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("link", document0, "link", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test6982() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Document document0 = parser0.parseInput("col", "col");
        htmlTreeBuilder0.parseFragment("sYL4AV2", (Element) null, "td", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7083() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = new Document("-<F655J<G>%5GA?");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("-<F655J<G>%5GA?", document0, "-<F655J<G>%5GA?", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test7084() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = new Document("-<F655J<G>%5GA?");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("-<F655J<G>%5GA?", document0, "-<F655J<G>%5GA?", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.insertStartTag("-<F655J<G>%5GA?");
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test7185() throws Throwable {
        Document document0 = Document.createShell("-<F655JG>%5~A?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("-<F655JG>%5~A?", document0, "%0b", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals("#document", document0.nodeName());
    }

    @Test(timeout = 4000)
    public void test7286() throws Throwable {
        Document document0 = Document.createShell("3=]");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("3=]", document0, "3=]", parser0);
        document0.val("3=]");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Document document1 = Parser.parseBodyFragment("3=]", "J& &x}");
        htmlTreeBuilder0.pushActiveFormattingElements(document1);
        assertNotSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test7387() throws Throwable {
        Document document0 = Document.createShell("-<F655JG>%5~A?");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("-<F655JG>%5~A?", document0, "%0b", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7488() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = Parser.parseBodyFragmentRelaxed("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("-<F655J<G>%5GA?", document0, ";Gbb#jS+3v:S!R#Yk", parser0);
        assertEquals(2, list0.size());
    }

    @Test(timeout = 4000)
    public void test7489() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = Parser.parseBodyFragmentRelaxed("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("-<F655J<G>%5GA?", document0, ";Gbb#jS+3v:S!R#Yk", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag(";Gbb#jS+3v:S!R#Yk");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7590() throws Throwable {
        Attributes attributes0 = new Attributes();
        XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
        ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
        Tag tag0 = Tag.valueOf("U&h'>5AregwB", parseSettings0);
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "rrcsna+fwsp<kbf", attributes0);
        Parser parser0 = Parser.htmlParser();
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parseFragment("-<F655JG>%5~A?", pseudoTextElement0, "U&h'>5AregwB", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7691() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("yDg", (Element) null, "yDg", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
    }

    @Test(timeout = 4000)
    public void test7792() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        ParseSettings parseSettings0 = new ParseSettings(false, false);
        Attributes attributes0 = new Attributes();
        Tag tag0 = Tag.valueOf("summary", parseSettings0);
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "summary", attributes0);
        htmlTreeBuilder0.parseFragment("#document", pseudoTextElement0, "@M;L", parser0);
        PseudoTextElement pseudoTextElement1 = new PseudoTextElement(tag0, "summary", attributes0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement1);
        htmlTreeBuilder0.removeFromActiveFormattingElements(pseudoTextElement0);
        assertFalse(pseudoTextElement0.hasParent());
    }

    @Test(timeout = 4000)
    public void test7893() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = Parser.parse("-<F655J<G>%5GA?", "-<F655J<G>%5GA?");
        htmlTreeBuilder0.parseFragment("-<F655J<G>%5GA?", document0, "-<F655J<G>%5GA?", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("-<F655J<G>%5GA?");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test7994() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IndexLessThan", (Element) null, "org.jsoup.select.Evaluator$IndexLessThan", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("org.jsoup.select.Evaluator$IndexLessThan");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test8095() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("object");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("=xlk`xM5}-`S_\"?", pseudoTextElement0, "object", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(pseudoTextElement0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("object");
        assertFalse(element0.hasParent());
    }

    @Test(timeout = 4000)
    public void test8196() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("table");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "table", attributes0);
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("table", pseudoTextElement0, "table", parser0);
        htmlTreeBuilder0.push(pseudoTextElement0);
        htmlTreeBuilder0.insertInFosterParent(pseudoTextElement0);
        assertEquals(1, pseudoTextElement0.siblingIndex());
    }
}
