/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 04:37:55 GMT 2024
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("tfoot", "tfoot");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.aboveOnStack(document0);
            fail("Expecting exception: AssertionError");
        } catch (AssertionError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.getHeadElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("S", "S");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendTagName('D');
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
        assertEquals(1, formElement0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        htmlTreeBuilder0.parse("ooc|_", "dt", parseErrorList0);
        boolean boolean0 = htmlTreeBuilder0.processEndTag("ooc|_");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableBodyContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inListItemScope("rrxal7ZC08!@{)/");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.toString();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.TreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("k>Uubj6T", "k>Uubj6T");
        Element element0 = htmlTreeBuilder0.insertStartTag("td");
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("h4", element0, "h4", parseErrorList0);
        assertTrue(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("k>Uubj6T", "k>Uubj6T");
        Element element0 = htmlTreeBuilder0.insertStartTag("td");
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("h4", element0, "h4", parseErrorList0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("k>Uubj6T", "k>Uubj6T");
        Element element0 = htmlTreeBuilder0.insertStartTag("td");
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("h4", element0, "h4", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.newPendingTableCharacters();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("", "");
        htmlTreeBuilder0.processStartTag("select");
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope(htmlTreeBuilder0.TagsSearchInScope);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        htmlTreeBuilder0.setPendingTableCharacters(linkedList0);
        assertEquals(0, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.getDocument();
        assertNull(document0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope("d3o-q4XtXR]");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String string0 = htmlTreeBuilder0.getBaseUri();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Token.EOF token_EOF0 = new Token.EOF();
        HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
        // Undeclared exception!
        try {
            htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("i%J@");
        boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.setFosterInserts(true);
        Document document0 = htmlTreeBuilder0.parse("c_", "c_");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.push((Element) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("y/4s</7N", "y/4s</7N");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.clearStackToTableContext();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Document document0 = new Document("scr<");
        // Undeclared exception!
        try {
            document0.wrap("scr<");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("title");
        Element element0 = new Element(tag0, "org.jsoup.helper.HttpConnection");
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.helper.HttpConnection", element0, "lGmT50oY", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("M.o", "M.o");
        Element element0 = document0.tagName("noembed");
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("#L*.vH2\"3", element0, "noembed", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("M.o", "M.o");
        Element element0 = document0.tagName("noembed");
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("#L*.vH2\"3", element0, "noembed", parseErrorList0);
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("Q0?", "Q0?");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("script");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Q0?", element0, "framQsett", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("Q0?", "Q0?");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("script");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("Q0?", element0, "framQsett", parseErrorList0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("center", "center");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("noscript");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "noscript", (ParseErrorList) null);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("center", "center");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("noscript");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", element0, "noscript", (ParseErrorList) null);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("plaintext");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("+X|cd", element0, "rp", parseErrorList0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("plaintext");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("+X|cd", element0, "rp", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("caption");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "caption", attributes0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("caption", formElement0, "caption", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("Q0?", "Q0?");
        htmlTreeBuilder0.maybeSetBaseUri(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("Q0?", "Q0?");
        htmlTreeBuilder0.maybeSetBaseUri(document0);
        assertEquals("Q0?", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = new ParseErrorList(4576, 3218);
        htmlTreeBuilder0.parse("gt", "org.jsoup.nodes.Entities", parseErrorList0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("tfoot");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("r0'QdktI'|,L", "r0'QdktI'|,L");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("r0'QdktI'|,L");
        token_StartTag0.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("select", "select", (ParseErrorList) null);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.selfClosing = true;
        token_StartTag0.name("noscript");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("script", "script");
        htmlTreeBuilder0.processStartTag("script");
        Token.Character token_Character0 = new Token.Character();
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insert(token_Character0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("noscript", "noscript");
        htmlTreeBuilder0.processStartTag("style");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insert((Token.Character) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
        }
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("b/+", "b/+");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("table");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.insertInFosterParent(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3744() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("/>", "/>");
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("/>", "/>");
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3846() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("base", "pre");
        Element element0 = document0.body();
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertEquals("pre", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("base", "pre");
        Element element0 = document0.body();
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("base", "pre");
        Element element0 = document0.body();
        boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("*R.|", "*R.|");
        htmlTreeBuilder0.popStackToClose("*R.|");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inSelectScope("*R.|");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Should not be reachable
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4050() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        htmlTreeBuilder0.parse("ooc|_", "dt", parseErrorList0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("ooc|_");
        boolean boolean1 = htmlTreeBuilder0.processEndTag("ooc|_");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test4151() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        String[] stringArray0 = new String[2];
        stringArray0[0] = "DOCTYPE";
        stringArray0[1] = "DOCTYPE";
        htmlTreeBuilder0.popStackToClose(stringArray0);
        // Undeclared exception!
        try {
            htmlTreeBuilder0.inScope("DOCTYPE", htmlTreeBuilder0.TagsSearchInScope);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Should not be reachable
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4252() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("rrxal7ZC08!@{)/", "ooc|_");
        htmlTreeBuilder0.popStackToClose(htmlTreeBuilder0.TagsSearchInScope);
    }

    @Test(timeout = 4000)
    public void test4353() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        htmlTreeBuilder0.popStackToBefore("DOCTYPE");
    }

    @Test(timeout = 4000)
    public void test4454() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("ooc|_", "ooc|_");
        htmlTreeBuilder0.popStackToBefore("body");
    }

    @Test(timeout = 4000)
    public void test4555() throws Throwable {
        Document document0 = new Document("scr<");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Elements elements0 = document0.siblingElements();
        htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
        htmlTreeBuilder0.clearStackToTableRowContext();
    }

    @Test(timeout = 4000)
    public void test4656() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("k>Uubj6T", "k>Uubj6T");
        htmlTreeBuilder0.clearStackToTableRowContext();
    }

    @Test(timeout = 4000)
    public void test4757() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("i", "i");
        // Undeclared exception!
        try {
            htmlTreeBuilder0.insertOnStackAfter(document0, document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must be true
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4858() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("summary", "summary");
        Element element0 = document0.body();
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test4959() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("kq\u0007&|.bt@!nE6", "kq\u0007&|.bt@!nE6");
        Element element0 = document0.body();
        htmlTreeBuilder0.replaceOnStack(element0, document0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5060() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.initialiseParse("Unexectd token [%s] whn in state [%s]", "Unexectd token [%s] whn in state [%s]", (ParseErrorList) null);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5161() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("ayY1", "ayY1");
        htmlTreeBuilder0.insertStartTag("tr");
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5262() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("scr<", "tbody");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("tbody");
        htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5363() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("thead", "thead");
        htmlTreeBuilder0.insertStartTag("thead");
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5464() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("tfoot", "tfoot");
        htmlTreeBuilder0.insertStartTag("tfoot");
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5565() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("0SgeE$", "0SgeE$");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("colgroup");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "0SgeE$", parseErrorList0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5566() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("0SgeE$", "0SgeE$");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("colgroup");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "0SgeE$", parseErrorList0);
        assertTrue(parseErrorList0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5567() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("0SgeE$", "0SgeE$");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("colgroup");
        Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment("colgroup", element0, "0SgeE$", parseErrorList0);
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5668() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("b/+", "b/+");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("table");
        htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5769() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse(":Wm`=", ":Wm`=");
        Element element0 = document0.head();
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment(":Wm`=", element0, ":Wm`=", parseErrorList0);
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test5770() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse(":Wm`=", ":Wm`=");
        Element element0 = document0.head();
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment(":Wm`=", element0, ":Wm`=", parseErrorList0);
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5771() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse(":Wm`=", ":Wm`=");
        Element element0 = document0.head();
        ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
        List<Node> list0 = htmlTreeBuilder0.parseFragment(":Wm`=", element0, ":Wm`=", parseErrorList0);
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5872() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("30Z<4|TiW<:BU", "a7DJG.RRzK. /B6");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("frameset");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", element0, "30Z<4|TiW<:BU", parseErrorList0);
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test5873() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("30Z<4|TiW<:BU", "a7DJG.RRzK. /B6");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("frameset");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", element0, "30Z<4|TiW<:BU", parseErrorList0);
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5874() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("30Z<4|TiW<:BU", "a7DJG.RRzK. /B6");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("frameset");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", element0, "30Z<4|TiW<:BU", parseErrorList0);
        assertEquals("a7DJG.RRzK. /B6", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5975() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        Element element0 = document0.body();
        Element element1 = element0.wrap("DOCTYPE");
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5976() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("DOCTYPE", "DOCTYPE");
        Element element0 = document0.body();
        Element element1 = element0.wrap("DOCTYPE");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test6077() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.parse("S", "S");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.appendTagName('D');
        htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test6178() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1724760558));
        htmlTreeBuilder0.parse("summary", "X;=6", parseErrorList0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("isindex");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6279() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("ooc|_", "ooc|_");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test6280() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("ooc|_", "ooc|_");
        boolean boolean0 = htmlTreeBuilder0.inTableScope("ooc|_");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6381() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("c_", "c_");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test6382() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("c_", "c_");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("c_");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6483() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("c_", "c_");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test6484() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("c_", "c_");
        htmlTreeBuilder0.processStartTag("c_");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("c_");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6585() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("d", "d", (ParseErrorList) null);
        Element element0 = document0.createElement("dd");
        htmlTreeBuilder0.insert(element0);
        htmlTreeBuilder0.generateImpliedEndTags("2Ir1beBHo:9u2(F");
    }

    @Test(timeout = 4000)
    public void test6686() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("sortable", "sortable", parseErrorList0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("sortable");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean1 = htmlTreeBuilder0.processStartTag("sortable");
        assertTrue(boolean1 == boolean0);
    }

    @Test(timeout = 4000)
    public void test6787() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test6888() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("sortable", "sortable", parseErrorList0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("sortable");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6989() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("O'", "O'");
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("MUyxdr+5tE2l+Ps");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7090() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("X;=6", "X;=6", parseErrorList0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Document document1 = new Document("X;=6");
        document0.toggleClass("no5cr1pt");
        htmlTreeBuilder0.pushActiveFormattingElements(document1);
        assertEquals("X;=6", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test7191() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("X;=6", "X;=6", parseErrorList0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test7292() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("X;=6", "X;=6", parseErrorList0);
        Element element0 = htmlTreeBuilder0.currentElement();
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test7393() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("iI?<eM>N1ewY(_z", "iI?<eM>N1ewY(_z");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test7494() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("ul");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    }

    @Test(timeout = 4000)
    public void test7595() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    }

    @Test(timeout = 4000)
    public void test7696() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    }

    @Test(timeout = 4000)
    public void test7797() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
        Document document0 = htmlTreeBuilder0.parse("5$N$@8:@~", "[%s]", parseErrorList0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    }

    @Test(timeout = 4000)
    public void test7898() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("tab5le", "tab5le");
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("tab5le");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test7999() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("ScriptDataEscaped");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test80100() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Document.createShell("%s{");
        Element element0 = document0.createElement("%s{");
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        Element element1 = htmlTreeBuilder0.getActiveFormattingElement("%s{");
        assertEquals(0, element1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test81101() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.parse("b/+", "b/+");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        token_StartTag0.name("table");
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        element0.replaceWith(document0);
        htmlTreeBuilder0.insertInFosterParent(element0);
        assertEquals(2, element0.siblingIndex());
    }
}
