/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 06:28:17 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document("%b`oT,./$rMp2N%iLW");
        Document document1 = (Document) document0.appendText("%b`oT,./$rMp2N%iLW");
        assertEquals("%b`oT,./$rMp2N%iLW", document1.location());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        Element element0 = document0.prependText(" ");
        document0.appendElement("br");
        Elements elements0 = element0.getElementsMatchingText("#root");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = new Document("]8`i{");
        // Undeclared exception!
        try {
            document0.child((-1816));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Element element0 = new Element("P9?B$}lAz(");
        element0.text("P9?B$}lAz(");
        String string0 = element0.outerHtml();
        assertEquals("<P9?B$}lAz(>\n P9?B$}lAz(\n</P9?B$}lAz(>", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = new Document("5_`>{");
        Map<String, String> map0 = document0.dataset();
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Element element0 = new Element("br");
        // Undeclared exception!
        try {
            element0.html("br");
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.LinkedList", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = new Document("solrS");
        Element element0 = document0.attr("solrS", false);
        assertSame(document0, element0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = new Document("63-N-U0bu");
        Elements elements0 = document0.getElementsByAttributeValue("</", "</");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Element element0 = new Element("br");
        Elements elements0 = element0.getElementsByAttributeValueStarting("br", "br");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = new Document("textarea");
        Element element0 = document0.createElement("textarea");
        element0.reparentChild(document0);
        String string0 = document0.cssSelector();
        assertEquals("textarea > #root", string0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = new Document("i>?+(ZB$pJW-ik\"t<U");
        Document document1 = (Document) document0.prepend("i>?+(ZB$pJW-ik\"t<U");
        assertEquals("i>?+(ZB$pJW-ik\"t<U", document1.location());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Element element0 = new Element("S5CD~+O");
        Elements elements0 = element0.getElementsMatchingOwnText("S5CD~+O");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = new Document("og.jsoup.nodes.Entities$CoeCharset");
        // Undeclared exception!
        try {
            document0.after("og.jsoup.nodes.Entities$CoeCharset");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = new Document("mxQ@27t@");
        Elements elements0 = document0.getElementsByIndexLessThan(387);
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Element element0 = new Element("OG-g6G|%z");
        Elements elements0 = element0.getElementsByAttributeStarting("OG-g6G|%z");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = new Document(" > ");
        Elements elements0 = document0.getElementsByIndexEquals((-823));
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = new Document("og.jsoup.nodes.Entities$CoeCharset");
        // Undeclared exception!
        try {
            document0.wrap("og.jsoup.nodes.Entities$CoeCharset");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = new Document("entities-base.properties");
        Document document1 = (Document) document0.val("entities-base.properties");
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Element element0 = new Element("b");
        Elements elements0 = element0.getElementsByAttributeValueMatching("b", "b");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Element element0 = new Element("a5br");
        boolean boolean0 = element0.is("a5br");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Document document0 = new Document("br");
        Elements elements0 = document0.getElementsByAttributeValueEnding("br", "br");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Document document0 = new Document("org.jsoup.select.Evaluator$IsNthOfType");
        Elements elements0 = document0.getElementsByClass("org.jsoup.select.Evaluator$IsNthOfType");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Element element0 = new Element("br");
        Elements elements0 = element0.getElementsContainingText("tePxtarea");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Element element0 = new Element("br");
        Elements elements0 = element0.getElementsByAttributeValueContaining("br", "br");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Document document0 = new Document("5_`>{");
        Document document1 = document0.clone();
        assertEquals("#document", document1.nodeName());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Element element0 = new Element("E7dUm%.`1");
        Elements elements0 = element0.getElementsByAttributeValueNot("E7dUm%.`1", "E7dUm%.`1");
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Element element0 = new Element("oX9HjA,JwH znijI]");
        String string0 = element0.toString();
        assertEquals("<oX9HjA,JwH znijI]></oX9HjA,JwH znijI]>", string0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Document document0 = new Document("OAu#f qVPg");
        Elements elements0 = document0.getElementsByAttribute("OAu#f qVPg");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Document document0 = new Document("tEp\"dzzgdbYN%P/?");
        // Undeclared exception!
        try {
            document0.before("tEp\"dzzgdbYN%P/?");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Element element0 = new Element("E7dUm%.`1");
        Element element1 = element0.removeClass("E7dUm%.`1");
        assertEquals("E7dUm%.`1", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Document document0 = new Document("br");
        Elements elements0 = document0.getAllElements();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Document document0 = new Document("source");
        // Undeclared exception!
        try {
            document0.title("source");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Document", e);
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Document document0 = new Document(":nth-child(%d)");
        Elements elements0 = document0.getElementsByIndexGreaterThan(148);
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Document document0 = new Document("[iL'zI*");
        Element element0 = document0.appendElement("[iL'zI*");
        Elements elements0 = element0.parents();
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Document document0 = new Document("[iL'zI*");
        document0.tagName("[iL'zI*");
        Element element0 = document0.appendElement("[iL'zI*");
        Elements elements0 = element0.parents();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Document document0 = new Document("5_`{");
        document0.append("z");
        document0.reparentChild(document0);
        // Undeclared exception!
        try {
            document0.nextElementSibling();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Document document0 = new Document("}{");
        document0.appendElement("}{");
        List<TextNode> list0 = document0.textNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "t,.=]F", attributes0);
        formElement0.val("textarea");
        formElement0.textNodes();
        assertEquals(1, formElement0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        formElement0.val("textarea");
        formElement0.dataNodes();
        assertEquals(1, formElement0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Element element0 = new Element("br");
        LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
        // Undeclared exception!
        try {
            element0.insertChildren(6, linkedHashSet0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Document document0 = new Document("IkC@ZxN|4");
        LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
        // Undeclared exception!
        try {
            document0.insertChildren((-1795401757), linkedList0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Document document0 = new Document("N");
        LinkedList<Document> linkedList0 = new LinkedList<Document>();
        Document document1 = (Document) document0.insertChildren((-1), linkedList0);
        assertEquals("N", document1.location());
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Document document0 = new Document("phW5:#XCj/,H");
        Element element0 = document0.toggleClass("phW5:#XCj/,H");
        String string0 = element0.cssSelector();
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Document document0 = new Document("5_`>{");
        document0.reparentChild(document0);
        String string0 = document0.cssSelector();
        assertEquals("#root", string0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Document document0 = new Document("QI*7tE6vFh$zMF70F}");
        Elements elements0 = document0.siblingElements();
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Document document0 = new Document("textarea");
        Element element0 = document0.appendElement("textarea");
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        document0.addChildren(nodeArray0);
        Elements elements0 = element0.siblingElements();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        Document document0 = new Document("textarea");
        Element element0 = document0.appendElement("textarea");
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        document0.addChildren(nodeArray0);
        Elements elements0 = element0.siblingElements();
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        Document document0 = new Document("Iu$,");
        Element element0 = document0.nextElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        Document document0 = new Document("textare");
        Element element0 = document0.appendElement("textare");
        Element element1 = element0.nextElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        Document document0 = new Document("]8`i{");
        Element element0 = document0.appendElement("]8`i{");
        Node[] nodeArray0 = new Node[5];
        nodeArray0[0] = (Node) element0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) element0;
        nodeArray0[4] = (Node) element0;
        element0.addChildren(nodeArray0);
        document0.nextElementSibling();
        assertEquals(0, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        Document document0 = new Document("id");
        Element element0 = document0.appendElement("id");
        Element element1 = element0.previousElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        Document document0 = new Document("java.lang.string@0000000010 java.lang.string@0000000011 tag name must not br empty.");
        Element element0 = document0.previousElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        Document document0 = new Document("id");
        Element element0 = document0.appendElement("id");
        element0.before((Node) document0);
        Element element1 = element0.previousElementSibling();
        assertEquals(2, element1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        Document document0 = new Document("value");
        Element element0 = document0.appendElement("value");
        Element element1 = element0.firstElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        Document document0 = new Document("5_`>{");
        Element element0 = document0.appendElement("br");
        element0.after((Node) document0);
        Element element1 = element0.firstElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        Document document0 = new Document("5_`>{");
        Element element0 = document0.appendElement("br");
        element0.after((Node) document0);
        Element element1 = element0.firstElementSibling();
        assertEquals("br", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        Document document0 = new Document("5_`>{");
        Element element0 = document0.appendElement("5_`>{");
        Integer integer0 = element0.elementSiblingIndex();
        assertEquals(0, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        Document document0 = new Document("5_`>{");
        Element element0 = document0.appendElement("5_`>{");
        Element element1 = element0.lastElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        Document document0 = new Document("textarea");
        Element element0 = document0.appendElement("textarea");
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        document0.addChildren(nodeArray0);
        Document document1 = (Document) element0.lastElementSibling();
        assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        Document document0 = new Document("N");
        Element element0 = document0.getElementById("org.jsoup.helper.DataUtil");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        Document document0 = new Document("63-N-U0bu");
        Element element0 = document0.prependText("63-N-U0bu");
        Element element1 = document0.appendElement("63-N-U0bu");
        element1.before((Node) element0);
        element0.tagName("html");
        element0.getElementsMatchingText("63-N-U0bu");
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        Element element0 = document0.prependText(" ");
        document0.appendElement("E7dUm%.`1");
        Elements elements0 = element0.getElementsMatchingText("B&`lf#Hc5.o3}=^");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        Document document0 = new Document("br");
        document0.appendElement("br");
        Elements elements0 = document0.getElementsContainingOwnText("br");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        Document document0 = new Document("br");
        Node[] nodeArray0 = new Node[2];
        DataNode dataNode0 = DataNode.createFromEncoded("br", "br");
        nodeArray0[0] = (Node) dataNode0;
        nodeArray0[1] = (Node) document0;
        document0.addChildren(nodeArray0);
        // Undeclared exception!
        document0.getElementsContainingOwnText("br");
    }

    @Test(timeout = 4000)
    public void test6264() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        formElement0.val("textarea");
        formElement0.getElementsMatchingText("textarea");
        assertEquals(1, formElement0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test6365() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        Element element0 = document0.prependText(" ");
        document0.appendElement("br");
        Elements elements0 = element0.getElementsContainingOwnText("odd");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        boolean boolean0 = Element.preserveWhitespace((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        DataNode dataNode0 = new DataNode("java.lang.string@0000000011 java.lang.string@0000000011 tag name must not br empty.", "java.lang.string@0000000011 java.lang.string@0000000011 tag name must not br empty.");
        boolean boolean0 = Element.preserveWhitespace(dataNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6668() throws Throwable {
        Document document0 = new Document("textarea");
        Element element0 = document0.createElement("textarea");
        element0.reparentChild(document0);
        boolean boolean0 = Element.preserveWhitespace(document0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6769() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        document0.prependText(" ");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6870() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        document0.appendElement("E7dUm%.`1");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6971() throws Throwable {
        Document document0 = new Document("LD%kIF;6(&&}a#!jIp");
        Element element0 = document0.appendElement("LD%kIF;6(&&}a#!jIp");
        element0.text("LD%kIF;6(&&}a#!jIp");
        boolean boolean0 = document0.hasText();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7072() throws Throwable {
        Document document0 = new Document("KE3-N-U0b)");
        Element element0 = document0.prependText("KE3-N-U0b)");
        String string0 = element0.data();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7173() throws Throwable {
        Document document0 = new Document("br");
        DataNode dataNode0 = new DataNode("br", "br");
        document0.prependChild(dataNode0);
        String string0 = document0.data();
        assertEquals("br", string0);
    }

    @Test(timeout = 4000)
    public void test7274() throws Throwable {
        Document document0 = new Document("br");
        document0.appendElement("br");
        String string0 = document0.data();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        Document document0 = new Document("java.lang.strin6@0000000010 (ava.lang.string@0000000011 tag name must not br empty.");
        document0.toggleClass("java.lang.strin6@0000000010 (ava.lang.string@0000000011 tag name must not br empty.");
        boolean boolean0 = document0.hasClass("java.lang.strin6@0000000010 (ava.lang.string@0000000011 tag name must not br empty.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        Document document0 = new Document("i>?+(ZB$pJW-ik\"t<U");
        document0.toggleClass("phW5:#XCj/,H");
        boolean boolean0 = document0.hasClass("Tag name must not be empty.");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7577() throws Throwable {
        Document document0 = new Document("Ye2Z)R( ");
        document0.toggleClass("Ye2Z)R( ");
        Element element0 = document0.toggleClass("Ye2Z)R( ");
        boolean boolean0 = element0.hasClass("Ye2Z)R( ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7678() throws Throwable {
        Document document0 = new Document("br");
        Element element0 = document0.toggleClass(" />");
        document0.toggleClass(" />");
        boolean boolean0 = element0.hasClass(" />");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        Document document0 = new Document(")br");
        Charset charset0 = document0.charset();
        Set<String> set0 = charset0.aliases();
        document0.classNames(set0);
        document0.toggleClass(")br");
        document0.toggleClass("BogusComment");
        boolean boolean0 = document0.hasClass(")br");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7880() throws Throwable {
        Document document0 = new Document("Iu$,");
        document0.toggleClass("Iu$,");
        document0.toggleClass("java.lang.string@0000000011 tag name must not be empty.");
        boolean boolean0 = document0.hasClass("Iu$,");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7981() throws Throwable {
        Document document0 = new Document("phW5:#XCj/,H");
        document0.toggleClass("phW5:#XCj/,H");
        document0.toggleClass("phW5:#XCj/,H");
        boolean boolean0 = document0.hasClass("phW5:#XCj/,H");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8082() throws Throwable {
        Document document0 = new Document("phW5:#XCj/,H");
        Element element0 = document0.toggleClass("phW5:#XCj/,H");
        element0.addClass("phW5:#XCj/,H");
        Element element1 = document0.toggleClass("phW5:#XCj/,H");
        assertEquals("#root", element1.tagName());
    }

    @Test(timeout = 4000)
    public void test8183() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        String string0 = formElement0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test8284() throws Throwable {
        Document document0 = new Document("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
        // Undeclared exception!
        try {
            document0.outerHtmlHead((Appendable) null, 3556, document_OutputSettings1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Element", e);
        }
    }

    @Test(timeout = 4000)
    public void test8385() throws Throwable {
        Element element0 = new Element("br");
        element0.appendElement("br");
        String string0 = element0.outerHtml();
        assertEquals("<br><br></br>", string0);
    }

    @Test(timeout = 4000)
    public void test8486() throws Throwable {
        Document document0 = new Document("br");
        document0.appendElement("br");
        // Undeclared exception!
        try {
            document0.html((Appendable) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test8587() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.outline(true);
        formElement0.outerHtmlHead(stringBuilder0, 893, document_OutputSettings0);
        assertEquals("<textarea>", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test8688() throws Throwable {
        Document document0 = new Document("E7dUm%.`1");
        Element element0 = document0.prependText("E7dUm%.`1");
        document0.appendElement("E7dUm%.`1");
        String string0 = element0.outerHtml();
        assertEquals("E7dUm%.`1\n<E7dUm%.`1></E7dUm%.`1>", string0);
    }

    @Test(timeout = 4000)
    public void test8789() throws Throwable {
        Document document0 = new Document("br");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        document0.outputSettings(document_OutputSettings1);
        Element element0 = document0.appendElement("br");
        String string0 = element0.outerHtml();
        assertEquals("<br />", string0);
    }

    @Test(timeout = 4000)
    public void test8890() throws Throwable {
        Document document0 = new Document("7__a`>G");
        MockFileWriter mockFileWriter0 = new MockFileWriter("7__a`>G", false);
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        document0.outerHtmlTail(mockFileWriter0, 15, document_OutputSettings0);
        assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
    }

    @Test(timeout = 4000)
    public void test8991() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        FormElement formElement1 = (FormElement) formElement0.val("textarea");
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        formElement1.outerHtmlTail(stringBuilder0, 1597, document_OutputSettings1);
        assertEquals("</textarea>", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test8992() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        FormElement formElement1 = (FormElement) formElement0.val("textarea");
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        formElement1.outerHtmlTail(stringBuilder0, 1597, document_OutputSettings1);
        assertEquals(1, formElement0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test9093() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
        FormElement formElement1 = (FormElement) formElement0.val("textarea");
        formElement1.prependElement("textarea");
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
        formElement1.outerHtmlTail(stringBuilder0, 1597, document_OutputSettings1);
        assertEquals(2, formElement1.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test9194() throws Throwable {
        Document document0 = new Document("63-N-U0bu");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        Document document1 = document0.outputSettings(document_OutputSettings0);
        String string0 = document1.outerHtml();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test9295() throws Throwable {
        Document document0 = new Document("5_`>{");
        MockFileWriter mockFileWriter0 = document0.html((MockFileWriter) null);
        assertNull(mockFileWriter0);
    }
}
