/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 08:11:25 GMT 2024
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 662, (byte) (-65));
        try {
            DataUtil.load((InputStream) byteArrayInputStream0, "xml", "$VALUES");
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        assertEquals(0, byteBuffer0.remaining());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        File file0 = MockFile.createTempFile("charset=", (String) null);
        Document document0 = DataUtil.load(file0, (String) null, "charset=");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        File file0 = MockFile.createTempFile("charset=", (String) null);
        Document document0 = DataUtil.load(file0, (String) null, "charset=");
        assertEquals("charset=", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.load((InputStream) pipedInputStream0, "--------------------------------", "", parser0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1154, (byte) 0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("f?");
        DataUtil.crossStreams(byteArrayInputStream0, mockPrintStream0);
        assertEquals((-1151), byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        // Undeclared exception!
        try {
            DataUtil.crossStreams(pushbackInputStream0, (OutputStream) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.helper.DataUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.parseInputStream((InputStream) null, "$R-Le&CI[~KiJ", "$R-Le&CI[~KiJ", parser0);
        assertEquals("$R-Le&CI[~KiJ", document0.location());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[10];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.xmlParser();
        byteArrayInputStream0.read(byteArray0);
        Document document0 = DataUtil.parseInputStream(byteArrayInputStream0, (String) null, "", parser0);
        assertEquals("", document0.location());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        File file0 = MockFile.createTempFile("charset=", "UTF-8");
        Document document0 = DataUtil.load(file0, "UTF-8", "charset=");
        assertEquals("charset=", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        // Undeclared exception!
        try {
            DataUtil.readToByteBuffer((InputStream) null, (-2152));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // maxSize must be 0 (unlimited) or larger
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType(";mF@o!8a");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
        assertEquals("--------------------------------", string0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.parseInputStream(byteArrayInputStream0, "(?i)\bcharset=s*(?:[\"'])?([^s,;\"']*)", "&`$iWU-zunN)?>JJ", parser0);
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-17);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.parseInputStream(byteArrayInputStream0, "(?i)\bcharset=s*(?:[\"'])?([^s,;\"']*)", "&`$iWU-zunN)?>JJ", parser0);
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) (-2);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.parseInputStream(byteArrayInputStream0, "p", "p", parser0);
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-1);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.parseInputStream(byteArrayInputStream0, "charset=", "charset", parser0);
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-2);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        try {
            DataUtil.parseInputStream(byteArrayInputStream0, "p", "p", parser0);
            fail("Expecting exception: UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
        }
    }
}
