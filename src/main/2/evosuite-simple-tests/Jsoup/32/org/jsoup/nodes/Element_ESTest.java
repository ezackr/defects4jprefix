/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 02:55:17 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = new Document(":ImmediateParent%s");
        Element element0 = document0.getElementById(":ImmediateParent%s");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = new Document("t8sJ24");
        Element element0 = document0.appendText("t8sJ24");
        List<TextNode> list0 = element0.textNodes();
        assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Document document0 = new Document("laVefont");
        Elements elements0 = document0.getElementsMatchingText("laVefont");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Document document0 = new Document("9)KX");
        // Undeclared exception!
        try {
            document0.child(140);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 140, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.tagName("9)KX");
        assertEquals(0, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        element0.val("textarea");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Document document0 = new Document("la|efont");
        Map<String, String> map0 = document0.dataset();
        assertTrue(map0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = new Document("ykyE ");
        Element element0 = document0.addClass("ykyE ");
        assertEquals("ykyE", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = new Document(")a[do %-");
        // Undeclared exception!
        try {
            document0.before((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = new Document("9)KX");
        // Undeclared exception!
        try {
            document0.html("9)KX");
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.LinkedList", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Document document0 = new Document("ScriptDataHEs!caped");
        Elements elements0 = document0.getElementsByAttributeValue("ScriptDataHEs!caped", "ScriptDataHEs!caped");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = new Document("tr|w");
        Elements elements0 = document0.getElementsByAttributeValueStarting("tr|w", "tr|w");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = new Document("basfont");
        Elements elements0 = document0.select("basfont");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = new Document("laVefont");
        Elements elements0 = document0.getElementsMatchingOwnText("laVefont");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = new Document("");
        // Undeclared exception!
        try {
            document0.after("");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = new Document("l");
        Elements elements0 = document0.getElementsByIndexLessThan((-1791397064));
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = new Document("l");
        Elements elements0 = document0.getElementsByAttributeStarting("l");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = new Document("2ym+");
        Elements elements0 = document0.getElementsByIndexEquals(0);
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Document document0 = new Document(")a[do %-");
        // Undeclared exception!
        try {
            document0.wrap(")a[do %-");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Node", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.val("");
        assertSame(document0, element0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Document document0 = new Document("2oym+");
        Elements elements0 = document0.getElementsByAttributeValueMatching("2oym+", "2oym+");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Document document0 = new Document("caption");
        Elements elements0 = document0.getElementsByAttributeValueEnding("caption", "caption");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Document document0 = new Document("P5AEN*R/J [7IQy");
        Elements elements0 = document0.getElementsByClass("P5AEN*R/J [7IQy");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Document document0 = new Document("6a%efont");
        Elements elements0 = document0.getElementsContainingText("6a%efont");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Document document0 = new Document("k!+");
        Elements elements0 = document0.getElementsByAttributeValueContaining("k!+", "k!+");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Document document0 = new Document("8vLk)qEy~(MnKzhes++");
        Element element0 = document0.clone();
        assertNotSame(element0, document0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Document document0 = new Document("basefont");
        Elements elements0 = document0.getElementsByAttributeValueNot("basefont", "basefont");
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Document document0 = new Document("laVefont");
        String string0 = document0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Document document0 = new Document("wrg.jsoup.hel'er.DescendableLinkedList$DescendingIterator");
        Elements elements0 = document0.getElementsByAttribute("wrg.jsoup.hel'er.DescendableLinkedList$DescendingIterator");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Document document0 = new Document("9)KX");
        // Undeclared exception!
        try {
            document0.before("9)KX");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Document document0 = new Document("tre");
        Element element0 = document0.removeClass("tre");
        assertFalse(element0.isBlock());
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Document document0 = new Document("tre");
        Elements elements0 = document0.getAllElements();
        // Undeclared exception!
        try {
            document0.insertChildren((-1285), elements0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Document document0 = new Document("2oym+");
        Elements elements0 = document0.getElementsByTag("2oym+");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Document document0 = new Document("su9o|ty");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-455));
        assertFalse(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.appendElement("9)KX");
        Elements elements0 = element0.parents();
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Tag tag0 = Tag.valueOf("asfont");
        Element element0 = new Element(tag0, "asfont");
        Element element1 = element0.prependElement("]");
        Elements elements0 = element1.parents();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        Tag tag0 = Tag.valueOf("asfont");
        Element element0 = new Element(tag0, "asfont");
        Element element1 = element0.prependElement("]");
        Elements elements0 = element1.parents();
        assertEquals("]", element1.tagName());
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        Document document0 = new Document("9)Z");
        document0.prependText("9)Z");
        Element element0 = document0.appendElement("9)Z");
        Element element1 = element0.previousElementSibling();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        Document document0 = new Document("9)Z");
        document0.prependText("9)Z");
        Element element0 = document0.appendElement("9)Z");
        Element element1 = element0.previousElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        Document document0 = new Document("2ym+");
        document0.appendElement("2ym+");
        List<TextNode> list0 = document0.textNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.prependText("laVefont");
        List<DataNode> list0 = element0.dataNodes();
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        Document document0 = new Document("textarea");
        DataNode dataNode0 = DataNode.createFromEncoded("textarea", "Xxyhceg6N~");
        document0.prependChild(dataNode0);
        List<DataNode> list0 = document0.dataNodes();
        assertTrue(list0.contains(dataNode0));
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        Document document0 = new Document("a");
        Elements elements0 = document0.siblingElements();
        // Undeclared exception!
        try {
            document0.insertChildren(68, elements0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        Document document0 = new Document("la|efont");
        LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
        Element element0 = document0.insertChildren((-1), linkedHashSet0);
        assertEquals("#root", element0.tagName());
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        Document document0 = new Document("ECP`FJm5-&");
        document0.appendChild(document0);
        Document document1 = new Document(":?K&rd");
        document0.appendChild(document1);
        Elements elements0 = document0.siblingElements();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.appendElement("9)KX");
        Element element1 = element0.nextElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.nextElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.appendElement("9)KX");
        document0.appendChild(document0);
        element0.nextElementSibling();
        assertEquals(1, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.appendElement("9)KX");
        document0.appendChild(document0);
        element0.nextElementSibling();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        Document document0 = new Document("basefont");
        Element element0 = document0.previousElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        Document document0 = new Document("basefont");
        document0.appendChild(document0);
        Element element0 = document0.appendElement("basefont");
        element0.previousElementSibling();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Document document0 = new Document("tre");
        Element element0 = document0.appendElement("tre");
        Element element1 = element0.firstElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        Document document0 = new Document("9)KX");
        Element element0 = document0.appendElement("9)KX");
        document0.appendChild(document0);
        Element element1 = document0.firstElementSibling();
        assertSame(element1, element0);
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        Document document0 = new Document("basefont");
        Element element0 = document0.appendElement("basefont");
        Integer integer0 = element0.elementSiblingIndex();
        assertEquals(0, (int) integer0);
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        Document document0 = new Document("9)KX");
        document0.appendChild(document0);
        Element element0 = document0.lastElementSibling();
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        Document document0 = new Document("basefont");
        Element element0 = document0.appendElement("basefont");
        Element element1 = element0.after((Node) document0);
        Element element2 = element1.lastElementSibling();
        assertFalse(element2.isBlock());
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        Document document0 = new Document("basefont");
        document0.setParentNode(document0);
        // Undeclared exception!
        try {
            document0.nextElementSibling();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test5457() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.appendElement("tbody");
        Comment comment0 = new Comment("ZZ'I1(x|", "}Yco*6ETemlUL");
        element0.after((Node) comment0);
        String string0 = document0.text();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test5558() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.prependText("laVefont");
        Element element1 = document0.createElement("tbody");
        Element element2 = document0.appendElement("tbody");
        assertTrue(element2.isBlock());
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.prependText("laVefont");
        Element element1 = document0.createElement("tbody");
        Element element2 = document0.appendElement("tbody");
        element0.appendChild(element1);
        String string0 = element0.text();
        assertEquals("laVefont", string0);
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        Document document0 = new Document(" EQSNzV-Es*nhbgg!");
        document0.prependElement(" EQSNzV-Es*nhbgg!");
        Elements elements0 = document0.getElementsContainingOwnText(" EQSNzV-Es*nhbgg!");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        Document document0 = new Document("4q");
        Element element0 = document0.prepend("4q");
        Elements elements0 = element0.getElementsContainingOwnText("4q");
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        Document document0 = new Document("9)KX");
        Comment comment0 = new Comment("CdataSection", "9)KX");
        document0.appendChild(comment0);
        Elements elements0 = document0.getElementsContainingOwnText("AfSDozp-89Q8R");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        element0.prependText("textarea");
        String string0 = element0.text();
        assertEquals("textarea", string0);
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        Document document0 = new Document("laVefont");
        document0.prependText("laVefont");
        Element element0 = document0.prependText("  ");
        String string0 = element0.text();
        assertEquals("laVefont", string0);
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        Document document0 = new Document("@7");
        Element element0 = document0.appendElement("br");
        element0.appendChild(document0);
        // Undeclared exception!
        try {
            document0.text();
            fail("Expecting exception: StackOverflowError");
        } catch (StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        Element element1 = element0.prependElement("source");
        boolean boolean0 = element1.preserveWhitespace();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        Element element1 = element0.prependElement("source");
        boolean boolean0 = element1.preserveWhitespace();
        assertEquals("source", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        Document document0 = new Document("basefont");
        Element element0 = document0.appendElement("basefont");
        boolean boolean0 = element0.preserveWhitespace();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        Document document0 = new Document("textarea");
        DataNode dataNode0 = DataNode.createFromEncoded("textarea", "Xxyhceg6N~");
        Element element0 = document0.prependChild(dataNode0);
        boolean boolean0 = element0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        Document document0 = new Document("2oym+");
        Element element0 = document0.appendElement("2oym+");
        element0.text("2oym+");
        boolean boolean0 = document0.hasText();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        Document document0 = new Document("9)KX");
        document0.appendText("");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6772() throws Throwable {
        Document document0 = new Document("basefont");
        document0.appendElement("basefont");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6873() throws Throwable {
        Document document0 = new Document("la|efont");
        DataNode dataNode0 = DataNode.createFromEncoded("la|efont", "la|efont");
        document0.prependChild(dataNode0);
        String string0 = document0.data();
        assertEquals("la|efont", string0);
    }

    @Test(timeout = 4000)
    public void test6974() throws Throwable {
        Document document0 = new Document("k");
        Element element0 = document0.prepend("k");
        String string0 = element0.data();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7075() throws Throwable {
        Document document0 = new Document("basefont");
        document0.appendElement("basefont");
        String string0 = document0.data();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7176() throws Throwable {
        Document document0 = new Document(":ImmediateParent%s");
        document0.hasClass(":ImmediateParent%s");
        Set<String> set0 = document0.classNames();
        assertFalse(set0.contains(":ImmediateParent%s"));
    }

    @Test(timeout = 4000)
    public void test7277() throws Throwable {
        Document document0 = new Document("laVeont");
        boolean boolean0 = document0.hasClass("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7378() throws Throwable {
        Document document0 = new Document("basefont");
        Element element0 = document0.toggleClass("basefont");
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test7479() throws Throwable {
        Document document0 = new Document("<)-2CXGCU<80!LK");
        Element element0 = document0.toggleClass("");
        assertSame(document0, element0);
    }

    @Test(timeout = 4000)
    public void test7580() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        String string0 = document0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7681() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        String string0 = element0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test7782() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        Element element0 = document0.prependText("laVefont");
        document0.appendElement("tbody");
        String string0 = element0.outerHtml();
        assertEquals("laVefont\n<tbody></tbody>", string0);
    }

    @Test(timeout = 4000)
    public void test7883() throws Throwable {
        Document document0 = new Document("la|efont");
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "la|efont");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        document0.outerHtmlHead(stringBuilder0, (-1668), document_OutputSettings0);
        assertEquals("la|efont<#root>", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test7984() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        Element element1 = element0.prependElement("source");
        String string0 = element0.outerHtml();
        assertNotSame(element0, element1);
    }

    @Test(timeout = 4000)
    public void test7985() throws Throwable {
        Tag tag0 = Tag.valueOf("textarea");
        Element element0 = new Element(tag0, "textarea");
        Element element1 = element0.prependElement("source");
        String string0 = element0.outerHtml();
        assertEquals("<textarea><source></source></textarea>", string0);
    }

    @Test(timeout = 4000)
    public void test8086() throws Throwable {
        Tag tag0 = Tag.valueOf("br");
        Element element0 = new Element(tag0, "br");
        StringBuilder stringBuilder0 = new StringBuilder("<i|bK");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        element0.outerHtmlHead(stringBuilder0, (-606), document_OutputSettings0);
        assertEquals("<i|bK<br />", stringBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test8187() throws Throwable {
        Tag tag0 = Tag.valueOf("tetare");
        Element element0 = new Element(tag0, "tetare");
        Element element1 = element0.prependElement("kbd");
        String string0 = element0.outerHtml();
        assertEquals("<tetare>\n <kbd></kbd>\n</tetare>", string0);
    }

    @Test(timeout = 4000)
    public void test8188() throws Throwable {
        Tag tag0 = Tag.valueOf("tetare");
        Element element0 = new Element(tag0, "tetare");
        Element element1 = element0.prependElement("kbd");
        String string0 = element0.outerHtml();
        assertNotSame(element0, element1);
    }

    @Test(timeout = 4000)
    public void test8289() throws Throwable {
        Document document0 = new Document("2ym+");
        Element element0 = document0.prependElement("br");
        String string0 = element0.outerHtml();
        assertEquals("<br />", string0);
    }

    @Test(timeout = 4000)
    public void test8390() throws Throwable {
        Document document0 = new Document("sk\nt");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
        // Undeclared exception!
        try {
            document0.outerHtmlTail((StringBuilder) null, 0, document_OutputSettings1);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.nodes.Element", e);
        }
    }

    @Test(timeout = 4000)
    public void test8491() throws Throwable {
        Document document0 = new Document(" % t[-L@pJPg|\"+p");
        document0.hashCode();
    }
}
