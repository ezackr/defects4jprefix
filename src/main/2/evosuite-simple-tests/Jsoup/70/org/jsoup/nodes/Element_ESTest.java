/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 07:18:48 GMT 2024
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        assertFalse(document0.hasParent());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        Element element0 = document0.getElementById("KI5]");
        assertEquals("KI5]", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        Element element0 = document0.getElementById("KI5]");
        assertNull(element0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        Element element0 = document0.getElementById("KI5]");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Document document0 = new Document("Xp9HIIiB5s#-8+b|n");
        Elements elements0 = document0.getElementsMatchingText("Xp9HIIiB5s#-8+b|n");
        assertEquals("Xp9HIIiB5s#-8+b|n", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Document document0 = new Document("Xp9HIIiB5s#-8+b|n");
        Elements elements0 = document0.getElementsMatchingText("Xp9HIIiB5s#-8+b|n");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Document document0 = Document.createShell(" Z}1");
        DataNode dataNode0 = new DataNode(" Z}1", " Z}1");
        document0.prependChild(dataNode0);
        document0.dataNodes();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Document document0 = new Document("*d");
        document0.html("Yizz {n}pon*h0!!");
        document0.appendElement("br");
        document0.text();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Document document0 = new Document("Bk");
        // Undeclared exception!
        try {
            document0.child(12);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // Index: 12, Size: 0
            //
            verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Document document0 = Document.createShell("AkNXaE[O^JS%Ivp");
        document0.prependText("Tag name must not be empty.");
        document0.getElementsByIndexEquals(60);
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        Document document0 = Document.createShell("id");
        Element element0 = document0.tagName("id");
        assertEquals("id", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Document document0 = Document.createShell("id");
        Element element0 = document0.tagName("id");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.dataset();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.dataset();
        assertEquals("readonly", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        Document document0 = Document.createShell(".rKCd");
        Element element0 = document0.addClass(".rKCd");
        assertEquals(".rKCd", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        Document document0 = Document.createShell(".rKCd");
        Element element0 = document0.addClass(".rKCd");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        Document document0 = Document.createShell("}");
        // Undeclared exception!
        try {
            document0.before((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        Document document0 = Document.createShell(":nth-last-of-type(");
        Element element0 = document0.attr(":nth-last-of-type(", true);
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Document document0 = Document.createShell(":nth-last-of-type(");
        Element element0 = document0.attr(":nth-last-of-type(", true);
        assertEquals(":nth-last-of-type(", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        document0.getElementsByAttributeValue("JI5bh{g2 qB+kn.7H", "JI5bh{g2 qB+kn.7H");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        document0.getElementsByAttributeValue("JI5bh{g2 qB+kn.7H", "JI5bh{g2 qB+kn.7H");
        assertEquals("JI5bh{g2 qB+kn.7H", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1221() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.parser.TokenQueue");
        document0.getElementsByAttributeValueStarting("org.jsoup.parser.TokenQueue", "org.jsoup.parser.TokenQueue");
        String string0 = document0.toString();
        assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.parser.TokenQueue");
        document0.getElementsByAttributeValueStarting("org.jsoup.parser.TokenQueue", "org.jsoup.parser.TokenQueue");
        String string0 = document0.toString();
        assertEquals("org.jsoup.parser.TokenQueue", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1323() throws Throwable {
        Document document0 = Document.createShell("SsfsH-");
        Charset charset0 = document0.charset();
        document0.charset(charset0);
        String string0 = document0.toString();
        assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        Document document0 = Document.createShell("SsfsH-");
        Charset charset0 = document0.charset();
        document0.charset(charset0);
        String string0 = document0.toString();
        assertEquals("SsfsH-", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        Document document0 = Document.createShell("AkNXa[O^JS%Ivp");
        document0.prepend("AkNXa[O^JS%Ivp");
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        Element element0 = new Element("readonly");
        // Undeclared exception!
        try {
            element0.after("readonly");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1627() throws Throwable {
        Document document0 = new Document("9SmuSD,(");
        document0.getElementsByIndexLessThan(62);
        assertEquals("9SmuSD,(", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1728() throws Throwable {
        Document document0 = new Document("");
        document0.normalise();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1829() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        document0.getElementsByAttributeStarting("Tag name must not be empty.");
        assertEquals("Tag name must not be empty.", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1830() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        document0.getElementsByAttributeStarting("Tag name must not be empty.");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        Document document0 = Document.createShell("8");
        document0.getElementsByAttributeValueMatching("8", "8");
        assertEquals("8", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        Document document0 = Document.createShell("8");
        document0.getElementsByAttributeValueMatching("8", "8");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        Document document0 = new Document(".");
        Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
        document0.is((Evaluator) evaluator_IsLastOfType0);
        assertEquals(".", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2134() throws Throwable {
        Document document0 = Document.createShell(":+A\"");
        document0.getElementsByAttributeValueEnding(":+A\"", ":+A\"");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2135() throws Throwable {
        Document document0 = Document.createShell(":+A\"");
        document0.getElementsByAttributeValueEnding(":+A\"", ":+A\"");
        assertEquals(":+A\"", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        Document document0 = Document.createShell("AfterHead");
        Elements elements0 = document0.getElementsByClass("AfterHead");
        assertEquals("AfterHead", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2237() throws Throwable {
        Document document0 = Document.createShell("AfterHead");
        Elements elements0 = document0.getElementsByClass("AfterHead");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2238() throws Throwable {
        Document document0 = Document.createShell("AfterHead");
        Elements elements0 = document0.getElementsByClass("AfterHead");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test2339() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Elements elements0 = document0.getElementsContainingText("readonly");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2340() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Elements elements0 = document0.getElementsContainingText("readonly");
        assertEquals("readonly", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2341() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Elements elements0 = document0.getElementsContainingText("readonly");
        assertEquals(0, elements0.size());
    }

    @Test(timeout = 4000)
    public void test2442() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        document0.getElementsByAttributeValueContaining("\"v<tMt)h0.WN.f1o", "#ro`o");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2443() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        document0.getElementsByAttributeValueContaining("\"v<tMt)h0.WN.f1o", "#ro`o");
        assertEquals("#ro`o", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2544() throws Throwable {
        Document document0 = Document.createShell("invalid named referenece '%s'");
        document0.title("invalid named referenece '%s'");
        String string0 = document0.toString();
        assertEquals("<html>\n <head>\n  <title>invalid named referenece '%s'</title>\n </head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test2545() throws Throwable {
        Document document0 = Document.createShell("invalid named referenece '%s'");
        document0.title("invalid named referenece '%s'");
        String string0 = document0.toString();
        assertEquals("invalid named referenece '%s'", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2646() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        // Undeclared exception!
        try {
            document0.after((Node) document0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Object must not be null
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2747() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.doSetBaseUri("readonly");
        assertEquals("readonly", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2748() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.doSetBaseUri("readonly");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2849() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Document document1 = document0.clone();
        assertNotSame(document1, document0);
    }

    @Test(timeout = 4000)
    public void test2850() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Document document1 = document0.clone();
        assertEquals("readonly", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test2851() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Document document1 = document0.clone();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test2952() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        document0.appendTo(document0);
        assertEquals(1, document0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test3053() throws Throwable {
        Document document0 = new Document("id");
        document0.getElementsByAttributeValueNot("id", "id");
        assertEquals("id", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3154() throws Throwable {
        Document document0 = new Document("id");
        document0.getElementsByAttribute("id");
        assertEquals("id", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3255() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.removeClass("+A\"");
        assertEquals("+A\"", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3256() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.removeClass("+A\"");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3357() throws Throwable {
        Document document0 = Document.createShell("AkNXa[O^JS%Ivp");
        document0.getAllElements();
        assertEquals("AkNXa[O^JS%Ivp", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3358() throws Throwable {
        Document document0 = Document.createShell("AkNXa[O^JS%Ivp");
        document0.getAllElements();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3459() throws Throwable {
        Document document0 = Document.createShell("aA\"");
        // Undeclared exception!
        try {
            document0.is("aA\"");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Could not parse query 'aA\"': unexpected token at '\"'
            //
            verifyException("org.jsoup.select.QueryParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test3560() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.selectFirst("readonly");
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3561() throws Throwable {
        Document document0 = Document.createShell("readonly");
        document0.selectFirst("readonly");
        assertEquals("readonly", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3662() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
        Element element0 = document0.head();
        Element element1 = element0.wrap("(2_|ZuNkGTISe}i4v");
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test3663() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
        Element element0 = document0.head();
        Element element1 = element0.wrap("(2_|ZuNkGTISe}i4v");
        assertEquals("(2_|ZuNkGTISe}i4v", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test3764() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4vZ");
        Element element0 = document0.head();
        Elements elements0 = element0.parents();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3765() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4vZ");
        Element element0 = document0.head();
        Elements elements0 = element0.parents();
        assertEquals("(2_|ZuNkGTISe}i4vZ", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3866() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-432));
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3867() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-432));
        assertEquals("#ro`o", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3868() throws Throwable {
        Document document0 = Document.createShell("#ro`o");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-432));
        assertEquals(4, elements0.size());
    }

    @Test(timeout = 4000)
    public void test3969() throws Throwable {
        Document document0 = Document.createShell("invalid named referenec4 '%s'");
        List<TextNode> list0 = document0.textNodes();
        assertEquals("invalid named referenec4 '%s'", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test3970() throws Throwable {
        Document document0 = Document.createShell("invalid named referenec4 '%s'");
        List<TextNode> list0 = document0.textNodes();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test3971() throws Throwable {
        Document document0 = Document.createShell("invalid named referenec4 '%s'");
        List<TextNode> list0 = document0.textNodes();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test4072() throws Throwable {
        Document document0 = new Document("#root");
        document0.html("#root");
        document0.textNodes();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4173() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>(1492);
        // Undeclared exception!
        try {
            document0.insertChildren(1492, (Collection<? extends Node>) linkedHashSet0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4274() throws Throwable {
        Document document0 = Document.createShell("SsfsH-");
        List<DataNode> list0 = document0.dataNodes();
        // Undeclared exception!
        try {
            document0.insertChildren((-1329), (Collection<? extends Node>) list0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4375() throws Throwable {
        Document document0 = Document.createShell("java.lang.string@0000000011 insert position out |s bounds.");
        LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
        Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4476() throws Throwable {
        Document document0 = new Document("invalid named referenece '%s'");
        Node[] nodeArray0 = new Node[3];
        // Undeclared exception!
        try {
            document0.insertChildren(840, nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4577() throws Throwable {
        Document document0 = Document.createShell("#root");
        Node[] nodeArray0 = new Node[0];
        // Undeclared exception!
        try {
            document0.insertChildren((-3441), nodeArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Insert position out of bounds.
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test4678() throws Throwable {
        Document document0 = Document.createShell("id");
        Element element0 = document0.attr("id", "id");
        String string0 = element0.cssSelector();
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4679() throws Throwable {
        Document document0 = Document.createShell("id");
        Element element0 = document0.attr("id", "id");
        String string0 = element0.cssSelector();
        assertEquals("id", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4680() throws Throwable {
        Document document0 = Document.createShell("id");
        Element element0 = document0.attr("id", "id");
        String string0 = element0.cssSelector();
        assertEquals("#id", string0);
    }

    @Test(timeout = 4000)
    public void test4781() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        Element element0 = document0.toggleClass("textarea");
        element0.cssSelector();
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test4782() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        Element element0 = document0.toggleClass("textarea");
        element0.cssSelector();
        assertEquals("$;]1", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4883() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        Element element0 = document0.head();
        String string0 = element0.cssSelector();
        assertEquals("html > head", string0);
    }

    @Test(timeout = 4000)
    public void test4884() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        Element element0 = document0.head();
        String string0 = element0.cssSelector();
        assertEquals("JI5bh{g2 qB+kn.7H", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test4985() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        Element element0 = document0.head();
        assertEquals(0, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test4986() throws Throwable {
        Document document0 = Document.createShell("JI5bh{g2 qB+kn.7H");
        Element element0 = document0.head();
        element0.before("JI5bh{g2 qB+kn.7H");
        String string0 = element0.cssSelector();
        assertEquals("html > head:nth-child(3)", string0);
    }

    @Test(timeout = 4000)
    public void test5087() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
        Element element0 = document0.head();
        Elements elements0 = element0.siblingElements();
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test5088() throws Throwable {
        Document document0 = Document.createShell("(2_|ZuNkGTISe}i4v");
        Element element0 = document0.head();
        Elements elements0 = element0.siblingElements();
        assertEquals("(2_|ZuNkGTISe}i4v", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5189() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.siblingElements();
        assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5190() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.siblingElements();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5291() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertEquals("+A\"", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5292() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertEquals(1, element0.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5293() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.body();
        Element element1 = element0.nextElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test5394() throws Throwable {
        Document document0 = Document.createShell("(_RD+cXu]7");
        document0.nextElementSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test5395() throws Throwable {
        Document document0 = Document.createShell("(_RD+cXu]7");
        document0.nextElementSibling();
        assertEquals("(_RD+cXu]7", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test5496() throws Throwable {
        Document document0 = Document.createShell("+A*\"");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertEquals(1, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test5497() throws Throwable {
        Document document0 = Document.createShell("+A*\"");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertEquals("+A*\"", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test5498() throws Throwable {
        Document document0 = Document.createShell("+A*\"");
        Element element0 = document0.head();
        Element element1 = element0.nextElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test5599() throws Throwable {
        Document document0 = Document.createShell("'sfsz7");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertEquals("'sfsz7", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test55100() throws Throwable {
        Document document0 = Document.createShell("'sfsz7");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertEquals(0, element1.siblingIndex());
    }

    @Test(timeout = 4000)
    public void test55101() throws Throwable {
        Document document0 = Document.createShell("'sfsz7");
        Element element0 = document0.body();
        Element element1 = element0.previousElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test56102() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        document0.previousElementSibling();
        assertEquals("+A\"", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test56103() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        document0.previousElementSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test57104() throws Throwable {
        Document document0 = Document.createShell("=og}c|d5");
        Element element0 = document0.head();
        Element element1 = element0.previousElementSibling();
        assertEquals("=og}c|d5", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test57105() throws Throwable {
        Document document0 = Document.createShell("=og}c|d5");
        Element element0 = document0.head();
        Element element1 = element0.previousElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test58106() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.shallowClone();
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        Element element1 = element0.insertChildren((-1), nodeArray0);
        assertEquals("+A\"", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test58107() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.shallowClone();
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        Element element1 = element0.insertChildren((-1), nodeArray0);
        Element element2 = document0.firstElementSibling();
        assertEquals(1, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test58108() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.shallowClone();
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = (Node) document0;
        Element element1 = element0.insertChildren((-1), nodeArray0);
        Element element2 = document0.firstElementSibling();
        assertNull(element2);
    }

    @Test(timeout = 4000)
    public void test59109() throws Throwable {
        Document document0 = Document.createShell("vpwmd0'gw*g.Nejf,");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertEquals("vpwmd0'gw*g.Nejf,", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test59110() throws Throwable {
        Document document0 = Document.createShell("vpwmd0'gw*g.Nejf,");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test59111() throws Throwable {
        Document document0 = Document.createShell("vpwmd0'gw*g.Nejf,");
        Element element0 = document0.body();
        Element element1 = element0.firstElementSibling();
        assertEquals("head", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test60112() throws Throwable {
        Document document0 = new Document("+]TtyGe f=xju");
        Element element0 = document0.appendElement("+]TtyGe f=xju");
        Element element1 = element0.lastElementSibling();
        assertNull(element1);
    }

    @Test(timeout = 4000)
    public void test60113() throws Throwable {
        Document document0 = new Document("+]TtyGe f=xju");
        Element element0 = document0.appendElement("+]TtyGe f=xju");
        Element element1 = element0.lastElementSibling();
        assertEquals("+]TtyGe f=xju", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test61114() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertEquals("readonly", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test61115() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertNotNull(element1);
    }

    @Test(timeout = 4000)
    public void test61116() throws Throwable {
        Document document0 = Document.createShell("readonly");
        Element element0 = document0.head();
        Element element1 = element0.lastElementSibling();
        assertEquals("body", element1.nodeName());
    }

    @Test(timeout = 4000)
    public void test62117() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        document0.parentNode = (Node) document0;
        Elements elements0 = document0.getElementsByIndexEquals((-1026));
        assertEquals("$;]1", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test62118() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        document0.parentNode = (Node) document0;
        Elements elements0 = document0.getElementsByIndexEquals((-1026));
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test63119() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.attr("id", "id");
        Element element0 = document0.getElementById("id");
        assertNotNull(element0);
    }

    @Test(timeout = 4000)
    public void test63120() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.attr("id", "id");
        Element element0 = document0.getElementById("id");
        assertEquals("id", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test64121() throws Throwable {
        Document document0 = new Document("emr/_;");
        DocumentType documentType0 = new DocumentType("emr/_;", "`T+}+l'%;H.CzmK9t;V", "emr/_;");
        document0.prependChild(documentType0);
        document0.text();
        assertEquals("emr/_;", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test65122() throws Throwable {
        Document document0 = Document.createShell("#root");
        document0.title("#root");
        document0.appendElement("#root");
        String string0 = document0.text();
        assertEquals("#root", string0);
    }

    @Test(timeout = 4000)
    public void test65123() throws Throwable {
        Document document0 = Document.createShell("#root");
        document0.title("#root");
        document0.appendElement("#root");
        String string0 = document0.text();
        assertEquals("#root", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test66124() throws Throwable {
        Document document0 = Document.createShell("A> ");
        document0.title("A> ");
        String string0 = document0.text();
        assertEquals("A>", string0);
    }

    @Test(timeout = 4000)
    public void test66125() throws Throwable {
        Document document0 = Document.createShell("A> ");
        document0.title("A> ");
        String string0 = document0.text();
        assertEquals("A> ", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test67126() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.text("id");
        Elements elements0 = document0.getElementsContainingOwnText("id");
        assertEquals("id", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test67127() throws Throwable {
        Document document0 = Document.createShell("id");
        document0.text("id");
        Elements elements0 = document0.getElementsContainingOwnText("id");
        assertEquals(1, elements0.size());
    }

    @Test(timeout = 4000)
    public void test68128() throws Throwable {
        Document document0 = new Document("RawtextEndTagOpen");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("</", "9`{fT5;]mW;#lS", false);
        document0.appendChild(xmlDeclaration0);
        Elements elements0 = document0.getElementsMatchingOwnText("</");
        assertTrue(elements0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test68129() throws Throwable {
        Document document0 = new Document("RawtextEndTagOpen");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("</", "9`{fT5;]mW;#lS", false);
        document0.appendChild(xmlDeclaration0);
        Elements elements0 = document0.getElementsMatchingOwnText("</");
        assertEquals("RawtextEndTagOpen", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test69130() throws Throwable {
        boolean boolean0 = Element.preserveWhitespace((Node) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test70131() throws Throwable {
        DataNode dataNode0 = new DataNode("elass");
        boolean boolean0 = Element.preserveWhitespace(dataNode0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test71132() throws Throwable {
        Document document0 = Document.createShell("  ");
        document0.appendText("An\"LuE[#1'g<G1F");
        boolean boolean0 = document0.hasText();
        assertEquals("  ", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test71133() throws Throwable {
        Document document0 = Document.createShell("  ");
        document0.appendText("An\"LuE[#1'g<G1F");
        boolean boolean0 = document0.hasText();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test72134() throws Throwable {
        Document document0 = Document.createShell("ruby");
        document0.text("");
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test72135() throws Throwable {
        Document document0 = Document.createShell("ruby");
        document0.text("");
        boolean boolean0 = document0.hasText();
        assertEquals("ruby", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test73136() throws Throwable {
        Document document0 = Document.createShell("f7^UIA6{k");
        Comment comment0 = new Comment("f7^UIA6{k", "f7^UIA6{k");
        document0.appendChild(comment0);
        boolean boolean0 = document0.hasText();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test73137() throws Throwable {
        Document document0 = Document.createShell("f7^UIA6{k");
        Comment comment0 = new Comment("f7^UIA6{k", "f7^UIA6{k");
        document0.appendChild(comment0);
        boolean boolean0 = document0.hasText();
        assertEquals("f7^UIA6{k", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test74138() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.text("+A\"");
        boolean boolean0 = element0.hasText();
        assertEquals("+A\"", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test74139() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Element element0 = document0.text("+A\"");
        boolean boolean0 = element0.hasText();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test75140() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Node[] nodeArray0 = new Node[1];
        DataNode dataNode0 = new DataNode("+A\"");
        nodeArray0[0] = (Node) dataNode0;
        document0.insertChildren((-1), nodeArray0);
        String string0 = document0.data();
        assertEquals("+A\"", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test75141() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        Node[] nodeArray0 = new Node[1];
        DataNode dataNode0 = new DataNode("+A\"");
        nodeArray0[0] = (Node) dataNode0;
        document0.insertChildren((-1), nodeArray0);
        String string0 = document0.data();
        assertEquals("+A\"", string0);
    }

    @Test(timeout = 4000)
    public void test76142() throws Throwable {
        Document document0 = Document.createShell("+A\"");
        document0.html("[}]5S`H3j0.<!}IB<{]");
        document0.data();
        assertEquals(2, document0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test77143() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
        assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test77144() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test78145() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        document0.toggleClass("textarea");
        boolean boolean0 = document0.hasClass("#root.java.lang.String@0000000011");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test78146() throws Throwable {
        Document document0 = Document.createShell("$;]1");
        document0.toggleClass("textarea");
        boolean boolean0 = document0.hasClass("#root.java.lang.String@0000000011");
        assertEquals("$;]1", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test79147() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test79148() throws Throwable {
        Document document0 = Document.createShell("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        document0.toggleClass("org.jsoup-helper.StringUtil");
        boolean boolean0 = document0.hasClass("org.jsoup-helper.StringUtil");
        assertEquals("org.jsoup-helper.StringUtil", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test80149() throws Throwable {
        Document document0 = Document.createShell("i^a]_t2(*");
        document0.toggleClass("i^a]_t2(*");
        document0.toggleClass(" />");
        document0.hasClass("@");
        assertEquals("i^a]_t2(*", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test81150() throws Throwable {
        Document document0 = Document.createShell("=og}c|d5");
        Element element0 = document0.toggleClass("</");
        document0.toggleClass("java.lang.string@0000000011 insert position out |s bounds.");
        boolean boolean0 = element0.hasClass("|s");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test81151() throws Throwable {
        Document document0 = Document.createShell("=og}c|d5");
        Element element0 = document0.toggleClass("</");
        document0.toggleClass("java.lang.string@0000000011 insert position out |s bounds.");
        boolean boolean0 = element0.hasClass("|s");
        assertEquals("=og}c|d5", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test82152() throws Throwable {
        Document document0 = Document.createShell("SsfsH");
        document0.toggleClass("SsfsH");
        document0.toggleClass("");
        document0.hasClass("|s");
        assertEquals("SsfsH", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test83153() throws Throwable {
        Document document0 = Document.createShell("i^a]_t2(*");
        Element element0 = document0.toggleClass("i^a]_t2(*");
        element0.toggleClass("i^a]_t2(*");
        Element element1 = element0.toggleClass("i^a]_t2(*");
        assertEquals("i^a]_t2(*", element1.baseUri());
    }

    @Test(timeout = 4000)
    public void test84154() throws Throwable {
        Element element0 = new Element("readonly");
        String string0 = element0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test85155() throws Throwable {
        Element element0 = new Element("textarea");
        String string0 = element0.val();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test86156() throws Throwable {
        Document document0 = Document.createShell("  ");
        Element element0 = document0.val("ScriptDataDoubleEscaped");
        assertEquals("  ", element0.baseUri());
    }

    @Test(timeout = 4000)
    public void test87157() throws Throwable {
        Element element0 = new Element("textarea");
        element0.val("emZ/;");
        assertEquals(1, element0.childNodeSize());
    }

    @Test(timeout = 4000)
    public void test88158() throws Throwable {
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
        Document document1 = document0.outputSettings(document_OutputSettings0);
        String string0 = document1.toString();
        assertEquals("<html><head></head><body></body></html>", string0);
    }

    @Test(timeout = 4000)
    public void test88159() throws Throwable {
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.prettyPrint(false);
        Document document0 = Document.createShell("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
        Document document1 = document0.outputSettings(document_OutputSettings0);
        String string0 = document1.toString();
        assertEquals("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test89160() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        document0.html(charArrayWriter0);
        assertEquals(45, charArrayWriter0.size());
    }

    @Test(timeout = 4000)
    public void test89161() throws Throwable {
        Document document0 = Document.createShell("KI5]");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        document0.html(charArrayWriter0);
        assertEquals("\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter0.toString());
    }

    @Test(timeout = 4000)
    public void test90162() throws Throwable {
        Document document0 = Document.createShell("SsfsH-");
        Charset charset0 = document0.charset();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document0.charset(charset0);
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        Document document1 = document0.outputSettings(document_OutputSettings1);
        String string0 = document1.toString();
        assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test90163() throws Throwable {
        Document document0 = Document.createShell("SsfsH-");
        Charset charset0 = document0.charset();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document0.charset(charset0);
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        Document document1 = document0.outputSettings(document_OutputSettings1);
        String string0 = document1.toString();
        assertEquals("SsfsH-", document1.baseUri());
    }

    @Test(timeout = 4000)
    public void test91164() throws Throwable {
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.outline(true);
        Document document0 = Document.createShell("invalid named referenece '%s'");
        document0.outputSettings(document_OutputSettings0);
        document0.title("invalid named referenece '%s'");
        String string0 = document0.toString();
        assertEquals("<html>\n <head>\n  <title>invalid named referenece '%s'</title>\n </head>\n <body></body>\n</html>", string0);
    }

    @Test(timeout = 4000)
    public void test91165() throws Throwable {
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.outline(true);
        Document document0 = Document.createShell("invalid named referenece '%s'");
        document0.outputSettings(document_OutputSettings0);
        document0.title("invalid named referenece '%s'");
        String string0 = document0.toString();
        assertEquals("invalid named referenece '%s'", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test92166() throws Throwable {
        Element element0 = new Element("readonly");
        Element element1 = element0.clone();
        assertNotSame(element1, element0);
    }
}
