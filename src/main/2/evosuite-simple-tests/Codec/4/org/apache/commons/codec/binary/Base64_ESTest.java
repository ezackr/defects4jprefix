/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:54:28 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Base64_ESTest extends Base64_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        assertEquals(6, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        assertArrayEquals(new byte[] { (byte) 68, (byte) 81, (byte) 111, (byte) 61, (byte) 13, (byte) 10 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("Z'#]YjDC)g");
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-1309), byteArray0, false);
        String string0 = base64_0.encodeToString(byteArray0);
        assertEquals("Cg==", string0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((-1309), byteArray0, false);
        String string0 = base64_0.encodeToString(byteArray0);
        base64_0.encode(byteArray0, (-1309), (-1309));
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("~,\"rPd&B,t'f");
        Base64.encodeBase64String(byteArray0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("7J2rgr%9B>e@=YV");
        Base64.encodeBase64URLSafeString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        byte[] byteArray0 = new byte[8];
        Base64.encodeBase64URLSafe(byteArray0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64.encodeBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Base64 base64_0 = new Base64(2305, (byte[]) null);
        base64_0.setInitialBuffer((byte[]) null, 2305, 2305);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("!jEcl'a =wX?,");
        Base64 base64_0 = null;
        try {
            base64_0 = new Base64(99, byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineSeperator must not contain base64 characters: [\uFFFDG%]
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Base64 base64_0 = new Base64();
        base64_0.hasData();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[5];
        base64_0.encode(byteArray0);
        base64_0.hasData();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(3191, byteArray0, false);
        base64_0.avail();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("fpGX");
        Base64 base64_0 = new Base64((-354), byteArray0);
        base64_0.readResults(byteArray0, (-354), (-354));
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Base64 base64_0 = new Base64();
        byte[] byteArray0 = new byte[2];
        byte[] byteArray1 = base64_0.encode(byteArray0);
        base64_0.readResults(byteArray1, 2580, 38);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        byte[] byteArray0 = new byte[9];
        Base64 base64_0 = new Base64((byte) 6, byteArray0);
        String string0 = base64_0.encodeToString(byteArray0);
        assertEquals("AAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        byte[] byteArray0 = new byte[9];
        Base64 base64_0 = new Base64((byte) 6, byteArray0);
        String string0 = base64_0.encodeToString(byteArray0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("AN\"nr>[J:p<Ir");
        Base64 base64_0 = new Base64();
        base64_0.encode(byteArray0);
        base64_0.readResults(byteArray0, 1533, 1533);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64 base64_0 = new Base64();
        base64_0.setInitialBuffer(byteArray0, 28, 28);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        byte[] byteArray0 = Base64.decodeBase64("L7J2rSr%9B>e@=YV");
        Base64.encodeBase64URLSafeString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64(true);
        base64_0.encode(byteArray0, (-1309), (-1309));
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        byte[] byteArray0 = new byte[3];
        Base64 base64_0 = new Base64(2865, byteArray0, true);
        // Undeclared exception!
        try {
            base64_0.encode(byteArray0, 2865, 51);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 2865
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64(1);
        base64_0.encodeToString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64 base64_0 = new Base64((-1284));
        base64_0.decode(byteArray0, 1, 1);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Base64 base64_0 = new Base64();
        Object object0 = base64_0.decode((Object) "(r|(m9)rl;_r<zp/g");
        base64_0.decode(object0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        Base64.isArrayByteBase64(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Base64 base64_0 = new Base64(false);
        Object object0 = new Object();
        try {
            base64_0.decode(object0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Parameter supplied to Base64 decode is not a byte[] or a String
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        Base64.decodeBase64((String) null);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        Base64.decodeBase64("");
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        byte[] byteArray0 = new byte[12];
        // Undeclared exception!
        try {
            Base64.encodeBase64(byteArray0, false, false, (int) (byte) 6);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Input array too big, the output array would be bigger (18) than the specified maxium size of 6
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(7, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3136() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test3237() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[3] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 32, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[3] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(7, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[3] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 9;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3441() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 32;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3542() throws Throwable {
        Base64 base64_0 = new Base64();
        Object object0 = base64_0.decode((Object) "(r|(m9)rl;_r<zp/g");
        Object object1 = base64_0.encode(object0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        Base64 base64_0 = new Base64();
        Object object0 = base64_0.decode((Object) "(r|(m9)rl;_r<zp/g");
        Object object1 = base64_0.encode(object0);
        assertNotSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        Base64 base64_0 = new Base64(false);
        try {
            base64_0.encode((Object) "");
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Parameter supplied to Base64 encode is not a byte[]
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test3745() throws Throwable {
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString((byte[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        Base64 base64_0 = new Base64();
        String string0 = base64_0.encodeToString((byte[]) null);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64 base64_0 = new Base64(1431, byteArray0);
        String string0 = base64_0.encodeToString(byteArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64 base64_0 = new Base64(1431, byteArray0);
        String string0 = base64_0.encodeToString(byteArray0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        // Undeclared exception!
        try {
            Base64.encodeInteger((BigInteger) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // encodeInteger called with null parameter
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }
}
