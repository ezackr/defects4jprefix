/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:57:06 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Base64_ESTest extends Base64_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
        assertEquals((short) 0, bigInteger0.shortValue());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Base64 base64_0 = new Base64(0);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[6];
        String string0 = Base64.encodeBase64URLSafeString(byteArray0);
        assertEquals("AAAAAAAA", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Base64 base64_0 = new Base64();
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Base64 base64_0 = new Base64(true);
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        int int0 = base64_0.readResults(byteArray0, 1, 64);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        int int0 = base64_0.readResults(byteArray0, 1, 64);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        assertArrayEquals(new byte[] { (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65, (byte) 65 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.readResults(byteArray0, 1, 64);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        byte[] byteArray0 = new byte[6];
        Base64 base64_0 = new Base64(1, byteArray0, false);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.readResults(byteArray0, 1, 64);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
        assertArrayEquals(new byte[] { (byte) 65, (byte) 65, (byte) 61, (byte) 61, (byte) 13, (byte) 10 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) (-68);
        Base64 base64_0 = new Base64(3191, byteArray0, false);
        assertFalse(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        boolean boolean0 = Base64.isBase64((byte) 123);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        byte[] byteArray0 = new byte[1];
        // Undeclared exception!
        try {
            Base64.encodeBase64(byteArray0, true, true, (int) (byte) 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(3, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 9, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 9;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(2, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertNotSame(byteArray1, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 32, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
    }

    @Test(timeout = 4000)
    public void test1524() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[1] = (byte) 32;
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
        assertEquals(8, byteArray1.length);
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 9;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        byte[] byteArray0 = new byte[8];
        String string0 = Base64.encodeBase64String(byteArray0);
        assertEquals("AAAAAAAAAAA=\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        // Undeclared exception!
        try {
            Base64.encodeInteger((BigInteger) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // encodeInteger called with null parameter
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        assertEquals(1, byteArray0.length);
    }
}
