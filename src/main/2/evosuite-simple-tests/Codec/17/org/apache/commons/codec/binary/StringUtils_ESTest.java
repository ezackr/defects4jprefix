/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:23:31 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf16Be("r`_");
        assertArrayEquals(new byte[] { (byte) 0, (byte) 114, (byte) 0, (byte) 96, (byte) 0, (byte) 95 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf16("r`_");
        // Undeclared exception!
        try {
            StringUtils.newString(byteArray0, "org.apache.commons.codec.binary.StringUtils");
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // org.apache.commons.codec.binary.StringUtils: java.io.UnsupportedEncodingException: org.apache.commons.codec.binary.StringUtils
            //
            verifyException("org.apache.commons.codec.binary.StringUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf16("r`_");
        String string0 = StringUtils.newStringUsAscii(byteArray0);
        assertEquals("\uFFFD\uFFFD\u0000r\u0000`\u0000_", string0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[22];
        String string0 = StringUtils.newStringIso8859_1(byteArray0);
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
        assertEquals(43, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[5];
        String string0 = StringUtils.newStringUtf16Le(byteArray0);
        assertEquals("\u0000\u0000\uFFFD", string0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesIso8859_1("");
        String string0 = StringUtils.newStringUtf16Be(byteArray0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf16Le("UTF-8");
        assertArrayEquals(new byte[] { (byte) 85, (byte) 0, (byte) 84, (byte) 0, (byte) 70, (byte) 0, (byte) 45, (byte) 0, (byte) 56, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[22];
        String string0 = StringUtils.newStringUtf16(byteArray0);
        assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StringUtils stringUtils0 = new StringUtils();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf8("UTF-8");
        assertArrayEquals(new byte[] { (byte) 85, (byte) 84, (byte) 70, (byte) 45, (byte) 56 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8("\u0000\u01C1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
        assertTrue(byteBuffer0.hasRemaining());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        String string0 = StringUtils.newStringUtf8((byte[]) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\u0000\u01C1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
        boolean boolean0 = StringUtils.equals((CharSequence) "\u0000\u0000\u0001\u00C1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (CharSequence) charBuffer0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        boolean boolean0 = StringUtils.equals((CharSequence) "\u0000\u01C1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (CharSequence) "\u0000\u01C1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "r`_");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        boolean boolean0 = StringUtils.equals((CharSequence) "UTF-8", (CharSequence) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "HL", 0, 0);
        // Undeclared exception!
        try {
            StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "UTF-8");
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.Buffer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        boolean boolean0 = StringUtils.equals((CharSequence) "UTF-8", (CharSequence) "UTF-8");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUtf8((String) null);
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8((String) null);
        assertNull(byteBuffer0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUnchecked("UTF-8", "UTF-8");
        assertArrayEquals(new byte[] { (byte) 85, (byte) 84, (byte) 70, (byte) 45, (byte) 56 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        byte[] byteArray0 = StringUtils.getBytesUnchecked((String) null, "J<");
        assertNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        String string0 = StringUtils.newString((byte[]) null, (String) null);
        assertNull(string0);
    }
}
