/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:23:25 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Base32_ESTest extends Base32_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base32 base32_0 = new Base32(3525, byteArray0);
        Object object0 = base32_0.decode((Object) "YQp;IDCa&*");
        Object object1 = base32_0.decode(object0);
        assertNotSame(object1, object0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Base32 base32_0 = new Base32();
        Object object0 = base32_0.decode((Object) "AAAAAAAAAAAAAAA=");
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Base32 base32_0 = new Base32(3504);
        Object object0 = base32_0.decode((Object) "YIDCa&*");
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Base32 base32_0 = null;
        try {
            base32_0 = new Base32(3525, (byte[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineLength 3525 > 0, but lineSeparator is null
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 52;
        Base32 base32_0 = null;
        try {
            base32_0 = new Base32(76, byteArray0, false);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineSeparator must not contain Base32 characters: [4]
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Base32 base32_0 = null;
        try {
            base32_0 = new Base32(true, (byte) 78);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // pad must not be in alphabet or whitespace
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Base32 base32_0 = null;
        try {
            base32_0 = new Base32((byte) 13);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // pad must not be in alphabet or whitespace
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Base32 base32_0 = new Base32((-2912));
        Object object0 = base32_0.decode((Object) "ABHAA===");
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Base32 base32_0 = new Base32((-2912));
        Object object0 = base32_0.decode((Object) ".lv$q&{0V!gJr'");
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base32 base32_0 = new Base32(3525, byteArray0);
        Object object0 = base32_0.decode((Object) ">-wRj[~]yZP");
        assertNotSame(byteArray0, object0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Base32 base32_0 = new Base32();
        Object object0 = base32_0.decode((Object) "UTF-16LE");
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base32 base32_0 = new Base32(3525, byteArray0);
        BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
        baseNCodec_Context0.modulus = 76;
        // Undeclared exception!
        try {
            base32_0.decode(byteArray0, (int) (byte) 11, (-3409), baseNCodec_Context0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Impossible modulus 76
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base32 base32_0 = new Base32(3525, byteArray0);
        String string0 = base32_0.encodeToString(byteArray0);
        assertEquals("AA======\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Base32 base32_0 = new Base32();
        byte[] byteArray0 = new byte[9];
        BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
        baseNCodec_Context0.eof = true;
        base32_0.encode(byteArray0, (-1), (int) (byte) 51, baseNCodec_Context0);
        assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Base32 base32_0 = new Base32();
        byte[] byteArray0 = new byte[9];
        BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
        base32_0.encode(byteArray0, (int) (byte) 0, (-1580), baseNCodec_Context0);
        assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        byte[] byteArray0 = new byte[12];
        Base32 base32_0 = new Base32(3525, byteArray0);
        String string0 = base32_0.encodeToString(byteArray0);
        assertEquals("AAAAAAAAAAAAAAAAAAAA====\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Base32 base32_0 = new Base32();
        byte[] byteArray0 = new byte[9];
        String string0 = base32_0.encodeToString(byteArray0);
        assertEquals("AAAAAAAAAAAAAAA=", string0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Base32 base32_0 = new Base32((byte) (-70));
        byte[] byteArray0 = new byte[5];
        BaseNCodec.Context baseNCodec_Context0 = new BaseNCodec.Context();
        baseNCodec_Context0.modulus = 2024;
        // Undeclared exception!
        try {
            base32_0.encode(byteArray0, (int) (byte) (-70), (int) (byte) (-70), baseNCodec_Context0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Impossible modulus 2024
            //
            verifyException("org.apache.commons.codec.binary.Base32", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base32 base32_0 = new Base32((byte) 11, byteArray0);
        String string0 = base32_0.encodeToString(byteArray0);
        assertEquals("AAAAAAAA\u0000\u0000\u0000\u0000\u0000", string0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Base32 base32_0 = new Base32((-2912));
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) (-59);
        String string0 = base32_0.encodeToString(byteArray0);
        assertEquals("YUAAA===", string0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Base32 base32_0 = new Base32(3504);
        boolean boolean0 = base32_0.isInAlphabet("YIDCa&*");
        assertFalse(boolean0);
    }
}
