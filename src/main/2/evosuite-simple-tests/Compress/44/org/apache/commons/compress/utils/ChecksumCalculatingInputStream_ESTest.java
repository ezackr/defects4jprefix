/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:38:17 GMT 2024
 */
package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.util.zip.Adler32;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        checksumCalculatingInputStream0.read(byteArray0);
        long long0 = checksumCalculatingInputStream0.skip(1836L);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        checksumCalculatingInputStream0.read(byteArray0);
        long long0 = checksumCalculatingInputStream0.skip(1836L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        long long0 = checksumCalculatingInputStream0.getValue();
        assertEquals(1L, long0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        checksumCalculatingInputStream0.read(byteArray0);
        int int0 = checksumCalculatingInputStream0.read(byteArray0);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) 4);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        checksumCalculatingInputStream0.read(byteArray0);
        int int0 = checksumCalculatingInputStream0.read(byteArray0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        long long0 = checksumCalculatingInputStream0.skip((-1L));
        assertEquals(65537L, checksumCalculatingInputStream0.getValue());
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        Adler32 adler32_0 = new Adler32();
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
        long long0 = checksumCalculatingInputStream0.skip((-1L));
        assertEquals(1L, long0);
    }
}
