/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:17:25 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarUtils_ESTest extends TarUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[57];
        // Undeclared exception!
        try {
            TarUtils.formatLongOctalOrBinaryBytes(0, byteArray0, 0, 0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -2
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[10];
        // Undeclared exception!
        try {
            TarUtils.formatNameBytes("R7{L] |a", byteArray0, (int) (byte) 0, (int) (byte) 76);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 10
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        // Undeclared exception!
        try {
            TarUtils.formatCheckSumOctalBytes(681, (byte[]) null, 681, 681);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[89];
        TarUtils.formatLongOctalOrBinaryBytes((-1714L), byteArray0, 1, 8);
        // Undeclared exception!
        try {
            TarUtils.parseOctalOrBinary(byteArray0, 8, 8);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid byte 78 at offset 0 in 'N{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}' len=8
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            TarUtils.formatOctalBytes(7L, byteArray0, 0, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // 7=7 will not fit in octal number buffer of length -2
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[8];
        String string0 = TarUtils.parseName(byteArray0, (int) (byte) 2, (int) (byte) 2);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
        int int0 = TarUtils.formatNameBytes("^zjzmK(Ki", byteArray0, (int) (byte) 0, (int) (byte) 0, zipEncoding0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
        int int0 = TarUtils.formatNameBytes("^zjzmK(Ki", byteArray0, (int) (byte) 0, (int) (byte) 0, zipEncoding0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
        String string0 = TarUtils.parseName(byteArray0, (int) (byte) 2, (int) (byte) 2, zipEncoding0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 50, (byte) 32, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
        String string0 = TarUtils.parseName(byteArray0, (int) (byte) 2, (int) (byte) 2, zipEncoding0);
        assertEquals("2 ", string0);
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        byte[] byteArray0 = new byte[151];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2200L), byteArray0, 55, 55);
        assertEquals(110, int0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        byte[] byteArray0 = new byte[151];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2200L), byteArray0, 55, 55);
        ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
        String string0 = TarUtils.parseName(byteArray0, 2, 110, zipEncoding0);
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            TarUtils.parseOctal(byteArray0, (-830), (-830));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Length -830 must be at least 2
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        byte[] byteArray0 = new byte[8];
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte) 2, (byte) 2);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        byte[] byteArray0 = new byte[93];
        TarUtils.formatLongOctalOrBinaryBytes(8, byteArray0, 8, 8);
        // Undeclared exception!
        try {
            TarUtils.parseOctalOrBinary(byteArray0, 8, Integer.MAX_VALUE);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // -2147483642
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        byte[] byteArray0 = new byte[19];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        byte[] byteArray0 = new byte[19];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, 3, 3);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte) 2, 4);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 50, (byte) 32, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        byte[] byteArray0 = new byte[8];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) 2, byteArray0, (byte) 2, (byte) 2);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte) 2, 4);
        assertEquals(2L, long0);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        byte[] byteArray0 = new byte[8];
        TarUtils.formatLongOctalOrBinaryBytes((-1L), byteArray0, (byte) 2, (byte) 2);
        // Undeclared exception!
        try {
            TarUtils.parseOctal(byteArray0, (byte) 2, (byte) 2);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid byte -1 at offset 0 in '\uFFFD\uFFFD' len=2
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        byte[] byteArray0 = new byte[146];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934591L, byteArray0, 8, 8);
        assertEquals(16, int0);
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        byte[] byteArray0 = new byte[146];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934591L, byteArray0, 8, 8);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, 8, 8);
        assertEquals(8589934591L, long0);
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        byte[] byteArray0 = new byte[149];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2193L), byteArray0, 49, 49);
        assertEquals(98, int0);
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        byte[] byteArray0 = new byte[149];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2193L), byteArray0, 49, 49);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, 49, 49);
        assertEquals((-2193L), long0);
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        byte[] byteArray0 = new byte[13];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-1L), byteArray0, (byte) 2, (byte) 2);
        assertEquals(4, int0);
    }

    @Test(timeout = 4000)
    public void test1727() throws Throwable {
        byte[] byteArray0 = new byte[13];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-1L), byteArray0, (byte) 2, (byte) 2);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte) 2, (byte) 2);
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test1828() throws Throwable {
        byte[] byteArray0 = new byte[146];
        TarUtils.formatLongOctalOrBinaryBytes(8589934591L, byteArray0, 8, 8);
        // Undeclared exception!
        try {
            TarUtils.parseOctalOrBinary(byteArray0, 8, 16);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // At offset 8, 16 byte binary number exceeds maximum signed long value
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        byte[] byteArray0 = new byte[147];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934598L, byteArray0, 14, 14);
        assertEquals(28, int0);
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        byte[] byteArray0 = new byte[147];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934598L, byteArray0, 14, 14);
        long long0 = TarUtils.parseOctalOrBinary(byteArray0, 14, 14);
        assertEquals(8589934598L, long0);
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        byte[] byteArray0 = new byte[22];
        boolean boolean0 = TarUtils.parseBoolean(byteArray0, 3);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) 1;
        boolean boolean0 = TarUtils.parseBoolean(byteArray0, (byte) 2);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = TarUtils.formatNameBytes("4c}p*z.T\"YQp;IDCa&", byteArray0, (int) (byte) 0, (int) (byte) (-20));
        assertEquals((-20), int0);
    }

    @Test(timeout = 4000)
    public void test2234() throws Throwable {
        byte[] byteArray0 = new byte[3];
        int int0 = TarUtils.formatNameBytes("4c}p*z.T\"YQp;IDCa&", byteArray0, (int) (byte) 0, (int) (byte) (-20));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        byte[] byteArray0 = new byte[8];
        // Undeclared exception!
        try {
            TarUtils.formatLongOctalOrBinaryBytes((byte) (-23), byteArray0, (byte) (-23), (byte) (-23));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Value -23 is too large for -23 byte field.
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        byte[] byteArray0 = new byte[8];
        long long0 = TarUtils.computeCheckSum(byteArray0);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        byte[] byteArray0 = new byte[89];
        boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        byte[] byteArray0 = new byte[194];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(91, byteArray0, 91, 91);
        assertEquals(182, int0);
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        byte[] byteArray0 = new byte[194];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes(91, byteArray0, 91, 91);
        boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        byte[] byteArray0 = new byte[166];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2226L), byteArray0, 75, 75);
        assertEquals(150, int0);
    }

    @Test(timeout = 4000)
    public void test2741() throws Throwable {
        byte[] byteArray0 = new byte[166];
        int int0 = TarUtils.formatLongOctalOrBinaryBytes((-2226L), byteArray0, 75, 75);
        boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        byte[] byteArray0 = new byte[89];
        TarUtils.formatLongOctalOrBinaryBytes((-1779L), byteArray0, 8, 8);
        boolean boolean0 = TarUtils.verifyCheckSum(byteArray0);
        assertTrue(boolean0);
    }
}
