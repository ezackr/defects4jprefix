/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:40:35 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.flush();
        assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        assertEquals(10240, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'s o|arg constru-trisunoOXpubli");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 33188);
        assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3631);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        int int0 = tarArchiveOutputStream0.getRecordSize();
        assertEquals(512, int0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MockFile mockFile0 = new MockFile("'s o|arg constru-trisunotXpubli", "'s o|arg constru-trisunotXpubli");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry) tarArchiveOutputStream0.createArchiveEntry(mockFile0, "'s o|arg constru-trisunotXpubli");
        assertEquals("", tarArchiveEntry0.getLinkName());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.jar.JarArchiveEntry", "org.apache.commons.compress.archivers.jar.JarArchiveEntry");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // file name 'Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.jar.JarArchiveEntry/org.apache.commons.compress.archivers.jar.JarArchiveEntry' is too long ( > 100 bytes)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.jar.JarArchiveEntry", "org.apache.commons.compress.archivers.jar.JarArchiveEntry");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" is in unknown format/ is in unknown format");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "kmK1");
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3631);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile(" is in unknown format", " is in unknown format");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // entry 'Users/elliottzackrone/IdeaProjects/defects4jprefix/ is in unknown format/ is in unknown format' closed at '0' before the '4' bytes specified in the header were written
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = null;
        try {
            objectOutputStream0 = new ObjectOutputStream(tarArchiveOutputStream0);
            fail("Expecting exception: IOException");
        } catch (Throwable e) {
            //
            // request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        tarArchiveEntry0.setSize(16384L);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        tarArchiveOutputStream0.write(0);
        byte[] byteArray0 = new byte[4];
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.write(byteArray0, 304, 10240);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", "org.apache.commons.compress.archivers.tar.TarArchiveOutputStream");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
        tarArchiveEntry0.setSize(16877);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        byte[] byteArray0 = new byte[0];
        try {
            tarArchiveOutputStream0.write(byteArray0, 1, 1772);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // record has length '0' with offset '1' which is less than the record size of '512'
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarBuffer", e);
        }
    }
}
