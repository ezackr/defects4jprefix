/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:12:51 GMT 2024
 */
package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ArchiveStreamFactory_ESTest extends ArchiveStreamFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        try {
            archiveStreamFactory0.createArchiveInputStream(">", (InputStream) pipedInputStream0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Archiver: > not found.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3546), (-3546));
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Archivername must not be null.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // InputStream must not be null.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[475];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) byteArrayInputStream0);
        assertEquals(0L, archiveInputStream0.getBytesRead());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[457];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0);
        assertEquals(0, archiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0);
        assertEquals(0L, archiveInputStream0.getBytesRead());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3546), (-3546));
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0);
        assertEquals(0, archiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0);
        assertEquals(0, archiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        try {
            archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) byteArrayInputStream0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // unexpected EOF
            //
            verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveOutputStream("jar", (OutputStream) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // OutputStream must not be null.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveOutputStream((String) null, pipedOutputStream0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Archivername must not be null.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        try {
            archiveStreamFactory0.createArchiveOutputStream("w,bkbuj", pipedOutputStream0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // Archiver: w,bkbuj not found.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArArchiveOutputStream arArchiveOutputStream0 = (ArArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("ar", pipedOutputStream0);
        assertEquals(1, ArArchiveOutputStream.LONGFILE_BSD);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("zip", pipedOutputStream0);
        assertEquals(0, ZipArchiveOutputStream.STORED);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = (TarArchiveOutputStream) archiveStreamFactory0.createArchiveOutputStream("tar", pipedOutputStream0);
        assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("jar", dataOutputStream0);
        assertEquals(0L, archiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("cpio", pipedOutputStream0);
        assertEquals(0L, archiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        byte[] byteArray0 = new byte[513];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        assertEquals(0, archiveInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveInputStream((InputStream) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Stream must not be null.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        // Undeclared exception!
        try {
            archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Mark is not supported.
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        try {
            archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
            fail("Expecting exception: Exception");
        } catch (Exception e) {
            //
            // No Archiver found for the stream signature
            //
            verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
        }
    }
}
