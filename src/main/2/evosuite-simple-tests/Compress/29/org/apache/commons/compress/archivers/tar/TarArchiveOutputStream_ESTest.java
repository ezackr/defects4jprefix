/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:58:21 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.getCount();
        assertEquals(512, tarArchiveOutputStream0.getRecordSize());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("FUgfDGN");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 100, "FUgfDGN");
        int int0 = tarArchiveOutputStream0.getRecordSize();
        assertEquals(512, int0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, "UTF-8");
        assertEquals(512, tarArchiveOutputStream0.getRecordSize());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.flush();
        assertEquals(512, tarArchiveOutputStream0.getRecordSize());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archive has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("5\"\"oqxG`}Z=)b2JS[5");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 31);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archives contains unclosed entries.
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
        try {
            tarArchiveOutputStream0.putArchiveEntry(arjArchiveEntry0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("o");
        tarArchiveEntry0.setLinkName((String) null);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals("centra directory zip64 extended information extra field's length doesn't match central directory dat0100644 0000000 0000000 00000000000 12277475301 055211\u0000 0centra directory zip64 extended information extra field's length doesn't match central directory datustar\u000000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000000000 0000000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(512, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(">'wSau");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(512, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(3);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveEntry0.setLinkName("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        try {
            tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No current entry to close
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ZLs<");
        tarArchiveEntry0.setSize(1);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // entry 'ZLs<' closed at '0' before the '1' bytes specified in the header were written
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
        // Undeclared exception!
        try {
            tarArchiveOutputStream1.finish();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No current tar entry
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setLongFileMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("centra directory zip64 extended information extra field's length doesn't match central directory data.  ExpeWtnd length ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\u0000");
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "\u0000", map0);
        assertEquals(1536, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.writePaxHeaders((TarArchiveEntry) null, "|i;/8`V< l8X|M)?", hashMap0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        MockFile mockFile0 = new MockFile("Zipi4 exended informatoon must conta1n joth size values in the loTal file header.", "Zipi4 exended informatoon must conta1n joth size values in the loTal file header.");
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "Zipi4 exended informatoon must conta1n joth size values in the loTal file header.");
        assertEquals(512, tarArchiveOutputStream0.getRecordSize());
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.finish();
        MockFile mockFile0 = new MockFile("\n", "\n");
        try {
            tarArchiveOutputStream0.createArchiveEntry(mockFile0, "\n");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, (-541));
        tarArchiveOutputStream0.finish();
        assertEquals(1024, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("request to write '");
        tarArchiveEntry0.setGroupId((-710));
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.setBigNumberMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("i");
        MockDate mockDate0 = new MockDate(1000, 1, (-758), 1000, (-1548), 16877);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(1536, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ASCII");
        tarArchiveEntry0.setMode((-1));
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // mode '-1' is too big ( > 2097151 ).
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("`kHw:i>9<7");
        tarArchiveEntry0.setModTime(280375465082880L);
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 31, 16877);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // last modification time '280375465082' is too big ( > 8589934591 ).
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length ");
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // file name 'central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length ' is too long ( > 100 bytes)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.cmmons.comp[ess.archivers.ar.ArArchieEntry");
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0, 16877);
        MockDate mockDate0 = new MockDate(2, 1, 0, 33188, 0, 1000);
        tarArchiveEntry0.setModTime((Date) mockDate0);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "org.apache.cmmons.comp[ess.archivers.ar.ArArchieEntry", map0);
        assertEquals(1536, tarArchiveOutputStream0.getCount());
    }
}
