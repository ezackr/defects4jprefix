/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:47:14 GMT 2024
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CpioArchiveInputStream_ESTest extends CpioArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, "CP850");
        assertEquals(0L, cpioArchiveInputStream0.getBytesRead());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 11, 11);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0, 11);
        // Undeclared exception!
        try {
            cpioArchiveInputStream0.read(byteArray0, 11, 11);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        try {
            cpioArchiveInputStream0.getNextEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Unknown magic [\u0000\u0000\u0000\u0000\u0000\u0000]. Occured at byte: 6
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        int int0 = cpioArchiveInputStream0.available();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0, (byte) (-73));
        long long0 = cpioArchiveInputStream0.skip(2147483647L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0, (byte) (-73));
        long long0 = cpioArchiveInputStream0.skip(2147483647L);
        int int0 = cpioArchiveInputStream0.available();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-9), (byte) (-9));
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.close();
        assertEquals(0, cpioArchiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        cpioArchiveInputStream0.close();
        try {
            cpioArchiveInputStream0.getNextCPIOEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) (-57);
        byteArray0[1] = (byte) 113;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        try {
            cpioArchiveInputStream0.getNextEntry();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        // Undeclared exception!
        try {
            cpioArchiveInputStream0.read(byteArray0, (-1), (-1));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            cpioArchiveInputStream0.read(byteArray0, 16, (-3270));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        byte[] byteArray0 = new byte[0];
        int int0 = cpioArchiveInputStream0.read(byteArray0, 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 113;
        byteArray0[1] = (byte) (-57);
        byteArray0[6] = (byte) 113;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        // Undeclared exception!
        try {
            cpioArchiveInputStream0.getNextEntry();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown mode. Full: 7100 Masked: 7000
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        // Undeclared exception!
        try {
            cpioArchiveInputStream0.skip((-3241L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // negative skip length
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(pipedInputStream0);
        long long0 = cpioArchiveInputStream0.skip(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        long long0 = cpioArchiveInputStream0.skip(1L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[6];
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 113;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, 955);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 113;
        byteArray0[1] = (byte) (-57);
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, 955);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[1] = (byte) 113;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 113);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) (-57);
        byteArray0[1] = (byte) 113;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 113);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 48;
        boolean boolean0 = CpioArchiveInputStream.matches(byteArray0, (byte) 48);
        assertFalse(boolean0);
    }
}
