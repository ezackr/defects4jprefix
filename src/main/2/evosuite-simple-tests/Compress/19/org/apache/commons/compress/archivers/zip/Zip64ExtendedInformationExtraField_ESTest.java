/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:19:05 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Zip64ExtendedInformationExtraField_ESTest extends Zip64ExtendedInformationExtraField_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger0);
        // Undeclared exception!
        try {
            zip64ExtendedInformationExtraField0.getLocalFileDataData();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Zip64 extended information must contain both size values in the local file header.
            //
            verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(0L);
        ZipLong zipLong0 = ZipLong.AED_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        ZipLong zipLong1 = zip64ExtendedInformationExtraField0.getDiskStartNumber();
        assertSame(zipLong1, zipLong0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipLong zipLong0 = ZipLong.CFH_SIG;
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong0);
        assertEquals(33639248L, zipLong0.getValue());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        zip64ExtendedInformationExtraField0.setRelativeHeaderOffset(zipEightByteInteger0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = zip64ExtendedInformationExtraField0.getRelativeHeaderOffset();
        assertNull(zipEightByteInteger0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(0L);
        ZipLong zipLong0 = ZipLong.AED_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        ZipEightByteInteger zipEightByteInteger1 = zip64ExtendedInformationExtraField0.getCompressedSize();
        assertSame(zipEightByteInteger0, zipEightByteInteger1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        ZipLong zipLong0 = ZipLong.DD_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getHeaderId();
        assertEquals(1, zipShort0.getValue());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = zip64ExtendedInformationExtraField0.getSize();
        assertNull(zipEightByteInteger0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        assertEquals(0, zipShort0.getValue());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        ZipLong zipLong0 = ZipLong.SINGLE_SEGMENT_SPLIT_MARKER;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        assertEquals(16, zipShort0.getValue());
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        try {
            zip64ExtendedInformationExtraField0.parseFromLocalFileData(byteArray0, (-3058), (-3058));
            fail("Expecting exception: ZipException");
        } catch (ZipException e) {
            //
            // Zip64 extended information must contain both size values in the local file header.
            //
            verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        ZipLong zipLong0 = ZipLong.CFH_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 0, 28);
        assertEquals(28, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        zip64ExtendedInformationExtraField0.parseFromLocalFileData(byteArray0, 0, 0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
        // Undeclared exception!
        try {
            zip64ExtendedInformationExtraField0.getLocalFileDataData();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Zip64 extended information must contain both size values in the local file header.
            //
            verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger0);
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger0);
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        zip64ExtendedInformationExtraField0.parseFromLocalFileData(byteArray0, 0, 17);
        assertEquals(16, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        ZipLong zipLong0 = ZipLong.CFH_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        byte[] byteArray0 = zip64ExtendedInformationExtraField1.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 2, 24);
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(true, true, true, false);
        assertFalse(zip64ExtendedInformationExtraField0.equals((Object) zip64ExtendedInformationExtraField1));
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 0, 0);
        try {
            zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(true, true, true, true);
            fail("Expecting exception: ZipException");
        } catch (ZipException e) {
            //
            // central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length 28 but is 0
            //
            verifyException("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
        ZipLong zipLong0 = ZipLong.CFH_SIG;
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 2, 12);
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, true, true);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, false, false);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        byte[] byteArray0 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 0, 0);
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, false, false);
    }
}
