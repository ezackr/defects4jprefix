/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:25:35 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Date;
import java.util.HashMap;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveEntry_ESTest extends TarArchiveEntry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertFalse(tarArchiveEntry0.isGNULongNameEntry());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("r$z5YcO{Qh!-zLrhAvr", (byte) 0, false);
        String string0 = tarArchiveEntry0.getUserName();
        assertEquals("r$z5YcO{Qh!-zLrhAvr", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = null;
        try {
            tarArchiveEntry0 = new TarArchiveEntry((byte[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals("var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/|`?_p[g0|`?_p[g", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        File file0 = MockFile.createTempFile("|`?_p[g", "|`?_p[g");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        long long0 = tarArchiveEntry0.getSize();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test0315() throws Throwable {
        MockFile mockFile0 = new MockFile("user.name");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        int int0 = tarArchiveEntry0.getMode();
        assertEquals("user.name", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test0316() throws Throwable {
        MockFile mockFile0 = new MockFile("user.name");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        int int0 = tarArchiveEntry0.getMode();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        MockFile mockFile0 = new MockFile("user.name");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        int int0 = tarArchiveEntry0.getMode();
        assertEquals(33188, int0);
    }

    @Test(timeout = 4000)
    public void test0318() throws Throwable {
        MockFile mockFile0 = new MockFile("user.name");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        int int0 = tarArchiveEntry0.getMode();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test0319() throws Throwable {
        MockFile mockFile0 = new MockFile("user.name");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        int int0 = tarArchiveEntry0.getMode();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/-Z/c7g[0X//");
        tarArchiveEntry0.setIds(33188, 33188);
        assertEquals(33188, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals("8O.V[[UG", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0524() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test0525() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test0526() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test0527() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]?tc7g3[X/C5/");
        tarArchiveEntry0.setLinkName("/>]?tc7g3[X/C5/");
        assertEquals("/>]?tc7g3[X/C5/", tarArchiveEntry0.getLinkName());
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[XX&J/");
        tarArchiveEntry0.setNames("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/");
        assertEquals("/Z]/c7g3[XX&J/", tarArchiveEntry0.getUserName());
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test0833() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test0835() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test0836() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test0837() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setName("/Z]/c7g3[X/&5/");
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0938() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test0939() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test0940() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test0941() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0942() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test0943() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test0944() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test0945() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0946() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test0947() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        Date date0 = tarArchiveEntry0.getLastModifiedDate();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test1048() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertEquals("B]", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1049() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isGNULongNameEntry());
    }

    @Test(timeout = 4000)
    public void test1050() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test1051() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1052() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
    }

    @Test(timeout = 4000)
    public void test1053() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1054() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1055() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isPaxHeader());
    }

    @Test(timeout = 4000)
    public void test1056() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isCharacterDevice());
    }

    @Test(timeout = 4000)
    public void test1057() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("B]", (byte) (-100), false);
        int int0 = tarArchiveEntry0.getDevMajor();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test1158() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$");
        byte[] byteArray0 = new byte[8];
        // Undeclared exception!
        try {
            tarArchiveEntry0.writeEntryHeader(byteArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1259() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1260() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertEquals("G#ddH", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1261() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test1262() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test1263() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1264() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("G#ddH");
        tarArchiveEntry0.isCheckSumOK();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test1365() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1366() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test1367() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test1368() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
    }

    @Test(timeout = 4000)
    public void test1369() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertEquals("JoWmo E;9F@*T5KMzp", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1370() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test1371() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isSparse());
    }

    @Test(timeout = 4000)
    public void test1372() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test1373() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("JoWmo E;9F@*T5KMzp", (byte) 48);
        tarArchiveEntry0.isDescendent(tarArchiveEntry0);
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1474() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1475() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test1476() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1477() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
    }

    @Test(timeout = 4000)
    public void test1478() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals("", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1479() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1480() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertFalse(tarArchiveEntry0.isPaxHeader());
    }

    @Test(timeout = 4000)
    public void test1481() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test1482() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-13), true);
        int int0 = tarArchiveEntry0.getGroupId();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test1583() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1584() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1585() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test1586() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1587() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test1588() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test1589() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test1590() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        long long0 = tarArchiveEntry0.getLongGroupId();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1691() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
        tarArchiveEntry0.isExtended();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test1692() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
        tarArchiveEntry0.isExtended();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test1693() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
        tarArchiveEntry0.isExtended();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test1694() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
        tarArchiveEntry0.isExtended();
        assertEquals("O]Zx#2^G}Sp<Pk", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1695() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("O]Zx#2^G}Sp<Pk");
        tarArchiveEntry0.isExtended();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test1796() throws Throwable {
        MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        long long0 = tarArchiveEntry0.getRealSize();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test1797() throws Throwable {
        MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        long long0 = tarArchiveEntry0.getRealSize();
        assertEquals("W2kvM`gi}5(gPbyz", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test1798() throws Throwable {
        MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        long long0 = tarArchiveEntry0.getRealSize();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test1799() throws Throwable {
        MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        long long0 = tarArchiveEntry0.getRealSize();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test17100() throws Throwable {
        MockFile mockFile0 = new MockFile("W2kvM`gi}5(gPbyz");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        long long0 = tarArchiveEntry0.getRealSize();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test18101() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test18102() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test18103() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test18104() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test18105() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test18106() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test18107() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test18108() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test18109() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Size is out of range: /", true);
        String string0 = tarArchiveEntry0.getLinkName();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test19110() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Jhy'cJ$/");
        // Undeclared exception!
        try {
            tarArchiveEntry0.setModTime((Date) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test20111() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = null;
        try {
            tarArchiveEntry0 = new TarArchiveEntry((byte[]) null, (ZipEncoding) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test21112() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test21113() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test21114() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertEquals("Z]tc`g3rX/&5/Z]tc`g3rX/&5", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test21115() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test21116() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test21117() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]tc`g3rX/&5/", "/Z]tc`g3rX/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.equals((Object) tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test22118() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertTrue(tarArchiveEntry0.isGNULongNameEntry());
    }

    @Test(timeout = 4000)
    public void test22119() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test22120() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test22121() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test22122() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test22123() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        int int0 = tarArchiveEntry0.getDevMinor();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test23124() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals("AK`", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test23125() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test23126() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
    }

    @Test(timeout = 4000)
    public void test23127() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test23128() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test23129() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test23130() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test23131() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isSymbolicLink());
    }

    @Test(timeout = 4000)
    public void test23132() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isGNUSparse());
    }

    @Test(timeout = 4000)
    public void test23133() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test23134() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test23135() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) (-83), false);
        int int0 = tarArchiveEntry0.getUserId();
        assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
    }

    @Test(timeout = 4000)
    public void test24136() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test24137() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertEquals("AK`", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test24138() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test24139() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test24140() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test24141() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertFalse(tarArchiveEntry0.isPaxHeader());
    }

    @Test(timeout = 4000)
    public void test24142() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test24143() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test24144() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("AK`", (byte) 3, true);
        String string0 = tarArchiveEntry0.getGroupName();
        assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
    }

    @Test(timeout = 4000)
    public void test25145() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("~");
        tarArchiveEntry0.setMode(1000);
        assertEquals(1000, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test26146() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n{5+j5EMT~D^j[g");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            tarArchiveEntry0.fillGNUSparse1xData(hashMap0);
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // null
            //
            verifyException("java.lang.Integer", e);
        }
    }

    @Test(timeout = 4000)
    public void test27147() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test27148() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals("GNU.sparse.size", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test27149() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test27150() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test27151() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test27152() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test27153() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test27154() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("GNU.sparse.size");
        long long0 = tarArchiveEntry0.getLongUserId();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test28155() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test28156() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertEquals(">]tc7g3[X/C5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test28157() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test28158() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test28159() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test28160() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/");
        tarArchiveEntry0.setModTime((long) (byte) (-18));
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test29161() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test29162() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test29163() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test29164() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test29165() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertEquals("n%9o7\"V}6QX{Y<7Mv!C", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test29166() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n%9o7\"V}6QX{Y<7Mv!C");
        tarArchiveEntry0.getFile();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test30167() throws Throwable {
        MockFile mockFile0 = new MockFile("/", "/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
        TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
        assertEquals(2, tarArchiveEntryArray0.length);
    }

    @Test(timeout = 4000)
    public void test30168() throws Throwable {
        MockFile mockFile0 = new MockFile("/", "/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
        TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
        assertEquals("/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test30169() throws Throwable {
        MockFile mockFile0 = new MockFile("/", "/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
        TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test30170() throws Throwable {
        MockFile mockFile0 = new MockFile("/", "/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
        TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test30171() throws Throwable {
        MockFile mockFile0 = new MockFile("/", "/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/");
        TarArchiveEntry[] tarArchiveEntryArray0 = tarArchiveEntry0.getDirectoryEntries();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test31172() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertEquals("Z]/c7g3[XX&J/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test31173() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test31174() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test31175() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test31176() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test31177() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test31178() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[XX&J/");
        MockFile.createTempFile("/Z]/c7g3[XX&J/", "/Z]/c7g3[XX&J/", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "/Z]/c7g3[XX&J/");
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test32179() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test32180() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test32181() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertEquals("z", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test32182() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test32183() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32184() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("z", false);
        boolean boolean0 = tarArchiveEntry0.equals((Object) null);
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test33185() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Value ");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("Value ", "Value ");
        boolean boolean0 = hashMap0.remove((Object) tarArchiveEntry0, (Object) "Value ");
        assertEquals(1, hashMap0.size());
    }

    @Test(timeout = 4000)
    public void test33186() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Value ");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("Value ", "Value ");
        boolean boolean0 = hashMap0.remove((Object) tarArchiveEntry0, (Object) "Value ");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test34187() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        tarArchiveEntry0.setSize(33188);
        assertEquals(33188L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test35188() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        // Undeclared exception!
        try {
            tarArchiveEntry0.setSize((-1833L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Size is out of range: -1833
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test36189() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n{5+j5EMT~D^j[g");
        tarArchiveEntry0.setDevMajor(31);
        assertEquals(31, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test37190() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0\u0000");
        // Undeclared exception!
        try {
            tarArchiveEntry0.setDevMajor((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Major device number is out of range: -1
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test38191() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        tarArchiveEntry0.setDevMinor(31);
        assertEquals(31, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test39192() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/-Z]/c7g3[XX&J//");
        // Undeclared exception!
        try {
            tarArchiveEntry0.setDevMinor((-1095));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Minor device number is out of range: -1095
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test40193() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test40194() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test40195() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test40196() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test40197() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test40198() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test41199() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte) 75, true);
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test41200() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte) 75, true);
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test41201() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte) 75, true);
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals("7F[cyl#-1sU", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test41202() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte) 75, true);
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test41203() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("7F[cyl#-1sU", (byte) 75, true);
        boolean boolean0 = tarArchiveEntry0.isGNULongLinkEntry();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test42204() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals("Users/elliottzackrone/IdeaProjects/defects4jprefix/>lH|6/>lH|6", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test42205() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42206() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test42207() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test42208() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test42209() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test43210() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test43211() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test43212() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test43213() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test43214() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test43215() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        boolean boolean0 = tarArchiveEntry0.isGNULongNameEntry();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test44216() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/", (byte) 120, true);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test44217() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/", (byte) 120, true);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals("/>]tc7g3[X/C5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test44218() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/>]tc7g3[X/C5/", (byte) 120, true);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test45219() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte) 88);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test45220() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte) 88);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test45221() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte) 88);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test45222() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte) 88);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test45223() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Cp850", (byte) 88);
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals("Cp850", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test46224() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test46225() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46226() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test46227() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test46228() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isPaxHeader();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test47229() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test47230() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test47231() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47232() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test47233() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test47234() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test48235() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte) 103, false);
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test48236() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte) 103, false);
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test48237() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte) 103, false);
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test48238() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte) 103, false);
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals("UTF-1B", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test48239() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("UTF-1B", (byte) 103, false);
        boolean boolean0 = tarArchiveEntry0.isGlobalPaxHeader();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test49240() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test49241() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test49242() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test49243() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test49244() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test49245() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals("&x_=}6-0:{Ciok", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test49246() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("&x_=}6-0:{Ciok");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test50247() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test50248() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test50249() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test50250() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isDirectory();
        assertEquals(">lH|6", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test50251() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test51252() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test51253() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test51254() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test51255() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test51256() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test51257() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test51258() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test51259() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test52260() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test52261() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test52262() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test52263() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertTrue(tarArchiveEntry0.isGNUSparse());
    }

    @Test(timeout = 4000)
    public void test52264() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test52265() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/", (byte) 83);
        boolean boolean0 = tarArchiveEntry0.isDirectory();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test53266() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test53267() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test53268() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertEquals("Major device number is out of range: ", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test53269() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test53270() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test53271() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Major device number is out of range: ", (byte) 76);
        tarArchiveEntry0.isFile();
        assertTrue(tarArchiveEntry0.isGNULongNameEntry());
    }

    @Test(timeout = 4000)
    public void test54272() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isFile();
        assertEquals("Users/elliottzackrone/IdeaProjects/defects4jprefix/>lH|6/>lH|6", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test54273() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test54274() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test54275() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test54276() throws Throwable {
        MockFile mockFile0 = new MockFile(">lH|6", ">lH|6");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test55277() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test55278() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isCharacterDevice());
    }

    @Test(timeout = 4000)
    public void test55279() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isPaxHeader());
    }

    @Test(timeout = 4000)
    public void test55280() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test55281() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals("R", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test55282() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test55283() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isGNUSparse());
    }

    @Test(timeout = 4000)
    public void test55284() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test55285() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test55286() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
    }

    @Test(timeout = 4000)
    public void test55287() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test55288() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test55289() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("R", (byte) 0, true);
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test56290() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test56291() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isLink());
    }

    @Test(timeout = 4000)
    public void test56292() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test56293() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test56294() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals("3)ljNb", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test56295() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test56296() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test56297() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("3)ljNb");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test57298() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test57299() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test57300() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isFIFO());
    }

    @Test(timeout = 4000)
    public void test57301() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test57302() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test57303() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test57304() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test57305() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Y?Of^rc;/");
        boolean boolean0 = tarArchiveEntry0.isFile();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test58306() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test58307() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test58308() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test58309() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test58310() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test58311() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test58312() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test58313() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test59314() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test59315() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test59316() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test59317() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test59318() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals("Z", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test59319() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Z", (byte) 50);
        boolean boolean0 = tarArchiveEntry0.isSymbolicLink();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test60320() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals("Z]/c7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test60321() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test60322() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test60323() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test60324() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertFalse(tarArchiveEntry0.isBlockDevice());
    }

    @Test(timeout = 4000)
    public void test60325() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test60326() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test60327() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test61328() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test61329() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals("ustar ", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test61330() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test61331() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test61332() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test61333() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ustar ", (byte) 49);
        boolean boolean0 = tarArchiveEntry0.isLink();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test62334() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test62335() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test62336() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertEquals("mphaQh", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test62337() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test62338() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test62339() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("mphaQh", (byte) 51, false);
        boolean boolean0 = tarArchiveEntry0.isCharacterDevice();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test63340() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test63341() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test63342() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test63343() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test63344() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test63345() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test63346() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test64347() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte) 52, true);
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test64348() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte) 52, true);
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test64349() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte) 52, true);
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test64350() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte) 52, true);
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals("/Z]/c7g3$[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test64351() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]/c7g3$[X/&5/", (byte) 52, true);
        boolean boolean0 = tarArchiveEntry0.isBlockDevice();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test65352() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test65353() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test65354() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test65355() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(16877, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test65356() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test65357() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertFalse(tarArchiveEntry0.isFile());
    }

    @Test(timeout = 4000)
    public void test65358() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals("Z]tc7g3[X/&5/", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test65359() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test65360() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("/Z]tc7g3[X/&5/");
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test66361() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test66362() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals("oV3P,oU%C<Lq", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test66363() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test66364() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test66365() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test66366() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("oV3P,oU%C<Lq", (byte) 54, true);
        boolean boolean0 = tarArchiveEntry0.isFIFO();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test67367() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte) 83, true);
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test67368() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte) 83, true);
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals("}0WZE/s:D?v/Q$", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test67369() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte) 83, true);
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(0L, tarArchiveEntry0.getLongGroupId());
    }

    @Test(timeout = 4000)
    public void test67370() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte) 83, true);
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test67371() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}0WZE/s:D?v/Q$", (byte) 83, true);
        boolean boolean0 = tarArchiveEntry0.isSparse();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test68372() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        assertFalse(tarArchiveEntry0.isSparse());
    }

    @Test(timeout = 4000)
    public void test68373() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8O.V[[UG");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveEntry0.fillStarSparseData(hashMap0);
        tarArchiveEntry0.isSparse();
        assertEquals("8O.V[[UG", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test69374() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0L, tarArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test69375() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test69376() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test69377() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals("cp4C7", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test69378() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0L, tarArchiveEntry0.getLongUserId());
    }

    @Test(timeout = 4000)
    public void test69379() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(33188, tarArchiveEntry0.getMode());
    }

    @Test(timeout = 4000)
    public void test69380() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("cp4C7");
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test70381() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals("Z]/c7g3[X/&5/Z]/c7g3[X/&5", tarArchiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test70382() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test70383() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getDevMinor());
    }

    @Test(timeout = 4000)
    public void test70384() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getGroupId());
    }

    @Test(timeout = 4000)
    public void test70385() throws Throwable {
        MockFile mockFile0 = new MockFile("/Z]/c7g3[X/&5/", "/Z]/c7g3[X/&5/");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveEntry0.getDirectoryEntries();
        assertEquals(0, tarArchiveEntry0.getUserId());
    }

    @Test(timeout = 4000)
    public void test71386() throws Throwable {
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("}");
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("SCHILY.realsize", "SCHILY.realsize");
        // Undeclared exception!
        try {
            tarArchiveEntry0.fillStarSparseData(hashMap0);
            fail("Expecting exception: NumberFormatException");
        } catch (NumberFormatException e) {
            //
            // For input string: \"SCHILY.realsize\"
            //
            verifyException("java.lang.NumberFormatException", e);
        }
    }
}
