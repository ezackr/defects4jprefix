/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:29:40 GMT 2024
 */
package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.nio.ByteOrder;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteOrder byteOrder0 = ByteOrder.nativeOrder();
        BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
        bitInputStream0.close();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, 3295);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
        bitInputStream0.clearBitCache();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        File file0 = MockFile.createTempFile("count must not be negative or greater than 63", "");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
        // Undeclared exception!
        try {
            bitInputStream0.readBits((-1));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // count must not be negative or greater than 63
            //
            verifyException("org.apache.commons.compress.utils.BitInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, 3295);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
        long long0 = bitInputStream0.readBits((byte) 1);
        assertEquals((-1L), long0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, (ByteOrder) null);
        // Undeclared exception!
        try {
            bitInputStream0.readBits(2199);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // count must not be negative or greater than 63
            //
            verifyException("org.apache.commons.compress.utils.BitInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
        long long0 = bitInputStream0.readBits((byte) 46);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
        long long0 = bitInputStream0.readBits((byte) 46);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2358);
        byte[] byteArray0 = new byte[4];
        pipedOutputStream0.write(byteArray0);
        ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
        long long0 = bitInputStream0.readBits(3);
        assertEquals(3, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2358);
        byte[] byteArray0 = new byte[4];
        pipedOutputStream0.write(byteArray0);
        ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
        BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
        long long0 = bitInputStream0.readBits(3);
        assertEquals(0L, long0);
    }
}
