/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:53:19 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        ZipArchiveEntry zipArchiveEntry0 = zipArchiveInputStream0.getNextZipEntry();
        assertNull(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[35];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        assertEquals(5, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        long long0 = zipArchiveInputStream0.skip(559L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        try {
            zipArchiveInputStream0.read();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // The stream is closed
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.close();
        assertEquals(0, zipArchiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        // Undeclared exception!
        try {
            zipArchiveInputStream0.skip((-667L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        long long0 = zipArchiveInputStream0.skip(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        long long0 = zipArchiveInputStream0.skip(67324752L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 80;
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 80);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        byte[] byteArray0 = new byte[20];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextEntry();
        assertEquals(0, byteArrayInputStream0.available());
    }
}
