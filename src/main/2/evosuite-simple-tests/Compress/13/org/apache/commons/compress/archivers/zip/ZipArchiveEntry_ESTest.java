/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:07:00 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveEntry_ESTest extends ZipArchiveEntry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getExtraFields();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0212() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getExtraFields();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getExtraFields();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getExtraFields();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0215() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getExtraFields();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0316() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = null;
        try {
            zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[18];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[18];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test0625() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0626() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0627() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test0629() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[8];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0730() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0731() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0732() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0733() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0734() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0835() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0836() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0837() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0838() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0839() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0940() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(3);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0941() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(3);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test1042() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setExtra();
        ZipArchiveEntry zipArchiveEntry1 = null;
        try {
            zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        MockFile mockFile0 = new MockFile(")G'(7FHXiaAKe-g");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ")G'(7FHXiaAKe-g");
        assertEquals(0L, zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        MockFile mockFile0 = new MockFile(")G'(7FHXiaAKe-g");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ")G'(7FHXiaAKe-g");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1145() throws Throwable {
        MockFile mockFile0 = new MockFile(")G'(7FHXiaAKe-g");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ")G'(7FHXiaAKe-g");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1146() throws Throwable {
        MockFile mockFile0 = new MockFile(")G'(7FHXiaAKe-g");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ")G'(7FHXiaAKe-g");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1147() throws Throwable {
        MockFile mockFile0 = new MockFile(")G'(7FHXiaAKe-g");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ")G'(7FHXiaAKe-g");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1250() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1251() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1252() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1353() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1354() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1355() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1356() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1357() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1458() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1459() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1560() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(1610612727);
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1661() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("ZIP compression metho ca not be negative: /");
        zipArchiveEntry0.setUnixMode(0);
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1762() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1763() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1764() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1765() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1766() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1767() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Error parsing extra $ields for entry: ");
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1868() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) (-34);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1869() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) (-34);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1970() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2071() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2072() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2073() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2074() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test2175() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addExtraField(unicodePathExtraField0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test2276() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2377() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray0);
        assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test2378() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2479() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test2480() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2481() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2482() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2483() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2484() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("m!#7PPH8.0i_1C92|J");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        asiExtraField0.setGroupId(3);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test2585() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test2586() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        zipArchiveEntry1.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
        assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2687() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        // Undeclared exception!
        try {
            zipArchiveEntry1.removeExtraField(zipShort0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2788() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeExtraField(zipShort0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2889() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2890() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test2891() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2892() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2993() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-128);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test2994() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-128);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2995() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-128);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2996() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-128);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2997() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-128);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test3098() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeUnparseableExtraFieldData();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test3199() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(0);
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test31100() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(0);
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31101() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(0);
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31102() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(0);
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test31103() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(0);
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test32104() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        zipArchiveEntry0.hashCode();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test32105() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test32106() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        zipArchiveEntry0.hashCode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test32107() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        zipArchiveEntry0.hashCode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test32108() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test33109() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        // Undeclared exception!
        try {
            zipArchiveEntry0.setSize((-1404L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // invalid entry size
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test34110() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test34111() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test34112() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test34113() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test34114() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test35115() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("=%4*1p?\"`", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test35116() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("=%4*1p?\"`", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test35117() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("=%4*1p?\"`", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test35118() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("=%4*1p?\"`", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test35119() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("=%4*1p?\"`", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test36120() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test36121() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test36122() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test36123() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test36124() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test36125() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test37126() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test37127() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test37128() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test37129() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test37130() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test37131() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test38132() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test38133() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test38134() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test38135() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test38136() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test38137() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(3);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test39138() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test39139() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test39140() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test39141() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test39142() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test39143() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("LaHli5jT)g#V");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test40144() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test40145() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test40146() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test40147() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test40148() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test40149() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("8:RX");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test41150() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test41151() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test41152() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test41153() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test41154() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test41155() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test42156() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test42157() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test42158() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42159() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test42160() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test42161() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("ZIP compression method can not be negative: ");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test43162() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test43163() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setTime(0);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test44164() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setInternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test44165() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setInternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test45166() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.setUnixMode(3);
        zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test45167() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.setUnixMode(3);
        zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3, zipArchiveEntry1.getUnixMode());
    }

    @Test(timeout = 4000)
    public void test46168() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setExternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test46169() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setExternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47170() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setSize(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3L, zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test47171() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setSize(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test48172() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test48173() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setCrc(0);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test49174() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test49175() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setCompressedSize(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }
}
