/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:43:19 GMT 2024
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CpioArchiveOutputStream_ESTest extends CpioArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream(" Masked R ");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockPrintStream0);
        CpioArchiveOutputStream cpioArchiveOutputStream1 = new CpioArchiveOutputStream(cpioArchiveOutputStream0, (short) 8);
        MockFile mockFile0 = new MockFile(" Masked R ");
        mockPrintStream0.println((int) (short) 8);
        ArchiveEntry archiveEntry0 = cpioArchiveOutputStream0.createArchiveEntry(mockFile0, " Masked R ");
        cpioArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        try {
            cpioArchiveOutputStream1.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // attempt to write past end of STORED entry
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 4);
        cpioArchiveOutputStream0.finish();
        assertEquals(87, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 4);
        cpioArchiveOutputStream0.finish();
        assertEquals("0707070000000000000000000000000000000000010000000000000000000001300000000000TRAILER!!!\u0000", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 2);
        cpioArchiveOutputStream0.close();
        assertEquals(124, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 2);
        cpioArchiveOutputStream0.close();
        assertEquals("07070200000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000b00000000TRAILER!!!\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = null;
        try {
            cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 3);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown format: 3
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = null;
        try {
            cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 5);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown format: 5
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = null;
        try {
            cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 6);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown format: 6
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = null;
        try {
            cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) 7);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown format: 7
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = null;
        try {
            cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short) (-1552));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Unknown format: -1552
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        cpioArchiveOutputStream0.close();
        try {
            cpioArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream closed
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("iG+${/kZ*G4fl");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockPrintStream0);
        MockFile mockFile0 = new MockFile("iG+${/kZ*G4fl");
        CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "iG+${/kZ*G4fl");
        cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
        try {
            cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // duplicate entry: iG+${/kZ*G4fl
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream((OutputStream) null);
        CpioArchiveEntry cpioArchiveEntry0 = (CpioArchiveEntry) cpioArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        cpioArchiveEntry0.setTime((-1L));
        // Undeclared exception!
        try {
            cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.FilterOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry((short) 8);
        try {
            cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Header format: 8 does not match existing format: 1
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Cn KGwNEch@");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockPrintStream0);
        MockFile mockFile0 = new MockFile("Cn KGwNEch@");
        cpioArchiveOutputStream0.finish();
        ArchiveEntry archiveEntry0 = cpioArchiveOutputStream0.createArchiveEntry(mockFile0, "Cn KGwNEch@");
        cpioArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        try {
            cpioArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // invalid entry size (expected 124 but got 0 bytes)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        // Undeclared exception!
        try {
            cpioArchiveOutputStream0.write((byte[]) null, (-332), (-332));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        // Undeclared exception!
        try {
            cpioArchiveOutputStream0.write(byteArray0, 13, (-1024));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        byte[] byteArray0 = new byte[0];
        // Undeclared exception!
        try {
            cpioArchiveOutputStream0.write(byteArray0, (int) (short) 83, (int) (short) 83);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream(" does notmatchexisting9formt: ");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockPrintStream0);
        byte[] byteArray0 = new byte[0];
        cpioArchiveOutputStream0.write(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream((OutputStream) null);
        CpioArchiveOutputStream cpioArchiveOutputStream1 = new CpioArchiveOutputStream(cpioArchiveOutputStream0);
        try {
            cpioArchiveOutputStream1.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // no current CPIO entry
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("netware");
        cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
        try {
            cpioArchiveOutputStream0.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archives contains unclosed entries.
            //
            verifyException("org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        cpioArchiveOutputStream0.close();
        cpioArchiveOutputStream0.close();
        assertEquals(124, byteArrayOutputStream0.size());
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
        cpioArchiveOutputStream0.close();
        cpioArchiveOutputStream0.close();
        assertEquals("07070100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000b00000000TRAILER!!!\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("iG+${/kZ*G4fl");
        CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(mockPrintStream0);
        MockFile mockFile0 = new MockFile("iG+${/kZ*G4fl");
        CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "iG+${/kZ*G4fl");
        cpioArchiveEntry0.setTime(8589934591L);
        cpioArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
        assertEquals(124L, mockFile0.length());
    }
}
