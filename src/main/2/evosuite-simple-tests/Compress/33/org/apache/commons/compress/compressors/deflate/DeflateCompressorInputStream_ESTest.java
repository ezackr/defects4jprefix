/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 14:14:33 GMT 2024
 */
package org.apache.commons.compress.compressors.deflate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
import org.apache.commons.compress.compressors.deflate.DeflateParameters;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DeflateCompressorInputStream_ESTest extends DeflateCompressorInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
        deflateCompressorInputStream0.close();
        assertEquals(0L, deflateCompressorInputStream0.getBytesRead());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
        long long0 = deflateCompressorInputStream0.skip(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
        DeflateCompressorInputStream deflateCompressorInputStream1 = new DeflateCompressorInputStream(deflateCompressorInputStream0);
        try {
            deflateCompressorInputStream1.read();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(pipedInputStream0);
        int int0 = deflateCompressorInputStream0.available();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        DeflateParameters deflateParameters0 = new DeflateParameters();
        deflateParameters0.setWithZlibHeader(false);
        DeflateCompressorInputStream deflateCompressorInputStream0 = new DeflateCompressorInputStream(dataInputStream0, deflateParameters0);
        assertEquals(0, deflateCompressorInputStream0.getCount());
    }
}
