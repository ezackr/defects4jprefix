/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:10:12 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveEntry_ESTest extends ZipArchiveEntry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(3);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(3);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(3, int0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0210() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0313() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0314() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0315() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals(0, zipExtraFieldArray0.length);
    }

    @Test(timeout = 4000)
    public void test0316() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0317() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipExtraField[] zipExtraFieldArray0 = zipArchiveEntry0.getExtraFields();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        zipArchiveEntry0.hashCode();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        zipArchiveEntry0.hashCode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0422() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        zipArchiveEntry0.hashCode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0523() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = null;
        try {
            zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0625() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0626() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0627() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0628() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getUnparseableExtraFieldData();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0729() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0730() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0731() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0732() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0733() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getGeneralPurposeBit();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0834() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform(3);
        zipArchiveEntry0.setName("org.apache.commons.compreus.archivers.zFp.ZipUtil", (byte[]) null);
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        ZipArchiveEntry zipArchiveEntry2 = null;
        try {
            zipArchiveEntry2 = new ZipArchiveEntry(zipArchiveEntry1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test1036() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1037() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1038() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1040() throws Throwable {
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException");
        assertEquals(0L, zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1145() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1246() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1247() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1248() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1249() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1250() throws Throwable {
        MockFile mockFile0 = new MockFile("/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1351() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(1270);
        assertEquals(1270, zipArchiveEntry0.getUnixMode());
    }

    @Test(timeout = 4000)
    public void test1452() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("k:/");
        zipArchiveEntry0.setUnixMode(3);
        assertEquals(3, zipArchiveEntry0.getUnixMode());
    }

    @Test(timeout = 4000)
    public void test1553() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1554() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1555() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1556() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1557() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1558() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1659() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        byteArray0[3] = (byte) 75;
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test1660() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[5];
        byteArray0[3] = (byte) 75;
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1761() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addAsFirstExtraField(unparseableExtraFieldData0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1862() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test1864() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1865() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExtraFields();
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1966() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addExtraField(unparseableExtraFieldData0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2067() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test2068() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry1.setCentralDirectoryExtra(byteArray0);
        assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test2169() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test2170() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2171() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2172() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test2173() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2174() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        zipArchiveEntry0.addAsFirstExtraField(unicodePathExtraField0);
        unicodePathExtraField0.setNameCRC32((byte) 8);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2275() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test2276() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry1.addAsFirstExtraField(jarMarker0);
        assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2377() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        ZipShort zipShort0 = Zip64ExtendedInformationExtraField.HEADER_ID;
        // Undeclared exception!
        try {
            zipArchiveEntry1.removeExtraField(zipShort0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2478() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeExtraField((ZipShort) null);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2579() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2580() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test2581() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2582() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
        ZipShort zipShort0 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2683() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) (-1);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2684() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) (-1);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2685() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) (-1);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2686() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) (-1);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.removeUnparseableExtraFieldData();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test2787() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeUnparseableExtraFieldData();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2888() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = UnicodeCommentExtraField.UCOM_ID;
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2889() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = UnicodeCommentExtraField.UCOM_ID;
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test2890() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = UnicodeCommentExtraField.UCOM_ID;
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2891() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = UnicodeCommentExtraField.UCOM_ID;
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2892() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = UnicodeCommentExtraField.UCOM_ID;
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2993() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test2994() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2995() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test2996() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2997() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2998() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName((String) null);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3099() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("n98@oFk_`e");
        // Undeclared exception!
        try {
            zipArchiveEntry0.setSize((-1041L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // invalid entry size
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test31100() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31101() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test31102() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test31103() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31104() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test32105() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("yI#MC<HxP56R:4wJ");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("yI#MC<HxP56R:4wJ", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test32106() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("yI#MC<HxP56R:4wJ");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("yI#MC<HxP56R:4wJ", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test32107() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("yI#MC<HxP56R:4wJ");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("yI#MC<HxP56R:4wJ", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test32108() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("yI#MC<HxP56R:4wJ");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("yI#MC<HxP56R:4wJ", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test32109() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("yI#MC<HxP56R:4wJ");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setName("yI#MC<HxP56R:4wJ", byteArray0);
        zipArchiveEntry0.getRawName();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test33110() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test33111() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test33112() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test34113() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test34114() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test34115() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test34116() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test34117() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test34118() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test35119() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test35120() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test35121() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35122() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test35123() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test35124() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test36125() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test36126() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test36127() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test36128() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test36129() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test36130() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[3];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("invalid entry size", byteArray0);
        boolean boolean0 = zipArchiveEntry0.equals(unicodePathExtraField0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test37131() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test37132() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test37133() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test37134() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test37135() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test37136() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("bBncx;;zQF(v");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test38137() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("r 5'1}%%v");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test38138() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("r 5'1}%%v");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test38139() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("r 5'1}%%v");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test38140() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("r 5'1}%%v");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test38141() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("r 5'1}%%v");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test39142() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test39143() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setComment(" - ");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test39144() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setComment(" - ");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test40145() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test40146() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1L), zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test40147() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test40148() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test40149() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test40150() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("613C8>P~l2v!;");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test41151() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test41152() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setTime(3);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42153() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setInternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test42154() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setInternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test43155() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setUnixMode(3);
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(3, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test44156() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setExternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test44157() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setExternalAttributes(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test45158() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setMethod(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(3, zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test45159() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setMethod(3);
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46160() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.setSize(0);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test46161() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.setSize(0);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry1.getSize());
    }

    @Test(timeout = 4000)
    public void test47162() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test47163() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setCrc(0);
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test48164() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test48165() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        zipArchiveEntry1.setCompressedSize(3);
        zipArchiveEntry1.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test49166() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        assertTrue(zipArchiveEntry1.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test49167() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry1.addExtraField(asiExtraField0);
        zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }
}
