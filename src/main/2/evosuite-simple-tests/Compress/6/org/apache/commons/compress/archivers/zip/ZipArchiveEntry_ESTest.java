/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:53:30 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveEntry_ESTest extends ZipArchiveEntry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = null;
        try {
            zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getLastModifiedDate();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getCentralDirectoryExtra();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getCentralDirectoryExtra();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getCentralDirectoryExtra();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getCentralDirectoryExtra();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.hashCode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.hashCode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.hashCode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        ZipArchiveEntry zipArchiveEntry2 = null;
        try {
            zipArchiveEntry2 = new ZipArchiveEntry(zipArchiveEntry1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // ZIP compression method can not be negative: -1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test0517() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0619() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0620() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setPlatform(0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setPlatform(0);
        assertEquals(0L, zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0723() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        int int0 = zipArchiveEntry0.getPlatform();
        assertEquals(0L, zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        int int0 = zipArchiveEntry0.getPlatform();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        int int0 = zipArchiveEntry0.getPlatform();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        int int0 = zipArchiveEntry0.getPlatform();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0727() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        int int0 = zipArchiveEntry0.getPlatform();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0828() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0933() throws Throwable {
        MockFile mockFile0 = new MockFile("", "/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1L), zipArchiveEntry0.getSize());
    }

    @Test(timeout = 4000)
    public void test0934() throws Throwable {
        MockFile mockFile0 = new MockFile("", "/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        MockFile mockFile0 = new MockFile("", "/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test0936() throws Throwable {
        MockFile mockFile0 = new MockFile("", "/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test0937() throws Throwable {
        MockFile mockFile0 = new MockFile("", "/");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1038() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setMethod(0);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals(0, zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        MockFile mockFile0 = new MockFile("", "JarMarker doesn't expect any data");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "JarMarker doesn't expect any data");
        zipArchiveEntry0.setMethod(0);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1140() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1143() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1144() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1245() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(8);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertEquals(8, zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1246() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(8);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1347() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(150);
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1448() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("/");
        zipArchiveEntry0.setUnixMode(378);
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1549() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(1569);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(3, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1550() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(1569);
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(1569, int0);
    }

    @Test(timeout = 4000)
    public void test1651() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1652() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1653() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1654() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1655() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        int int0 = zipArchiveEntry0.getUnixMode();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1756() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byte[] byteArray1 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray1);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1757() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byte[] byteArray1 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray1);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1758() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byte[] byteArray1 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray1);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1759() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byte[] byteArray1 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray1);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1860() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        JarMarker jarMarker0 = new JarMarker();
        zipArchiveEntry0.addExtraField(jarMarker0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test1861() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        JarMarker jarMarker0 = new JarMarker();
        zipArchiveEntry0.addExtraField(jarMarker0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test1862() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        JarMarker jarMarker0 = new JarMarker();
        zipArchiveEntry0.addExtraField(jarMarker0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1863() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        JarMarker jarMarker0 = new JarMarker();
        zipArchiveEntry0.addExtraField(jarMarker0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test1964() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
        // Undeclared exception!
        try {
            zipArchiveEntry0.addAsFirstExtraField(unicodeCommentExtraField0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
        }
    }

    @Test(timeout = 4000)
    public void test2065() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2066() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2067() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addAsFirstExtraField(jarMarker0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2168() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort((byte) 4);
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeExtraField(zipShort0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2269() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipShort zipShort0 = new ZipShort(4);
        // Undeclared exception!
        try {
            zipArchiveEntry0.removeExtraField(zipShort0);
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test2370() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 4;
        zipArchiveEntry0.setExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort((byte) 4);
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2371() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 4;
        zipArchiveEntry0.setExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort((byte) 4);
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2372() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) 4;
        zipArchiveEntry0.setExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort((byte) 4);
        zipArchiveEntry0.removeExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2473() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getHeaderId();
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2474() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getHeaderId();
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2475() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getHeaderId();
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2476() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getHeaderId();
        zipArchiveEntry0.getExtraField(zipShort0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2577() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2578() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2579() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test2580() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2581() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertNotNull(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2582() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2683() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2684() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test2685() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2686() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getLocalFileDataExtra();
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2787() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test2788() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2789() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2890() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[7];
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2991() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2992() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2993() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2994() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test2995() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test3096() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3097() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test3098() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test3099() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test30100() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31101() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test31102() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31103() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test31104() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test31105() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test32106() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals("/");
        assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test32107() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals("/");
        assertEquals(0, zipArchiveEntry0.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test32108() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals("/");
        assertEquals((-1), zipArchiveEntry0.getMethod());
    }

    @Test(timeout = 4000)
    public void test32109() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals("/");
        assertEquals(0, zipArchiveEntry0.getPlatform());
    }

    @Test(timeout = 4000)
    public void test32110() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals("/");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test33111() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test33112() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test33113() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test33114() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }

    @Test(timeout = 4000)
    public void test33115() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test33116() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test34117() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Object object0 = zipArchiveEntry0.clone();
        zipArchiveEntry0.setName("hRl");
        boolean boolean0 = object0.equals(zipArchiveEntry0);
        assertFalse(object0.equals((Object) zipArchiveEntry0));
    }

    @Test(timeout = 4000)
    public void test34118() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        Object object0 = zipArchiveEntry0.clone();
        zipArchiveEntry0.setName("hRl");
        boolean boolean0 = object0.equals(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35119() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
    }

    @Test(timeout = 4000)
    public void test35120() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals((-1), zipArchiveEntry1.getMethod());
    }

    @Test(timeout = 4000)
    public void test35121() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getPlatform());
    }

    @Test(timeout = 4000)
    public void test35122() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test35123() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setName("D.#{JavKs!AIJv(cv");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        assertEquals(0, zipArchiveEntry1.getInternalAttributes());
    }
}
