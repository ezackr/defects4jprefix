/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:35:46 GMT 2024
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[34];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        assertEquals(4, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        ArchiveEntry archiveEntry0 = zipArchiveInputStream0.getNextEntry();
        assertNull(archiveEntry0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry((String) null, "@|2i5(5s.wA*iZU#");
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(dumpArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        try {
            zipArchiveInputStream0.read();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // The stream is closed
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.close();
        assertEquals(0, zipArchiveInputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        // Undeclared exception!
        try {
            zipArchiveInputStream0.skip((-1845L));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        long long0 = zipArchiveInputStream0.skip(29L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        long long0 = zipArchiveInputStream0.skip(0L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        long long0 = zipArchiveInputStream0.skip(8192L);
        assertEquals(0L, long0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        byte[] byteArray0 = new byte[9];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 90);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[2];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) (-103));
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 80;
        // Undeclared exception!
        try {
            ZipArchiveInputStream.matches(byteArray0, (byte) 80);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        assertEquals(2, zipArchiveInputStream0.getCount());
    }
}
