/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 13:18:49 GMT 2024
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 500);
        int int0 = tarArchiveOutputStream0.getCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        int int0 = tarArchiveOutputStream0.getRecordSize();
        assertEquals(512, int0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, 1, "p");
        assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, "BZLIB");
        assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.flush();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.FilterOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        try {
            tarArchiveOutputStream0.finish();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archive has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        File file0 = MockFile.createTempFile("^[f<j$Ky", "^[f<j$Ky");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        try {
            tarArchiveOutputStream0.close();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // This archives contains unclosed entries.
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        tarArchiveOutputStream0.close();
        assertEquals(10240, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
        try {
            tarArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField");
        File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", "/Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // file name 'Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField0/Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField' is too long ( > 100 bytes)
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setLongFileMode(2);
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", "0entral directfry zip64 extended in|ormat>on extra fild'slength doesn'tmatch central directory data.  ExpecteV (ength ");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setLongFileMode(1);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("0entral directfry zip64 extended in|ormat>on extra fild'slength doesn'tmatch central directory data.  ExpecteV (ength ");
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(0, tarArchiveEntry0.getDevMajor());
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setBigNumberMode(1);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders("Zip64 extended information must contain both size values in the lo al file header.", hashMap0);
        assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream0.setLongFileMode(3);
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField");
        File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", "/Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("BvEywlg,", (byte) 49);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) 50);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(0, tarArchiveOutputStream0.getCount());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        tarArchiveOutputStream0.writePaxHeaders("\u0000", hashMap0);
        assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // No current entry to close
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("VeDLfZ");
        tarArchiveEntry0.setSize(939L);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        try {
            tarArchiveOutputStream0.closeArchiveEntry();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // entry 'VeDLfZ' closed at '0' before the '939' bytes specified in the header were written
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        try {
            tarArchiveOutputStream0.writePaxHeaders("", map0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setLongFileMode(2);
        MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField", "0entral directfry zip64 extended in|ormat>on extra fild'slength doesn'tmatch central directory data.  ExpecteV (ength ");
        File file0 = MockFile.createTempFile("&XZ&A8CuEoaZ6X", "/Users/elliottzackrone/IdeaProjects/defects4jprefix/org.apache.commons.compress.archivers.zip.Fip64ExtendedInformationExtraField/0entral directfry zip64 extended in|ormat>on extra fild'slength doesn'tmatch central directory data.  ExpecteV (ength ", (File) mockFile0);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertFalse(tarArchiveEntry0.isDirectory());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        Map<String, String> map0 = ZoneId.SHORT_IDS;
        tarArchiveOutputStream0.writePaxHeaders("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", map0);
        assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        MockFile mockFile0 = new MockFile("nV", "nV");
        ArchiveEntry archiveEntry0 = tarArchiveOutputStream0.createArchiveEntry(mockFile0, "nV");
        assertEquals("nV", archiveEntry0.getName());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
        tarArchiveOutputStream0.close();
        MockFile mockFile0 = new MockFile(" ust be at least 2", " ust be at least 2");
        try {
            tarArchiveOutputStream0.createArchiveEntry(mockFile0, " ust be at least 2");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Stream has already been finished
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setBigNumberMode(2);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("8cBunWIde(#dY.");
        tarArchiveEntry0.setUserId((-2095));
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        tarArchiveOutputStream0.setBigNumberMode(2);
        System.setCurrentTimeMillis(71776119061217280L);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField");
        // Undeclared exception!
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        System.setCurrentTimeMillis((-5252L));
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.writePaxHeaders("", hashMap0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // last modification time '-5' is too big ( > 8589934591 )
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("l4njCpB/M6M.eUX#", true);
        tarArchiveEntry0.setDevMinor(2147418943);
        // Undeclared exception!
        try {
            tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // minor device number '2147418943' is too big ( > 2097151 )
            //
            verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
        }
    }
}
