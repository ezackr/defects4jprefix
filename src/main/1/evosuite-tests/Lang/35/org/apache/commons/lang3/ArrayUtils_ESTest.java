/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:03:39 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-783), '&');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -783, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 735);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 94.0, 5, 551.91);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-3328);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1516.4349, 459, 1516.4349);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'a');
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)939, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-806);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-562), 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1849L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[1] = objectArray0[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[6];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-6108), 0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 48);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, 57);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 2);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2851, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)64);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 5);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 106, 3);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toArray((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1116);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1116));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) arrayUtils0.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, 2723L);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2519.472655);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'X');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)98);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 3);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.remove(intArray0, 2);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 3);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)64;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)64);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) '=');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-672);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-672));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 64);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-98.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-98.0F));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 938.37784;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 938.37784, 1811, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R', (int) (byte)5);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '~');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '4';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)82);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isEquals("java.awt.graphicsenv", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2997;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2997);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (-2811);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2811));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 58;
      int int0 = ArrayUtils.indexOf(intArray0, 58, (-2996));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1990);
      int int0 = ArrayUtils.indexOf(intArray0, (-1990));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 435.264886227;
      int int0 = ArrayUtils.indexOf(doubleArray0, 435.264886227, (int) (byte)0, (double) (byte)0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 1235.3909518515, 26.20243310753);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (byte)109;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)109);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'U';
      int int0 = ArrayUtils.indexOf(charArray0, 'U', (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      int int0 = ArrayUtils.indexOf(charArray0, 'y');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)5;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, 0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (-1.0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.add(charArray0, (int) (byte)0, ')');
      assertArrayEquals(new char[] {')', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[8];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, (-246));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -246, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 415);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 415, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)2847, (short)2847);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2847, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (int) (short)224, 36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 224, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)49, (byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2286);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1903));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1881);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short) (-1697));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 48, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)2, (-1867));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = (float) (byte)19;
      int int0 = ArrayUtils.indexOf(floatArray0, 19.0F, (int) (byte)0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.indexOf(floatArray0, 19.0F, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[1] = 2250.7;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 938.37784, 1811, 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1753.527353), 2, (-674.23487837027));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 435.264886227, 2168);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 155.64351735, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)82);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)26, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-3328));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-109), (int) (byte)68);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.indexOf(charArray0, '2', 17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, ' ', 2145847248);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1960, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (-931));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)37, (int) (short)539);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.indexOf(intArray0, 58, (-2996));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, 2735, 53);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, (-1127L), 2145847248);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (-1), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 58);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 548);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[4] = objectArray0[2];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4], 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4], 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = new Integer((-2141337091));
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer0, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[4];
      String string0 = ArrayUtils.toString((Object) intArray0[1], "', is neither of type Map.Entry nor an Array");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.indexOf(charArray0, 'y');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -77, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, (-3L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)2);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2811));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.remove(stringArray0, 1);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (byte)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 118.04661);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = 'A';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'A');
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 58, 1233L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1286);
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 8, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, 0, (Object) integer0);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String[] stringArray0 = ArrayUtils.add(arrayUtils0.EMPTY_STRING_ARRAY, "Array element ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(10, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(16, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) doubleArray0, (Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1852.25F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short[] shortArray0 = new short[7];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = (Boolean) true;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((float) 0);
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-1.0F));
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[1];
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Double[] doubleArray0 = new Double[12];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2552.4325229722544);
      assertEquals(12, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 26.20243310753);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 457.141);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) (-1.0);
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)120);
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)66);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)5);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-34));
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = Short.decode("6");
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) short0);
      assertArrayEquals(new short[] {(short)6, (short)6}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)26214);
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)26214, (short)26214, (short)26214, (short)26214}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-392));
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-392), 1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-851));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int[] intArray0 = new int[8];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2360L));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 2465L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(375L);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {375L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1L);
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('`');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '&');
      assertArrayEquals(new char[] {'`', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'a');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'G';
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-3397));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 118);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1903));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = (float) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1152.65F), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-943));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.indexOf(floatArray0, 3301.3457F, (-3067));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (short)2168;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2168.0, (double) 4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)26214, 939.37784);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 852.772538765;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.772538765);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 2269.0511557721948;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-32.706932), (int) (short)1, 1310.6);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 554.94136, (-3084), (double) (byte) (-49));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0.0F, (int) (byte)0, (-1476.73027527364));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 48);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-330.81F), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1178.3237168008875), (-1717986918));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 3282);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 603.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-875), 1.5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.5, (-370), 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-449));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)4;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)19;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)19);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (-1768));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-3328));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)33, (-650));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = ']';
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '7', 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'I', 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '!', 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      int int0 = ArrayUtils.indexOf(charArray0, '>', (int) (short) (-2181));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'T');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-26);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-26));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-64));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2168;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2168, 13);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (-648));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1697));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 57;
      boolean boolean0 = ArrayUtils.contains(intArray0, 57);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1408));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-562);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-562), 11);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 5, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-4227), 69);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, 0, (-1596));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 18, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-221L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-221L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1894L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1894L), Integer.MAX_VALUE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 317L, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1L, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[5] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1073741824));
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      char[] charArray0 = new char[6];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      
      Integer integer0 = new Integer(55);
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) integer0, 647);
      assertEquals(6, characterArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) 'i';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], (int) 'U');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object) arrayUtils0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "org.apache.commons.lang3.ArrayUtils", Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "gp^{:T6UR^jb1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = objectArray0[1];
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = objectArray0[0];
      objectArray0[6] = objectArray0[0];
      objectArray0[7] = objectArray0[1];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-348));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType("Array element ", object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, "jzYHQb-AJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = booleanArray0[0];
      booleanArray0[3] = booleanArray0[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[3];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertEquals(16, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertEquals(12, charArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[8];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1479, 1479);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 1);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-265), (-1));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, Integer.MAX_VALUE);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)0, 2);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3311), (-3311));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 58, 58);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 57, 4);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 520);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)58, (int) (byte)102);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-82), (int) (byte) (-1));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 0, 0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-4227), (-2146065914));
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-3067), 2145847248);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2211), 836);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-648), (int) (short)0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-608), (-608));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1578), 3);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1092, 1092);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1190, 0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 57, 204);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-386), (int) (byte) (-80));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-110), 414);
      assertEquals(1, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 0);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) floatArray1, (-1), (-1));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0L);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) "org.apache.commons.lang3.ArrayUtils");
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, object0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "java.lang.Object");
      assertEquals("java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)82;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)82);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-4227), 'a');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4227, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2023));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2023, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-1420.8574896);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1420.8574896));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2203, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2203, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1380L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, 0, (short) (-1447));
      assertArrayEquals(new short[] {(short) (-1447)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1.0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 1, (byte) (-113));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (int) (byte)98);
      assertArrayEquals(new int[] {98, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 4064, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4064, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)19);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "java.lang.String");
      assertEquals("java.lang.String", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, objectArray0[0]);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[7] = (short)64;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)120);
      byteArray0[0] = byte0;
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) byteArray0[0]);
      assertArrayEquals(new int[] {120}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (long) 0);
      long[] longArray2 = ArrayUtils.add(longArray1, (-1L));
      assertArrayEquals(new long[] {0L, (-1L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.add(charArray0, '^');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '^'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-672));
      assertEquals((-1), int0);
  }
}
