/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:42:21 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("`711./t<5S");
      Document document1 = document0.clone();
      document1.setParentNode(document0);
      Element element0 = document1.addClass("mZJ!:+~\"y|k\"vv");
      Element element1 = element0.text("`711./t<5S");
      Element element2 = element1.prepend("org.jsoup.nodes.Document$QuirksMode");
      element1.siblingIndex = 600;
      Elements elements0 = element2.getElementsContainingText("#,7n8{Oq");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("K>(-qM(Mw1J9j");
      Element element0 = document0.appendElement("publ");
      Element element1 = document0.clone();
      element0.after((Node) element1);
      assertEquals(2, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("!M%\"icZur");
      document0.prependChild(document0);
      List<Node> list0 = document0.siblingNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("^n44$sv");
      Element element0 = document0.appendElement("^n44$sv");
      document0.removeChild(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.indent(stringBuilder0, 0, document_OutputSettings0);
      assertEquals("\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      Node[] nodeArray0 = new Node[0];
      comment0.addChildren(nodeArray0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("YM\"%^ftzn$'j?>|VI@");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(0, nodeArray0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("wS -");
      document0.setSiblingIndex((-2065));
      assertEquals((-2065), document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("TPE*=");
      document0.setBaseUri("TPE*=");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("5f9}");
      Element element0 = document0.appendElement("5f9}");
      element0.remove();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      String string0 = xmlDeclaration0.toString();
      assertEquals("<?>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("iQ[D=n&^*_N,]XwD[Z0");
      Node node0 = document0.removeAttr("yWHRhjXTKtYoV");
      assertEquals("#document", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("Pfr");
      document0.siblingIndex = (-2406);
      Document document1 = document0.ownerDocument();
      assertEquals((-2406), document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("iQ[D=n&^*_N,]XwD[Z0");
      String string0 = document0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("?", "?");
      String string0 = textNode0.nodeName();
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?");
      Element element0 = new Element(tag0, "?");
      Document document0 = new Document("CommentEndDash");
      boolean boolean0 = element0.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("`711./t<5S");
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("abs:succapprox");
      TextNode textNode0 = new TextNode((String) null, "#tex");
      document0.prependChild(textNode0);
      textNode0.before((Node) document0);
      assertEquals(1, textNode0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("(.s>");
      String string0 = document0.baseUri();
      assertEquals("(.s>", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode("9.3YfzTtz=e", "9.3YfzTtz=e");
      // Undeclared exception!
      try { 
        textNode0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("nvdash");
      DocumentType documentType0 = new DocumentType("nvdash", "_e+\"7r~{()clj!&K'2", "", "");
      documentType0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.removeChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.previousSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("?", "?");
      // Undeclared exception!
      try { 
        textNode0.outerHtml((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("succapprox", "?");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1919);
      // Undeclared exception!
      textNode0.indent(stringBuilder0, 894, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(";p%NHpo40W+k;$J4L");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.indent((StringBuilder) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.childNode(677);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 677, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("gv.`hUM_V?f9", "*J,?T^9a");
      // Undeclared exception!
      try { 
        textNode0.attr("", "org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("TPE*=");
      // Undeclared exception!
      try { 
        document0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?");
      Element element0 = new Element(tag0, "varepsilon");
      DataNode dataNode0 = DataNode.createFromEncoded("?", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      element0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        element0.after((Node) dataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Fv%#VPEt/2h|qXI,", "Fv%#VPEt/2h|qXI,");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.addChildren(2361, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2361, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      // Undeclared exception!
      try { 
        comment0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode("rightleftharpoons", "\n<!---->");
      textNode0.absUrl("#text");
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("");
      Node node0 = document0.nextSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("(Ou]rYY'S");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("gv.`hUM_V?f9", "*J,?T^9a");
      Document document0 = textNode0.ownerDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("prnsim");
      Element element0 = document0.prependElement("AMP");
      Document document1 = element0.ownerDocument();
      assertNotNull(document1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("t#T");
      String string0 = document0.attr("y>0m-0L0K)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("$~BGq1gBP");
      List<Node> list0 = document0.childNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode("^xYza6M*RD\u0005'ET$Qj(", (String) null);
      int int0 = textNode0.siblingIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "\u0006}-BeBAV&OK");
      Document document0 = Document.createShell("nequiv");
      // Undeclared exception!
      try { 
        textNode0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      element0.outerHtml();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("nRWVc_ysz", "nRWVc_ysz");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "nRWVc_ysz");
      textNode0.outerHtml(stringBuilder0);
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DataNode dataNode0 = new DataNode("LA|OV1$Kj>Z]1 OWk^", "");
      Node node0 = dataNode0.clone();
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, dataNode0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
      Node node0 = xmlDeclaration0.parent();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("{T#");
      // Undeclared exception!
      try { 
        document0.childNode((-1522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("uIL&1\"");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      Node node0 = comment0.attr("7f0y", "7f0y");
      assertSame(comment0, node0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document(" wd$D");
      boolean boolean0 = document0.hasAttr(",{J=fV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("abs:succapprox");
      TextNode textNode0 = new TextNode((String) null, "#tex");
      // Undeclared exception!
      try { 
        textNode0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Comment comment0 = new Comment("}uTFEjqb/", "}uTFEjqb/");
      // Undeclared exception!
      try { 
        comment0.before(":IeT9%M.4T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      TextNode textNode0 = new TextNode("rightleftharpoons", "\n<!---->");
      Node node0 = textNode0.doClone(comment0);
      node0.hashCode();
      assertNotSame(node0, textNode0);
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document(">5~");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      TextNode textNode0 = new TextNode("rightleftharpoons", "\n<!---->");
      Node node0 = textNode0.doClone(comment0);
      // Undeclared exception!
      try { 
        node0.replaceWith(comment0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("lbrace");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("!M%\"icZur");
      document0.prependChild(document0);
      Element element0 = document0.wrap("!M%\"icZur");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextNode textNode0 = new TextNode("rightleftharpoons", "\n<!---->");
      // Undeclared exception!
      try { 
        textNode0.wrap("_hve%K.B_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("!M%\"icZur");
      document0.prependChild(document0);
      document0.after("!M%\"icZur");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DataNode dataNode0 = new DataNode("[[*=A,X", "7");
      String string0 = dataNode0.absUrl("[[*=A,X");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("abs:", "org.jsoup.nodes.Node");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("lbrace");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      Element element1 = document0.clone();
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("!M%\"icZur");
      // Undeclared exception!
      try { 
        document0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      TextNode textNode0 = new TextNode("rightleftharpoons", "\n<!---->");
      // Undeclared exception!
      try { 
        textNode0.replaceWith(comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("c?E1wKu0iW&P");
      // Undeclared exception!
      try { 
        document0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Fv%#VPEt/2h|qXI,", "Fv%#VPEt/2h|qXI,");
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("!M%\"icZur");
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      // Undeclared exception!
      try { 
        comment0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("Rnu{");
      // Undeclared exception!
      try { 
        document0.setBaseUri((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
