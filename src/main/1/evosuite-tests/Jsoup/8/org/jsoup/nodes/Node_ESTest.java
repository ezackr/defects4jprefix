/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:33:11 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("rBarr");
      assertEquals("rBarr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(document0);
      assertEquals("rBarr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, (int)document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("rBarr", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      document0.setParentNode(element0);
      assertEquals("rBarr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, (int)document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#document", element0.nodeName());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("rBarr", element0.baseUri());
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      Node node0 = document0.nextSibling();
      assertEquals("rBarr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, (int)document0.siblingIndex());
      assertNull(node0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("N&|u[bpkZ");
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("N&|u[bpkZ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertNotNull(element0);
      
      List<Node> list0 = element0.siblingNodes();
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("N&|u[bpkZ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("8zU*Kc~T=+w?P");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("8zU*Kc~T=+w?P", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      StringBuilder stringBuilder0 = new StringBuilder(3545);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("8zU*Kc~T=+w?P", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      document0.indent(stringBuilder0, 489, document_OutputSettings0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("8zU*Kc~T=+w?P", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", stringBuilder0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      assertEquals("", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) comment0;
      nodeArray0[5] = (Node) comment0;
      nodeArray0[6] = (Node) comment0;
      nodeArray0[7] = (Node) comment0;
      nodeArray0[8] = (Node) comment0;
      comment0.addChildren(0, nodeArray0);
      assertEquals("", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals(9, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("TJ:W218n)\"6lVnq)#*");
      assertFalse(document0.isBlock());
      assertEquals("TJ:W218n)\"6lVnq)#*", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("icl");
      assertFalse(document0.isBlock());
      assertEquals("TJ:W218n)\"6lVnq)#*", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ:W218n)\"6lVnq)#*", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      element0.remove();
      assertFalse(document0.isBlock());
      assertEquals("TJ:W218n)\"6lVnq)#*", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ:W218n)\"6lVnq)#*", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("/R&[^jW@`Wl");
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.toString();
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(8, nodeArray0.length);
      
      Element element0 = document0.prependText("UnderBar");
      assertEquals("#document", document0.nodeName());
      assertEquals(1, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("#document", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      Integer integer0 = element0.siblingIndex();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, (int)element0.siblingIndex());
      assertEquals("#document", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertSame(document0, element0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("N&|u[bpkZ");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("N&|u[bpkZ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = (Element)element0.parent();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("N&|u[bpkZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("N&|u[bpkZ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("N&|u[bpkZ", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("I");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("I", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.outerHtml();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("I", document0.baseUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Gcy", "Gcy");
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Gcy", textNode0.baseUri());
      assertNotNull(textNode0);
      
      String string0 = textNode0.nodeName();
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Gcy", textNode0.baseUri());
      assertEquals("#text", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      boolean boolean0 = document0.equals(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("qT");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("qT", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("qT", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.empty();
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(nodeArray0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("<6!e,t$\u0000GcZ", "~jSq;6d4g");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("~jSq;6d4g", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      String string0 = dataNode0.baseUri();
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("~jSq;6d4g", dataNode0.baseUri());
      assertEquals("~jSq;6d4g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertFalse(tag0.isData());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "body", attributes0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("body", element0.baseUri());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.setBaseUri((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("whqm");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("whqm", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("vUjUzgB5");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("vUjUzgB5", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.removeAttr("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("F<x,^$");
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("F<x,^$", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.previousSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("vartheta", "vartheta", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("vartheta", xmlDeclaration0.baseUri());
      assertNotNull(xmlDeclaration0);
      
      // Undeclared exception!
      try { 
        xmlDeclaration0.indent((StringBuilder) null, 4, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node");
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.childNode((-1264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("abs:(g9mz.4]5x3iiv06w96", "abs:(g9mz.4]5x3iiv06w96", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertEquals("abs:(g9mz.4]5x3iiv06w96", xmlDeclaration0.baseUri());
      assertNotNull(xmlDeclaration0);
      
      // Undeclared exception!
      try { 
        xmlDeclaration0.attr((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(":K");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":K", document0.baseUri());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      List<Node> list0 = document0.childNodes();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":K", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      nodeArray0[1].childNodes = list0;
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(":K", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(nodeArray0[1].childNodes.isEmpty());
      assertEquals(0, nodeArray0[1].childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[4].setParentNode(nodeArray0[4]);
      assertEquals(8, nodeArray0.length);
      
      // Undeclared exception!
      try { 
        document0.addChildren(nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = new TextNode("L[*a%+vs;|b8", "L[*a%+vs;|b8");
      assertEquals("#text", textNode0.nodeName());
      assertEquals("L[*a%+vs;|b8", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.addChildren((-188012567), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("topf", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        textNode0.addChildren((-2160), (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("dhzo+]NkSOLI6", "or", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("or", xmlDeclaration0.baseUri());
      assertEquals(0, (int)xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      TextNode textNode0 = TextNode.createFromEncoded("or", "[N/+VsEhp>Y9)`%Q");
      assertEquals("[N/+VsEhp>Y9)`%Q", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        xmlDeclaration0.addChildren(32768, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32768, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.setSiblingIndex((-757));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals((-757), (int)document0.siblingIndex());
      assertEquals((-757), (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals((-757), (int)document0.siblingIndex());
      assertEquals((-757), (int)document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals((-757), (int)document1.parentNode.siblingIndex());
      assertEquals("", document1.parentNode.baseUri());
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = document1.parentNode;
      nodeArray0[4] = document1.parentNode;
      // Undeclared exception!
      try { 
        document1.parentNode.addChildren((-757), nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("Nc");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Nc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode("HBG<_5^tk'^*e'S'9", "p");
      assertEquals("p", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string0 = textNode0.absUrl("o0p`!2HQ]lZ?5+IBxk");
      assertEquals("p", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      textNode0.hashCode();
      assertEquals("p", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataNode dataNode0 = new DataNode("wkA^K6+6F=ez-JsEx", "?YNP2 ");
      assertEquals("?YNP2", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Node node0 = dataNode0.nextSibling();
      assertEquals("?YNP2", dataNode0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("':$]p'");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("':$]p'", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.child(0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("':$]p'", document0.baseUri());
      assertEquals("':$]p'", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("':$]p'", document0.baseUri());
      assertEquals("':$]p'", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("':$]p'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, (int)document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataNode dataNode0 = new DataNode("e]g#n6OYM|$wDE", "<>WEwfsF,KM=V;xm");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("<>WEwfsF,KM=V;xm", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      Document document0 = dataNode0.ownerDocument();
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("<>WEwfsF,KM=V;xm", dataNode0.baseUri());
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("))W");
      assertEquals("))W", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertEquals("))W", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("))W", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("))W");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("))W", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.absUrl(",xte{(ib:\"DA");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("))W", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("6:~ui3O|e\"s>;cq");
      assertEquals("#document", document0.nodeName());
      assertEquals("6:~ui3O|e\"s>;cq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.attr("6:~ui3O|e\"s>;cq");
      assertEquals("#document", document0.nodeName());
      assertEquals("6:~ui3O|e\"s>;cq", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("\n");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.attr("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comment comment0 = new Comment("h$0[~>RQv}cn4&@*", "html");
      assertEquals("html", comment0.baseUri());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Integer integer0 = comment0.siblingIndex();
      assertEquals("html", comment0.baseUri());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.outerHtml();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("\n<head></head>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comment comment0 = new Comment("&/\"$^@+=ai|umu0#", ".yZvVV");
      assertEquals(".yZvVV", comment0.baseUri());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        comment0.outerHtml((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("]");
      assertEquals("]", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeAttr("]");
      assertEquals("]", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataNode dataNode0 = new DataNode("wkA^K6+6F=ez-JsEx", "?YNP2 ");
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("?YNP2", dataNode0.baseUri());
      assertNotNull(dataNode0);
      
      Node node0 = dataNode0.parent();
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("?YNP2", dataNode0.baseUri());
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("#_fstZ");
      assertEquals("#_fstZ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.childNode(763);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 763, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comment comment0 = new Comment("", "\"");
      assertEquals("\"", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertNotNull(comment0);
      
      Attributes attributes0 = comment0.attributes();
      assertEquals("\"", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("3jfH", "@ OyqWxy8");
      assertEquals("@ OyqWxy8", dataNode0.baseUri());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      Node node0 = dataNode0.attr("s(t", "3jfH");
      assertEquals("@ OyqWxy8", dataNode0.baseUri());
      assertEquals(0, (int)dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("@ OyqWxy8", node0.baseUri());
      assertEquals("#data", node0.nodeName());
      assertEquals(0, (int)node0.siblingIndex());
      assertNotNull(node0);
      assertSame(dataNode0, node0);
      assertSame(node0, dataNode0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("kd)e\"|B/wHW6");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("kd)e\"|B/wHW6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasAttr("");
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("kd)e\"|B/wHW6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("/R&[^jW@`Wl");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, (int)document1.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("/R&[^jW@`Wl", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextNode textNode0 = new TextNode("HBG<_5^tk'^*e'S'9", "");
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = new Document("@2vg");
      assertEquals("@2vg", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.appendChild(textNode0);
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("@2vg", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("@2vg", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      textNode0.hashCode();
      assertEquals("", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextNode textNode0 = new TextNode("HBG<_5^tk'^*e'S'9", "");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      boolean boolean0 = textNode0.equals("`!R66H]E90u[CgnQa");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("", textNode0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextNode textNode0 = new TextNode("HBG<_5^tk'^*e'S'9", "V|>p]|?#is+");
      assertEquals("V|>p]|?#is+", textNode0.baseUri());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Comment comment0 = new Comment("", "7DBE^zJ1dd");
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("7DBE^zJ1dd", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        comment0.removeChild(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("HBG<_5^tk'^*e'S'9", "boxUl");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("boxUl", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell("(g9mZ.4]5x3IIV06W96");
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependChild(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("boxUl", textNode0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", document0.baseUri());
      assertEquals("#document", element0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, element0);
      assertSame(element0, document0);
      
      textNode0.replaceWith(element0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("boxUl", textNode0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", document0.baseUri());
      assertEquals("#document", element0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", element0.baseUri());
      assertEquals(0, (int)element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertSame(document0, element0);
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextNode textNode0 = new TextNode("HBG<_5^tk'^*e'S'9", "");
      assertEquals(0, (int)textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", textNode0.baseUri());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell("6:~ui3O|e\"s>;cq");
      assertEquals("6:~ui3O|e\"s>;cq", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, (int)document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        textNode0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Comment comment0 = new Comment("", "");
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("", comment0.baseUri());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Comment comment0 = new Comment("", "7DBE^zJ1dd");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, (int)comment0.siblingIndex());
      assertEquals("7DBE^zJ1dd", comment0.baseUri());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        comment0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("HBG<_5^tk'^*e'S'9", "boxUl");
      assertEquals("boxUl", textNode0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, (int)textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Document document0 = Document.createShell("(g9mZ.4]5x3IIV06W96");
      assertEquals("#document", document0.nodeName());
      assertEquals("(g9mZ.4]5x3IIV06W96", document0.baseUri());
      assertEquals(0, (int)document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        textNode0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("\n");
      document0.prependText("UnderBar");
      String string0 = document0.outerHtml();
      assertEquals(0, (int)document0.siblingIndex());
      assertEquals("UnderBar", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("a5av85]4~t='");
      Element element0 = document0.attr("<6!e,t$\u0000GcZ", "~jSq;6d4g");
      Elements elements0 = element0.getElementsByAttributeValue("<6!e,t$\u0000GcZ", "a5av85]4~t='");
      assertEquals(0, (int)element0.siblingIndex());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("\n");
      document0.setBaseUri("5$$@@~");
      assertEquals("5$$@@~", document0.baseUri());
  }
}
