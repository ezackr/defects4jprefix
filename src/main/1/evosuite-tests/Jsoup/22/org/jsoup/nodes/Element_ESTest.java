/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:57:33 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = new Document("NlK&=alfR,Eu90~w`");
      document0.outerHtmlTail(stringBuilder0, 10849, document_OutputSettings0);
      assertEquals("</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.normalise();
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("hr");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SPa");
      Element element0 = new Element(tag0, "tcaron");
      Tag tag1 = element0.tag();
      assertFalse(tag1.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QBne%]Q1w/%wI");
      TextNode textNode0 = new TextNode("QBne%]Q1w/%wI", "org.jsoup.nodes.Element");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "easter", attributes0);
      Element element1 = element0.prependText("QBne%]Q1w/%wI");
      String string0 = element1.ownText();
      assertEquals("QBne%]Q1w/%wI", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("trie");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Pattern pattern0 = Pattern.compile("-MNp3|VL]w<4^Fa");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iukcy");
      Element element0 = new Element(tag0, "iukcy");
      Elements elements0 = element0.getElementsByTag("iukcy");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SPa");
      Element element0 = new Element(tag0, "tcaron");
      Elements elements0 = element0.getElementsByAttributeValueMatching("m(@Tjv9`O/D'X?W*2", "id");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      Elements elements0 = document0.getElementsByAttributeValueContaining("3m", "RightUpDownVector");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("|aZ`V;I`3");
      Element element0 = document0.getElementById("|aZ`V;I`3");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("acJyiG+${/");
      Elements elements0 = document0.children();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("HkC6OCWU");
      Element element0 = document0.appendElement("%>FX");
      Element element1 = element0.before((Node) document0);
      assertEquals("%>fx", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8gl1S!s?i");
      Element element0 = new Element(tag0, "Z^Y`Y1goLE");
      Element element1 = element0.addClass("`!R66H]E90u[CgnQa");
      assertEquals("8gl1s!s?i", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(",\u0000Twq9");
      // Undeclared exception!
      try { 
        document0.text("org.jsoup.nodes.Element");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DEWkIMR");
      Element element0 = new Element(tag0, "DEWkIMR");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("hr");
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8gl1S!s?i");
      Element element0 = new Element(tag0, "Z^Y`Y1goLE");
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("[%s=%s]");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("{P0ES?W,BkbuJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {P0ES?W,BkbuJ
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("+j'&di~O|dH4_/)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("%5VgL$X(0`T=riA");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"tMl%(\"jTc:_pQX^");
      Element element0 = new Element(tag0, "\"tMl%(\"jTc:_pQX^");
      // Undeclared exception!
      try { 
        element0.before("\"tMl%(\"jTc:_pQX^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("imagpart");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("COPY");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("KbT{e>Uq\"Zzv4T*tb");
      Comment comment0 = new Comment("#+/t~.lg\r_d", "ve Or/]@");
      // Undeclared exception!
      try { 
        document0.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, ")QPdA'", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "NotLeftTriangleEqual");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.val("#document");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("\",>tv)7");
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      Element element0 = document0.prependText("DiacriticalAcute");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Element element1 = element0.appendText("uring");
      List<TextNode> list0 = element1.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("KbT{e>Uq\"Zzv4T*tb");
      Elements elements0 = document0.getElementsByAttribute("KbT{e>Uq\"Zzv4T*tb");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.empty();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("G3");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      Elements elements0 = document0.getElementsByTag("mlxp(z");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependElement("ac");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("");
      Set<String> set0 = document0.classNames();
      Element element0 = document0.classNames(set0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.removeClass("");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      String string0 = document0.className();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      Elements elements0 = document0.getElementsContainingOwnText("input");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      Pattern pattern0 = Pattern.compile("#document", (-2900));
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("HkC6OCWU");
      Elements elements0 = document0.getElementsMatchingText("%>FX");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("RightUpDownVector");
      Element element0 = document0.createElement("iLhVU");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueStarting("XfQvW;Fyaqx/i", "xH7\"*fp{k4YO)#");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("+j'&di~O|dH4_/)");
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueNot("tI9", "textarea");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(834);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q|07W5");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "q", attributes0);
      // Undeclared exception!
      try { 
        element0.after("hmE01+LQDQlWRGp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      Set<String> set0 = element0.classNames();
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Element element0 = new Element(tag0, "DBGVp~r^g");
      boolean boolean0 = element0.hasClass("DBGVp~r^g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf("vr}Hm%r0rXZ8h.m7{");
      Element element0 = new Element(tag0, "vr}Hm%r0rXZ8h.m7{");
      // Undeclared exception!
      try { 
        element0.wrap("n[K<x<t(FQREdV%aa$l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("G3");
      Element element0 = document0.prepend("");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("G3");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell("");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
