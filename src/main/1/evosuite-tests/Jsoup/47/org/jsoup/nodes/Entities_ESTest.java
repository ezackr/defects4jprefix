/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:48:18 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2147483645);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape(stringBuilder0, "Children collection to be inserted must not be null.", document_OutputSettings0, true, true, true);
      assertEquals("Children collection to be inserted must not be null.", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Entities.unescape("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Entities.unescape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Character character0 = Entities.getCharacterByName("ShortDownArrow");
      assertEquals('\u2193', (char)character0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Entities.escape("", document_OutputSettings0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.unescape((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.unescape((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.escape((StringBuilder) null, "leftrightarrow", (Document.OutputSettings) null, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.escape("Cedilla", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Entities.isBaseNamedEntity("gt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Map<Character, String> map0 = entities_EscapeMode0.getMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.forName("US-ASCII");
      document_OutputSettings0.charset(charset0);
      String string0 = Entities.escape("US-ASCII", document_OutputSettings0);
      assertEquals("US-ASCII", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ">q<xJw01\"a!9-$C");
      Entities.escape(stringBuilder0, ">q<xJw01\"a!9-$C", document_OutputSettings0, true, false, false);
      assertEquals(">q<xJw01\"a!9-$C>q<xJw01&quot;a!9-$C", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2147483645);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape(stringBuilder0, " />", document_OutputSettings0, true, false, true);
      assertEquals(" />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      String string0 = Entities.escape("\u00A0", document_OutputSettings0);
      assertEquals("&#xa0;", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Entities.escape("\u00A0", document_OutputSettings0);
      assertEquals("&nbsp;", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Entities.escape("gk)9GE2xPi&FtC~", document_OutputSettings0);
      assertEquals("gk)9GE2xPi&amp;FtC~", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2147483645);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape(stringBuilder0, "Children collection to be inserted must not be null.", document_OutputSettings0, false, true, false);
      assertEquals("Children collection to be inserted must not be null.", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2147483645);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape(stringBuilder0, "Children collection to be inserted must not be null.", document_OutputSettings0, false, true, true);
      assertEquals("Children collection to be inserted must not be null.", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Entities.unescape("&gt;", true);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Entities.isBaseNamedEntity((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("vDash");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("8o|:W{sm?j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = Entities.escape(">q<xJw01\"a!9-$C", document_OutputSettings0);
      assertEquals("&gt;q&lt;xJw01\"a!9-$C", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Entities.unescape(">q<xJw01\"a!9-$C");
      assertEquals(">q<xJw01\"a!9-$C", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = Entities.getCharacterByName("8o|:W{sm?j");
      assertNull(character0);
  }
}
