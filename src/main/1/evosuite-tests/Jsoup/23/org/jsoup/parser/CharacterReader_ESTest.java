/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:04:40 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      boolean boolean0 = characterReader0.matchConsume("org.jsoup.parser.CharacterReader");
      assertEquals("", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9dA@8BJ7n");
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`XOq)}7F+cG0u-hTk");
      char[] charArray0 = new char[8];
      charArray0[4] = 'G';
      characterReader0.consumeToAny(charArray0);
      characterReader0.advance();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("0u-hTk", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%z_.%");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      characterReader0.unconsume();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("z_.%", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("a\"Z29w8U}G");
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("RHIuCE}Z(LyN`D_]qV");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeAsString();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("Z(LyN`D_]qV", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q)}7f+c");
      char[] charArray0 = new char[2];
      charArray0[0] = '\uFFFF';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
      assertEquals("q)}7f+c", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`!R66H]E90u[CgnQa");
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matches('_');
      assertEquals("[CgnQa", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("C0TkOSJD,FG$#g-m*`)a.$4!45T8R=>");
      characterReader0.advance();
      characterReader0.consumeDigitSequence();
      assertEquals("TkOSJD,FG$#g-m*`)a.$4!45T8R=>", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q)}7f+c");
      characterReader0.consume();
      characterReader0.consumeAsString();
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals("+c", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("eaE$");
      characterReader0.consumeHexSequence();
      assertEquals("$", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("F8rnT");
      characterReader0.consumeHexSequence();
      assertEquals("rnT", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`XOq)}7F+cG0u-hTk");
      char[] charArray0 = new char[8];
      charArray0[4] = 'G';
      characterReader0.consumeToAny(charArray0);
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals("u-hTk", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%z_.%");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      characterReader0.unconsume();
      characterReader0.consumeLetterSequence();
      assertEquals("_.%", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z6");
      characterReader0.consumeLetterSequence();
      assertEquals("6", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeLetterSequence();
      assertEquals(" must not contain any null objects", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q)}7f+c");
      characterReader0.consumeTo("7f");
      assertEquals("7f+c", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k68jfmDDb\"N+");
      characterReader0.consumeToEnd();
      String string0 = characterReader0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k68jfmDDb\"N+");
      characterReader0.consumeAsString();
      int int0 = characterReader0.pos();
      assertEquals("68jfmDDb\"N+", characterReader0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertEquals("Array must not contain any null objects", characterReader0.toString());
      
      characterReader0.unconsume();
      int int0 = characterReader0.pos();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k68jfmDDb\"N+");
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertEquals("k68jfmDDb\"N+", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      characterReader0.consumeTo("opsGjde");
      boolean boolean0 = characterReader0.matchesIgnoreCase("\n");
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" >>`");
      boolean boolean0 = characterReader0.matches(" >>`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%z_.%");
      boolean boolean0 = characterReader0.matches("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("AjjvqAW3`yf");
      boolean boolean0 = characterReader0.isEmpty();
      assertEquals("AjjvqAW3`yf", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%z_.%");
      characterReader0.consumeAsString();
      characterReader0.consumeAsString();
      characterReader0.unconsume();
      char char0 = characterReader0.current();
      assertEquals("z_.%", characterReader0.toString());
      assertEquals('z', char0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4G");
      char char0 = characterReader0.consume();
      assertEquals("G", characterReader0.toString());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consume();
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("CV-qOcIV1>'8E9%");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[9];
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.matchesAny(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      characterReader0.consumeTo("opsGjde");
      characterReader0.unconsume();
      characterReader0.advance();
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.matches("");
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rC}_al#b@D)_uqc");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.matches('F');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.matchConsume("");
       //  fail("Expecting exception: StringIndexOutOfBoundsException");
       // Unstable assertion
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\r\n?");
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("1");
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(")a.$!45T8R=>");
      characterReader0.consumeToEnd();
      characterReader0.advance();
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      char[] charArray0 = new char[3];
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("94)=-");
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4G");
      characterReader0.consumeTo(",\"mRVJ>J[L1%%");
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      characterReader0.advance();
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.consumeTo('C');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("OJj}O7WvUdg");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      characterReader0.consumeToEnd();
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k68jfmDDb\"N+");
      characterReader0.consumeToEnd();
      characterReader0.consumeAsString();
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.consume();
      // Undeclared exception!
      try { 
        characterReader0.consumeAsString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^2W!WIZ)");
      boolean boolean0 = characterReader0.containsIgnoreCase("^2W!WIZ)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      boolean boolean0 = characterReader0.containsIgnoreCase("org.jsoup.parser.CharacterReader");
      assertFalse(boolean0);
      assertEquals("org.jsoup.parser.CharacterReader", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q)}7f+c");
      boolean boolean0 = characterReader0.containsIgnoreCase("q)}7f+c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("\n");
      assertEquals("", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("q)}7f+c");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("ftrvoSV");
      assertEquals("q)}7f+c", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.p@rser.CharacterReader");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(".jsoup.p@rser.CharacterReader", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("]3:>)Z:K");
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals("]3:>)Z:K", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lh~uut$'/o{");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals("lh~uut$'/o{", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("Array must not contain any null objects", characterReader0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals("\n", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("k68jfmDDb\"N+");
      assertEquals("k68jfmDDb\"N+", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      char[] charArray0 = new char[4];
      charArray0[3] = 'o';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertEquals("org.jsoup.parser.CharacterReader", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[4];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeToEnd();
      characterReader0.unconsume();
      boolean boolean0 = characterReader0.matches('o');
      assertEquals("r", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      boolean boolean0 = characterReader0.matches('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      assertEquals("\n", characterReader0.toString());
      
      characterReader0.advance();
      boolean boolean0 = characterReader0.matches('C');
      assertEquals("", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9dA@8BJ7n");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("9", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("\n", characterReader0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("9dA@8BJ7n");
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("@8BJ7n", characterReader0.toString());
      assertEquals("9dA", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.p@rser.CharacterReader");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeHexSequence();
      assertEquals(".jsoup.p@rser.CharacterReader", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rC}_al#b@D)_uqc");
      characterReader0.consumeLetterSequence();
      boolean boolean0 = characterReader0.matchConsume("rC}_al#b@D)_uqc");
      assertEquals("}_al#b@D)_uqc", characterReader0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("94)=-");
      characterReader0.consumeLetterSequence();
      assertEquals("94)=-", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertEquals("org.jsoup.parser.CharacterReader", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeTo("");
      assertEquals("org.jsoup.parser.CharacterReader", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("]3:>)Z:K");
      characterReader0.consumeTo('K');
      assertEquals("K", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      characterReader0.consumeTo("stZ9RYK_*dt!B:`e8h");
      characterReader0.consumeTo('o');
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%,IF5(");
      assertEquals("%,IF5(", characterReader0.toString());
      
      characterReader0.consumeToEnd();
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      String string0 = characterReader0.consumeTo("opsGjde");
      assertEquals("\n", string0);
      
      characterReader0.consumeLetterSequence();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6!zy^?*=BxLN+>^&S\"");
      char char0 = characterReader0.current();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("\n");
      int int0 = characterReader0.pos();
      assertEquals("\n", characterReader0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6!zy^?*=BxLN+>^&S\"");
      String string0 = characterReader0.toString();
      assertEquals("6!zy^?*=BxLN+>^&S\"", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("6!zy^?*=BxLN+>^&S\"");
      characterReader0.unconsume();
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";1L@YWx");
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%'HSL");
      characterReader0.mark();
      assertEquals("%'HSL", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%'HSL");
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.rewindToMark();
      assertEquals("", characterReader0.toString());
  }
}
