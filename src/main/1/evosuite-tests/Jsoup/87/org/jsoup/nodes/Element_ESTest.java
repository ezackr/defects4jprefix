/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:33:00 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("Jx0DNRLj<alwcB8)!l");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Element element0 = new Element("qQn<6$94fs6)");
      Element element1 = element0.toggleClass("<qQn<6$94fs6)>\n LM{u}E3,4vQN,%yK&lt;\n</qQn<6$94fs6)>");
      // Undeclared exception!
      try { 
        element1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("EEfI]*c@.$$]K");
      element0.getElementsByAttributeValueMatching(" ", "hmE%tkd0#,Z}M;zfFm4");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("C-^Yd0t&y ~o(}I;[u", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C-^Yd0t&y ~o(}I;[u", attributes0);
      pseudoTextElement0.getElementsByAttributeValueEnding("y:42W$^2.M:\"_/HHT.", "C-^Yd0t&y ~o(}I;[u");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("org.jsoup.nodes.DataNode");
      Element element1 = element0.before((Node) document0);
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      Element element0 = document0.empty();
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}", "}");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2460), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-598), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Tag tag0 = Tag.valueOf("'Z\":d*gb.");
      Element element0 = new Element(tag0, "ec Sm{(t%>PLe'>AZ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "ec Sm{(t%>PLe'>AZ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringBuffer0, 1274, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&zthxQlbh7gpq`{urB", "&zthxQlbh7gpq`{urB");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      document0.wrap("{ZI3k9(tZo");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.wrap("E~jv6+BPlyUKmY1");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("8_ETU<]{!@.9<");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.val("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.setSiblingIndex(1);
      document0.toggleClass("&XUeG%2");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("Dx1HW;:~(ZBeT");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("2J");
      Element element0 = document0.head();
      element0.tagName("U9|:%@Orh-e@C");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
      document0.tagName("Could not parse nth-index '%s': unexpected format");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("YZtm_``3&_");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Document document1 = document0.clone();
      document1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("O5xo)t8;k }'", "");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapedDash");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}", "}");
      Element element0 = document0.doClone(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("-zSS]J}30h", "    ");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      Element element0 = document0.body();
      Element element1 = element0.empty();
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Element element0 = document0.body();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("Dx1HW;:~(ZBeT");
      document0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Element element0 = document0.prependElement("Split offset must be not be negative");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("f");
      Pattern pattern0 = Pattern.compile("f", 2581);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
      document0.getElementsMatchingText("mS_3:Y2L|C.lPGbKT]");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("W");
      Pattern pattern0 = Pattern.compile("W");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      document0.getElementsContainingText("ZfDTY!n5h{");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
      document0.getElementsContainingOwnText("$si");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      document0.getElementsByIndexLessThan(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("qQn<6$94fs6)");
      element0.getElementsByIndexGreaterThan(3437);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      Element element0 = document0.body();
      element0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      document0.getElementsByAttributeValueStarting("|{h5Ptc}db#s98oV", "textarea");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("LS~9WRP0h`9{", "LS~9WRP0h`9{");
      Element element0 = document0.val("value");
      element0.getElementsByAttributeValueEnding("value", "value");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.getElementsByAttributeValueContaining("wHbu;j5KwVXd}", " ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      document0.getElementsByAttribute("br");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("wc4C628iW%TPp");
      document0.setSiblingIndex((-1475));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("body");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      element0.doClone(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inert", "_%:b");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("ScriptDataEscapedDash", "body");
      DocumentType documentType0 = new DocumentType("body", "body", "html", "", "html");
      Element element0 = document0.doClone(documentType0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mE", "mE");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("-=9DB");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bJ&g%s:dSe");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "X@GA&__\"zL`<\"UIlq,*", attributes0);
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("GyhKo9Ly{f3", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("GyhKo9Ly{f3", "GyhKo9Ly{f3");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "GyhKo9Ly{f3", attributes1);
      pseudoTextElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("c");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document1.attr("c", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.attr(" />", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.attr("[^%s]", "rCQ");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inert", "_%:b");
      Tag tag0 = Tag.valueOf("_%:b");
      Element element0 = new Element(tag0, "_%:b", (Attributes) null);
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapedDash");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("YZtm_``3&_");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("YZtm_``3&_");
      Element element0 = document0.shallowClone();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("wc4C628iW%TPp");
      document0.setSiblingIndex((-1475));
      document0.append(" ");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("~2a)IqaIp");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("c");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document1.addClass("c");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("samp");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("Wu:");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("Xqwb+");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("Dx1HW;:~(ZBeT");
      // Undeclared exception!
      try { 
        document0.text("J^bT=H0;uiY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{>p\"4k43#oE/");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      Element element0 = pseudoTextElement0.prependElement("#root");
      element0.after((Node) pseudoTextElement0);
      // Undeclared exception!
      pseudoTextElement0.tagName("{>p\"4k43#oE/");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      // Undeclared exception!
      try { 
        document0.selectFirst("<Yw])&|XWe?!'w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<Yw])&|XWe?!'w': unexpected token at '<Yw])&|XWe?!'w'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bJ&g%s:dSe");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "X@GA&__\"zL`<\"UIlq,*", attributes0);
      // Undeclared exception!
      try { 
        element0.select("X@GA&__\"zL`<\"UIlq,*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'X@GA&__\"zL`<\"UIlq,*': unexpected token at '@GA&__\"zL`<\"UIlq,*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JG#sgA$$!", "");
      document0.setParentNode(document0);
      document0.empty();
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " />");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("LT");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1432352094), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("8_ETU<]{!@.9<");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "8_ETU<]{!@.9<");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-1107), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("2J");
      // Undeclared exception!
      try { 
        document0.is("tL%oKup3Pz=w@I]*O");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tL%oKup3Pz=w@I]*O': unexpected token at '%oKup3Pz=w@I]*O'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("c:$]:,sV");
      element0.before((Node) document0);
      // Undeclared exception!
      document0.html("KKQ~>s~mAUwWzEH");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("eD'*bNhe8Fl*m}32");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("=Bo9qZ`J}ywF");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.charset((Charset) null);
      document1.appendElement("AfterDoctypeName");
      StringWriter stringWriter0 = new StringWriter(54);
      // Undeclared exception!
      try { 
        document1.html(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("Unexpected count of entities loaded");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("mE", "mE");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("IT]bUjnNE,o[*.xh3y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: IT]bUjnNE,o[*.xh3y
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(")p(lx%q%6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )p(lx%q%6
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ay@Z^kD:[0gtH");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Ay@Z^kD:[0gtH", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("ScriptDataEscapedDash", "body");
      DocumentType documentType0 = new DocumentType("body", "body", "html", "", "html");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("X#\"D6r5qdy<$'b");
      Document document0 = parser0.parseInput((Reader) stringReader0, "_J>8xxG");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("C-^Yd0t&y ~o(}I;[u", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C-^Yd0t&y ~o(}I;[u", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueNot((String) null, "bgsound");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "<yhYGe.:UVj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":matches(%s)");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("", "samp");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("`?)vQk9T<h9");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "#doctype");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Element element0 = new Element("7HWI B(^;]V8^*%yD=");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dd");
      Element element0 = new Element(tag0, "dd");
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("c:$]:,sV");
      element0.before((Node) document0);
      // Undeclared exception!
      document0.append("EwTIK69F");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("c:$]:,sV");
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      try { 
        element1.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
      document0.hasClass("W)_}-39xb-/z^gU}O");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("-zSS]J}30h", "    ");
      Element element0 = document0.addClass("-zSS]J}30h");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Hcd,oq)aD/-g_X_;G", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Hcd,oq)aD/-g_X_;G", attributes0);
      Locale locale0 = new Locale("", "");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("org.jsoup.nodes.DataNode");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("c");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.getElementsByTag("textarea");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("7KJ,.bH/A@L,UD5xLc:", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "3mZ!-QI }(rk", (Attributes) null);
      formElement0.parent();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("|\".ruG`_9wJs~", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "    ", (Attributes) null);
      formElement0.text("|\".ruG`_9wJs~");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
      Pattern pattern0 = Pattern.compile("", 1004);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("LF_$>C%V6[t6<)");
      document0.attr("LF_$>C%V6[t6<)", "");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("A!W21O");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "A!W21O", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("YZtm_``3&_");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Element element0 = new Element("~2a)IqaIp");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("<yhYGe.:UVj", pattern0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Element element0 = new Element("qQn<6$94fs6)");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "v");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("qQn<6$94fs6)");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Element element0 = new Element("qQn<6$94fs6)");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("LF_$>C%V6[t6<)");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("X#\"D6r5qdy<$'b");
      Document document0 = parser0.parseInput((Reader) stringReader0, "_J>8xxG");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "X#\"D6r5qdy<$'b");
      document0.outerHtmlHead(stringBuilder0, 1478, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Na [AVw_`e", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
      document0.parentNode = (Node) document0;
      document0.text();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
      document0.title("");
      document0.getElementsMatchingOwnText("q2 jYUI./fmfAU#Zw");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(,l'Z", "");
      Element element0 = document0.appendText("(,l'Z");
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":eq(%d)");
      document0.getElementById("#");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}", "}");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}", "}");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("c:$]:,sV");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("2k\"7m\"K=hBC/7}", "org.jsoup.nodes.Element$2");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("L;8l\"?PN");
      document0.siblingElements();
      assertEquals("L;8l\"?PN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      Element element0 = document0.appendElement("c:$]:,sV");
      element0.before((Node) document0);
      document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}", "}");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(7, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.parents();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("mark");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1203186048));
      // Undeclared exception!
      try { 
        document0.insertChildren((-1203186048), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B:[Ih@_g", "");
      Elements elements0 = document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren(1621, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2aU(8*wN9L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("E[d7^n");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("E[d7^n", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("LS~9WRP0h`9{", "LS~9WRP0h`9{");
      Element element0 = document0.prependText("value");
      element0.getElementsByIndexLessThan(4);
      assertEquals(2, document0.childNodeSize());
      assertEquals("LS~9WRP0h`9{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.selectFirst("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.is("dt");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("+J{L0$Y-}]");
      document0.getAllElements();
      assertEquals("+J{L0$Y-}]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Element element0 = document0.removeClass("org.jsoupgnodes._lement");
      assertEquals("2aU(8*wN9L", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Element element0 = new Element("~2a)IqaIp");
      // Undeclared exception!
      try { 
        element0.before(".>a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoupgnodes._lement", "2aU(8*wN9L");
      assertEquals(4, elements0.size());
      assertEquals("2aU(8*wN9L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{>p\"4k43#oE/");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.after((Node) pseudoTextElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "i3b|e\"s>4cqA.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Elements elements0 = document0.getElementsContainingText("org.jsoupgnodes._lement");
      assertEquals(3, elements0.size());
      assertEquals("2aU(8*wN9L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("Unexpected count of entities loaded");
      Elements elements0 = document0.getElementsByClass("o|Lbl");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("Unexpected count of entities loaded", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("2aU(8*wN9L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(">gZ]aGLQ|YyQgo$_\"/0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("summary", "");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      document0.getElementsByAttributeStarting("%xL!h?;FT|<lx_!~");
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("dfn");
      // Undeclared exception!
      try { 
        document0.after("dfn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.prepend("org.jsoup.nodes.Element");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.select("eKe");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "%xL!h?;FT|<lx_!~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      document0.getElementsByAttributeValue(" />", " />");
      assertEquals("org.jsoup.nodes.DataNode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("L;8l\"?PN");
      Element element0 = document0.attr("L;8l\"?PN", false);
      assertEquals("L;8l\"?PN", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      document0.html("KKQ~>s~mAUwWzEH");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
      String string0 = document0.wholeText();
      assertEquals("{ZI3k9(tZo", string0);
      assertEquals("{ZI3k9(tZo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.DataNode");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("LF_$>C%V6[t6<)");
      element0.doSetBaseUri("LF_$>C%V6[t6<)");
      assertEquals("LF_$>C%V6[t6<)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("L;8l\"?PN");
      document0.addClass("<iOZ :U6l^}(QHCFk ");
      document0.cssSelector();
      assertEquals("L;8l\"?PN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}", "}");
      Elements elements0 = document0.getElementsContainingOwnText("}");
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertEquals("}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("L;8l\"?PN");
      document0.dataset();
      assertEquals("L;8l\"?PN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "2aU(8*wN9L");
      // Undeclared exception!
      try { 
        document0.child(1448);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1448, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("L;8l\"?PN");
      document0.getElementsMatchingText("");
      assertEquals("L;8l\"?PN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("nowrap");
      // Undeclared exception!
      try { 
        document0.wrap(":matchText");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
