/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 22:21:15 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TokenQueue.unescape("(9,g5k)gArvQ#q9al");
      assertNotNull(string0);
      assertEquals("(9,g5k)gArvQ#q9al", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("Js'S9{B9xJr");
      assertEquals('J', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Js'S9{B9xJr", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeWord();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("'S9{B9xJr", tokenQueue0.toString());
      assertNotNull(string0);
      assertEquals("Js", string0);
      
      String string1 = tokenQueue0.chompBalanced('!', '!');
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("S9{B9xJr", tokenQueue0.toString());
      assertEquals('S', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("s7,]zDXFG>2mpqc'&5");
      assertEquals("s7,]zDXFG>2mpqc'&5", tokenQueue0.toString());
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.addFirst("X`2*j.pd*IbJ_");
      assertEquals("X`2*j.pd*IbJ_s7,]zDXFG>2mpqc'&5", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('X', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeTo("s7,]zDXFG>2mpqc'&5");
      assertEquals("s7,]zDXFG>2mpqc'&5", tokenQueue0.toString());
      assertEquals('s', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("X`2*j.pd*IbJ_", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-^1");
      assertEquals('-', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("-^1", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      tokenQueue0.consume("-^1");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".k");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('.', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(".k", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('.', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(".k", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = TokenQueue.unescape("\\1hrMjv");
      assertNotNull(string0);
      assertEquals("1hrMjv", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7$@{0)7d@9 2zNlqO");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('7', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.toString();
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('7', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("$79t<8", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('$', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompBalanced('*', 'C');
      assertEquals('7', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("79t<8", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals("", string0);
      
      char char0 = tokenQueue0.peek();
      assertEquals('7', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("79t<8", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('J', tokenQueue0.peek());
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matches("org.jsoup.parser.TokenQueue");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('J', tokenQueue0.peek());
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C-c}Cvo");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('C', tokenQueue0.peek());
      assertEquals("C-c}Cvo", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("}Cvo", tokenQueue0.toString());
      assertEquals('}', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("C-c", string0);
      
      String string1 = tokenQueue0.consumeTo("C-c}Cvo");
      assertFalse(string1.equals((Object)string0));
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string1);
      assertEquals("}Cvo", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":8l8 ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
      assertEquals('x', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("xc?1>u8j]awS\"t\"PufP", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('?', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("?1>u8j]awS\"t\"PufP", tokenQueue0.toString());
      assertNotNull(string0);
      assertEquals("xc", string0);
      
      char char0 = tokenQueue0.consume();
      assertEquals("1>u8j]awS\"t\"PufP", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('1', tokenQueue0.peek());
      assertEquals('?', char0);
      
      char char1 = tokenQueue0.consume();
      assertFalse(char1 == char0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('>', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(">u8j]awS\"t\"PufP", tokenQueue0.toString());
      assertEquals('1', char1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("JfT\"0wbkOCfxRdb%F");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('J', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("JfT\"0wbkOCfxRdb%F", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("fT\"0wbkOCfxRdb%F", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('f', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('J', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("C-c}Cvo");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("C-c}Cvo", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('C', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesCS((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("kBNV|dXq&bBD1O");
      assertEquals("kBNV|dXq&bBD1O", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('k', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('J', tokenQueue0.peek());
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('P', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("PsQsP", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("1^=$YvJ?!Czi]S{%s");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("1^=$YvJ?!Czi]S{%s", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("WPI");
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('W', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("WPI", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7LS<jn2]+9v");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("7LS<jn2]+9v", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('7', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";}&+Bk.?");
      assertEquals(";}&+Bk.?", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(';', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("org.jsoup.parser.TokenQueue");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals(";}&+Bk.?", string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
      assertEquals("8rVVhr[", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('8', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      assertEquals('*', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("*|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      char char0 = tokenQueue0.consume();
      assertEquals('|', tokenQueue0.peek());
      assertEquals("|", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('*', char0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("*|");
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":8l8 ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(':', tokenQueue0.peek());
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase(":8l8 ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(':', tokenQueue0.peek());
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      assertEquals("PsQsP", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('P', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeWord();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals("PsQsP", string0);
      
      String string1 = tokenQueue0.consumeTo("PsQsP");
      assertFalse(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('!', tokenQueue0.peek());
      assertEquals("!", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals('!', tokenQueue0.peek());
      assertEquals("!", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Queue not long enough to consume sequence", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('Q', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.chompToIgnoreCase("(@#fgg0X");
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string0);
      assertEquals("Queue not long enough to consume sequence", string0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("PsQsP");
      assertEquals('P', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("PsQsP", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertEquals('P', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("PsQsP", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      assertEquals(" ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals(" ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$79t<8");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("$79t<8", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('$', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("$79t<8", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('$', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8rVVhr[");
      assertEquals("8rVVhr[", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('8', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("[", tokenQueue0.toString());
      assertEquals('[', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("8rVVhr", string0);
      
      tokenQueue0.advance();
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(":8l8 ");
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("|Ey7@T|GTw?");
      assertEquals(":8l8 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(':', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("!", tokenQueue0.toString());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("!", tokenQueue0.toString());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(" ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      char[] charArray0 = new char[9];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(" ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("=BxLN+");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('=', tokenQueue0.peek());
      assertEquals("=BxLN+", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('=', tokenQueue0.peek());
      assertEquals("=BxLN+", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("-", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("-", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("       ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("       ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("  ");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" ", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals(" ", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr");
      assertEquals('J', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertNotNull(string0);
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('|', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("|", tokenQueue0.toString());
      assertNotNull(tokenQueue0);
      
      boolean boolean0 = tokenQueue0.matches("");
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('|', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("|", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(" ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeToIgnoreCase("  ");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = tokenQueue0.consumeAttributeKey();
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("kBNV|dXq&bBD1O");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("kBNV|dXq&bBD1O", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('k', tokenQueue0.peek());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("|dXq&bBD1O", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('|', tokenQueue0.peek());
      assertNotNull(string0);
      assertEquals("kBNV", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("et1*|7ympryv");
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("et1*|7ympryv", tokenQueue0.toString());
      assertEquals('e', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals('', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("7ympryv", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("et1*|", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('-', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      String string0 = tokenQueue0.consumeTagName();
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr ");
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('J', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(tokenQueue0);
      
      Character character0 = Character.valueOf('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals('H', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("HJs'S9{B9xJrJs'S9{B9xJr ", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompBalanced('7', 'H');
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('J', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr ");
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('J', tokenQueue0.peek());
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertNotNull(tokenQueue0);
      
      Character character0 = Character.valueOf('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('H', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("HJs'S9{B9xJrJs'S9{B9xJr ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompBalanced('H', 'H');
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertNotNull(string0);
      assertEquals("Js'S9{B9xJrJs'S9{B9xJr ", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("IsN%4W93r0-\"");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('I', tokenQueue0.peek());
      assertEquals("IsN%4W93r0-\"", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertNotNull(tokenQueue0);
      
      Character character0 = new Character('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('*', tokenQueue0.peek());
      assertEquals("*IsN%4W93r0-\"", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompBalanced('*', '\uDC05');
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertNotNull(string0);
      assertEquals("IsN%4W93r0-", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeCssIdentifier();
      String[] stringArray0 = new String[6];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      tokenQueue0.addFirst("Js'S9{BAxJr");
      tokenQueue0.consumeToIgnoreCase("  ");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      tokenQueue0.consumeToIgnoreCase("  ");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("xc?1>u8j]awS\"t\"PufP");
      tokenQueue0.chompTo("");
      assertEquals('x', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M<7u");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("Js'k9{BAx^Vwr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      tokenQueue0.consume("");
      assertEquals(' ', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ET1.K7YMPRyV");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.chompTo("ET1");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeCssIdentifier();
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M<Ru");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M<Ru");
      tokenQueue0.consumeWord();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M<7u");
      tokenQueue0.consumeElementSelector();
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("M<7u");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals('M', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[9];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("       ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "       ";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ZPENtVIS-1O4V#f");
      char char0 = tokenQueue0.peek();
      assertEquals('Z', char0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Js'S9{B9xJrJs'S9{B9xJr");
      Character character0 = new Character('\'');
      tokenQueue0.addFirst(character0);
      tokenQueue0.chompBalanced('\'', '\'');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.chompToIgnoreCase("*|");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      tokenQueue0.matchesCS("Js'S9{BAxJr");
      assertEquals(' ', tokenQueue0.peek());
  }
}
