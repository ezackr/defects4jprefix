/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:30:30 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("S2#%*>BG");
      document0.appendText("M[#[[");
      document0.appendText("M[#[[");
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("9B'o{xh");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      boolean boolean0 = document_OutputSettings0.prettyPrint();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("l;694tx2:4Q3.eB");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      int int0 = document_OutputSettings0.indentAmount();
      assertEquals(1, int0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("~JIwDGvF)zKmbB");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.escapeMode();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("7;~eiyx`f");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.encoder();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("bHJ~bQ$h$`6]");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset("UTF-8");
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("7;~eiyx`f");
      document0.normalise();
      Element element0 = document0.text("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("9B'o{xh");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      
      document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertFalse(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("~{21OC{d_>4wmxR)\"");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      document_OutputSettings0.indentAmount(0);
      assertEquals(0, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document0.outputSettings();
      assertEquals(0, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("Kopf");
      Document document1 = document0.normalise();
      document1.head();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("CFrcn=wm`]6U?7!oF~J");
      Element element0 = document0.createElement("head");
      assertEquals("head", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Kopf");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      assertEquals("#document", document1.nodeName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("pWRv[&yJyv!x");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.title("#text");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.title("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("tBz6;U");
      // Undeclared exception!
      try { 
        document0.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("radic");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.title();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("harr");
      // Undeclared exception!
      try { 
        document0.text("harr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("#text");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = null;
      try {
        document0 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("Kopf");
      Element element0 = document0.createElement(",V^6EmI&E");
      document0.prependChild(element0);
      assertEquals(",v^6emi&e", element0.tagName());
      
      Element element1 = document0.head();
      assertEquals("#document", document0.nodeName());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("Eta");
      document0.prependText("ziL8N5Xye})SGoac");
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("Kopf");
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("Kopf");
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("l;694tx2:4Q3.eB");
      Document.OutputSettings document_OutputSettings0 = document0.new OutputSettings();
      document_OutputSettings0.indentAmount(1363);
      assertEquals(1363, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("8K{Eu?>*GR?7");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("C");
      document0.appendText((String) null);
      Document document1 = document0.normalise();
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("pWRv[&yJyv!x");
      document0.title("pWRv[&yJyv!x");
      document0.title("pWRv[&yJyv!x");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("pWRv[&yJyv!x");
      document0.title("pWRv[&yJyv!x");
      document0.title();
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("8K{Eu?>*GR?7");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("@qM3");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("l;694tx2:4Q3.eB");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("l;694tx2:4Q3.eB");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.escapeMode((Entities.EscapeMode) null);
      document0.title(":68pG[y9?Q{4;Q/PR^");
      // Undeclared exception!
      try { 
        document0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
      document_OutputSettings0.charset();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("l;694tx2:4Q3.eB");
      document0.title("l;694tx2:4Q3.eB");
      String string0 = document0.outerHtml();
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head>\n  <title>l;694tx2:4Q3.eB</title>\n </head>\n <body></body>\n</html>", string0);
  }
}
