/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:52:02 GMT 2023
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("_uqcH");
      boolean boolean0 = whitelist_AttributeValue0.equals(whitelist_AttributeValue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("O7WvU");
      assertEquals("O7WvU", whitelist_TagName0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("rel");
      assertEquals("rel", whitelist_Protocol0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("");
      assertEquals("", whitelist_Protocol0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("<K-$_H");
      assertEquals("<K-$_H", whitelist_AttributeValue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("{_$)7BwF@^1>Y5`ch/L");
      assertEquals("{_$)7BwF@^1>Y5`ch/L", whitelist_AttributeKey0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute("^(}3h;}>In!+;^v(A", (Element) null, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Document document0 = Document.createShell("");
      Attribute attribute0 = Attribute.createFromEncoded("TpiR24~u4yA)l", "h1");
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute((String) null, document0, attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        whitelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute((String) null, "h5", "L'$Lu?`8<U~}wARG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("'PF:vg&>96:qIxO", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = Document.createShell("$VALUES");
      Attribute attribute0 = new Attribute("2ig", "");
      boolean boolean0 = whitelist0.isSafeAttribute("start", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "X";
      stringArray0[1] = "h6";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("TpiR24~u4yA)l");
      Integer integer0 = new Integer((-1886));
      boolean boolean0 = whitelist_TagName0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("_uqcH");
      boolean boolean0 = whitelist_AttributeValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      whitelist0.addEnforcedAttribute("c!58'_:^z+=", "sup", "u#hQ$_,");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("c!58'_:^z+=");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("CK}XQ3Th2");
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "h5";
      stringArray0[1] = "h5";
      stringArray0[2] = "h5";
      stringArray0[3] = "CK}XQ3Th2";
      stringArray0[4] = "h5";
      stringArray0[5] = "h5";
      stringArray0[6] = "h5";
      Whitelist whitelist1 = whitelist0.addAttributes("h5", stringArray0);
      whitelist0.addProtocols("h5", "]_zCs1k?4+h#BKv", stringArray0);
      Document document0 = new Document("(>!$A|]j=B");
      Attribute attribute0 = Attribute.createFromEncoded("h5", "ul");
      boolean boolean0 = whitelist1.isSafeAttribute("h5", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "h5";
      stringArray0[1] = "h5";
      stringArray0[2] = "h5";
      stringArray0[3] = "CK}XQ3Th2";
      stringArray0[4] = "h5";
      stringArray0[5] = "h5";
      stringArray0[6] = "h5";
      Whitelist whitelist1 = whitelist0.addAttributes("h5", stringArray0);
      Document document0 = new Document("(>!$A|]j=B");
      Attribute attribute0 = Attribute.createFromEncoded("h5", "ul");
      boolean boolean0 = whitelist1.isSafeAttribute("h5", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[1] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[2] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[3] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[4] = "org.jsoup.safety.whitelist$attributevalue";
      whitelist0.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
      Document document0 = Document.createShell("");
      Attribute attribute0 = Attribute.createFromEncoded("|C-NA31w$6Dy", "h1");
      boolean boolean0 = whitelist0.isSafeAttribute("org.jsoup.safety.whitelist$attributevalue", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      boolean boolean0 = whitelist0.isSafeTag("KyJA)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("blockquote", "Umacr", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("io|-9u4z{BPik$:", "io|-9u4z{BPik$:", "io|-9u4z{BPik$:");
      Whitelist whitelist2 = whitelist0.addEnforcedAttribute("io|-9u4z{BPik$:", "Congruent", "T{<2vT-C]5");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("6i!!Aix.t)");
      String string0 = whitelist_AttributeKey0.toString();
      assertEquals("6i!!Aix.t)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[1] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[2] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[3] = "org.jsoup.safety.whitelist$attributevalue";
      stringArray0[4] = "org.jsoup.safety.whitelist$attributevalue";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      boolean boolean0 = whitelist0.isSafeTag("dl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8J%cfbH4E/i}yUkedb";
      stringArray0[1] = "table";
      whitelist0.addProtocols("8J%cfbH4E/i}yUkedb", "table", stringArray0);
      Whitelist whitelist1 = whitelist0.addProtocols("8J%cfbH4E/i}yUkedb", "table", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      assertNotNull(whitelist0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      assertSame(whitelist0, whitelist1);
  }
}
