/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 18:33:47 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("UxRS~L`&zjDqX/", 0);
      assertEquals("UxRS~L`&zjDqX/", jsonPointer0.toString());
      assertEquals("~UxRS~L`&zjDqX", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("", 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("RC!b/9VHCI");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("RC!b/9VHCI", jsonPointer0.toString());
      assertEquals("C!b", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = JsonPointer._parseTail("~vmEE%uY5`b{F");
      boolean boolean0 = jsonPointer1.equals(jsonPointer0);
      assertEquals("vmEE%uY5`b{F", jsonPointer1.getMatchingProperty());
      assertFalse(jsonPointer0.equals((Object)jsonPointer1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("~vmEE%uY5`b{F", jsonPointer1.toString());
      assertFalse(jsonPointer1.matches());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement(0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("a578");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(jsonPointer0.matches());
      assertTrue(boolean0);
      assertEquals("a578", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("WMx}CI%oE,}E", 0);
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertEquals("WMx}CI%oE,}E", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
      assertEquals("~WMx}CI%oE,}E", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \")\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "%3.rfo^0AJV", jsonPointer0);
      String string0 = jsonPointer1.toString();
      assertFalse(jsonPointer1.matches());
      assertNull(string0);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(jsonPointer1.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("$mL", 0);
      String string0 = jsonPointer0.toString();
      assertEquals("~$mL", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("$mL", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("'", 0);
      JsonPointer jsonPointer1 = new JsonPointer("'", "'", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.tail();
      assertEquals("'", jsonPointer0.toString());
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals("~'", jsonPointer2.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("'", 0);
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNotNull(jsonPointer1);
      assertEquals("'", jsonPointer0.toString());
      assertEquals("", jsonPointer1.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~'", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("x=}k[A8G+cO|;1V$", "R=?8y!fJygomi]u0", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("R=?8y!fJygomi]u0");
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("", jsonPointer2.getMatchingProperty());
      assertEquals("x=}k[A8G+cO|;1V$", jsonPointer1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "~)kx^$<MFG", jsonPointer0);
      String string0 = jsonPointer1.getMatchingProperty();
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertNotNull(string0);
      assertFalse(jsonPointer1.matches());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("0", "0", jsonPointer0);
      int int0 = jsonPointer1.getMatchingIndex();
      assertEquals(0, int0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer1.matches());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("a578");
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals("a578", jsonPointer0.toString());
      assertEquals("578", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals(578, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("w0");
      assertFalse(jsonPointer0.matches());
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchElement());
      assertEquals("w0", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "~)kx^$<MFG", jsonPointer0);
      // Undeclared exception!
      try { 
        jsonPointer1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail((String) null, 578);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("c/aUf", 2023);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 2022, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = null;
      try {
        jsonPointer1 = new JsonPointer((String) null, (String) null, jsonPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("v");
      assertFalse(jsonPointer0.matches());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("v", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/D_&QiCiab]`~8");
      assertEquals("D_&QiCiab]`~8", jsonPointer0.getMatchingProperty());
      assertEquals("/D_&QiCiab]`~8", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      assertEquals("", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        JsonPointer.compile("com.fasterxml.jackson.core.io.NumberInput");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"com.fasterxml.jackson.core.io.NumberInput\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("0", 0);
      assertEquals("0", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("/D_A&QiCab]`~", 0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~/D_A&QiCab]`~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("u1uNgb?~*uLkwN$", 1);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("u1uNgb?~*uLkwN$", jsonPointer0.toString());
      assertEquals("/uNgb?~*uLkwN$", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~)kx^$<MFG");
      assertEquals("~)kx^$<MFG", jsonPointer0.toString());
      assertEquals(")kx^$<MFG", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("5s'YsR4");
      boolean boolean0 = jsonPointer0.equals("5s'YsR4");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("s'YsR4", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertFalse(boolean0);
      assertEquals("5s'YsR4", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer();
      boolean boolean0 = jsonPointer0.equals(jsonPointer1);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("a578");
      JsonPointer jsonPointer1 = jsonPointer0.matchElement(578);
      assertNotNull(jsonPointer1);
      assertEquals("578", jsonPointer0.getMatchingProperty());
      assertEquals("", jsonPointer1.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = jsonPointer0.matchElement((-1378));
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("x=}k[A8G+cO|;1V$");
      JsonPointer jsonPointer1 = new JsonPointer("x=}k[A8G+cO|;1V$", "x=}k[A8G+cO|;1V$", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("x=}k[A8G+cO|;1V$");
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals("=}k[A8G+cO|;1V$", jsonPointer2.getMatchingProperty());
      assertEquals("x=}k[A8G+cO|;1V$", jsonPointer2.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("x=}k[A8G+cO|;1V$");
      assertTrue(jsonPointer0.mayMatchProperty());
      
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("x=}k[A8G+cO|;1V$");
      assertNull(jsonPointer1);
      assertEquals("=}k[A8G+cO|;1V$", jsonPointer0.getMatchingProperty());
      assertEquals("x=}k[A8G+cO|;1V$", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer("0", "0", jsonPointer0);
      boolean boolean0 = jsonPointer1.mayMatchElement();
      assertFalse(jsonPointer1.matches());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(boolean0);
      assertTrue(jsonPointer1.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/D_A&QiCab]`~");
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("D_A&QiCab]`~", jsonPointer0.getMatchingProperty());
      assertEquals("/D_A&QiCab]`~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      String string0 = jsonPointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "~)kx^$<MFG", jsonPointer0);
      boolean boolean0 = jsonPointer1.matches();
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertTrue(jsonPointer1.mayMatchProperty());
      assertTrue(jsonPointer0.matches());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      String string0 = jsonPointer0.getMatchingProperty();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      jsonPointer0.hashCode();
  }
}
