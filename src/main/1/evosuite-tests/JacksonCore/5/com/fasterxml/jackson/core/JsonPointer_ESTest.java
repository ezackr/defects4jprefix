/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 18:32:25 GMT 2023
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPointer_ESTest extends JsonPointer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("UxRS~L`&zjDqX/", 0);
      assertFalse(jsonPointer0.matches());
      assertEquals("~UxRS~L`&zjDqX", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("UxRS~L`&zjDqX/", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("", 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("\"9 *EsdbB", 8);
      assertEquals("\"9 *EsdbB", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("9 *Esd~B", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2wKWi", 0);
      jsonPointer0.hashCode();
      assertEquals("~2wKWi", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("\"");
      jsonPointer0.matchElement((-1006));
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals("\"", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("com.fasterxml.jackson.core.JsonPointer");
      boolean boolean0 = jsonPointer0.mayMatchProperty();
      assertEquals("om.fasterxml.jackson.core.JsonPointer", jsonPointer0.getMatchingProperty());
      assertEquals("com.fasterxml.jackson.core.JsonPointer", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(boolean0);
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        JsonPointer.compile("\" can not be represented as BigDecimal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"\" can not be represented as BigDecimal\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      String string0 = jsonPointer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("'", 0);
      JsonPointer jsonPointer1 = new JsonPointer("'", "'", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.tail();
      assertEquals("~'", jsonPointer2.getMatchingProperty());
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals("'", jsonPointer2.toString());
      assertNotNull(jsonPointer2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("#)FP\"Z");
      JsonPointer jsonPointer1 = new JsonPointer("|)z_l/&t?Lhvg~9=PF", "Re<Syn?x~0Gpvyl", jsonPointer0);
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("Re<Syn?x~0Gpvyl");
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertNotNull(jsonPointer2);
      assertEquals(")FP\"Z", jsonPointer2.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("3F*^fz99E<t;!CB;/", 0);
      String string0 = jsonPointer0.getMatchingProperty();
      assertFalse(jsonPointer0.matches());
      assertEquals("3F*^fz99E<t;!CB;/", jsonPointer0.toString());
      assertEquals("~3F*^fz99E<t;!CB;", string0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("H", "0", jsonPointer0);
      int int0 = jsonPointer1.getMatchingIndex();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("H", jsonPointer1.toString());
      assertEquals("0", jsonPointer1.getMatchingProperty());
      assertEquals(0, int0);
      assertFalse(jsonPointer1.matches());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G04");
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals(4, int0);
      assertEquals("04", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals("G04", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G0");
      assertEquals("G0", jsonPointer0.toString());
      assertTrue(jsonPointer0.mayMatchElement());
      assertEquals("0", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer.valueOf("Invalid input: JSON Pointer expression must start with '/': \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"Invalid input: JSON Pointer expression must start with '/': \"\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail("p7[506");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7[506\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseTail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail((String) null, 646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPointer._parseQuotedTail("UxRS~L`&zjDqX/", 1143);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 1142, s.length() 15
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonPointer jsonPointer0 = null;
      try {
        jsonPointer0 = new JsonPointer("3!7E", "3!7E", (JsonPointer) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3!7E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = null;
      try {
        jsonPointer1 = new JsonPointer((String) null, (String) null, jsonPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("/PV8}XI{l'YJO9E($");
      assertEquals("PV8}XI{l'YJO9E($", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("/PV8}XI{l'YJO9E($", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("2.2250738585072012e-308", 16);
      assertFalse(jsonPointer0.matches());
      assertEquals("2.2250738585072012e-308", jsonPointer0.toString());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals(".2250738585072/2e-308", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("Re<Syn?x~0Gpvyl", 0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertFalse(jsonPointer0.matches());
      assertEquals("Re<Syn?x~0Gpvyl", jsonPointer0.toString());
      assertEquals("~Re<Syn?x~Gpvyl", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("$ZxSb~");
      assertEquals("ZxSb~", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("$ZxSb~", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("|)z_l/&t?Lhvg~9=PF");
      assertEquals("|)z_l/&t?Lhvg~9=PF", jsonPointer0.toString());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals(")z_l", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("3F*^fz99E<t;!CB;/");
      assertEquals("F*^fz99E<t;!CB;", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("3F*^fz99E<t;!CB;/", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("~)kx^$<MFG");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~)kx^$<MFG", jsonPointer0.toString());
      assertEquals(")kx^$<MFG", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      Object object0 = new Object();
      boolean boolean0 = jsonPointer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      JsonPointer jsonPointer1 = new JsonPointer((String) null, "3F*^fz99E<t;!CB;/", (JsonPointer) null);
      // Undeclared exception!
      try { 
        jsonPointer1.equals(jsonPointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("3F*^fz99E<t;!CB;/", 0);
      boolean boolean0 = jsonPointer0.equals(jsonPointer0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("~3F*^fz99E<t;!CB;", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertTrue(boolean0);
      assertEquals("3F*^fz99E<t;!CB;/", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement((-1));
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchElement(0);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("pcB%", 1);
      JsonPointer jsonPointer1 = jsonPointer0.matchProperty("pcB%");
      assertEquals("~cB%", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("pcB%", jsonPointer0.toString());
      assertNull(jsonPointer1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      JsonPointer jsonPointer1 = new JsonPointer("T", "T", jsonPointer0);
      assertTrue(jsonPointer1.mayMatchProperty());
      
      JsonPointer jsonPointer2 = jsonPointer1.matchProperty("T");
      assertEquals((-1), jsonPointer2.getMatchingIndex());
      assertNotNull(jsonPointer2);
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertSame(jsonPointer2, jsonPointer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.matchProperty("");
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G04");
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertEquals("04", jsonPointer0.getMatchingProperty());
      assertFalse(jsonPointer0.matches());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertTrue(boolean0);
      assertEquals("G04", jsonPointer0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.EMPTY;
      boolean boolean0 = jsonPointer0.mayMatchElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.compile((String) null);
      boolean boolean0 = jsonPointer0.matches();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G04");
      boolean boolean0 = jsonPointer0.matches();
      assertFalse(boolean0);
      assertEquals("04", jsonPointer0.getMatchingProperty());
      assertEquals("G04", jsonPointer0.toString());
      assertEquals(4, jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("/");
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("/", jsonPointer0.toString());
      assertFalse(jsonPointer0.matches());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer.valueOf("");
      assertEquals("", jsonPointer0.getMatchingProperty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      int int0 = jsonPointer0.getMatchingIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseTail("G04");
      String string0 = jsonPointer0.toString();
      assertEquals("G04", string0);
      assertNotNull(string0);
      assertEquals("04", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchElement());
      assertFalse(jsonPointer0.matches());
      assertTrue(jsonPointer0.mayMatchProperty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonPointer jsonPointer0 = JsonPointer._parseQuotedTail("$ZxSb~", 0);
      JsonPointer jsonPointer1 = jsonPointer0.tail();
      assertNotNull(jsonPointer1);
      assertEquals("~$ZxSb~", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals("", jsonPointer1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonPointer jsonPointer0 = new JsonPointer();
      jsonPointer0.getMatchingProperty();
      assertEquals((-1), jsonPointer0.getMatchingIndex());
  }
}
