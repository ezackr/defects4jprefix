/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:46:35 GMT 2023
 */

package org.apache.commons.math.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rotation_ESTest extends Rotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01);
      assertEquals(0.7071067811865476, vector3D0.getY(), 0.01);
      assertEquals(-0.0, vector3D0.getX(), 0.01);
      assertEquals(0.7071067811865476, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation1 = new Rotation(vector3D0, 1523.489803044979);
      Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
      Rotation rotation3 = rotation2.revert();
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(-0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.9958335017214228, rotation3.getQ3(), 0.01);
      assertEquals(0.0, rotation3.getQ1(), 0.01);
      assertEquals(0.09119011376925146, rotation3.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
      Rotation rotation1 = rotation0.revert();
      assertEquals((-0.5), rotation1.getQ3(), 0.01);
      assertEquals((-0.5), rotation0.getQ2(), 0.01);
      assertEquals((-0.5), rotation1.getQ2(), 0.01);
      assertEquals(0.5, rotation1.getQ0(), 0.01);
      assertEquals((-0.5), rotation0.getQ0(), 0.01);
      assertEquals((-0.5), rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
      Rotation rotation1 = rotation0.revert();
      assertEquals(519.975675, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(519.975675, rotation1.getQ2(), 0.01);
      assertEquals(-0.0, rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      double double0 = rotation0.getQ3();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rotation rotation0 = new Rotation(321.383871488, 321.383871488, 321.383871488, 321.383871488, true);
      double double0 = rotation0.getQ3();
      assertEquals(0.5, rotation0.getQ1(), 0.01);
      assertEquals(0.5, rotation0.getQ0(), 0.01);
      assertEquals(0.5, rotation0.getQ2(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, (-54.66491), true);
      double double0 = rotation0.getQ3();
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals((-0.9999999999999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
      double double0 = rotation0.getQ2();
      assertEquals(0.5, rotation0.getQ1(), 0.01);
      assertEquals((-2634.3122), rotation0.getQ0(), 0.01);
      assertEquals(15.0, double0, 0.01);
      assertEquals((-2634.3122), rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, (-692.60412), (-692.60412), true);
      double double0 = rotation0.getQ2();
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ0(), 0.01);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
      assertEquals((-0.7071067811865475), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Rotation rotation0 = new Rotation(rotationOrder0, 0.0, (-0.19), 0.0);
      double double0 = rotation0.getQ1();
      assertEquals(0.0948571686345573, double0, 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01);
      assertEquals(0.9954908927552453, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      Rotation rotation0 = new Rotation(rotationOrder0, 1.0, (-1884.34179737), 0.5);
      double double0 = rotation0.getQ1();
      assertEquals((-0.29271082137490767), double0, 0.01);
      assertEquals((-0.6497895039397437), rotation0.getQ2(), 0.01);
      assertEquals(0.07474134349205648, rotation0.getQ3(), 0.01);
      assertEquals(0.6975010445818495, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1680.1648465), vector3D0, (-1680.1648465), vector3D0, (-1680.1648465), vector3D0);
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      double double0 = rotation0.getQ0();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, rotation0.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
      double double0 = rotation0.getQ0();
      assertEquals((-0.49635980445291794), rotation0.getQ2(), 0.01);
      assertEquals((-0.2294572251344263), double0, 0.01);
      assertEquals((-0.49635980445291794), rotation0.getQ3(), 0.01);
      assertEquals(0.6742427388415329, rotation0.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1035.56568471797), 3042.9316100441, (-2240.1263698), (-2240.1263698), true);
      Vector3D vector3D0 = rotation0.getAxis();
      assertEquals(0.6927255243237516, vector3D0.getX(), 0.01);
      assertEquals((-0.5099663459241128), vector3D0.getZ(), 0.01);
      assertEquals((-0.5099663459241128), vector3D0.getY(), 0.01);
      assertEquals((-0.2294572251344263), rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = new Vector3D(2.0, 2.0, (-246.8));
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Rotation rotation0 = new Rotation(rotationOrder0, (-823.349531201697), (-823.349531201697), (-3448.3189439421385));
      Rotation rotation1 = rotation0.revert();
      Vector3D vector3D0 = rotation1.getAxis();
      Vector3D vector3D1 = rotation1.IDENTITY.applyTo(vector3D0);
      assertEquals(1.3155065509244066, vector3D1.getNorm1(), 0.01);
      assertEquals(0.2995734943314427, vector3D1.getY(), 0.01);
      assertEquals((-0.9519235835140378), vector3D1.getX(), 0.01);
      assertEquals(0.06400947307892609, vector3D1.getZ(), 0.01);
      assertEquals(0.8173648305289856, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, (-5460.4), (-1.0), false);
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1.0));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = rotation0.applyTo(vector3D1);
      assertEquals((-5460.4), rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals((-1.0), rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Rotation rotation2 = rotation1.applyTo(rotation0);
      assertEquals(Double.NaN, rotation2.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Rotation rotation1 = new Rotation(rotationOrder0, 4.0, 4.0, (-1979.694588318826));
      Rotation rotation2 = rotation0.applyTo(rotation1);
      assertEquals(0.7599009079542555, rotation2.getQ3(), 0.01);
      assertEquals((-0.45905217497362333), rotation2.getQ2(), 0.01);
      assertEquals((-0.36901978488713144), rotation2.getQ0(), 0.01);
      assertEquals((-0.2750383775114654), rotation2.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
      Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
      Rotation rotation2 = rotation0.applyTo(rotation1);
      assertEquals(0.0, rotation2.getQ0(), 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation2.getQ1(), 0.01);
      assertEquals(519.975675, rotation2.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.0, 1.0, 1.0, (-1485.899928), false);
      Vector3D vector3D0 = new Vector3D(1.0, (-1485.899928));
      Vector3D vector3D1 = rotation0.IDENTITY.applyInverseTo(vector3D0);
      assertEquals(1.0, rotation0.getQ1(), 0.01);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = new Vector3D((-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1, (-2138.7303097069434), vector3D1);
      Vector3D vector3D3 = rotation0.IDENTITY.applyInverseTo(vector3D2);
      assertEquals(0.0, vector3D3.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
      Rotation rotation1 = rotation0.IDENTITY.applyInverseTo(rotation0);
      assertEquals(1.9868161777724352E-8, rotation0.getQ3(), 0.01);
      assertEquals((-1.9868161777724352E-8), rotation1.getQ0(), 0.01);
      assertEquals((-1.9868161777724352E-8), rotation1.getQ1(), 0.01);
      assertEquals((-1.9868161777724352E-8), rotation1.getQ2(), 0.01);
      assertEquals((-1.9868161777724352E-8), rotation1.getQ3(), 0.01);
      assertEquals(1.9868161777724352E-8, rotation0.getQ1(), 0.01);
      assertEquals(1.9868161777724352E-8, rotation0.getQ2(), 0.01);
      assertEquals(1.9868161777724352E-8, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.0, 0.0, 519.975675, 0.0, false);
      Rotation rotation1 = new Rotation(0.0, 3904.77, 0.0, 0.0, true);
      Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
      double double0 = Rotation.distance(rotation0, rotation2);
      assertEquals(0.0, rotation1.getQ0(), 0.01);
      assertEquals((-1.0), rotation2.getQ1(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.0, rotation2.getQ3(), 0.01);
      assertEquals(519.975675, rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rotation.distance((Rotation) null, (Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
      // Undeclared exception!
      try { 
        rotation0.IDENTITY.applyTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      // Undeclared exception!
      try { 
        rotation0.applyTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2009.6), 3295.7944100348, 0.0, (-2009.6), false);
      // Undeclared exception!
      try { 
        rotation0.IDENTITY.applyInverseTo((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      // Undeclared exception!
      try { 
        rotation0.applyInverseTo((Rotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((double[][]) null, 103.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, 0.09090909090909091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null, (Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((Vector3D) null, 2657.56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation((RotationOrder) null, 954.43669182405, (-1757.22622), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rotation rotation0 = new Rotation((-877.0), (-877.0), (-877.0), (-877.0), true);
      double double0 = rotation0.getAngle();
      assertEquals((-0.5), rotation0.getQ0(), 0.01);
      assertEquals((-0.5), rotation0.getQ1(), 0.01);
      assertEquals((-0.5), rotation0.getQ3(), 0.01);
      assertEquals(2.0943951023931953, double0, 0.01);
      assertEquals((-0.5), rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.25, (-2279.098093399), 5748.6735217073);
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = rotation0.IDENTITY.applyTo(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = rotation0.applyInverseTo(vector3D0);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, 0.0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
      Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      try { 
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      Rotation rotation0 = new Rotation(0.0, 0.16666666666745392, (-0.4714044926931317), 0.0, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      try { 
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D0);
      Rotation rotation1 = new Rotation(vector3D0, vector3D1);
      Rotation rotation2 = rotation0.IDENTITY.applyInverseTo(rotation1);
      try { 
        rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Rotation rotation0 = Rotation.IDENTITY;
      Vector3D vector3D0 = rotation0.getAxis();
      Rotation rotation1 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertEquals(Double.NaN, rotation1.getQ0(), 0.01);
      
      rotation1.getAngles(rotationOrder0);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      Rotation rotation0 = Rotation.IDENTITY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Rotation rotation0 = new Rotation(vector3D0, (-834.3178));
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      try { 
        rotation0.IDENTITY.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Rotation rotation0 = new Rotation(521.84415, (-0.5), 1119.201639707, 0.1, false);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1634.076), (-1634.076), 282.659391833, 747.6433037848643, false);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.02244492401198233, 0.02244492401198233, (-0.7820032231927776), 5334.0, false);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Rotation rotation0 = new Rotation((-1.7825557603452563E-4), 0.2298510942896171, 2038.4502715, 0.027521523592243975, false);
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.8022124572060929, 0.8022124572060929, (-0.7820032231927776), 5334.0, false);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      double[] doubleArray0 = rotation0.IDENTITY.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Rotation rotation0 = new Rotation(0.25, 0.25, 0.25, 1829.5243766, false);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1499.4005), (-1499.4005), 0.0, 0.11764700710773468, false);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Rotation rotation0 = new Rotation((-2634.3122), 0.5, 15.0, (-2634.3122), false);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      try { 
        rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Rotation rotation0 = new Rotation((-1099.4598898379), (-1099.4598898379), (-1099.4598898379), (-1099.4598898379), false);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Rotation rotation1 = new Rotation(rotationOrder0, 3155.8, 0.5, 1814.7467);
      Rotation rotation2 = rotation0.applyInverseTo(rotation1);
      try { 
        rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.3333333134651184, 0.3333333134651184);
      Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertEquals(0.4083655420666395, rotation0.getQ2(), 0.01);
      assertArrayEquals(new double[] {2.0346162820319744, 0.8413255633379556, (-1.1069763715578187)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Rotation rotation1 = new Rotation(vector3D0, 3295.4179865744);
      Rotation rotation2 = rotation1.applyInverseTo(rotation0);
      Rotation rotation3 = rotation2.applyTo(rotation0);
      double double0 = rotation3.getAngle();
      assertEquals(3.0288856122966332, double0, 0.01);
      assertEquals(0.0, rotation2.getQ2(), 0.01);
      assertEquals(0.0, rotation3.getQ1(), 0.01);
      assertEquals(0.0, rotation3.getQ2(), 0.01);
      assertEquals((-0.056323698221933796), rotation3.getQ0(), 0.01);
      assertEquals((-0.9984125605272625), rotation3.getQ3(), 0.01);
      assertEquals((-0.9984125605272625), rotation2.getQ3(), 0.01);
      assertEquals(-0.0, rotation1.getQ1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      double double0 = rotation0.IDENTITY.getAngle();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-0.1), (-2491.731326436284));
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      Vector3D vector3D1 = rotation0.getAxis();
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Vector3D vector3D0 = rotationOrder0.getA2();
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = vector3D0.orthogonal();
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      Vector3D vector3D1 = rotation0.getAxis();
      Rotation rotation1 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D1);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.3333333134651184, 0.3333333134651184);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.subtract((Vector<Euclidean3D>) vector3D0);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D1, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, (-0.18084726264509002));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, (-1091.2336470071473));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // a 3x4 matrix cannot be a rotation matrix
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.03492798088037815, 0.03492798088037815);
      Rotation rotation0 = new Rotation(vector3D0, (-1852.3083));
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = new Rotation(doubleArray0, 0.0);
      assertEquals(0.4083655420666395, rotation0.getQ3(), 0.01);
      assertEquals((-0.40836554206663955), rotation1.getQ3(), 0.01);
      assertEquals(0.4083655420666395, rotation0.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      Rotation rotation1 = rotation0.applyTo(rotation0);
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
      assertEquals(1.0, rotation1.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
      double[][] doubleArray0 = rotation0.getMatrix();
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, 1.9868161777724352E-8);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // the closest orthogonal matrix has a negative determinant -1
         //
         verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0.9743509177808812, rotation0.getQ0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Rotation rotation0 = new Rotation(vector3D0, (-239.2149974796));
      double double0 = rotation0.getQ0();
      assertEquals(0.9743509177808812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      double double0 = rotation0.getQ2();
      assertEquals(0.0, rotation0.getQ1(), 0.01);
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      double double0 = rotation0.getQ1();
      assertEquals(1.0, rotation0.getQ0(), 0.01);
      assertEquals(0.0, rotation0.getQ2(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Rotation rotation0 = new Rotation(1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, 1.9868161777724352E-8, false);
      Rotation rotation1 = rotation0.IDENTITY.revert();
      assertEquals(0.0, rotation1.getQ3(), 0.01);
      assertEquals(1.9868161777724352E-8, rotation0.getQ3(), 0.01);
      assertEquals((-1.0), rotation1.getQ0(), 0.01);
      assertEquals(0.0, rotation1.getQ1(), 0.01);
      assertEquals(0.0, rotation1.getQ2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      Rotation.distance(rotation0, rotation0);
  }
}
