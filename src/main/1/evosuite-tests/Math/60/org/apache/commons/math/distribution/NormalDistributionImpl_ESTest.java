/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:27:34 GMT 2023
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NormalDistributionImpl_ESTest extends NormalDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = normalDistributionImpl0.getInitialDomain(Double.NaN);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getDomainLowerBound(0.5);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      // Undeclared exception!
      try { 
        normalDistributionImpl0.inverseCumulativeProbability(901.9696468329073);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 901.97 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.sample();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1273.944844), 6.283185307179586, (-2317.66173462341));
      double double0 = normalDistributionImpl0.sample();
      assertEquals((-1273.944844), double0, 0.01);
      assertEquals(6.283185307179586, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5000000000042687);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1914.57745749), 782.268, 0.0);
      double double0 = normalDistributionImpl0.getSolverAbsoluteAccuracy();
      assertEquals(782.268, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1914.57745749), normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-2186.7531), 1.0E-9);
      double double0 = normalDistributionImpl0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals((-2186.7531), normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-2.0), Double.POSITIVE_INFINITY, (-1.7976931348623157E308));
      double double0 = normalDistributionImpl0.getSolverAbsoluteAccuracy();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals((-2.0), normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(2776.689, 2776.689, 1.2393345855018391E-8);
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(2776.689, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(2776.689, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1914.57745749), 782.268, 0.0);
      double double0 = normalDistributionImpl0.getMean();
      assertEquals((-1914.57745749), double0, 0.01);
      assertEquals(782.268, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1914.57745749), 782.268, 0.0);
      double double0 = normalDistributionImpl0.getInitialDomain(0.0);
      assertEquals((-2696.8454574899997), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getDomainUpperBound(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.75, 0.5, 0.75);
      double double0 = normalDistributionImpl0.getDomainUpperBound(0.5);
      assertEquals(0.75, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.5, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-2186.7531), 1.0E-9);
      double double0 = normalDistributionImpl0.getDomainUpperBound((-7736.567));
      assertEquals((-2186.7531), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(4.7421875, 4.7421875);
      double double0 = normalDistributionImpl0.getDomainLowerBound(2.0);
      assertEquals(4.7421875, double0, 0.01);
      assertEquals(4.7421875, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1.7976931348623157E308), 209.088917880791, 209.088917880791);
      normalDistributionImpl0.getDomainLowerBound((-1.7976931348623157E308));
      assertEquals((-1.7976931348623157E308), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(209.088917880791, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-2186.7531), 1.0E-9);
      double double0 = normalDistributionImpl0.density((-1484.7644277));
      assertEquals((-2186.7531), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.cumulativeProbability((-1806.763993368636));
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1273.944844), 6.283185307179586, (-2317.66173462341));
      double double0 = normalDistributionImpl0.cumulativeProbability(0.0);
      assertEquals(6.283185307179586, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals((-1273.944844), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-2606.330267894), 1.4456468917292502E-16);
      // Undeclared exception!
      try { 
        normalDistributionImpl0.inverseCumulativeProbability(1.0E-9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Continued fraction diverged to NaN for value \u221E
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(468.56833404566, 468.56833404566);
      // Undeclared exception!
      normalDistributionImpl0.inverseCumulativeProbability(1.0E-9);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1914.57745749), 782.268, 0.0);
      // Undeclared exception!
      try { 
        normalDistributionImpl0.inverseCumulativeProbability((-1914.57745749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,914.577 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1.7976931348623157E308), 209.088917880791, 209.088917880791);
      try { 
        normalDistributionImpl0.cumulativeProbability(0.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Continued fraction diverged to NaN for value \u221E
         //
         verifyException("org.apache.commons.math.util.ContinuedFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl((-2289.0505632029985), (-36.04));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -36.04 is smaller than, or equal to, the minimum (0): standard deviation (-36.04)
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getInitialDomain(0.5);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0E-9);
      assertEquals((-5.997807014826545), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 0.008333333333333333);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(0.008333333333333333, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-1914.57745749), 782.268, 0.0);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals((-1914.57745749), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(782.268, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl((-1507.8600820797808), (-1507.8600820797808), (-1507.8600820797808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,507.86 is smaller than, or equal to, the minimum (0): standard deviation (-1,507.86)
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-3298.3076802071), Double.POSITIVE_INFINITY);
      try { 
        normalDistributionImpl0.inverseCumulativeProbability(0.9999997615814209);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // \u221E is larger than, or equal to, the maximum (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000): endpoints do not specify an interval: [\u221E, 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000]
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-3298.3076802071), Double.POSITIVE_INFINITY);
      normalDistributionImpl0.sample();
      double double0 = normalDistributionImpl0.sample();
      assertEquals((-3298.3076802071), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.density(0.5000000003989423);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.35206532669407264, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }
}
