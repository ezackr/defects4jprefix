/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 21:44:32 GMT 2023
 */

package org.apache.commons.math.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.special.Gamma;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gamma_ESTest extends Gamma_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gamma.regularizedGammaQ(0.0, (double) 3494);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Gamma.regularizedGammaP(0.9999559702915715, 3.6899182659531625E-6, 3.6899182659531625E-6, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (0) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gamma.regularizedGammaP(1.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gamma.regularizedGammaP(0.0, 2978.238);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gamma.logGamma(0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gamma.regularizedGammaQ(622.8906486212, 9997.0, 9990.0, 1800);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gamma.regularizedGammaQ(509.93820562505, 2978.238);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gamma.logGamma(2.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gamma.logGamma(1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaQ(0.5, 0.5, (-914.4947086760305), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaQ(1.0E-8, 1233.7072874555);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaP(1.0E-8, 4.652362892704858E-5, (-1109.29), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      Gamma.regularizedGammaP(1.0E-8, 1184.443523678873);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(1.7976931348623157E308, 2872.3, 14.136097974741746, 1701);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        Gamma.regularizedGammaQ(0.4007030019962433, 0.4007030019962433, 0.4007030019962433, (-5));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (-5) exceeded
         //
         verifyException("org.apache.commons.math.special.Gamma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(Double.NaN, 0.0, Double.NaN, Integer.MAX_VALUE);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(1.7976931348623157E308, Double.NaN, (-2270.0977526), 2144888736);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(1.7976931348623157E308, 891.739, 0.0, Integer.MAX_VALUE);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(9951.0, 9968.0, Double.NaN, 660);
      assertEquals((-1.1790540527652342), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(293.348, 293.348, Double.NaN, 2999);
      assertEquals(0.023286012546278472, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(0.49650146359570896, 0.0, (-1509.1051739439213), 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(Double.NaN, 0.0, (-9.837447530487956E-5), (-1189));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = Gamma.logGamma(3.399464998481189E-5);
      assertEquals(10.289287777823304, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(2386.74403743, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(0.8294376532046004, 0.0, 1440.30126582, Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(793.257550644769, (-0.02456460149525469), (double) (-1), (-1));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ((-2799.8316867812), 11.0, 11.0, 2672);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Gamma.regularizedGammaQ(0.5401112953400191, 425.9);
      assertEquals((-1.8207657603852567E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP((double) 660, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP(0.9999999999999971, (-298.0), 0.9999999999999971, 2672);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP((-1.0), 1.0E-8, 9989.0, 660);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = Gamma.regularizedGammaP((double) 3494, Double.NaN, Double.NaN, 3494);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = Gamma.logGamma((-3133.12394639));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = Gamma.logGamma(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
