/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:47:19 GMT 2023
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 1354, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.nextAfter(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MathUtils.indicator((short) (byte)0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathUtils.indicator(0L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathUtils.indicator(1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.indicator(1.0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathUtils.indicator((byte)107);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[9];
      MathUtils.equals(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.cosh((-1.0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.binomialCoefficientLog(0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.addAndCheck(0L, (-2067L));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.subAndCheck(720L, 1L);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.subAndCheck(4718, 4718);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.subAndCheck(1892, 16);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.sinh(0.0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.sinh((-1.0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.scalb((-1.0), (-1614));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.round((float) 0, 0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.round(0.0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.round(1588.09, (int) (short)1, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.round((double) 1L, (int) (short)1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.round((-180.6522257959), (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.normalizeAngle(113.58579447, 1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.normalizeAngle((-2161.79362456336), 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.mulAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.mulAndCheck(1639, (-1057));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.log(544, 544);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.log(244.86671, 0.0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.lcm(0, (-1477));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.hash((double) 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathUtils.hash((double) 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathUtils.factorialLog(0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.binomialCoefficientLog(351, (-1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.binomialCoefficientDouble((short)739, (-1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.addAndCheck(0L, 0L);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.addAndCheck((long) 0, 1999L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.addAndCheck(0, 0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.addAndCheck((-1), 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((double) (-1), 0, 3677);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1972, 2146517618);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorialLog((short)10008);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      MathUtils.factorial(2144874311);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientLog(131810, 19);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficientDouble(1696258207, 14);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      MathUtils.binomialCoefficient(846855, (-405));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-249.9531578), 0);
      assertEquals((-249.95315779999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1.0), (-1.0));
      assertEquals((-1.0000000000000002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.nextAfter(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-873L), (long) (short)1);
      assertEquals((-873L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-2696L), (-2696L));
      assertEquals(7268416L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.mulAndCheck(731142, 1359);
      assertEquals(993621978, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = MathUtils.indicator((float) (-1630L));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = MathUtils.indicator((float) (short)1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = MathUtils.gcd((-1956), (-1956));
      assertEquals(1956, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = MathUtils.factorialLog(1359);
      assertEquals(8450.037750891279, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-3253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(3297);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(0.464843750003638, 0.464843750003638);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1535, 15);
      assertEquals(82.07639319888865, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1800), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = MathUtils.subAndCheck(0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = MathUtils.sign((short)899);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = MathUtils.sign((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = MathUtils.sign((long) (short)1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = MathUtils.sign((-1593));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = MathUtils.sign(2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = MathUtils.sign((-1138.658F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = MathUtils.sign((float) (short)1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.sign((-759.6439791));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.sign((double) 38);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)31);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-41));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float float0 = MathUtils.round((float) 120, (int) (short) (-1), 5);
      assertEquals(120.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = MathUtils.round(1.0F, 0, 0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 1, 570);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, (-2742), 356);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.scalb(1186.58, 0);
      assertEquals(1186.58, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.nextAfter(1.0, 0.0);
      assertEquals(0.9999999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0L, (-1386));
      assertEquals((-4.9E-324), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathUtils.nextAfter(Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4503599627370495L, 2969L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(2432902008176640000L, (long) (-1337364193));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1L), (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 21, (-2588L));
      assertEquals((-54348L), long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 19, (long) 19);
      assertEquals(361L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-150), (-1046936661));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = MathUtils.indicator((short)899);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = MathUtils.indicator(517L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = MathUtils.indicator((-455L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = MathUtils.indicator((int) (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = MathUtils.indicator((-5480));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = MathUtils.round(784.95306F, (int) (short)1);
      assertEquals(785.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = MathUtils.indicator(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathUtils.indicator((-5235.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = MathUtils.indicator(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathUtils.indicator((double) 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = MathUtils.gcd(2, 21);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = MathUtils.lcm(840, 840);
      assertEquals(840, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = MathUtils.gcd((-405), 0);
      assertEquals(405, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = MathUtils.gcd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((short) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(570);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = MathUtils.factorial(0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, 738.67692);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(379.65915000474, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1638, (byte)1);
      assertEquals(7.401231264413015, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(17, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-1109), (-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble(0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(19, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(31, 31);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-176), (-1207));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(7, 2826);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(974, 840);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 1, 517L);
      assertEquals((-516L), long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2147390916, 2147390916);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((int) (byte)1, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathUtils.log(0.9999999999999999, 1.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathUtils.round((double) 0, 6);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = MathUtils.round((-717.957F), 11);
      assertEquals((-717.957F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(0L, 2.2909552562);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathUtils.sinh(6);
      assertEquals(201.71315737027922, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = MathUtils.addAndCheck((-1528L), (-1528L));
      assertEquals((-3056L), long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = MathUtils.round((float) (-1528L), (int) (short)1, (int) (short)1);
      assertEquals((-1527.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(961, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = MathUtils.hash((double) (-1528L));
      assertEquals((-1063788544), int0);
  }
}
