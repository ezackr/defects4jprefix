/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:56:11 GMT 2023
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.NaN.orthogonal();
      Vector3D.distanceInf(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-2.0), vector3D1.getY(), 0.01);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(2.4741236059851676E7, vector3D1.getNormSq(), 0.01);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
      Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
      Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
      Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
      double double0 = Vector3D.angle(vector3D1, vector3D4);
      assertEquals(3.141592653559801, double0, 0.01);
      assertEquals(294.0708254142704, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.6, 342.0);
      Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
      double double0 = Vector3D.angle(vector3D1, vector3D0);
      assertEquals((-0.5123901464912445), vector3D0.getY(), 0.01);
      assertEquals(6.647751099882482E-17, double0, 0.01);
      assertEquals((-0.7489586004490071), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
      Vector3D.angle(vector3D0, vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.NaN.normalize();
      assertTrue(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = vector3D1.getDelta();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.MINUS_K.negate();
      double double0 = vector3D1.getNormSq();
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getNormSq();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.getNorm1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
      assertEquals(2.0, vector3D1.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertTrue(vector3D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
      assertEquals((-0.48297428029025974), vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.8756345382510363, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
      assertEquals(3070629.5879694405, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals((-1752.3212), vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.9999, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
      double double0 = Vector3D.distance1(vector3D1, vector3D1);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.ZERO.negate();
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
      double double0 = vector3D0.getZ();
      assertEquals(400.0123002055866, vector3D0.getNormSq(), 0.01);
      assertEquals(0.07842259109020233, double0, 0.01);
      assertEquals(0.07842259109020233, vector3D0.getX(), 0.01);
      assertEquals(20.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.getZ();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
      double double0 = vector3D0.getY();
      assertEquals(409.0, double0, 0.01);
      assertEquals(409.0, vector3D0.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getX(), 0.01);
      assertEquals(334562.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
      double double0 = vector3D1.getX();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.getX();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      double double0 = vector3D0.getNormSq();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.ZERO.getNormInf();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.ZERO.getNorm1();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.ZERO.getNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.getDelta();
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.MINUS_K.getDelta();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.MINUS_I.getAlpha();
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
      double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.orthogonal();
      double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
      double double0 = Vector3D.distance1(vector3D1, vector3D0);
      assertEquals(2.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
      double double0 = Vector3D.distance(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(4281.08, double0, 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
      Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
      assertEquals((-368.18896542120007), vector3D3.getY(), 0.01);
      assertEquals((-8.0E298), vector3D2.getY(), 0.01);
      assertTrue(vector3D3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
      Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(0.9999999999999998, vector3D3.getNormSq(), 0.01);
      assertEquals((-0.7071067811865475), vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertFalse(vector3D1.isNaN());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.NaN.orthogonal();
      Vector3D vector3D2 = vector3D0.add(vector3D1);
      assertEquals(Double.NaN, vector3D2.getX(), 0.01);
      assertEquals(Double.NaN, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
      Vector3D vector3D1 = vector3D0.negate();
      Vector3D vector3D2 = vector3D1.add(vector3D0);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals((-0.7063126629085149), vector3D0.getZ(), 0.01);
      assertEquals(0.49999874016678386, vector3D0.getY(), 0.01);
      assertEquals(0.9999999999999998, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
      assertEquals((-0.5011224222150824), vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);
      assertTrue(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.MINUS_K.negate();
      Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      // Undeclared exception!
      try { 
        vector3D0.PLUS_I.subtract((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2714.53457909, 2714.53457909, 2714.53457909);
      // Undeclared exception!
      try { 
        vector3D0.subtract(2714.53457909, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      // Undeclared exception!
      try { 
        Vector3D.distanceSq(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1036.6), Double.NEGATIVE_INFINITY, (-610.2));
      // Undeclared exception!
      try { 
        Vector3D.distanceInf(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.097, (-4218.6746623851), 0.0);
      // Undeclared exception!
      try { 
        Vector3D.distance1((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.distance((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      // Undeclared exception!
      try { 
        Vector3D.crossProduct(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Vector3D.angle((Vector3D) null, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      // Undeclared exception!
      try { 
        vector3D0.add((Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector3D0.PLUS_I.add((-135.3), (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D((-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D(10.0, (Vector3D) null, Double.NaN, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector3D vector3D0 = null;
      try {
        vector3D0 = new Vector3D((-3672.146764020265), (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      boolean boolean0 = vector3D0.isNaN();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      boolean boolean0 = vector3D0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
      boolean boolean0 = vector3D1.isNaN();
      assertTrue(boolean0);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getZ();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = vector3D0.getY();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        Vector3D.dotProduct((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
      double double0 = vector3D0.getX();
      assertEquals((-1411.89255812476), vector3D0.getZ(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1993440.5956880786, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      double double0 = vector3D0.MINUS_K.getNorm();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.POSITIVE_INFINITY.hashCode();
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
      Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
      boolean boolean0 = vector3D3.equals(vector3D2);
      assertTrue(boolean0);
      assertEquals(0.0, vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D3.getX(), 0.01);
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D1.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
      boolean boolean0 = vector3D1.equals(vector3D2);
      assertEquals((-1.0), vector3D2.getZ(), 0.01);
      assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01);
      assertFalse(boolean0);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
      Object object0 = new Object();
      boolean boolean0 = vector3D0.equals(object0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.4201396822393068, vector3D0.getZ(), 0.01);
      assertEquals((-0.6247762571148826), vector3D0.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals((-0.6581316554864781), vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      boolean boolean0 = vector3D0.equals(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(47.9603363, vector3D0.getX(), 0.01);
      assertEquals(47.9603363, vector3D0.getY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(47.9603363, vector3D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(boolean0);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
      vector3D1.hashCode();
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertTrue(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
      Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertTrue(vector3D1.isNaN());
      assertEquals(0.4632477837450123, vector3D0.getX(), 0.01);
      assertEquals(0.49864744519584836, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.7326337531502269, vector3D0.getZ(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.NaN.orthogonal();
      Vector3D.angle(vector3D1, vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
      Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.7071067811865475, vector3D3.getY(), 0.01);
      assertEquals(0.7071067811865475, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
      Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
      Vector3D vector3D2 = vector3D1.subtract(vector3D0);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(0.37696688233705905, vector3D2.getY(), 0.01);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.7933476776241507, vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.normalize();
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D2.getY(), 0.01);
      assertEquals(0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        vector3D0.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
      boolean boolean0 = vector3D1.isInfinite();
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      vector3D0.MINUS_I.getNormInf();
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getX(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.getNormSq();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.PLUS_J.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.MINUS_I.add(vector3D0);
      assertTrue(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      String string0 = vector3D0.MINUS_I.toString();
      assertEquals("{-1; 0; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = vector3D0.ZERO.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0);
      Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
      assertEquals(0.0, vector3D0.getY(), 0.01);
      assertEquals(1.3599999999999999, vector3D1.getNormSq(), 0.01);
      assertEquals(0.6, vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D0, vector3D1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D.angle(vector3D0, vector3D0);
  }
}
