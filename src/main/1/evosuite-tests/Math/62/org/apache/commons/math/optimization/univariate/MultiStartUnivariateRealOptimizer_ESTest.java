/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:32:47 GMT 2023
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.MersenneTwister;
import org.apache.commons.math.random.RandomAdaptor;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.Well1024a;
import org.apache.commons.math.random.Well19937a;
import org.apache.commons.math.random.Well19937c;
import org.apache.commons.math.random.Well44497a;
import org.apache.commons.math.random.Well44497b;
import org.apache.commons.math.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 0L);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 68, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(555, 33, 68, 68, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well19937c well19937c0 = new Well19937c(100);
      well19937c0.setSeed(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)3;
      well19937c0.nextBytes(byteArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 555, well19937c0);
      well19937c0.nextFloat();
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 869, (double) 0L);
      multiStartUnivariateRealOptimizer0.getOptima();
      multiStartUnivariateRealOptimizer0.getOptima();
      Random.setNextRandom(33);
      multiStartUnivariateRealOptimizer0.getEvaluations();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = 253.362;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      System.setCurrentTimeMillis(869);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well19937c well19937c0 = new Well19937c(2450);
      well19937c0.setSeed(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)3;
      well19937c0.nextBytes(byteArray0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
      well19937c0.nextBoolean();
      well19937c0.nextFloat();
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
      multiStartUnivariateRealOptimizer0.getOptima();
      multiStartUnivariateRealOptimizer0.getOptima();
      Random.setNextRandom(2450);
      multiStartUnivariateRealOptimizer0.getEvaluations();
      Random.setNextRandom(245616);
      Random.setNextRandom(245616);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (-126.151);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, 53);
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertNotNull(univariateRealPointValuePair0);
      
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well19937c well19937c0 = new Well19937c(2450);
      assertNotNull(well19937c0);
      
      well19937c0.setSeed(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      well19937c0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)21, (byte)69, (byte) (-66)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      boolean boolean0 = well19937c0.nextBoolean();
      assertTrue(boolean0);
      
      float float0 = well19937c0.nextFloat();
      assertEquals(0.21316564F, float0, 0.01F);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(253.362, univariateRealPointValuePair1.getPoint(), 0.01);
      assertEquals(53.0, univariateRealPointValuePair1.getValue(), 0.01);
      assertNotNull(univariateRealPointValuePair1);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertSame(univariateRealPointValuePair1, univariateRealPointValuePair0);
      
      UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(univariateRealPointValuePairArray0);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(2450, univariateRealPointValuePairArray0.length);
      
      UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
      assertFalse(univariateRealPointValuePairArray1.equals((Object)univariateRealPointValuePairArray0));
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(univariateRealPointValuePairArray1);
      assertNotSame(univariateRealPointValuePairArray1, univariateRealPointValuePairArray0);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(2450, univariateRealPointValuePairArray1.length);
      
      Random.setNextRandom(2450);
      int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertEquals(53.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(245616, int0);
      
      Random.setNextRandom(245616);
      Random.setNextRandom(245616);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      well512a0.setSeed(4420);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(2906.946, 0.0);
      assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertNotNull(univariateRealPointValuePair0);
      
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(253, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(1655, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
      assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(2906.946, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(0.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(2906.946, univariateRealPointValuePair1.getPoint(), 0.01);
      assertEquals(0.0, univariateRealPointValuePair1.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(253, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(univariateRealPointValuePair1);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertSame(goalType1, goalType0);
      assertSame(univariateRealPointValuePair1, univariateRealPointValuePair0);
      assertEquals(4, intArray0.length);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 1 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int int0 = 3694;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 3694, well44497b0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3694;
      doubleArray0[1] = (double) 3694;
      doubleArray0[2] = (double) 3694;
      doubleArray0[3] = (double) 3694;
      doubleArray0[4] = (double) 3694;
      doubleArray0[5] = (double) 3694;
      doubleArray0[6] = (double) 3694;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(6, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      PolynomialFunction polynomialFunction1 = new PolynomialFunction(doubleArray0);
      assertTrue(polynomialFunction1.equals((Object)polynomialFunction0));
      assertEquals(6, polynomialFunction1.degree());
      assertNotNull(polynomialFunction1);
      assertArrayEquals(new double[] {3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
      assertTrue(polynomialFunction0.equals((Object)polynomialFunction1));
      assertTrue(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(12, polynomialFunction2.degree());
      assertNotNull(polynomialFunction2);
      assertArrayEquals(new double[] {3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertEquals(7, doubleArray0.length);
      
      PolynomialFunction polynomialFunction3 = polynomialFunction0.add(polynomialFunction1);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertTrue(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertTrue(polynomialFunction1.equals((Object)polynomialFunction0));
      assertEquals(6, polynomialFunction3.degree());
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(6, polynomialFunction1.degree());
      assertNotNull(polynomialFunction3);
      assertArrayEquals(new double[] {3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0, 3694.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertEquals(7, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = (-2005.84);
      // Undeclared exception!
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-2005.84), (-31.0), 1.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 878, well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 213;
      doubleArray0[1] = (double) (-1);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertArrayEquals(new double[] {213.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (-586.2123524978173), (double) (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 878 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(95, 95);
      assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
      assertNotNull(univariateRealPointValuePair0);
      
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(95, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1, well1024a0);
      assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      GoalType goalType1 = GoalType.MINIMIZE;
      UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, 1.0, (double) 1, (-58.37));
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(95.0, univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(95.0, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals(95.0, univariateRealPointValuePair1.getValue(), 0.01);
      assertEquals(95.0, univariateRealPointValuePair1.getPoint(), 0.01);
      assertEquals((-1), multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(univariateRealPointValuePair1);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertSame(goalType1, goalType0);
      assertSame(univariateRealPointValuePair1, univariateRealPointValuePair0);
      assertEquals(4, intArray0.length);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1, 1.0, (-2945.7451));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 1 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertNotNull(univariateRealPointValuePair0);
      
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 53, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(555, 33, 53, 53, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well19937c well19937c0 = new Well19937c(2450);
      assertNotNull(well19937c0);
      
      well19937c0.setSeed(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      well19937c0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)21, (byte)69, (byte) (-66)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      boolean boolean0 = well19937c0.nextBoolean();
      assertTrue(boolean0);
      
      float float0 = well19937c0.nextFloat();
      assertEquals(0.21316564F, float0, 0.01F);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariateRealPointValuePair univariateRealPointValuePair1 = multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals((-126.151), univariateRealPointValuePair1.getValue(), 0.01);
      assertEquals(253.362, univariateRealPointValuePair1.getPoint(), 0.01);
      assertNotNull(univariateRealPointValuePair1);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertSame(univariateRealPointValuePair1, univariateRealPointValuePair0);
      
      UnivariateRealPointValuePair[] univariateRealPointValuePairArray0 = multiStartUnivariateRealOptimizer0.getOptima();
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(univariateRealPointValuePairArray0);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(2450, univariateRealPointValuePairArray0.length);
      
      UnivariateRealPointValuePair[] univariateRealPointValuePairArray1 = multiStartUnivariateRealOptimizer0.getOptima();
      assertFalse(univariateRealPointValuePairArray1.equals((Object)univariateRealPointValuePairArray0));
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(univariateRealPointValuePairArray1);
      assertNotSame(univariateRealPointValuePairArray1, univariateRealPointValuePairArray0);
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(2450, univariateRealPointValuePairArray1.length);
      
      Random.setNextRandom(2450);
      int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertEquals(253.362, univariateRealPointValuePair0.getPoint(), 0.01);
      assertEquals((-126.151), univariateRealPointValuePair0.getValue(), 0.01);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(245616, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertSame(univariateRealPointValuePair0, univariateRealPointValuePair1);
      assertEquals(245616, int0);
      
      Random.setNextRandom(245616);
      Random.setNextRandom(245616);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = (ConvergenceChecker<UnivariateRealPointValuePair>) mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(convergenceChecker0).toString();
      BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(convergenceChecker0).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      MersenneTwister mersenneTwister0 = new MersenneTwister(53);
      assertNotNull(mersenneTwister0);
      
      MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 2555, mersenneTwister0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker1 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(convergenceChecker1);
      assertSame(convergenceChecker1, convergenceChecker0);
      
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-1), mersenneTwister0);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      
      int int0 = multiStartUnivariateRealOptimizer1.getEvaluations();
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer1.getOptima();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int int0 = 2450;
      Well19937c well19937c0 = new Well19937c(2450);
      assertNotNull(well19937c0);
      
      well19937c0.setSeed(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      well19937c0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)21, (byte)69, (byte) (-66)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      boolean boolean0 = well19937c0.nextBoolean();
      assertTrue(boolean0);
      
      float float0 = well19937c0.nextFloat();
      assertEquals(0.21316564F, float0, 0.01F);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 2,450 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      RandomGenerator randomGenerator0 = null;
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, (RandomGenerator) null);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 0, (RandomGenerator) null);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNull(convergenceChecker0);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      float float0 = well1024a0.nextFloat();
      assertEquals(0.37931466F, float0, 0.01F);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, (-18), well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      multiStartUnivariateRealOptimizer0.setMaxEvaluations(116);
      assertEquals(116, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 116, well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer1.optimize((PolynomialFunction) null, goalType0, 1485.7335344, (double) 0.37931466F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 1039, (RandomGenerator) null);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1039;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {1039.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 1039, 1.0, (-0.16666666666666666));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-2728), well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(1, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      
      int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(1, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(1, int0);
      
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, (-2728), well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2728);
      PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
      try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array sizes should have difference 1 (4 != 4 + 1)
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 112;
      Well19937c well19937c0 = new Well19937c((long) 112);
      assertNotNull(well19937c0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 112, well19937c0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      intArray0[0] = (-1468);
      intArray0[1] = (-1468);
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {(-1468), (-1468)}, intArray0);
      assertEquals(2, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, (-1468), well44497a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      assertArrayEquals(new int[] {(-1468), (-1468)}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1468);
      doubleArray0[1] = (double) (-1468);
      doubleArray0[2] = (double) (-1468);
      doubleArray0[3] = (double) (-1468);
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertEquals(3, polynomialFunctionLagrangeForm0.degree());
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertArrayEquals(new double[] {(-1468.0), (-1468.0), (-1468.0), (-1468.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunctionLagrangeForm0, goalType0, (double) (-1468), (-1468.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      long long0 = 0L;
      Well19937a well19937a0 = new Well19937a(0L);
      assertNotNull(well19937a0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
      assertNotNull(randomAdaptor0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 185, randomAdaptor0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, int0);
      
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer1).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer1).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int int1 = 52;
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer1, 52, randomAdaptor0);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 185;
      doubleArray0[1] = (double) 52;
      int int2 = randomAdaptor0.nextInt(52);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(46, int2);
      
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer1.getConvergenceChecker();
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertNull(convergenceChecker0);
      
      doubleArray0[2] = (double) 0L;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(1, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {185.0, 52.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer1.optimize(polynomialFunction0, goalType0, (double) 0L, (double) 46);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 52 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      assertNotNull(mersenneTwister0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer0, 5116, mersenneTwister0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      multiStartUnivariateRealOptimizer0.setMaxEvaluations((-2676));
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals((-2676), multiStartUnivariateRealOptimizer0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, mersenneTwister0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well512a well512a0 = new Well512a((long) 0);
      assertNotNull(well512a0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 0, well512a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, 0, jDKRandomGenerator0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (-181.00352113), 907.7648312, 907.7648312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int int0 = 3765;
      Well1024a well1024a0 = new Well1024a((long) 3765);
      assertNotNull(well1024a0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 3765, well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[0] = 3765;
      intArray0[1] = 3765;
      intArray0[2] = 3765;
      intArray0[3] = 3765;
      intArray0[4] = 3765;
      intArray0[5] = 4531;
      intArray0[6] = 3765;
      intArray0[7] = 3765;
      intArray0[8] = 3765;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {3765, 3765, 3765, 3765, 3765, 4531, 3765, 3765, 3765}, intArray0);
      assertEquals(9, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>((BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) null, 4531, well44497a0);
      assertEquals(0, multiStartUnivariateRealOptimizer1.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer1.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer1);
      assertArrayEquals(new int[] {3765, 3765, 3765, 3765, 3765, 4531, 3765, 3765, 3765}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer1.getConvergenceChecker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) (-571));
      assertNotNull(well1024a0);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>((BaseUnivariateRealOptimizer<PolynomialFunction>) null, (-571), well1024a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1777.9833);
      doubleArray0[1] = (double) (-571);
      doubleArray0[2] = (double) (-571);
      doubleArray0[3] = (double) (-571);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(3, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {(-1777.9833), (-571.0), (-571.0), (-571.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-1777.9833), (-571.0), (-571.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 205;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 205}, intArray0);
      assertEquals(2, intArray0.length);
      
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, mersenneTwister0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      assertArrayEquals(new int[] {0, 205}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float float0 = mersenneTwister0.nextFloat();
      assertArrayEquals(new int[] {0, 205}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.8827251F, float0, 0.01F);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (-392.5242693624), 884.3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      int int0 = 4420;
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      well512a0.setSeed(4420);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 4420, well512a0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNotNull(multiStartUnivariateRealOptimizer0);
      
      int int1 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertFalse(int1 == int0);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertEquals(0, int1);
      
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
      assertEquals(0, multiStartUnivariateRealOptimizer0.getMaxEvaluations());
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
      assertNull(convergenceChecker0);
      
      PolynomialFunction polynomialFunction0 = null;
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 0, 0.0, (double) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 4,420 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(253.362, (-126.151));
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(47, 47, 68, 869, 100).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(555, 33, 68, 68, 33).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble());
      Well19937c well19937c0 = new Well19937c(2450);
      well19937c0.setSeed(0L);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2450, well19937c0);
      well19937c0.nextBoolean();
      well19937c0.nextFloat();
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize((PolynomialFunction) null, goalType0, (double) 2450, (double) 0L);
      multiStartUnivariateRealOptimizer0.getOptima();
      multiStartUnivariateRealOptimizer0.getOptima();
      Random.setNextRandom(2450);
      multiStartUnivariateRealOptimizer0.getEvaluations();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (-126.151);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType1 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType1, (-1.0), 2853.149559891947, 4003.82806161574);
      assertEquals(245000, multiStartUnivariateRealOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[5] = 1325.0;
      doubleArray1[7] = (-1.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 2327;
      intArray0[1] = 2327;
      intArray0[2] = 2327;
      intArray0[3] = 2327;
      intArray0[4] = 2327;
      intArray0[5] = 2327;
      intArray0[6] = 2327;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      mersenneTwister0.nextDouble();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2327, mersenneTwister0);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer1 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(multiStartUnivariateRealOptimizer0, 2327, mersenneTwister0);
      BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm> baseUnivariateRealOptimizer1 = (BaseUnivariateRealOptimizer<PolynomialFunctionNewtonForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer1).getConvergenceChecker();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm> multiStartUnivariateRealOptimizer2 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionNewtonForm>(baseUnivariateRealOptimizer1, 2327, mersenneTwister0);
      multiStartUnivariateRealOptimizer2.getConvergenceChecker();
      multiStartUnivariateRealOptimizer1.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer2 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer3 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer2, 2327, mersenneTwister0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2327;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2327;
      doubleArray0[4] = (double) 2327;
      doubleArray0[5] = (double) 2327;
      doubleArray0[6] = (double) 2327;
      doubleArray0[7] = (double) 2327;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well19937a well19937a0 = new Well19937a((-1L));
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 0, well19937a0);
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.getOptima();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well1024a well1024a0 = new Well1024a(intArray0);
  }
}
