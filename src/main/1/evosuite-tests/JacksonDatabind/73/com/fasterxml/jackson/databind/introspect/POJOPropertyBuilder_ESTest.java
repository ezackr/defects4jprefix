/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 04:07:24 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Field;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJOPropertyBuilder_ESTest extends POJOPropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(referenceType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withName(propertyName0);
      assertFalse(pOJOPropertyBuilder1.hasGetter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      boolean boolean0 = pOJOPropertyBuilder0.hasName(propertyName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultSerializerProvider_Impl0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      String string0 = pOJOPropertyBuilder0.toString();
      assertEquals("[Property ''; ctors: null, field(s): null, getter(s): null, setter(s): null]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("Pxr'MbMaH");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.anyIgnorals();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      String string0 = pOJOPropertyBuilder0.getInternalName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.removeConstructors();
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("g5/)pl2*xt");
      POJOPropertyBuilder.Linked<AnnotatedConstructor> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedConstructor>((AnnotatedConstructor) null, (POJOPropertyBuilder.Linked<AnnotatedConstructor>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.MemberIterator<AnnotatedConstructor> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedConstructor>(pOJOPropertyBuilder_Linked0);
      boolean boolean0 = pOJOPropertyBuilder_MemberIterator0.hasNext();
      assertTrue(boolean0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<AnnotatedParameter> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedParameter>((POJOPropertyBuilder.Linked<AnnotatedParameter>) null);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        objectMapper0.valueToTree((Object) jsonFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withSimpleName("Can not pass null Serializers");
      assertEquals("Can not pass null Serializers", pOJOPropertyBuilder1.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = pOJOPropertyBuilder0.withSimpleName("");
      assertSame(pOJOPropertyBuilder1, pOJOPropertyBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, true, true);
      int int0 = pOJOPropertyBuilder0.compareTo(pOJOPropertyBuilder0);
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0);
      pOJOPropertyBuilder1.addCtor((AnnotatedParameter) null, propertyName0, false, true, true);
      int int0 = pOJOPropertyBuilder1.compareTo(pOJOPropertyBuilder0);
      assertTrue(pOJOPropertyBuilder1.anyVisible());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = new POJOPropertyBuilder(pOJOPropertyBuilder0, (PropertyName) null);
      Class<ShortNode> class0 = ShortNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, resolvedRecursiveType0, (AnnotationMap) null, (-2933));
      pOJOPropertyBuilder0.addCtor(annotatedParameter0, (PropertyName) null, false, false, true);
      int int0 = pOJOPropertyBuilder1.compareTo(pOJOPropertyBuilder0);
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      POJOPropertyBuilder pOJOPropertyBuilder1 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, (PropertyName) null);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.compareTo(pOJOPropertyBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, false, propertyName0, propertyName0);
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null, (ClassIntrospector.MixInResolver) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, annotationMap0);
      pOJOPropertyBuilder0.addField(annotatedField0, propertyName0, false, false, false);
      pOJOPropertyBuilder0.getWrapperName();
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      PropertyName propertyName1 = propertyName0.withSimpleName(">%_FD=DK{\"e");
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName1, true, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyIncluded();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("Pxr'MbMaH");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, false, true);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyIncluded();
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      PropertyName propertyName1 = propertyName0.withSimpleName(">%_FD=DK{\"e");
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName1, true, false, true);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyNamed();
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("$6xMa");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyNamed();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      boolean boolean0 = pOJOPropertyBuilder0.hasGetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.TAIWAN;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      ChronoLocalDate chronoLocalDate0 = chronology0.dateNow();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(chronoLocalDate0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, true, false);
      boolean boolean0 = pOJOPropertyBuilder0.hasConstructorParameter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.couldDeserialize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      boolean boolean0 = pOJOPropertyBuilder0.couldDeserialize();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      
      pOJOPropertyBuilder0.addSetter((AnnotatedMethod) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.couldDeserialize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.couldDeserialize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addGetter((AnnotatedMethod) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.couldSerialize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      boolean boolean0 = pOJOPropertyBuilder0.couldSerialize();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.couldSerialize();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      pOJOPropertyBuilder0.addAll(pOJOPropertyBuilder0);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.getNonConstructorMutator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      Class<AnnotatedField> class0 = AnnotatedField.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 39);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor(annotatedParameter0, propertyName0, false, false, false);
      AnnotatedMember annotatedMember0 = pOJOPropertyBuilder0.getPrimaryMember();
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertNotNull(annotatedMember0);
      assertFalse(pOJOPropertyBuilder0.anyVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, true);
      pOJOPropertyBuilder0.getConstructorParameters();
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      // Undeclared exception!
      try { 
        objectMapper1.valueToTree((Object) jsonFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, false, propertyName0, propertyName0);
      JsonInclude.Value jsonInclude_Value0 = pOJOPropertyBuilder0.findInclusion();
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.NO_NAME;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      POJOPropertyBuilder pOJOPropertyBuilder1 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addAll(pOJOPropertyBuilder1);
      assertTrue(pOJOPropertyBuilder0.hasField());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.mergeAnnotations(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.mergeAnnotations(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, false);
      pOJOPropertyBuilder0.removeIgnored();
      assertTrue(pOJOPropertyBuilder0.couldDeserialize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addSetter((AnnotatedMethod) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyIncluded();
      assertFalse(boolean0);
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      PropertyName propertyName1 = propertyName0.withNamespace(">%_FD=DK{\"e");
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName1, true, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyIncluded();
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyNamed();
      assertFalse(boolean0);
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("Pxr'MbM;H");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      boolean boolean0 = pOJOPropertyBuilder0.isExplicitlyNamed();
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, true, false);
      boolean boolean0 = pOJOPropertyBuilder0.anyVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.anyVisible();
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.anyIgnorals();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addSetter((AnnotatedMethod) null, propertyName0, false, true, true);
      boolean boolean0 = pOJOPropertyBuilder0.anyIgnorals();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("$6xMa");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, true, true);
      pOJOPropertyBuilder0.explode((Collection<PropertyName>) null);
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      pOJOPropertyBuilder0.explode(vector0);
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, true, false);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.explode(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      PropertyName propertyName1 = propertyName0.withSimpleName("Do not know how to construct standard type id resolver for idType: ");
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName1, true, true, true);
      pOJOPropertyBuilder0.addAll(pOJOPropertyBuilder0);
      LinkedHashSet<PropertyName> linkedHashSet0 = new LinkedHashSet<PropertyName>();
      pOJOPropertyBuilder0.explode(linkedHashSet0);
      assertTrue(pOJOPropertyBuilder0.anyIgnorals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      PropertyName propertyName1 = propertyName0.withSimpleName(">%_FD=DK{\"e");
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName1, true, false, true);
      pOJOPropertyBuilder0.addAll(pOJOPropertyBuilder0);
      pOJOPropertyBuilder0.findExplicitNames();
      assertTrue(pOJOPropertyBuilder0.isExplicitlyNamed());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, true, propertyName0, propertyName0);
      boolean boolean0 = pOJOPropertyBuilder0.isTypeId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = pOJOPropertyBuilder0.findReferenceType();
      assertNull(annotationIntrospector_ReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, true, false);
      boolean boolean0 = pOJOPropertyBuilder0.isTypeId();
      assertTrue(pOJOPropertyBuilder0.anyVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.removeNonVisible(false);
      assertFalse(pOJOPropertyBuilder0.anyVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("Pxr'MbMaH");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, true, true, true);
      pOJOPropertyBuilder0.removeNonVisible(true);
      assertTrue(pOJOPropertyBuilder0.hasField());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, false, true);
      pOJOPropertyBuilder0.removeNonVisible(true);
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("Pxr'MbMaH");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, true, true);
      pOJOPropertyBuilder0.removeNonVisible(true);
      assertTrue(pOJOPropertyBuilder0.hasConstructorParameter());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, true, false);
      pOJOPropertyBuilder0.removeNonVisible(false);
      assertTrue(pOJOPropertyBuilder0.hasConstructorParameter());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      pOJOPropertyBuilder0.removeNonVisible(false);
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, false, false, false);
      pOJOPropertyBuilder0.removeNonVisible(false);
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, false, propertyName0, propertyName0);
      pOJOPropertyBuilder0.addField((AnnotatedField) null, propertyName0, false, true, true);
      pOJOPropertyBuilder0.removeNonVisible(false);
      assertTrue(pOJOPropertyBuilder0.couldDeserialize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<VirtualAnnotatedMember>((POJOPropertyBuilder.Linked<VirtualAnnotatedMember>) null);
      boolean boolean0 = pOJOPropertyBuilder_MemberIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName(")$c&)B", "");
      POJOPropertyBuilder.Linked<AnnotatedParameter> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedParameter>((AnnotatedParameter) null, (POJOPropertyBuilder.Linked<AnnotatedParameter>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.MemberIterator<AnnotatedParameter> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedParameter>(pOJOPropertyBuilder_Linked0);
      pOJOPropertyBuilder_MemberIterator0.next();
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector1, true, propertyName0, propertyName0);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder0.addCtor((AnnotatedParameter) null, propertyName0, true, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass true for 'explName' if name is null/empty
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("", (POJOPropertyBuilder.Linked<String>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNext();
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName(", getter(s): ", ", getter(s): ");
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>(", getter(s): ", (POJOPropertyBuilder.Linked<String>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue(", getter(s): ");
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("/, ", "/, ");
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("/, ", (POJOPropertyBuilder.Linked<String>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutIgnored();
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
      assertNull(pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.construct("", "");
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<SimpleObjectIdResolver>(simpleObjectIdResolver0, (POJOPropertyBuilder.Linked<SimpleObjectIdResolver>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertNull(pOJOPropertyBuilder_Linked2);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      POJOPropertyBuilder.Linked<ObjectIdResolver> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<ObjectIdResolver>(simpleObjectIdResolver0, (POJOPropertyBuilder.Linked<ObjectIdResolver>) null, (PropertyName) null, false, false, false);
      POJOPropertyBuilder.Linked<ObjectIdResolver> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<ObjectIdResolver> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("", (POJOPropertyBuilder.Linked<String>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.append(pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      PropertyName propertyName0 = PropertyName.construct("", "");
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<SimpleObjectIdResolver>(simpleObjectIdResolver0, (POJOPropertyBuilder.Linked<SimpleObjectIdResolver>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.append(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<SimpleObjectIdResolver> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      POJOPropertyBuilder.Linked<ObjectIdResolver> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<ObjectIdResolver>(simpleObjectIdResolver0, (POJOPropertyBuilder.Linked<ObjectIdResolver>) null, (PropertyName) null, false, false, false);
      POJOPropertyBuilder.Linked<ObjectIdResolver> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      pOJOPropertyBuilder_Linked1.toString();
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
  }
}
