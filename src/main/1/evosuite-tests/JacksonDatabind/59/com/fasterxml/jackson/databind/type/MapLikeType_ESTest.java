/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:54:55 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapLikeType_ESTest extends MapLikeType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      String string0 = mapLikeType0.getGenericSignature();
      assertEquals("Z<Z;Z;>;", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyValueHandler(class0);
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler(simpleType0);
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(50, 50);
      TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.getContentTypeHandler();
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<MapType> class0 = MapType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapLikeType0._narrow(class0);
      assertTrue(javaType0.equals((Object)mapLikeType0));
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      String string0 = mapType0.getErasedSignature();
      assertEquals("Ljava/lang/Enum;", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(simpleType0);
      assertFalse(mapLikeType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapLikeType> class0 = MapLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      Object object0 = mapLikeType0.getContentValueHandler();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<ReferenceType> class0 = ReferenceType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = mapLikeType0.refine(class0, typeBindings0, simpleType0, (JavaType[]) null);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.equals((Object)mapLikeType0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(class0);
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(simpleType0);
      assertTrue(mapLikeType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      String string0 = mapLikeType0.getTypeName();
      assertEquals("[map-like type; class boolean, [simple type, class boolean] -> [simple type, class boolean]]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(simpleType0);
      assertFalse(mapLikeType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      // Undeclared exception!
      try { 
        MapLikeType.construct(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, mapType0, mapType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(simpleType0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertFalse(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(simpleType0);
      assertSame(mapLikeType1, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
      JavaType javaType0 = mapLikeType0.withContentType(mapLikeType0);
      assertFalse(javaType0.equals((Object)mapLikeType0));
      assertNotSame(javaType0, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<MapType> class0 = MapType.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapLikeType0.withContentType(simpleType0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      MapLikeType mapLikeType2 = mapLikeType1.withStaticTyping();
      assertTrue(mapLikeType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayDeque> class0 = ArrayDeque.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);
      MapType mapType0 = new MapType(collectionType0, (JavaType) null, (JavaType) null);
      String string0 = mapType0.buildCanonicalName();
      assertEquals("java.util.ArrayDeque", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      String string0 = mapType0.buildCanonicalName();
      assertEquals("java.lang.Enum<java.lang.Enum,java.lang.Enum>", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      MapType mapType2 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) mapType1, (JavaType) mapType0);
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.equals((Object)mapType1));
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType0.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      boolean boolean0 = mapLikeType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(mapLikeType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      MapType mapType1 = new MapType(mapType0, mapType0, mapType0);
      boolean boolean0 = mapType1.equals(mapType0);
      assertFalse(mapType1.hasHandlers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = MapLikeType.construct(class0, simpleType0, mapLikeType0);
      boolean boolean0 = mapLikeType1.equals(mapLikeType0);
      assertFalse(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(boolean0);
      assertFalse(mapLikeType1.useStaticType());
  }
}
