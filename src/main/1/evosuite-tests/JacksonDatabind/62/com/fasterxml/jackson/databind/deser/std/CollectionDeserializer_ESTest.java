/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 21:13:23 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import java.io.PipedReader;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(class0);
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
      // Undeclared exception!
      try { 
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(class0, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [class java.lang.String] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.offer(class0);
      arrayDeque0.add(class0);
      arrayDeque0.add(class0);
      arrayDeque0.removeLast();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayDeque0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(locale_FilteringMode0);
      JsonMappingException.wrapWithPath((Throwable) unresolvedForwardReference0, jsonMappingException_Reference0);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      Class<String> class1 = String.class;
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator1 = new CollectionDeserializer.CollectionReferringAccumulator(class1, arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, (Collection<Object>) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      NamedType[] namedTypeArray0 = new NamedType[4];
      NamedType namedType0 = new NamedType(class0);
      namedTypeArray0[0] = namedType0;
      NamedType namedType1 = new NamedType(class0);
      namedTypeArray0[1] = namedType1;
      Class<RuntimeException> class1 = RuntimeException.class;
      NamedType namedType2 = new NamedType(class1, "?+b");
      namedTypeArray0[2] = namedType2;
      namedType2.setName("Unresolved forward reference but no identity info");
      Class<Locale.FilteringMode> class2 = Locale.FilteringMode.class;
      namedType2.toString();
      NamedType namedType3 = new NamedType(class2);
      namedType3.setName("?+b");
      namedTypeArray0[3] = namedType3;
      objectMapper0.registerSubtypes(namedTypeArray0);
      IntNode intNode0 = new IntNode(222);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "");
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((CollectionDeserializer) null);
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Object object0 = collectionDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext0);
      collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(object0, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedList0.add((Object) null);
      MissingNode missingNode0 = MissingNode.getInstance();
      missingNode0.floatValue();
      collectionDeserializer_CollectionReferringAccumulator0.add(missingNode0);
      linkedList0.add((Object) missingNode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode.valueOf("2hKYK@W L");
      collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(locale_FilteringMode1, linkedList0);
      // Undeclared exception!
      try { 
        collectionDeserializer_CollectionReferringAccumulator0.add(locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.2hKYK@W L
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, (Collection<Object>) null);
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator1 = new CollectionDeserializer.CollectionReferringAccumulator(class0, (Collection<Object>) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'H';
      charArray0[2] = '2';
      charArray0[3] = 'u';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-1), 608);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "JSON");
      collectionDeserializer_CollectionReferringAccumulator1.handleUnresolvedReference(unresolvedForwardReference0);
      collectionDeserializer_CollectionReferringAccumulator1.add(class0);
      MissingNode missingNode0 = MissingNode.getInstance();
      missingNode0.longValue();
      missingNode0.findPath((String) null);
      MissingNode missingNode1 = MissingNode.getInstance();
      missingNode1.findParents("&");
      collectionDeserializer_CollectionReferringAccumulator1.resolveForwardReference(missingNode0, missingNode1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      HashSet<RuntimeException> hashSet0 = new HashSet<RuntimeException>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getCause();
      mockRuntimeException0.initCause((Throwable) null);
      hashSet0.add(mockRuntimeException0);
      hashSet0.add(mockRuntimeException0);
      hashSet0.add(mockRuntimeException0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(hashSet0);
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-589));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale_FilteringMode0, false);
      PipedReader pipedReader0 = new PipedReader(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "~yXIk\u0003<");
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(objectIdGenerators_IntSequenceGenerator0, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer");
  }
}
