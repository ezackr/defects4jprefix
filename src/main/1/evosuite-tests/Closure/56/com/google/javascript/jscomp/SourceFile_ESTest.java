/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:47:57 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Generator0);
      sourceFile_Generated0.getCodeNoCache();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.google.javascript.jscomp.SourceFile$Preloaded", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromGenerator((String) null, (SourceFile.Generator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.javascript.jscomp.SourceFile", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("com.google.common.io.Files", "", "\nActual: ");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.common.io.Files", sourceFile_Preloaded0.toString());
      assertEquals(2, int0);
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"x5BI7V", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Reader reader0 = sourceFile_OnDisk0.getCodeReader();
      // Undeclared exception!
      try { 
        SourceFile.fromReader("", reader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("\"x5BI7V", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(1181);
      assertNull(region0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      sourceFile_Preloaded0.clearCachedSource();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("<5f-.U>^", "com.google.javascript.jscomp.SourceFile$OnDisk", "com.google.javascript.jscomp.SourceFile$OnDisk");
      String string0 = sourceFile0.getName();
      assertFalse(sourceFile0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile0.getOriginalPath());
      assertEquals("<5f-.U>^", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      assertFalse(sourceFile_Preloaded0.isExtern());
      
      sourceFile_Preloaded0.setIsExtern(true);
      assertTrue(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("[!Xro._$kM");
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("|g3@%8]M2", "|g3@%8]M2", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("|g3@%8]M2", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F?Y9)jj5&$|$SewjSdp");
      SourceFile sourceFile0 = SourceFile.fromReader("UTF-16LE", stringReader0);
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
      assertEquals("UTF-16LE", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      sourceFile_Preloaded0.getNumLines();
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 0
         // Actual: 1
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "com.google.common.io.PatternFilenameFilter");
      sourceFile_Preloaded0.getLineOffset(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("*$P", "*$P");
      // Undeclared exception!
      try { 
        sourceFile_Preloaded0.getLineOffset((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -5
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n", "\n");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator(")&5AMT~.rI", sourceFile_Generator0);
      String string0 = sourceFile0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("KDf<fn1Z[L54", "KDf<fn1Z[L54", "KDf<fn1Z[L54");
      sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("W6I7!xGh}qw{}5'hF", "W6I7!xGh}qw{}5'hF");
      sourceFile_Preloaded0.getLine((-2487));
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("\nActual: ", "\nActual: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/\nActual: 0\nActual: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nActual: ");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      String string0 = sourceFile_OnDisk0.getLine(2);
      assertEquals("Actual: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile("\nActual: ", "\nActual: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/\nActual: 0\nActual: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nActual: ");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      Region region0 = sourceFile_OnDisk0.getRegion(380);
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("\nActual: ", "\nActual: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/\nActual: 0\nActual: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nActual: ");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nActual: ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nActual: ");
      Region region0 = sourceFile_OnDisk0.getRegion(1);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNotNull(region0);
      assertEquals("\nActual: \n\nActual: \n\n", region0.getSourceExcerpt());
      assertEquals(6, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "com.google.common.io.PatternFilenameFilter");
      Region region0 = sourceFile_Preloaded0.getRegion(0);
      assertEquals("com.google.common.io.PatternFilenameFilter", region0.getSourceExcerpt());
      assertEquals(1, region0.getEndingLineNumber());
      assertNotNull(region0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("\n", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n", "\n");
      Region region0 = sourceFile_Preloaded0.getRegion(0);
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals(1, region0.getBeginningLineNumber());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.jscomp.SourceFile$OnDisk").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Generator0);
      sourceFile_Generated0.getLine(1842);
      sourceFile_Generated0.getRegion(1842);
      assertFalse(sourceFile_Generated0.isExtern());
  }
}
