/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:59:03 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodePrinter;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodePrinter_ESTest extends CodePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newString("y'9v=,J/4R*AP+");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setTagAsStrict(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("'use strict';\"y'9v=,J/4R*AP+\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newString("y'9v=,J/4R*AP+");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      Charset charset0 = Charset.defaultCharset();
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputCharset(charset0);
      assertSame(codePrinter_Builder1, codePrinter_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = Node.newString("E]x*7u>[ sJKP|YJ6");
      Node node1 = new Node(110, node0, 48, 4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setOutputTypes(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("switch(\"E]x*7u>[ sJKP|YJ6\") {\n}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newString("E]x*7u>[ sJKP|YJ6");
      Node node1 = new Node(112, node0, 32, 4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setOutputTypes(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("default:\n  \"E]x*7u>[ sJKP|YJ6\";\n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.CodePrinter$Builder");
      Node node1 = new Node(132, node0, 37, 52);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      String string0 = codePrinter_Builder0.build();
      assertEquals("\"com.google.javascript.jscomp.CodePrinter$Builder\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newString("O\"{S(");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setLineLengthThreshold(0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("'O\"{S('", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newString("y'9v=,J/4R*AP+");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      node0.setSourceFileForTesting("y'9v=,J/4R*AP+");
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("\"y'9v=,J/4R*AP+\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(49, node0, 32, 54);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      node1.setSourceFileForTesting("");
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      codePrinter_Builder0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw\"\";", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newString("y'9v=,J.4R*AP+");
      Node node1 = new Node(49, node0, 47, 53);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      codePrinter_Builder0.setLineLengthThreshold(16);
      String string0 = codePrinter_Builder1.build();
      assertEquals("throw\"y'9v=,J.4R*AP+\"; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newString("y'9=Jl/4R*AP+");
      Node node1 = new Node(49, node0, 32, 53);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      codePrinter_Builder0.setLineLengthThreshold(16);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw\"y'9=Jl/4R*AP+\"; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newString("y'9=Jl/4R*AP+");
      Node node1 = new Node(49, node0, 32, 53);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      node1.setSourceFileForTesting("y'9=Jl/4R*AP+");
      codePrinter_Builder0.setSourceMap(sourceMap0);
      codePrinter_Builder0.setLineLengthThreshold(16);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw\"y'9=Jl/4R*AP+\"; ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber((double) 32);
      Node node1 = new Node(16, node0, 46, 44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      node1.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber((double) 32);
      Node node1 = new Node(16, node0, 46, 44);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      node1.addChildrenToBack(node1);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputTypes(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder1.build();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = new Node(32, node0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setOutputTypes(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber((double) 32);
      Node node1 = new Node(32, node0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      Node node2 = new Node(0, node1, 12, 37);
      node1.addChildrenToBack(node2);
      codePrinter_Builder0.setOutputTypes(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newString("~\"Yb=orGF");
      Node node1 = new Node(49, node0, 47, 53);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setLineBreak(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw'~\"Yb=orGF';", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newString("8ATCH");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setLineLengthThreshold(1);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      String string0 = codePrinter_Builder1.build();
      assertEquals("\"8ATCH\";\n", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newString("8ATCH");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      String string0 = codePrinter_Builder1.build();
      assertEquals("\"8ATCH\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node(0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.setSourceMapDetailLevel((SourceMap.DetailLevel) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newString("y'9v=,J/4R*AP+");
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPrettyPrint(true);
      String string0 = codePrinter_Builder1.build();
      assertEquals("\"y'9v=,J/4R*AP+\"", string0);
  }
}
