/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:19:37 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticSlot;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Scope_ESTest extends Scope_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("FAST", node0, (JSType) null, compilerInput0, true);
      boolean boolean0 = scope_Var0.isLocal();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
      assertEquals("", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "condition always evaluates to {2}\nleft : {0}\nright: {1}");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Scope.Var ", node0, jSType1, compilerInput0);
      boolean boolean0 = scope_Var0.isGlobal();
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
      assertTrue(scope_Var0.isTypeInferred());
      assertEquals("Unknown class name", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("FAST", (Node) null, (JSType) null, (CompilerInput) null, true);
      scope_Var0.getJSDocInfo();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("FAST", node0, (JSType) null, compilerInput0, true);
      String string0 = scope_Var0.getName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("", scope_Var0.getInputName());
      assertTrue(scope_Var0.isTypeInferred());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newString("E3W7 lV`%l]");
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "E3W7 lV`%l]");
      Scope scope0 = new Scope(node1, compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("#GWoefpU5+$x'.", node0, jSType0, compilerInput0, true);
      Node node2 = scope_Var0.getNameNode();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
      assertNotNull(node2);
      assertEquals("Named type with empty name component", scope_Var0.getInputName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      scope_Var0.getScope();
      assertFalse(scope_Var0.isDefine());
      assertTrue(scope_Var0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, enumElementType0, (CompilerInput) null, true);
      scope_Var0.getType();
      assertTrue(scope_Var0.isTypeInferred());
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "eo4", "eo4");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("eo4", node0, (JSType) null, (CompilerInput) null);
      assertTrue(scope_Var0.isTypeInferred());
      
      scope_Var0.setType((JSType) null);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "=hp>&iyg");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isDefine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.isBleedingFunction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      String string0 = scope_Var0.toString();
      assertEquals("Scope.Var com.google.javascript.jscomp.Scope$1", string0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      boolean boolean0 = scope0.isBottom();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      StaticSlot<JSType> staticSlot0 = scope0.getSlot("Scope.Var ");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Error \"{1}\" writing name reference graph t \"{0}\".", "Error \"{1}\" writing name reference graph t \"{0}\".");
      Node node1 = new Node(1);
      Scope scope0 = new Scope(node1, compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertFalse(scope1.equals((Object)scope0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("E3W7 lV`%l]", "E3W7 lV`%l]");
      Scope scope0 = new Scope(node0, compiler0);
      int int0 = scope0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      int int0 = scope0.getVarCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot("Scope.Var ");
      assertNull(staticSlot0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope((Node) null, compiler0);
      Scope.Var scope_Var0 = scope0.declare("jx~", (Node) null, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope_Var0.getInitialValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Scope$Var", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "=hp>&iyg");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      Scope.Var scope_Var0 = scope0.declare("=hp>&iyg", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isExtern();
      assertTrue(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) arrayList0);
      MockFile mockFile0 = new MockFile("Named type with empty name component");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
      Scope.Var scope_Var0 = scope0.declare("NaNobj", node0, jSType0, compilerInput0);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertEquals("Named type with empty name component", scope_Var0.getInputName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Scope.Var ", "Scope.Var ");
      Scope scope0 = new Scope(node0, compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) arrayList0);
      MockFile mockFile0 = new MockFile("Named type with empty name component");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("NfNobr", node0, jSType0, compilerInput0);
      boolean boolean0 = scope_Var0.isExtern();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseTestCode("NEW");
      Scope scope0 = new Scope((Node) null, compiler0);
      Scope.Var scope_Var0 = scope0.declare("NEW", (Node) null, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "=hp>&iyg");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isConst();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Node node1 = new Node(86, node0, 31, 0);
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertTrue(node2.isSyntheticBlock());
      assertFalse(scope_Var0.isDefine());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ScZpe$1", "com.google.javascript.jscomp.ScZpe$1");
      Node node1 = new Node(105, node0, 31, 32);
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.ScZpe$1", node0, (JSType) null, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertNotNull(node2);
      assertFalse(scope_Var0.isDefine());
      assertEquals(105, node2.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "eo4", "eo4");
      Node node1 = new Node(118, node0, 18, 26);
      Scope scope0 = new Scope(node1, compiler0);
      Scope.Var scope_Var0 = scope0.declare("eo4", node0, (JSType) null, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertFalse(scope_Var0.isDefine());
      assertEquals(130, node2.getType());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Node node1 = new Node(31, node0, 48, 28);
      Scope scope0 = new Scope(node1, compiler0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      Node node2 = scope_Var0.getInitialValue();
      assertNull(node2);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      scope_Var0.resolveType(simpleErrorReporter0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      Scope.Var scope_Var0 = scope0.declare("FAST", node0, (JSType) null, compilerInput0, true);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", (String) null);
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("FAST", (Node) null, (JSType) null, (CompilerInput) null, true);
      String string0 = scope_Var0.getInputName();
      assertFalse(scope_Var0.isDefine());
      assertEquals("<non-file>", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "=hp>&iyg");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      ObjectType objectType0 = scope0.getTypeOfThis();
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, objectType0, (CompilerInput) null, false);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(boolean0);
      assertFalse(scope_Var0.isDefine());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("E|4We&cjJ2b]qZ");
      Scope scope0 = new Scope(node0, compiler0);
      node0.addSuppression("E|4We&cjJ2b]qZ");
      Scope.Var scope_Var0 = scope0.declare("E|4We&cjJ2b]qZ", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.isNoShadow();
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var0);
      assertFalse(scope_Var0.isDefine());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("_WPHej{wTZ2", "_WPHej{wTZ2");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("_WPHej{wTZ2", node0, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(compiler0);
      assertFalse(scope_Var0.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("Not declared as a type name", node0, (JSType) null, (CompilerInput) null);
      Node node1 = Node.newString(31, "zjzQB!'");
      Scope.Var scope_Var1 = scope0.declare("Not declared as a constructor", node1, (JSType) null, (CompilerInput) null);
      boolean boolean0 = scope_Var0.equals(scope_Var1);
      assertFalse(scope_Var1.isDefine());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("lP@G#|XkcckM", "lP@G#|XkcckM");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      Scope scope1 = null;
      try {
        scope1 = new Scope(scope0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = compiler0.parseSyntheticCode("", "");
      Scope scope0 = new Scope(node0, compiler0);
      Scope scope1 = new Scope(scope0, node1);
      Scope scope2 = scope1.getGlobalScope();
      assertFalse(scope2.isLocal());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Y51F", "Y51F");
      Scope scope0 = new Scope(node0, compiler0);
      // Undeclared exception!
      try { 
        scope0.declare((String) null, node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      Scope scope0 = new Scope(node0, compiler0);
      // Undeclared exception!
      try { 
        scope0.declare("", node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("qom.googleFjavscript.j3compsScope$1");
      Scope scope0 = new Scope(node0, compiler0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      Scope scope1 = new Scope(node0, functionType0);
      Scope.Var scope_Var0 = scope1.declare("Named type with empty name component", node0, (JSType) null, (CompilerInput) null);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("5GA");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("5GA", node0, (JSType) null, (CompilerInput) null);
      scope0.undeclare(scope_Var0);
      // Undeclared exception!
      try { 
        scope0.undeclare(scope_Var0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.Scope$1", "com.google.javascript.jscomp.Scope$1");
      Scope scope0 = new Scope(node0, compiler0);
      scope0.declare("com.google.javascript.jscomp.Scope$1", node0, (JSType) null, (CompilerInput) null);
      Scope.Var scope_Var0 = scope0.getVar("com.google.javascript.jscomp.Scope$1");
      assertFalse(scope_Var0.isDefine());
      assertNotNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = compiler0.parseSyntheticCode("", "checkMissingGetCssName");
      Scope scope0 = new Scope(node1, compiler0);
      Scope scope1 = new Scope(scope0, node0);
      Scope.Var scope_Var0 = scope1.getVar("");
      assertNull(scope_Var0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "eo4", "eo4");
      Scope scope0 = new Scope(node0, compiler0);
      Scope.Var scope_Var0 = scope0.declare("eo4", node0, (JSType) null, (CompilerInput) null);
      assertFalse(scope_Var0.isDefine());
      
      boolean boolean0 = scope0.isDeclared("eo4", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "eo4", "eo4");
      Node node1 = compiler0.parseSyntheticCode("eo4", "eo4");
      Scope scope0 = new Scope(node0, compiler0);
      Scope scope1 = new Scope(scope0, node1);
      boolean boolean0 = scope1.isDeclared("eo4", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = compiler0.parseSyntheticCode("", "JSC_UNKNOWN_OVERRIDE");
      Scope scope0 = new Scope(node1, compiler0);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isDeclared("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = Node.newString("E3W7 lV`%l]");
      Compiler compiler0 = new Compiler();
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "", "E3W7 lV`%l]");
      Scope scope0 = new Scope(node1, compiler0);
      Scope scope1 = new Scope(scope0, node0);
      boolean boolean0 = scope1.isLocal();
      assertTrue(boolean0);
  }
}
