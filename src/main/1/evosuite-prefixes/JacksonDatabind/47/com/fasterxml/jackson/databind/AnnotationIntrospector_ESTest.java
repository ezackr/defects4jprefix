/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:36:17 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationIntrospector_ESTest extends AnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = annotationIntrospector_ReferenceProperty0.getType();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.MANAGED_REFERENCE;
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = new AnnotationIntrospector.ReferenceProperty(annotationIntrospector_ReferenceProperty_Type0, "'");
        String string0 = annotationIntrospector_ReferenceProperty0.getName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findContentSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        NameTransformer nameTransformer0 = annotationIntrospector0.findUnwrappingNameTransformer((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(javaType0, (MapperConfig<?>) deserializationConfig0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType1 = annotationIntrospector0.refineSerializationType(deserializationConfig0, annotatedClass0, mapLikeType0);
        javaType1.isContainerType();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findClassDescription((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findContentDeserializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String[] stringArray0 = annotationIntrospector0.findSerializationPropertyOrder((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasCreatorAnnotation((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.findSerializationSortAlphabetically((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null, (ClassIntrospector.MixInResolver) null);
        Vector<BeanPropertyWriter> vector0 = new Vector<BeanPropertyWriter>();
        annotationIntrospector0.findAndAddVirtualProperties((MapperConfig<?>) null, annotatedClass0, vector0);
        vector0.toString();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findValueInstantiator((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<String> class0 = String.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null);
        PropertyName propertyName0 = annotationIntrospector0.findRootName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(annotationIntrospector1);
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserializationWithBuilder(deserializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
        basicBeanDescription0.findClassDescription();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.isIgnorableType((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = annotationIntrospector0.findNameForDeserialization((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(javaType0, (MapperConfig<?>) deserializationConfig0);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType1 = annotationIntrospector0.refineDeserializationType(deserializationConfig0, annotatedClass0, javaType0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findInjectableValueId((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.isAnnotationBundle((Annotation) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPropertyAccess((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findKeyDeserializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findPropertyDescription((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findKeySerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotatedMethod annotatedMethod0 = annotationIntrospector0.resolveSetterConflict((MapperConfig<?>) null, (AnnotatedMethod) null, (AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findTypeName((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializationContentConverter((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findCreatorBinding((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<?> class0 = annotationIntrospector0.findDeserializationContentType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findImplicitPropertyName((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test3332() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.isTypeId((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test3433() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3534() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        List<NamedType> list0 = annotationIntrospector0.findSubtypes((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3635() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = annotationIntrospector0.findWrapperName((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3736() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findFilterId((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3837() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test3938() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        HashSet<AnnotationIntrospector> hashSet0 = new HashSet<AnnotationIntrospector>();
        Collection<AnnotationIntrospector> collection0 = annotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) hashSet0);
        collection0.contains(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test4039() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializationContentConverter((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test4140() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findNullSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4241() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<?>[] classArray0 = annotationIntrospector0.findViews((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4342() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String[] stringArray0 = annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4443() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        Collection<AnnotationIntrospector> collection0 = jacksonAnnotationIntrospector0.allIntrospectors();
    }

    @Test(timeout = 4000)
    public void test4544() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test4645() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasAsValueAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test4746() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test4847() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<String> class0 = String.class;
        Class<MapLikeType> class1 = MapLikeType.class;
        Class<Integer> class2 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType[] javaTypeArray0 = new JavaType[5];
        javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, referenceType0);
    }

    @Test(timeout = 4000)
    public void test4948() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Value jsonInclude_Value0 = annotationIntrospector0.findPropertyInclusion((Annotated) null);
        jsonInclude_Value0.getContentInclusion();
    }

    @Test(timeout = 4000)
    public void test5049() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializationConverter((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5150() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test5251() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = annotationIntrospector0.findNameForSerialization((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5352() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test5453() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = annotationIntrospector0.findFormat((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5554() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findSerializationConverter((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5655() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findTypeResolver((MapperConfig<?>) null, (AnnotatedClass) null, collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test5756() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findPropertyDefaultValue((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5857() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null, (ClassIntrospector.MixInResolver) null);
        Class<?> class1 = annotationIntrospector0.findPOJOBuilder(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test5958() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test6059() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
        annotationIntrospector0._hasOneOf((Annotated) null, classArray0);
    }

    @Test(timeout = 4000)
    public void test6160() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Integer integer0 = annotationIntrospector0.findPropertyIndex((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test6261() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findNamingStrategy((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test6362() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, (-101));
        annotationIntrospector1.findSerializationTyping(annotatedParameter0);
    }

    @Test(timeout = 4000)
    public void test6463() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        boolean boolean0 = annotationIntrospector0.hasIgnoreMarker((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test6564() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        Class<?> class1 = annotationIntrospector0.findDeserializationKeyType((Annotated) null, resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test6665() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = annotationIntrospector0.findReferenceType((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test6766() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("S");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test6867() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("`");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test6968() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("I");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test7069() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("I");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test7170() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(javaType0, (MapperConfig<?>) deserializationConfig0);
        JavaType javaType1 = jacksonAnnotationIntrospector0.refineSerializationType(deserializationConfig0, annotatedClass0, javaType0);
    }

    @Test(timeout = 4000)
    public void test7271() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        String[] stringArray0 = new String[8];
        Class<String> class0 = String.class;
        String[] stringArray1 = annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test7372() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        Class<String> class0 = String.class;
        String[] stringArray0 = new String[1];
        stringArray0[0] = "E";
        annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test7473() throws Throwable {
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct((JavaType) mapLikeType0, (MapperConfig<?>) deserializationConfig0);
        JavaType javaType1 = jacksonAnnotationIntrospector0.refineDeserializationType(deserializationConfig0, annotatedClass0, mapLikeType0);
        javaType1.isMapLikeType();
    }
}
