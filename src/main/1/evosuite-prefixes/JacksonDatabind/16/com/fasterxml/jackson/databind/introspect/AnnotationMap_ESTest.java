/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:11:38 GMT 2023
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import java.lang.annotation.Annotation;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationMap_ESTest extends AnnotationMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        annotationMap0.add((Annotation) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = annotationMap0.get(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Iterable<Annotation> iterable0 = annotationMap0.annotations();
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(annotation0).toString();
        doReturn(class0, class0, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(annotation0).toString();
        doReturn(class0, class0, (Class) null).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
        annotationMap1.size();
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        int int0 = annotationMap0.size();
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0, class0).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        boolean boolean1 = annotationMap0.addIfNotPresent(annotation0);
    }

    @Test(timeout = 4000)
    public void test1710() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        String string0 = annotationMap0.toString();
    }

    @Test(timeout = 4000)
    public void test1811() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(annotation0).toString();
        doReturn(class0, class0).when(annotation0).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation0);
        Annotation annotation1 = annotationMap0.get(class0);
        boolean boolean1 = annotationMap0._add(annotation1);
    }

    @Test(timeout = 4000)
    public void test1913() throws Throwable {
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(annotation0).annotationType();
        Annotation annotation1 = mock(Annotation.class, new ViolatedAssumptionAnswer());
        doReturn(class0).when(annotation1).annotationType();
        boolean boolean0 = annotationMap0.addIfNotPresent(annotation1);
        boolean boolean1 = annotationMap0._add(annotation0);
    }
}
