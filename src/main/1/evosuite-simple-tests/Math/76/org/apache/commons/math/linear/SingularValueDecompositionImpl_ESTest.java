/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 18:51:12 GMT 2023
 */
package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SingularValueDecompositionImpl_ESTest extends SingularValueDecompositionImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[24];
        doubleArray0[0] = (-1469.24165998819);
        doubleArray0[5] = (-651.4657703215);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0, 5);
        double double0 = singularValueDecompositionImpl0.getConditionNumber();
        assertEquals(15702.66575521932, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[][] doubleArray0 = new double[1][3];
        double[] doubleArray1 = new double[5];
        doubleArray1[2] = 1304.2990125721;
        doubleArray1[3] = 7175462.327908139;
        doubleArray1[4] = (-822.8113287);
        doubleArray0[0] = doubleArray1;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance(7175462.493626685);
        assertFalse(realMatrix0.equals((Object) array2DRowRealMatrix0));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[3];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getSolver();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // row index -1 out of allowed range [0, 0]
            //
            verifyException("org.apache.commons.math.linear.MatrixUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[14];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
        assertArrayEquals(new double[] { 28363.113150986705 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[14];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
        assertEquals(1, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1657.6410258812;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 117);
        double double0 = singularValueDecompositionImpl0.getNorm();
        assertEquals(1657.6410258812, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        double[][] doubleArray0 = new double[1][4];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getUT();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // column index -1 out of allowed range [0, 0]
            //
            verifyException("org.apache.commons.math.linear.MatrixUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        double[] doubleArray0 = new double[14];
        doubleArray0[0] = (-119.0863408434962);
        doubleArray0[2] = (-200.7204561);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getCovariance(0.0);
        // Undeclared exception!
        singularValueDecompositionImpl0.getU();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        double[] doubleArray0 = new double[24];
        doubleArray0[0] = (-1469.24165998819);
        doubleArray0[2] = 1042.9999;
        doubleArray0[5] = (-651.4657703215);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0, 5);
        singularValueDecompositionImpl0.getSolver();
        singularValueDecompositionImpl0.getSolver();
        // Undeclared exception!
        singularValueDecompositionImpl0.getSolver();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
        double[][] doubleArray0 = new double[1][7];
        array2DRowRealMatrix0.data = doubleArray0;
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getS();
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // invalid row dimension 0 (must be positive)
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(7, 7);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(openMapRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getRank();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (-4091.30585795025);
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getCovariance(Double.POSITIVE_INFINITY);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // cutoff singular value is \u221E, should be at most 4,091.306
            //
            verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2088, 2088);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(openMapRealMatrix0, 0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        double[] doubleArray0 = new double[12];
        doubleArray0[0] = (-1469.24165998819);
        doubleArray0[3] = 0.10664378144610108;
        doubleArray0[5] = (-651.4657703215);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0, 5);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) null, (-2635));
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BiDiagonalTransformer", e);
        }
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(1, 1);
        double[][] doubleArray0 = new double[4][2];
        double[] doubleArray1 = new double[4];
        doubleArray0[2] = doubleArray1;
        array2DRowRealMatrix0.data = doubleArray0;
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 46);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2328, 2328);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(openMapRealMatrix0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        doubleArray0[1] = 3341.3125;
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            //
            //
            verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
            fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.math.linear.BiDiagonalTransformer", e);
        }
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        double[] doubleArray0 = new double[3];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        double[][] doubleArray1 = new double[8][2];
        doubleArray1[1] = doubleArray0;
        array2DRowRealMatrix0.data = doubleArray1;
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = null;
        try {
            singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        int int0 = singularValueDecompositionImpl0.getRank();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        int int0 = singularValueDecompositionImpl0.getRank();
        assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(9, 1);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(blockRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getVT();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // column index -1 out of allowed range [0, 0]
            //
            verifyException("org.apache.commons.math.linear.MatrixUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        assertEquals(1, realMatrix1.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        RealMatrix realMatrix2 = singularValueDecompositionImpl0.getVT();
        assertEquals(1, realMatrix2.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        RealMatrix realMatrix2 = singularValueDecompositionImpl0.getVT();
        assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = (-1.0);
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1.05;
        doubleArray0[1] = doubleArray2;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
        assertEquals(1.05, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = (-1.0);
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1.05;
        doubleArray0[1] = doubleArray2;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getV();
        assertEquals(2, realMatrix0.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        double[] doubleArray0 = new double[3];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getV();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // column index -1 out of allowed range [0, 0]
            //
            verifyException("org.apache.commons.math.linear.MatrixUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
        double[][] doubleArray0 = new double[1][7];
        array2DRowRealMatrix0.data = doubleArray0;
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getU();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // column index -1 out of allowed range [0, 0]
            //
            verifyException("org.apache.commons.math.linear.MatrixUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[1] = (-1314.9147069);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getU();
        singularValueDecompositionImpl0.getU();
        assertEquals(1729000.686421913, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2833() throws Throwable {
        double[] doubleArray0 = new double[11];
        doubleArray0[0] = 0.5;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        assertTrue(decompositionSolver0.isNonSingular());
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        double[] doubleArray0 = new double[11];
        doubleArray0[0] = 0.5;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        RealMatrix realMatrix0 = array2DRowRealMatrix0.getRowMatrix(0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        assertEquals(0.5, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        double[] doubleArray0 = new double[3];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.mapLog10ToSelf();
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        int int0 = singularValueDecompositionImpl0.getRank();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        double[] doubleArray0 = new double[3];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getCovariance(140.5950535212718);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        doubleArray0[2] = (-200.7204561);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(1190.52);
        assertEquals(6.6982543727467088E16, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        doubleArray0[2] = (-200.7204561);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(1190.52);
        assertEquals(3, realMatrix1.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = 1.05;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1.05;
        doubleArray0[1] = doubleArray2;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        assertEquals(2, singularValueDecompositionImpl0.getRank());
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = 1.05;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1.05;
        doubleArray0[1] = doubleArray2;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        assertFalse(decompositionSolver0.isNonSingular());
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[3];
        doubleArray1[1] = 1.05;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1.05;
        doubleArray0[1] = doubleArray2;
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, true);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, Integer.MAX_VALUE);
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3342() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        assertEquals(1, realMatrix1.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test3343() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        RealMatrix realMatrix2 = singularValueDecompositionImpl0.getV();
        assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getCovariance(0.0);
        RealMatrix realMatrix2 = singularValueDecompositionImpl0.getV();
        assertEquals(1, realMatrix2.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getS();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
        assertNotNull(realMatrix1);
    }

    @Test(timeout = 4000)
    public void test3446() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getS();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
        assertEquals(1, realMatrix1.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getS();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getS();
        assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getUT();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
        assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getUT();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
        assertEquals(28363.113150986705, singularValueDecompositionImpl0.getNorm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test3550() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-119.0863408434962);
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        singularValueDecompositionImpl0.getUT();
        RealMatrix realMatrix1 = singularValueDecompositionImpl0.getUT();
        assertNotNull(realMatrix1);
    }

    @Test(timeout = 4000)
    public void test3651() throws Throwable {
        double[][] doubleArray0 = new double[1][3];
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0, 2);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getNorm();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test3752() throws Throwable {
        double[] doubleArray0 = new double[5];
        ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
        RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(realMatrix0);
        double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
        assertEquals(0, doubleArray1.length);
    }

    @Test(timeout = 4000)
    public void test3853() throws Throwable {
        Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix();
        double[][] doubleArray0 = new double[1][7];
        array2DRowRealMatrix0.data = doubleArray0;
        SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl(array2DRowRealMatrix0);
        // Undeclared exception!
        try {
            singularValueDecompositionImpl0.getConditionNumber();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("org.apache.commons.math.linear.SingularValueDecompositionImpl", e);
        }
    }
}
