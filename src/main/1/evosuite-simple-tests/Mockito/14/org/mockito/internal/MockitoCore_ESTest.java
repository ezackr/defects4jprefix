/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 09:48:34 GMT 2023
 */
package org.mockito.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.MockSettings;
import org.mockito.internal.InOrderImpl;
import org.mockito.internal.MockitoCore;
import org.mockito.internal.creation.MockSettingsImpl;
import org.mockito.internal.stubbing.ConsecutiveStubbing;
import org.mockito.internal.verification.Only;
import org.mockito.stubbing.Answer;
import org.mockito.verification.VerificationMode;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MockitoCore_ESTest extends MockitoCore_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.stubVoid((String) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        // Undeclared exception!
        try {
            mockitoCore0.stub(mockSettingsImpl0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        mockitoCore0.doAnswer((Answer) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        InOrderImpl inOrderImpl0 = new InOrderImpl(linkedList0);
        // Undeclared exception!
        try {
            mockitoCore0.verifyNoMoreInteractionsInOrder(linkedList0, inOrderImpl0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Class<Object> class0 = Object.class;
        MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
        // Undeclared exception!
        try {
            mockitoCore0.mock(class0, (MockSettings) mockSettingsImpl0);
            fail("Expecting exception: IncompatibleClassChangeError");
        } catch (IncompatibleClassChangeError e) {
            //
            // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
            //
            verifyException("org.mockito.cglib.proxy.Enhancer", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.when("InnerClasses");
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.getLastInvocation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.mockito.internal.MockitoCore", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        mockitoCore0.validateMockitoUsage();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Only only0 = new Only();
        // Undeclared exception!
        try {
            mockitoCore0.verify((Object) only0, (VerificationMode) only0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.verify((Object) null, (VerificationMode) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        ConsecutiveStubbing<Integer>[] consecutiveStubbingArray0 = (ConsecutiveStubbing<Integer>[]) Array.newInstance(ConsecutiveStubbing.class, 0);
        mockitoCore0.reset(consecutiveStubbingArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        ConsecutiveStubbing<Integer>[] consecutiveStubbingArray0 = (ConsecutiveStubbing<Integer>[]) Array.newInstance(ConsecutiveStubbing.class, 1);
        // Undeclared exception!
        try {
            mockitoCore0.reset(consecutiveStubbingArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[1];
        // Undeclared exception!
        try {
            mockitoCore0.verifyNoMoreInteractions(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[18];
        objectArray0[0] = (Object) mockitoCore0;
        // Undeclared exception!
        try {
            mockitoCore0.verifyNoMoreInteractions(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.verifyNoMoreInteractions((Object[]) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[0];
        // Undeclared exception!
        try {
            mockitoCore0.verifyNoMoreInteractions(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        // Undeclared exception!
        try {
            mockitoCore0.inOrder((Object[]) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[4];
        // Undeclared exception!
        try {
            mockitoCore0.inOrder(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[0];
        // Undeclared exception!
        try {
            mockitoCore0.inOrder(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        MockitoCore mockitoCore0 = new MockitoCore();
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) mockitoCore0;
        // Undeclared exception!
        try {
            mockitoCore0.inOrder(objectArray0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
        }
    }
}
