/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 02:36:38 GMT 2023
 */
package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.GrayPaintScale;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class GrayPaintScale_ESTest extends GrayPaintScale_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertFalse(grayPaintScale0.equals((Object) grayPaintScale1));
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(177.0, 1937.46546);
        // Undeclared exception!
        try {
            grayPaintScale0.getPaint(0.0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Color parameter outside of expected range: Red Green Blue
            //
            verifyException("java.awt.Color", e);
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1227.8371), 0.0);
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1227.8371), 0.0);
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals((-1227.8371), grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals((-1479.849912401), grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals((-1062.40207109), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        assertEquals(2908.0, grayPaintScale0.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        Color color0 = (Color) grayPaintScale0.getPaint(2908.0);
        assertEquals(562.6361001936054, grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        Color color0 = (Color) grayPaintScale0.getPaint(2908.0);
        assertEquals(255, color0.getBlue());
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale();
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale();
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals(1.0, grayPaintScale0.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals((-1479.849912401), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1479.849912401), (-1062.40207109));
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals((-1062.40207109), grayPaintScale0.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(0.0, 255.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertFalse(grayPaintScale1.equals((Object) grayPaintScale0));
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        Object object0 = new Object();
        boolean boolean0 = grayPaintScale0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        Object object0 = new Object();
        boolean boolean0 = grayPaintScale0.equals(object0);
        assertEquals(562.6361001936054, grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        Object object0 = new Object();
        boolean boolean0 = grayPaintScale0.equals(object0);
        assertEquals(2908.0, grayPaintScale0.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale0);
        assertEquals(2908.0, grayPaintScale0.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1026() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale0);
        assertEquals(562.6361001936054, grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertEquals(0.0, grayPaintScale1.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1128() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertEquals(1.0, grayPaintScale1.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1129() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = new GrayPaintScale();
        boolean boolean0 = grayPaintScale0.equals(grayPaintScale1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test1230() throws Throwable {
        GrayPaintScale grayPaintScale0 = null;
        try {
            grayPaintScale0 = new GrayPaintScale(0.0, (-1.0));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Requires lowerBound < upperBound.
            //
            verifyException("org.jfree.chart.renderer.GrayPaintScale", e);
        }
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals(562.6361001936054, grayPaintScale0.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        double double0 = grayPaintScale0.getUpperBound();
        assertEquals(2908.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = (GrayPaintScale) grayPaintScale0.clone();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = (GrayPaintScale) grayPaintScale0.clone();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertEquals(562.6361001936054, grayPaintScale1.getLowerBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1435() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        GrayPaintScale grayPaintScale1 = (GrayPaintScale) grayPaintScale0.clone();
        boolean boolean0 = grayPaintScale1.equals(grayPaintScale0);
        assertEquals(2908.0, grayPaintScale1.getUpperBound(), 0.01);
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals(562.6361001936054, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1537() throws Throwable {
        GrayPaintScale grayPaintScale0 = new GrayPaintScale(562.6361001936054, 2908.0);
        double double0 = grayPaintScale0.getLowerBound();
        assertEquals(2908.0, grayPaintScale0.getUpperBound(), 0.01);
    }
}
