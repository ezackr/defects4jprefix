/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 03:26:50 GMT 2023
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.codec.binary.Base64InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Base64InputStream_ESTest extends Base64InputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        int int0 = base64InputStream0.read(byteArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        int int0 = base64InputStream0.read(byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        int int0 = base64InputStream0.read(byteArray0);
        assertArrayEquals(new byte[] {}, byteArray0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1866), byteArray0);
        int int0 = base64InputStream0.read(byteArray0);
        assertEquals(0, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        byte[] byteArray0 = new byte[5];
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-1378), byteArray0);
        // Undeclared exception!
        try {
            base64InputStream0.read();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0213() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test0214() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        assertEquals(48, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0215() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0216() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0217() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        assertNotNull(bufferedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0218() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        assertEquals(48, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0219() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0221() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0222() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        assertEquals(48, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0223() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0224() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0225() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0226() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 256);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(bufferedInputStream0, false);
        // Undeclared exception!
        try {
            base64InputStream0.read();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0327() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0328() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0329() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0330() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0331() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0332() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Base64InputStream base64InputStream0 = new Base64InputStream(pipedInputStream0);
        try {
            base64InputStream0.read();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0433() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        assertNotNull(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test0434() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 97;
        Base64InputStream base64InputStream0 = null;
        try {
            base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, 3099, byteArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // lineSeperator must not contain base64 characters: [a\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
            //
            verifyException("org.apache.commons.codec.binary.Base64", e);
        }
    }

    @Test(timeout = 4000)
    public void test0535() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test0536() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        assertEquals((-4087), byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0537() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0538() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0539() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertNotNull(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test0540() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertEquals((-4087), byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0541() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0542() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0543() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0544() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        assertEquals((-4087), byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0545() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0546() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0547() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        assertEquals(9, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0548() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, (byte) (-120));
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true);
        ObjectInputStream objectInputStream0 = null;
        try {
            objectInputStream0 = new ObjectInputStream(base64InputStream0);
            fail("Expecting exception: EOFException");
        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.ObjectInputStream$PeekInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0649() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test0650() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0651() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0652() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0653() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0654() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0655() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0656() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0657() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0658() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test0659() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0660() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0661() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0662() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0663() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertEquals((-1), int1);
    }

    @Test(timeout = 4000)
    public void test0664() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0665() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0666() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test0667() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0668() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0, 0, (int) (byte) 3);
        int int1 = base64InputStream0.read(byteArray0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0769() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test0770() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(1, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0771() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0772() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0773() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertNotNull(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test0774() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertEquals(1, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0775() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0776() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0777() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0778() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        assertEquals(1, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0779() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0780() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0781() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0782() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        int int0 = base64InputStream0.read();
        assertEquals(65, int0);
    }

    @Test(timeout = 4000)
    public void test0783() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        int int0 = base64InputStream0.read();
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0784() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        int int0 = base64InputStream0.read();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0785() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        int int0 = base64InputStream0.read();
        assertArrayEquals(new byte[] { (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0786() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(sequenceInputStream0, true, (byte) 125, byteArray0);
        int int0 = base64InputStream0.read();
        assertEquals(1, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0887() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test0888() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0889() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0890() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0891() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test0892() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test0893() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test0894() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test0895() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test0896() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        // Undeclared exception!
        try {
            base64InputStream0.read(byteArray0, 85, 0);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test0997() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        assertNotNull(pipedOutputStream0);
    }

    @Test(timeout = 4000)
    public void test0998() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        assertNotNull(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test0999() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test09100() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        assertNotNull(pushbackInputStream0);
    }

    @Test(timeout = 4000)
    public void test09101() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test09102() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test09103() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
        assertEquals(0, pipedInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test09104() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test09105() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2125);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        Base64InputStream base64InputStream0 = new Base64InputStream(pushbackInputStream0, true);
        byte[] byteArray0 = new byte[8];
        // Undeclared exception!
        try {
            base64InputStream0.read(byteArray0, 733, (-1207));
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test10106() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test10107() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(5, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test10108() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test10109() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test10110() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test10111() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        assertEquals(5, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test10112() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test10113() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test10114() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        assertEquals(5, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test10115() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0, true);
        // Undeclared exception!
        try {
            base64InputStream0.read(byteArray0, (-37), 1919);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test11116() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test11117() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test11118() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null, true, (-2281), (byte[]) null);
        // Undeclared exception!
        try {
            base64InputStream0.read((byte[]) null, 0, Integer.MAX_VALUE);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test12119() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test12120() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(4, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test12121() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 110, (byte) 45, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test12122() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test12123() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test12124() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(4, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test12125() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test12126() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 110, (byte) 45, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test12127() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test12128() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals(159, int0);
    }

    @Test(timeout = 4000)
    public void test12129() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test12130() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test12131() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 110, (byte) 45, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test12132() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[1] = (byte) 110;
        byteArray0[2] = (byte) 45;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals(4, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test13133() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test13134() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test13135() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test13136() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test13137() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test13138() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test13139() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test13140() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test13141() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test13142() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test13143() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test13144() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test13145() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test13146() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test13147() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test13148() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test13149() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test13150() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test13151() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertEquals(109, int1);
    }

    @Test(timeout = 4000)
    public void test13152() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test13153() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test13154() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertFalse(int1 == int0);
    }

    @Test(timeout = 4000)
    public void test13155() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 98, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test13156() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byteArray0[1] = (byte) 98;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read(byteArray0);
        base64InputStream0.reset();
        int int1 = base64InputStream0.read();
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test14157() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test14158() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test14159() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test14160() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test14161() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test14162() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test14163() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test14164() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test14165() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test14166() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test14167() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals(0, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test14168() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test14169() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test14170() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        int int0 = base64InputStream0.read();
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test15171() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertNotNull(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test15172() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test15173() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test15174() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test15175() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test15176() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test15177() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test15178() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test15179() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test15180() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        boolean boolean0 = base64InputStream0.markSupported();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test15181() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        boolean boolean0 = base64InputStream0.markSupported();
        assertEquals(6, byteArrayInputStream0.available());
    }

    @Test(timeout = 4000)
    public void test15182() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        boolean boolean0 = base64InputStream0.markSupported();
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test15183() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        boolean boolean0 = base64InputStream0.markSupported();
        assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }, byteArray0);
    }

    @Test(timeout = 4000)
    public void test15184() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        Base64InputStream base64InputStream0 = new Base64InputStream(byteArrayInputStream0);
        boolean boolean0 = base64InputStream0.markSupported();
        assertEquals(6, byteArray0.length);
    }

    @Test(timeout = 4000)
    public void test16185() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
        assertNotNull(base64InputStream0);
    }

    @Test(timeout = 4000)
    public void test16186() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
        assertFalse(base64InputStream0.markSupported());
    }

    @Test(timeout = 4000)
    public void test16187() throws Throwable {
        Base64InputStream base64InputStream0 = new Base64InputStream((InputStream) null);
        byte[] byteArray0 = new byte[6];
        // Undeclared exception!
        try {
            base64InputStream0.read(byteArray0, (int) (byte) 0, 256);
            fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.codec.binary.Base64InputStream", e);
        }
    }
}
