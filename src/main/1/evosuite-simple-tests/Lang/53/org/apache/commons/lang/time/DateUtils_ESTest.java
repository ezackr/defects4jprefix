/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 03:59:19 GMT 2023
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DateUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateUtils_ESTest extends DateUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-584), (-584), 982, (-1138), (-584), 982);
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) mockGregorianCalendar0, 982);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 982 is not valid.
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.KOREA;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1388534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar0, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 0, 7, (-432), (-432), (-432));
        ZoneInfo zoneInfo0 = (ZoneInfo) DateUtils.UTC_TIME_ZONE;
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(zoneInfo0);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        MockDate mockDate0 = new MockDate();
        MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 1001);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addHours(mockDate0, 1001);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        assertEquals("Fri Mar 28 13:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.truncate(calendar0, 0);
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62135769600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        Calendar calendar1 = DateUtils.truncate(calendar0, 0);
        boolean boolean0 = DateUtils.isSameDay(calendar0, calendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0710() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 1, 3563, 4194, 1001);
        mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1315));
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1315,ERA=1,YEAR=3573,MONTH=4,WEEK_OF_YEAR=14,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=91,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        Date date0 = DateUtils.addMinutes(mockDate0, (-2355));
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        Date date0 = DateUtils.addMinutes(mockDate0, (-2355));
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0);
        assertEquals("Mon Jan 08 14:30:00 GMT 659", date0.toString());
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.add(mockDate0, 8, 4);
        assertEquals("Fri Mar 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockGregorianCalendar0, 421);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
        // Undeclared exception!
        try {
            DateUtils.round((Date) mockDate0, 280000000);
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) mockGregorianCalendar0, 0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-196), "gQ{\"z");
        Locale locale0 = Locale.FRANCE;
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
        calendar0.set(0, (-432));
        // Undeclared exception!
        try {
            DateUtils.round(calendar0, (-196));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Invalid era
            //
            verifyException("java.util.GregorianCalendar", e);
        }
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        String[] stringArray0 = new String[6];
        stringArray0[0] = "GMT";
        // Undeclared exception!
        try {
            DateUtils.parseDate("GMT", stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'T'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        mockGregorianCalendar0.setTimeZone((TimeZone) null);
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        mockGregorianCalendar0.setLenient(false);
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // YEAR
            //
            verifyException("java.util.GregorianCalendar", e);
        }
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addYears((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addWeeks((Date) null, 149);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addSeconds((Date) null, (-15));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMonths((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMilliseconds((Date) null, 1000);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addHours((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addDays((Date) null, 2028);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) mockGregorianCalendar0, 1055);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 1055 is not valid.
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.round((Date) mockDate0, 9);
        assertEquals("Sat Feb 15 12:00:00 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.add((Date) null, 2091, 2091);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        MockDate mockDate0 = new MockDate((-1081), (-1081), 6, (-745), 5226, 6);
        // Undeclared exception!
        try {
            DateUtils.add(mockDate0, (-348), (-348));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.GregorianCalendar", e);
        }
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch (NoSuchElementException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test3034() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2147482605, 0, 0, 2147482605, 2147482605);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(mockGregorianCalendar1, mockGregorianCalendar0);
        dateUtils_DateIterator0.next();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-6011173188964706464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=190480615,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=1,SECOND=33,MILLISECOND=536,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
    }

    @Test(timeout = 4000)
    public void test3135() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) "Unable to parse the date: ", 7);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not iterate based on Unable to parse the date:
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3236() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) mockDate0, (-2355));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style -2355 is not valid.
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3337() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Object) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3438() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 4);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test3539() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 6);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), (-1138), (-1138), (-1138), (-1138), (-1138));
        DateUtils.iterator((Object) mockGregorianCalendar0, 4);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-101175369418000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1238,MONTH=10,WEEK_OF_YEAR=49,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=333,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=43,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2971), 320, 320, 1231, (-2971), 320);
        DateUtils.iterator((Calendar) mockGregorianCalendar0, 3);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-155051691940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2945,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=247,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=34,SECOND=20,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
    }

    @Test(timeout = 4000)
    public void test3842() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        // Undeclared exception!
        try {
            DateUtils.iterator((Date) mockDate0, 146134526);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The range style 146134526 is not valid.
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test3943() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Calendar) null, 1860);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4044() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.iterator((Date) null, 948);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4145() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 629, 629, 629, 2036, 2036);
        Iterator iterator0 = DateUtils.iterator((Date) mockDate0, 1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 629, 629, 629, 2036, 2036);
        Date date0 = DateUtils.round((Object) mockDate0, 9);
        assertEquals("Tue Mar 17 15:00:00 GMT 1953", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 3563, 3563, 4194, 1001);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3870,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 3563, 3563, 947, 1001);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=59951577600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3869,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=289,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29, 29, 1732, 29);
        Date date0 = DateUtils.truncate((Object) mockDate0, 12);
        assertEquals("Wed Jul 01 09:52:00 GMT 1931", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        Date date0 = DateUtils.truncate((Date) mockDate0, 13);
        assertEquals("Sun Jul 15 01:07:00 GMT 3252", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2147482605, 0, 0, 2147482605, 2147482605);
        // Undeclared exception!
        try {
            DateUtils.round((Object) mockGregorianCalendar0, 2147482605);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 2147482605 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        MockDate mockDate0 = new MockDate(1015L);
        Date date0 = DateUtils.truncate((Object) mockDate0, 14);
        assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        MockDate mockDate0 = new MockDate(280000000, (-1), (-1), 0, 280000000, 689);
        // Undeclared exception!
        try {
            DateUtils.truncate((Date) mockDate0, (-1448));
            fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            //
            // Calendar value too large for accurate calculations
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), 2147481971, (-3416), (-1), 2147481971, 1489);
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) mockDate0, 1489);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The field 1489 is not supported
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) null, 887);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        // Undeclared exception!
        try {
            DateUtils.truncate((Object) timeZone0, 0);
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not truncate sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Calendar) null, 1524);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.truncate((Date) null, 1205);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Object) "<i", (-718));
            fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            //
            // Could not round <i
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Object) null, (-1078));
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Calendar) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.round((Date) null, 1);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.round((Object) mockDate0, 9);
        assertEquals("Thu Dec 01 00:00:00 GMT 1898", date0.toString());
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        String[] stringArray0 = new String[6];
        stringArray0[0] = "";
        // Undeclared exception!
        try {
            DateUtils.parseDate("^+GjO-b( Y", stringArray0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "y6:%K HE$`~]w";
        stringArray0[1] = "y6:%K HE$`~]w";
        stringArray0[2] = "y6:%K HE$`~]w";
        try {
            DateUtils.parseDate("y6:%K HE$`~]w", stringArray0);
            fail("Expecting exception: ParseException");
        } catch (ParseException e) {
            //
            // Unable to parse the date: y6:%K HE$`~]w
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6266() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.parseDate("", (String[]) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6367() throws Throwable {
        String[] stringArray0 = new String[4];
        // Undeclared exception!
        try {
            DateUtils.parseDate((String) null, stringArray0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Date and Patterns must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6468() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        Calendar calendar1 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
        assertFalse(calendar1.equals((Object) calendar0));
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        Calendar calendar1 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        boolean boolean0 = DateUtils.isSameLocalTime(calendar1, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3563, 1, 3563, 4194, 1001);
        Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1001);
        DateUtils.isSameLocalTime(mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=50596185600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3573,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3519, 9, 3519, 576, 1, (-1));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1388534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test6672() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3519, 9, 3519, 576, 1, (-1));
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6773() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-145), 4868, 869);
        Locale locale0 = Locale.forLanguageTag("^rqI1d` Z\"])yE3\"#~");
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
        boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar1, mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test6874() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test6975() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7076() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
        boolean boolean0 = DateUtils.isSameInstant(calendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7177() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant(calendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7278() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
        boolean boolean0 = DateUtils.isSameInstant((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7379() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7480() throws Throwable {
        MockDate mockDate0 = new MockDate((-2355), (-2355), (-2355), (-2355), (-2355));
        MockDate mockDate1 = new MockDate((-2355), (-2355), (-2355));
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7581() throws Throwable {
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7682() throws Throwable {
        MockDate mockDate0 = new MockDate();
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameInstant((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test7884() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1388534400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test7885() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Calendar calendar0 = DateUtils.truncate((Calendar) mockGregorianCalendar0, 1);
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, calendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7986() throws Throwable {
        ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
        GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(15, 1205, 146139496);
        boolean boolean0 = DateUtils.isSameDay((Calendar) gregorianCalendar0, (Calendar) mockGregorianCalendar0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8087() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1138), 956, 956, 956, (-572), 956);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        boolean boolean0 = DateUtils.isSameDay((Calendar) mockGregorianCalendar0, (Calendar) mockGregorianCalendar1);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8188() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
        // Undeclared exception!
        try {
            DateUtils.isSameDay(calendar0, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test8289() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Calendar) null, (Calendar) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test8390() throws Throwable {
        MockDate mockDate0 = new MockDate((-5236), 1027, 0, (-400), 1027);
        boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test8491() throws Throwable {
        MockDate mockDate0 = new MockDate(1001, 1001, 1001, 4194, 1001, 45);
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) mockDate0, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test8592() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.isSameDay((Date) null, (Date) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test8693() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        dateUtils_DateIterator0.hasNext();
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392322881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
    }

    @Test(timeout = 4000)
    public void test8794() throws Throwable {
        Calendar calendar0 = MockCalendar.getInstance();
        DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0);
        // Undeclared exception!
        try {
            dateUtils_DateIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.lang.time.DateUtils$DateIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test8895() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(320, 320, (-2971), 320, 1231);
        Iterator iterator0 = DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);
        assertNotNull(iterator0);
    }

    @Test(timeout = 4000)
    public void test8996() throws Throwable {
        String[] stringArray0 = new String[7];
        stringArray0[0] = "";
        Date date0 = DateUtils.parseDate("", stringArray0);
        Date date1 = DateUtils.addSeconds(date0, (-5683));
        assertEquals("Fri Feb 14 18:46:38 GMT 2014", date1.toString());
    }

    @Test(timeout = 4000)
    public void test9097() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Date date0 = DateUtils.addMonths(mockDate0, 9);
        assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
    }

    @Test(timeout = 4000)
    public void test9198() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addDays(mockDate0, 1);
        assertEquals("Thu Dec 01 09:29:56 GMT 1898", date0.toString());
    }

    @Test(timeout = 4000)
    public void test9299() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addMilliseconds(mockDate0, 10);
        assertEquals("Wed Nov 30 09:29:56 GMT 1898", date0.toString());
    }

    @Test(timeout = 4000)
    public void test93100() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addYears(mockDate0, 1);
        assertEquals("Wed Nov 30 09:29:56 GMT 1898", date0.toString());
    }

    @Test(timeout = 4000)
    public void test94101() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), 2036, 2036);
        Date date0 = DateUtils.addWeeks(mockDate0, 778);
        assertEquals("Wed Oct 29 09:29:56 GMT 1913", date0.toString());
    }

    @Test(timeout = 4000)
    public void test95102() throws Throwable {
        // Undeclared exception!
        try {
            DateUtils.addMinutes((Date) null, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // The date must not be null
            //
            verifyException("org.apache.commons.lang.time.DateUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test96103() throws Throwable {
        DateUtils dateUtils0 = new DateUtils();
        assertEquals(2, DateUtils.RANGE_WEEK_MONDAY);
    }
}
