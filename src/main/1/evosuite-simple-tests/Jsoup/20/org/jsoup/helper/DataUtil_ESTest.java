/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:53:30 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", parser0);
        assertEquals("Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.load((InputStream) pushbackInputStream0, (String) null, "'3C^L}bw", parser0);
        assertEquals("'3C^L}bw", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        // Undeclared exception!
        try {
            DataUtil.readToByteBuffer((InputStream) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.helper.DataUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        try {
            DataUtil.readToByteBuffer(mockFileInputStream0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocate(9834);
        Parser parser0 = Parser.xmlParser();
        // Undeclared exception!
        DataUtil.parseByteData(byteBuffer0, (String) null, "iy4MO", parser0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1270);
        // Undeclared exception!
        try {
            DataUtil.parseByteData(byteBuffer0, "DGv", (String) null, (Parser) null);
            fail("Expecting exception: UnsupportedCharsetException");
        } catch (UnsupportedCharsetException e) {
            //
            // DGv
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
        // Undeclared exception!
        try {
            DataUtil.parseByteData(byteBuffer0, "cZ<", "cZ<", (Parser) null);
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // cZ<
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        // Undeclared exception!
        try {
            DataUtil.parseByteData((ByteBuffer) null, (String) null, (String) null, parser0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.nio.charset.CharsetDecoder", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 131072, 0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0);
        Parser parser0 = Parser.htmlParser();
        // Undeclared exception!
        try {
            DataUtil.parseByteData(byteBuffer0, "", "n;~5OBK", parser0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        File file0 = MockFile.createTempFile("\"uL]>WwZ)Ve", "\"uL]>WwZ)Ve");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        Parser parser0 = Parser.xmlParser();
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) mockFileInputStream0, "i1a5{:mf)xf~&LO", "(?i)\bcharset=s*\"?([^s;\"]*)", parser0);
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // i1a5{:mf)xf~&LO
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) null, "acronym", "acronym", parser0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.helper.DataUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2);
        Parser parser0 = Parser.xmlParser();
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) pushbackInputStream0, "", "", parser0);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte) 45);
        Parser parser0 = Parser.xmlParser();
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "8j}[~{K", parser0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.ByteArrayInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Parser parser0 = Parser.xmlParser();
        try {
            DataUtil.load((InputStream) pipedInputStream0, "l%KuX':e", "Tb=0.jI'", parser0);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 0);
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) byteArrayInputStream0, "param", "!cw?O'");
            fail("Expecting exception: UnsupportedCharsetException");
        } catch (UnsupportedCharsetException e) {
            //
            // param
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) dataInputStream0, "meta[http-equiv=content-type], meta[charset]", "S&Te");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // meta[http-equiv=content-type], meta[charset]
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) pushbackInputStream0, "", "");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        try {
            DataUtil.load((InputStream) pipedInputStream0, (String) null, "");
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            //
            // Pipe not connected
            //
            verifyException("java.io.PipedInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        File file0 = MockFile.createTempFile("meta[http-equiv=content-type], meta[charset]", "o");
        // Undeclared exception!
        try {
            DataUtil.load(file0, "\",>tv)7", "[%s^=%s]");
            fail("Expecting exception: IllegalCharsetNameException");
        } catch (IllegalCharsetNameException e) {
            //
            // \",>tv)7
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        File file0 = MockFile.createTempFile("J^bQ? uQNA!jS", "J^bQ? uQNA!jS");
        // Undeclared exception!
        try {
            DataUtil.load(file0, "", "S_5");
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
            //
            verifyException("org.jsoup.helper.Validate", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        MockFile mockFile0 = new MockFile("(?i)\bcharset=s*\"?([^s;\"]*)");
        try {
            DataUtil.load((File) mockFile0, "(?i)\bcharset=s*\"?([^s;\"]*)", "");
            fail("Expecting exception: FileNotFoundException");
        } catch (FileNotFoundException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("");
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "VO;h9!Ubi*B");
        assertEquals("VO;h9!Ubi*B", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        File file0 = MockFile.createTempFile("?DDX4fCsL(]", "UTF-8");
        Document document0 = DataUtil.load(file0, "UTF-8", "TU<]{!@.9<s7G");
        assertNotNull(document0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        File file0 = MockFile.createTempFile("?DDX4fCsL(]", "UTF-8");
        Document document0 = DataUtil.load(file0, "UTF-8", "TU<]{!@.9<s7G");
        assertEquals("TU<]{!@.9<s7G", document0.baseUri());
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        File file0 = MockFile.createTempFile("?DDX4fCsL(]", (String) null);
        // Undeclared exception!
        try {
            DataUtil.load(file0, "x", "TU<]{!@.9<s7G");
            fail("Expecting exception: UnsupportedCharsetException");
        } catch (UnsupportedCharsetException e) {
            //
            // x
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        // Undeclared exception!
        try {
            DataUtil.load((File) null, "", "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
        }
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) dataInputStream0, "base", "base", (Parser) null);
            fail("Expecting exception: UnsupportedCharsetException");
        } catch (UnsupportedCharsetException e) {
            //
            // base
            //
            verifyException("java.nio.charset.Charset", e);
        }
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        // Undeclared exception!
        try {
            DataUtil.load((InputStream) null, (String) null, "");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.jsoup.helper.DataUtil", e);
        }
    }
}
