/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:08:05 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
        JSModule[] jSModuleArray0 = new JSModule[2];
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("reduce");
        // Undeclared exception!
        try {
            compiler0.toSource(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSourceArray();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.toSource();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        // Undeclared exception!
        try {
            compiler0.toSourceArray(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        // Undeclared exception!
        try {
            compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule[] jSModuleArray0 = new JSModule[1];
        // Undeclared exception!
        try {
            compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.startPass((String) null);
        // Undeclared exception!
        try {
            compiler0.optimize();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Level level0 = Level.WARNING;
        Compiler.setLoggingLevel(level0);
        assertEquals(900, level0.intValue());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(2892, "");
        // Undeclared exception!
        try {
            compiler0.toSource(node0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // 2892
            //
            verifyException("com.google.javascript.rhino.Token", e);
        }
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getCssRenamingMap();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("1hQ=s\"wXj][Vj0F", "1hQ=s\"wXj][Vj0F");
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("SdLNj");
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
        assertNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getInputsInOrder();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.rebuildInputsFromModules();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.computeCFG();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.isNormalized();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parseSyntheticCode("#dHNj");
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.processDefines();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
        }
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllPasses = true;
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.optimize();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.setCssRenamingMap((CssRenamingMap) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getWarningCount();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
        assertNull(functionInformationMap0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.parse();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        // Undeclared exception!
        try {
            compiler0.recordFunctionInformation();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionNames functionNames0 = new FunctionNames(compiler0);
        RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        SourceMap sourceMap0 = compiler0.getSourceMap();
        assertNull(sourceMap0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.isTypeCheckingEnabled();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("ersion");
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
        JSModule[] jSModuleArray0 = new JSModule[2];
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeChangeHandler((CodeChangeHandler) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.getMessages();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.removeTryCatchFinally();
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
        assertNull(scope0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        assertEquals("", compiler_CodeBuilder0.toString());
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("[;Iu~}5wsqS8(L[");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.initCompilerOptionsIfTesting();
        assertFalse(compiler0.isIdeMode());
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "wf)ALme{[.L*(@h$";
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        assertFalse(result0.success);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.initCompilerOptionsIfTesting();
        // Undeclared exception!
        try {
            compiler0.toSource(compiler_CodeBuilder0, 52, (Node) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // java.lang.NullPointerException
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        // Undeclared exception!
        try {
            compiler0.setPassConfig(passConfig0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // this.passes has already been assigned
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.check();
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.endPass();
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Tracer should not be null at the end of a pass.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        // Undeclared exception!
        try {
            compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        // Undeclared exception!
        try {
            compiler0.areNodesEqualForInlining((Node) null, (Node) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.newExternInput((String) null);
        // Undeclared exception!
        try {
            compiler0.newExternInput((String) null);
            fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            //
            // Conflicting externs name: null
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.addIncrementalSourceAst(jsAst0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Duplicate input of name null
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        SourceFile sourceFile0 = SourceFile.fromFile("");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
        assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        assertNotNull(typeValidator0);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNotNull(node0);
    }

    @Test(timeout = 4000)
    public void test6970() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test7071() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        assertEquals(2, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test7172() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        assertNull(node0);
    }

    @Test(timeout = 4000)
    public void test7273() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseTestCode("JSC_INTERFACE_METHOD_OVERRIDE");
        assertTrue(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test7374() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("'Q)d;yE4");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("}fn)E@");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7475() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("\n");
        assertSame(compiler_CodeBuilder1, compiler_CodeBuilder0);
    }

    @Test(timeout = 4000)
    public void test7576() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("com.google.javascript.jscomp.ConcreteType$TypeFilter");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7677() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("K");
        compiler_CodeBuilder0.append("K");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("K");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test7778() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.initModules(arrayList0, stack0, compilerOptions0);
        compiler0.optimize();
        assertFalse(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test7879() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7980() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
    }

    @Test(timeout = 4000)
    public void test8081() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        String[] stringArray0 = new String[3];
        JSError jSError0 = nodeTraversal0.makeError(node0, compilerOptions0.checkProvides, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
        assertFalse(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test8182() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.initCompilerOptionsIfTesting();
        Node node0 = Node.newNumber(Double.NaN, 2204, (-2171));
        String[] stringArray0 = new String[7];
        JSError jSError0 = JSError.make("K", node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        CheckLevel checkLevel0 = compiler0.getErrorLevel(jSError0);
        assertEquals(CheckLevel.ERROR, checkLevel0);
    }

    @Test(timeout = 4000)
    public void test8283() throws Throwable {
        Compiler compiler0 = new Compiler();
        // Undeclared exception!
        try {
            compiler0.throwInternalError("ir_&+/W3", (Exception) null);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            //
            // INTERNAL COMPILER ERROR.
            // Please report this problem.
            // ir_&+/W3
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test8384() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        String string0 = compiler0.getSourceLine("", 10);
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test8485() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("goog.inherits", "+L6s`H");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile("pQQFI0kZ.y_v8zH 77", (Charset) null);
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
        assertFalse(result0.success);
    }

    @Test(timeout = 4000)
    public void test8586() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion((String) null, (-42));
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test8687() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop", 6);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test8788() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("[[singleton]]", 32);
        assertNull(region0);
    }

    @Test(timeout = 4000)
    public void test8889() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // Root module has no inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test8990() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        assertEquals(32, Node.MEMBER_TYPE_PROP);
    }

    @Test(timeout = 4000)
    public void test9091() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.initModules(arrayList0, stack0, compilerOptions0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion((JSModule) null);
            fail("Expecting exception: IllegalStateException");
        } catch (IllegalStateException e) {
            //
            // No inputs
            //
            verifyException("com.google.javascript.jscomp.Compiler", e);
        }
    }

    @Test(timeout = 4000)
    public void test9192() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("// Input %num%", (String) null);
        jSModule0.add(jSSourceFile0);
        // Undeclared exception!
        try {
            compiler0.getNodeForCodeInsertion(jSModule0);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test9293() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test9394() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        assertEquals("digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\"BLOCK\"];\n  node1 [label=\"SCRIPT\"];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"SYN_BLOCK\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n  node0 -> node1 [label=\"UNCOND\", fontcolor=\"red\", weight=0.01, color=\"red\"];\n}\n", string0);
    }

    @Test(timeout = 4000)
    public void test9495() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertEquals(0, errorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test9596() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        assertEquals(0, errorManager0.getWarningCount());
    }
}
