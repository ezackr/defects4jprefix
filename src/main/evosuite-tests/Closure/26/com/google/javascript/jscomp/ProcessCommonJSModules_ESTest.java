/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 01:19:12 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
      String string0 = processCommonJSModules0.guessCJSModuleName("ProcessCommonJSModules supports only one invocation per CompilerInput / script node");
      assertEquals("module$ProcessCommonJSModules supports only one invocation per CompilerInput $ script node", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "module");
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, (Node) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Predicate
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName((String) null, "module$Mp)fL_?Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "", true);
      // Undeclared exception!
      try { 
        processCommonJSModules0.guessCJSModuleName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = null;
      try {
        processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = null;
      try {
        processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
      String string0 = processCommonJSModules0.guessCJSModuleName("/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../GG=Md", "Ba");
      assertEquals("module$..$GG=Md", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("./", "module$Bad dependency: {0} _> {1}. Modules must be listed in dependency order.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in scheme name at index 6: module$Bad dependency: {0} _> {1}. Modules must be listed in dependency order.
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "/", true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
      String string0 = processCommonJSModules0.guessCJSModuleName(" of ");
      assertEquals("module$ of ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("$%Gcs7HGf|3hlJ0iT", "Found duplicate modules");
      assertEquals("module$$%Gcs7HGf|3hlJ0iT", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }
}
