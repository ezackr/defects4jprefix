/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 05:18:15 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isResolved());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, unknownType0, unknownType0);
      assertNotNull(indexedType0);
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isResolved());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isEmptyType());
      assertTrue(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = unknownType0.differsFrom(indexedType0);
      assertFalse(boolean0);
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isResolved());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isEmptyType());
      assertTrue(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isEnumElementType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        nullType0.getTypesUnderInequality(allType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) nullType0, (JSType) allType0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertNotNull(jSType0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.canBeCalled());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertEquals("*", jSType0.toString());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent(unknownType0, numberType0);
      assertFalse(boolean0);
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      numberType0.setResolvedTypeInternal((JSType) null);
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      numberType0.testForEquality(unknownType0);
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertNotNull(stringType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isEmptyType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = JSType.safeResolve(stringType0, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertSame(stringType0, jSType0);
      assertSame(jSType0, stringType0);
      assertNotNull(jSType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isEmptyType());
      assertFalse(stringType0.isNumberValueType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertTrue(stringType0.matchesStringContext());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isInterface());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isRecordType());
      assertEquals("string", jSType0.toString());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSType jSType0 = JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
      assertSame(nullType0, jSType0);
      assertSame(jSType0, nullType0);
      assertNotNull(jSType0);
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isResolved());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.matchesObjectContext());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals("null", jSType0.toString());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnknownType unknownType1 = (UnknownType)JSType.safeResolve(unknownType0, simpleErrorReporter0, emptyScope0);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertTrue(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isEmptyType());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isStringValueType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.hasReferenceName());
      assertTrue(unknownType1.isResolved());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isAllType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isNumberValueType());
      assertEquals("??", unknownType1.getReferenceName());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.hasCachedValues());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSType jSType0 = JSType.safeResolve(allType0, simpleErrorReporter0, emptyScope0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertNotNull(jSType0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertTrue(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertEquals("*", jSType0.toString());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(0, Node.BOTH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0);
      assertNotNull(arrowType0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isEmptyType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(0, Node.BOTH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.safeResolve(arrowType0, simpleErrorReporter0, emptyScope0);
      assertSame(arrowType0, jSType0);
      assertSame(jSType0, arrowType0);
      assertNotNull(jSType0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isEmptyType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertTrue(arrowType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.isResolved());
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(0, Node.BOTH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType1 = arrowType0.restrictByNotNullOrUndefined();
      assertSame(arrowType0, jSType0);
      assertSame(arrowType0, jSType1);
      assertSame(jSType1, arrowType0);
      assertSame(jSType1, jSType0);
      assertNotNull(jSType1);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isEmptyType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertTrue(arrowType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isEmptyType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isOrdinaryFunction());
      assertTrue(jSType1.isResolved());
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(0, Node.BOTH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = numberType0.restrictByNotNullOrUndefined();
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
      assertNotNull(jSType0);
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("number", jSType0.toString());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEmptyType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.restrictByNotNullOrUndefined();
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertNotNull(enumElementType1);
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertTrue(enumElementType1.isNominalType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isEmptyType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isUnionType());
      assertEquals("Named type with empty name component", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isInterface());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)unknownType0.restrictByNotNullOrUndefined();
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isInterface());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType1.matchesStringContext());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isTemplateType());
      assertFalse(unknownType1.hasCachedValues());
      assertTrue(unknownType1.matchesNumberContext());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isRecordType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isResolved());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = booleanType0.restrictByNotNullOrUndefined();
      assertSame(booleanType0, jSType0);
      assertSame(jSType0, booleanType0);
      assertNotNull(jSType0);
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullable());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNullType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isBooleanValueType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals("boolean", jSType0.toString());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSType jSType0 = numberType0.resolve(simpleErrorReporter0, emptyScope0);
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
      assertNotNull(jSType0);
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.isResolved());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertEquals("number", jSType0.toString());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      EnumElementType enumElementType1 = (EnumElementType)enumElementType0.resolve(simpleErrorReporter0, emptyScope0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertNotNull(enumElementType1);
      assertTrue(numberType0.isResolved());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNullType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.isResolved());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertEquals("Named type with empty name component", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isNoObjectType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isNullType());
      assertFalse(enumElementType1.isNoType());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isInterface());
      assertTrue(enumElementType1.isResolved());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isEmptyType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType1.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEmptyType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSType jSType0 = allType0.resolve(simpleErrorReporter0, emptyScope0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertNotNull(jSType0);
      assertFalse(allType0.isNoType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEmptyType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isAllType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.matchesObjectContext());
      assertEquals("*", jSType0.toString());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertNotNull(stringType0);
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEmptyType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = stringType0.matchesUint32Context();
      assertTrue(boolean0);
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isUnionType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isEmptyType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = unknownType0.matchesNumberContext();
      assertTrue(boolean0);
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = numberType0.matchesInt32Context();
      assertTrue(boolean0);
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isRecordType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
      assertNotNull(enumElementType0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEmptyType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = enumElementType0.matchesInt32Context();
      assertFalse(boolean0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEmptyType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = numberType0.isNumberValueType();
      assertTrue(boolean0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNominalType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.isNullable();
      assertTrue(boolean0);
      assertFalse(nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesNumberContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertSame(nullType0, jSType0);
      assertSame(jSType0, nullType0);
      assertNotNull(jSType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesNumberContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEmptyType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.matchesObjectContext());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertEquals("null", jSType0.toString());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)unknownType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isEmptyType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isNumberValueType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isUnionType());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isNominalType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNativeObjectType());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isNullType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.matchesObjectContext());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertNotNull(stringType0);
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEmptyType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      BooleanLiteralSet booleanLiteralSet0 = stringType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isConstructor());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEmptyType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isFunctionType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)unknownType0.getLeastSupertype(unknownType0);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType1.isNoType());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.isNullable());
      assertEquals("??", unknownType1.getReferenceName());
      assertFalse(unknownType1.isNoObjectType());
      assertEquals("??", unknownType1.toString());
      assertTrue(unknownType1.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.matchesObjectContext());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isNullType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isNominalType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isStringValueType());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isAllType());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.hasReferenceName());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isConstructor());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertEquals("??", unknownType1.getReferenceName());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)unknownType0.findPropertyType("1N+0Msu5`lP[JTw7");
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isConstructor());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isUnionType());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isNominalType());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.isObject());
      assertEquals("??", unknownType1.getReferenceName());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isConstructor());
      assertTrue(unknownType1.matchesObjectContext());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEmptyType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = allType0.dereference();
      assertNull(objectType0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEmptyType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = unknownType0.dereference();
      assertSame(unknownType0, objectType0);
      assertSame(objectType0, unknownType0);
      assertNotNull(objectType0);
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.canBeCalled());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals("??", objectType0.toString());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isUnknownType());
      assertTrue(objectType0.matchesNumberContext());
      assertEquals("??", objectType0.getReferenceName());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.isNullable());
      assertTrue(objectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, objectType0.getPropertiesCount());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.matchesStringContext());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEmptyType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        nullType0.restrictByNotNullOrUndefined();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NullType", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertEquals("number", numberType0.toString());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.isSubtype((JSType) numberType0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(991, "", 991, 991);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(991, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals(991, node0.getLineno());
      assertEquals(991, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ArrowType arrowType0 = new ArrowType((JSTypeRegistry) null, node0, allType0, true);
      assertNotNull(arrowType0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(991, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals(991, node0.getLineno());
      assertEquals(991, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEmptyType());
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(50, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(50, Node.SUPPRESSIONS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        arrowType0.getTypesUnderShallowInequality(arrowType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      assertNotNull(stringType0);
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isEnumElementType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNoType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isEmptyType());
      assertTrue(stringType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isEnumType());
      assertEquals("string", stringType0.toString());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNumberValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        stringType0.getTypesUnderShallowEquality((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        nullType0.getTypesUnderEquality(unknownType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      // Undeclared exception!
      try { 
        allType0.getNativeType(jSTypeNative0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isEmptyType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isAllType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        booleanType0.findPropertyType("Unknown class name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesStringContext());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertTrue(nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.matchesStringContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        numberType0.canTestForShallowEqualityWith(nullType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isRecordType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        booleanType0.canTestForEqualityWith(nullType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertEquals("number", numberType0.toString());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        numberType0.canAssignTo((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isInterface());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        numberType0.canAssignTo(enumElementType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.isNullType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplateType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.isSubtype((JSType) unknownType0, (JSType) nullType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isSubtype((JSType) enumElementType0, (JSType) enumElementType0);
      assertTrue(boolean0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isStringValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isTemplateType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
      assertTrue(boolean0);
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.toString());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isStringValueType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.getLeastSupertype((JSType) booleanType0, (JSType) booleanType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.toString());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = numberType0.isEquivalentTo(nullType0);
      assertFalse(boolean0);
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertEquals("number", numberType0.toString());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = allType0.isEquivalentTo(allType0);
      assertTrue(boolean0);
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.isEmptyType();
      assertFalse(boolean0);
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSType.TypePair jSType_TypePair0 = new JSType.TypePair((JSType) null, (JSType) null);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.isNoObjectType();
      assertFalse(boolean0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertNotNull(unknownType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = unknownType0.autoboxesTo();
      assertNull(jSType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      nullType0.hashCode();
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSDocInfo jSDocInfo0 = nullType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isAllType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = booleanType0.isUnknownType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.isBooleanValueType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isResolved());
      assertTrue(booleanType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = allType0.isRecordType();
      assertFalse(boolean0);
      assertFalse(allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = allType0.isNoType();
      assertFalse(boolean0);
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
      assertNotNull(enumElementType0);
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EnumElementType enumElementType1 = (EnumElementType)JSType.safeResolve(enumElementType0, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertNotNull(enumElementType1);
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isResolved());
      assertFalse(enumElementType0.isFunctionType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isEmptyType());
      assertFalse(enumElementType1.isStringValueType());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isResolved());
      assertFalse(enumElementType1.isTemplateType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isNullType());
      assertTrue(enumElementType1.isEnumElementType());
      assertTrue(enumElementType1.hasReferenceName());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isAllType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isEnumType());
      assertEquals("xBU=", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isConstructor());
      assertFalse(enumElementType1.isBooleanValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      UnknownType unknownType1 = (UnknownType)unknownType0.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertTrue(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isFunctionType());
      assertTrue(unknownType1.isResolved());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isVoidType());
      assertEquals("??", unknownType1.getReferenceName());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isStringValueType());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isAllType());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.hasReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType2 = (UnknownType)unknownType1.resolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertSame(unknownType0, unknownType2);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType2);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType2, unknownType0);
      assertSame(unknownType2, unknownType1);
      assertNotNull(unknownType2);
      assertTrue(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isFunctionType());
      assertTrue(unknownType1.isResolved());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.isNativeObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNullType());
      assertFalse(unknownType1.isEmptyType());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isVoidType());
      assertEquals("??", unknownType1.getReferenceName());
      assertTrue(unknownType1.isNullable());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isStringValueType());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.canBeCalled());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isAllType());
      assertEquals("??", unknownType1.toString());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.matchesNumberContext());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType2.isInterface());
      assertFalse(unknownType2.isNoObjectType());
      assertTrue(unknownType2.isUnknownType());
      assertTrue(unknownType2.isNullable());
      assertFalse(unknownType2.isNoType());
      assertFalse(unknownType2.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType2.getPossibleToBooleanOutcomes());
      assertTrue(unknownType2.matchesStringContext());
      assertTrue(unknownType2.matchesNumberContext());
      assertFalse(unknownType2.isStringValueType());
      assertEquals("??", unknownType2.toString());
      assertFalse(unknownType2.isTemplateType());
      assertTrue(unknownType2.isCheckedUnknownType());
      assertTrue(unknownType2.canBeCalled());
      assertTrue(unknownType2.matchesObjectContext());
      assertTrue(unknownType2.isResolved());
      assertFalse(unknownType2.isEnumType());
      assertFalse(unknownType2.hasReferenceName());
      assertFalse(unknownType2.isNullType());
      assertFalse(unknownType2.isAllType());
      assertFalse(unknownType2.isFunctionPrototypeType());
      assertFalse(unknownType2.isEnumElementType());
      assertFalse(unknownType2.isFunctionType());
      assertFalse(unknownType2.isVoidType());
      assertFalse(unknownType2.isNativeObjectType());
      assertFalse(unknownType2.hasCachedValues());
      assertFalse(unknownType2.isNominalType());
      assertTrue(unknownType2.isObject());
      assertFalse(unknownType2.isNumberValueType());
      assertFalse(unknownType2.isUnionType());
      assertFalse(unknownType2.isRecordType());
      assertFalse(unknownType2.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, unknownType2.getPropertiesCount());
      assertFalse(unknownType2.isConstructor());
      assertFalse(unknownType2.isEmptyType());
      assertEquals("??", unknownType2.getReferenceName());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = JSType.isSubtype((JSType) nullType0, (JSType) allType0);
      assertTrue(boolean0);
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertTrue(allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      assertNotNull(voidType0);
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.toString());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      VoidType voidType1 = new VoidType((JSTypeRegistry) null);
      assertNotNull(voidType1);
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals("undefined", voidType1.toString());
      assertFalse(voidType1.isEmptyType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.equals((Object)voidType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = voidType0.differsFrom(voidType1);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertTrue(boolean0);
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.toString());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals("undefined", voidType1.toString());
      assertFalse(voidType1.isEmptyType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.differsFrom(unknownType0);
      assertTrue(boolean0);
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = numberType0.differsFrom(numberType0);
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isFunctionType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isUnionType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        unknownType0.differsFrom((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isBooleanValueType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) numberType0, (JSType) numberType0);
      assertSame(numberType0, jSType0);
      assertSame(jSType0, numberType0);
      assertNotNull(jSType0);
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesStringContext());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("number", jSType0.toString());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesStringContext());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertNotNull(jSType0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertEquals("*", jSType0.toString());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isEmptyType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isAllType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = nullType0.canTestForShallowEqualityWith(nullType0);
      assertTrue(boolean0);
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoObjectType());
      assertTrue(nullType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isEmptyType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        numberType0.testForEquality(enumElementType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isResolved());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.canTestForEqualityWith(unknownType0);
      assertTrue(boolean0);
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isResolved());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNominalType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isResolved());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      nullType0.testForEquality(allType0);
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isResolved());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertNotNull(unknownType0);
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.toString());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = unknownType0.dereference();
      assertSame(unknownType0, objectType0);
      assertSame(objectType0, unknownType0);
      assertNotNull(objectType0);
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals("?", unknownType0.toString());
      assertTrue(unknownType0.isNullable());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isEmptyType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.matchesNumberContext());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.canBeCalled());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNativeObjectType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isEnumElementType());
      assertTrue(objectType0.isUnknownType());
      assertFalse(objectType0.hasReferenceName());
      assertTrue(objectType0.isObject());
      assertEquals("?", objectType0.toString());
      assertEquals(Integer.MAX_VALUE, objectType0.getPropertiesCount());
      assertTrue(objectType0.matchesStringContext());
      assertEquals("?", objectType0.getReferenceName());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isNullable());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEmptyType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.canAssignTo(unknownType0);
      assertTrue(boolean0);
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals("??", unknownType0.toString());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = numberType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(numberType0.isEmptyType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isAllType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNominalType());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNullable());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.toString());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = JSType.isEquivalent((JSType) null, nullType0);
      assertFalse(boolean0);
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalType());
      assertEquals("null", nullType0.toString());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isEmptyType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      assertNotNull(booleanType0);
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isAllType());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isNullType());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.toString());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isEmptyType());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isEnumType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      // Undeclared exception!
      try { 
        JSType.getGreatestSubtype((JSType) booleanType0, (JSType) unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isInterface());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
      assertNotNull(enumElementType0);
      assertFalse(allType0.isInterface());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
      assertNotNull(indexedType0);
      assertFalse(allType0.isInterface());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNativeObjectType());
      assertTrue(indexedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = allType0.equals(indexedType0);
      assertFalse(boolean0);
      assertFalse(allType0.isInterface());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNativeObjectType());
      assertTrue(indexedType0.isObject());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
      assertNotNull(enumElementType0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
      assertNotNull(indexedType0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = indexedType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals("xBU=", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertTrue(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isEmptyType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNullType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isFunctionType());
      assertTrue(indexedType0.isNominalType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      unknownType0.clearResolved();
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isEmptyType());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isInterface());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      unknownType0.forgiveUnknownNames();
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertEquals("??", unknownType0.getReferenceName());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      // Undeclared exception!
      try { 
        allType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = allType0.isNumberValueType();
      assertFalse(boolean0);
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isFunctionType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = allType0.isEnumType();
      assertFalse(boolean0);
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNoType());
      assertEquals("*", allType0.toString());
      assertTrue(allType0.isAllType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isTemplateType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertNotNull(numberType0);
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      assertNotNull(enumElementType0);
      assertEquals("number", numberType0.toString());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isEmptyType());
      assertFalse(numberType0.isUnionType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isNullType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.hasCachedValues());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertEquals("Named type with empty name component", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isEmptyType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      // Undeclared exception!
      try { 
        enumElementType0.getTypesUnderShallowEquality(numberType0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/javascript/rhino/jstype/UnionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      assertNotNull(allType0);
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = allType0.matchesNumberContext();
      assertFalse(boolean0);
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isEmptyType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isResolved());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      assertNotNull(voidType0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = voidType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEmptyType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesNumberContext());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      assertNotNull(unknownType0);
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = unknownType0.isNominalType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertEquals("??", unknownType0.toString());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("??", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      assertNotNull(nullType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      boolean boolean0 = nullType0.isTheObjectType();
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isEmptyType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumElementType());
      assertTrue(nullType0.matchesNumberContext());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      assertFalse(numberType0.isResolved());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSType jSType0 = JSType.safeResolve(numberType0, simpleErrorReporter0, (StaticScope<JSType>) null);
      JSType.getGreatestSubtype((JSType) numberType0, jSType0);
      assertTrue(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isInstanceType();
      assertFalse(unknownType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isInterface();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
      // Undeclared exception!
      try { 
        indexedType0.matchesInt32Context();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        numberType0.dereference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        voidType0.getTypesUnderShallowInequality((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, numberType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.isNamedType();
      assertFalse(boolean0);
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, unknownType0, unknownType0);
      // Undeclared exception!
      try { 
        nullType0.getLeastSupertype(parameterizedType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      // Undeclared exception!
      try { 
        unknownType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.canBeCalled();
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      boolean boolean0 = voidType0.isBooleanValueType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      boolean boolean0 = unknownType0.isArrayType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, allType0, "xBU=");
      IndexedType indexedType0 = new IndexedType((JSTypeRegistry) null, enumElementType0, enumElementType0);
      boolean boolean0 = indexedType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        booleanType0.canTestForEqualityWith((JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      unknownType0.unboxesTo();
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        allType0.isNullable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.isObject();
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      boolean boolean0 = numberType0.isNumberObjectType();
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      boolean boolean0 = unknownType0.isStringObjectType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isDateType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NullType nullType0 = new NullType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        nullType0.isString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isRegexpType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      String string0 = unknownType0.toDebugHashCodeString();
      assertFalse(unknownType0.isResolved());
      assertEquals("{1}", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      allType0.findPropertyType("Unknown class name");
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = unknownType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      unknownType0.getTypesUnderShallowEquality((JSType) null);
      assertFalse(unknownType0.isResolved());
  }
}
