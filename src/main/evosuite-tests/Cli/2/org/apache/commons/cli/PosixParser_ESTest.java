/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:37:05 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", true);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken("9]T<;)", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      posixParser0.parse(options1, stringArray0);
      posixParser0.burstToken("----6ki dl_rTQwO-", true);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-.31,5wk";
      stringArray0[1] = "-.31,5wk";
      stringArray0[2] = "-.31,5wk";
      stringArray0[3] = "-.31,5wk";
      stringArray0[4] = "-.31,5wk";
      Option option0 = new Option("1", "1");
      options0.addOption(option0);
      stringArray0[5] = "-";
      stringArray0[6] = "-.31,5wk";
      stringArray0[7] = "-";
      stringArray0[8] = "-.31,5wk";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, false);
      assertEquals(9, stringArray2.length);
      assertEquals(51, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6";
      stringArray0[1] = "6";
      stringArray0[2] = "6";
      stringArray0[3] = "6";
      posixParser0.parse(options0, stringArray0);
      options0.addOption("6", "6", false, "6");
      posixParser0.burstToken("----6ki7e dl_rTQwO-", true);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--Z=.315q!wk");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--Z=.315q!wk";
      stringArray0[1] = "--Z=.315q!wk";
      stringArray0[2] = "";
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--", true);
      posixParser0.burstToken(".31,5wk", true);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--Z=.315q!wk";
      stringArray0[1] = "--Z=.315q!wk";
      stringArray0[2] = "";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(8, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--Z=.315q!wk";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-.31,5wk";
      stringArray0[1] = "-.31,5wk";
      stringArray0[2] = "-.31,5wk";
      stringArray0[3] = "-.31,5wk";
      stringArray0[4] = "-.31,5wk";
      stringArray0[5] = "-";
      stringArray0[6] = "-.31,5wk";
      stringArray0[7] = "-";
      stringArray0[8] = "-.31,5wk";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(50, stringArray2.length);
      assertEquals(51, stringArray1.length);
  }
}
