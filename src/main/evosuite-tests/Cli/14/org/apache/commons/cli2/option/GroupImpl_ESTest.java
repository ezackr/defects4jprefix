/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:02:42 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.ClassValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "^G@%c/aUf-,h", 0, 0);
      boolean boolean0 = groupImpl0.isRequired();
      assertEquals(0, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-3747), 1595);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals(1595, groupImpl0.getMaximum());
      assertEquals((-3747), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "q_)", "|", 0, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "q_)");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Comparator<SourceDestArgument> comparator0 = (Comparator<SourceDestArgument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, (Set) linkedHashSet0, (Comparator) comparator0);
      assertEquals(6, stringBuffer0.length());
      assertEquals("q_)q_)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, (-1185));
      groupImpl0.getPreferredName();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals((-1185), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "#,='oXgDM", "#,='oXgDM", 6, 6);
      groupImpl0.getPreferredName();
      assertEquals(6, groupImpl0.getMaximum());
      assertEquals(6, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, (-1185));
      int int0 = groupImpl0.getMinimum();
      assertEquals(0, int0);
      assertEquals((-1185), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "'tc#JyA{:\",n+F#HSq", "", (-809), 0);
      int int0 = groupImpl0.getMinimum();
      assertEquals("", groupImpl0.getDescription());
      assertEquals((-809), int0);
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", (String) null, 0, 0);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "org.apache.commons.cli2.option.ReverseStringComparator", 0, (-787));
      int int0 = groupImpl0.getMaximum();
      assertEquals((-787), int0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals("org.apache.commons.cli2.option.ReverseStringComparator", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DISPLAY_SWITCH_ENABLED", "g>);`1t7%`s", 32, 32);
      String string0 = groupImpl0.getDescription();
      assertEquals("g>);`1t7%`s", string0);
      assertEquals(32, groupImpl0.getMaximum());
      assertEquals(32, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-1186), 91);
      groupImpl0.getDescription();
      assertEquals((-1186), groupImpl0.getMinimum());
      assertEquals(91, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "1TLnLY3.*vzi:(@", "1TLnLY3.*vzi:(@", 1276, 1276);
      Integer integer0 = Integer.valueOf((-279));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        groupImpl0.validate((WriteableCommandLine) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.commons.cli2.Option
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", ".;`FmQ0OZ.u0", (-2481), (-2481));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.process(writeableCommandLineImpl0, (ListIterator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DISPLAY_SWITCH_ENABLED", "g>);`1t7%`s", 70, 70);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      Object object0 = new Object();
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn(object0).when(listIterator0).next();
      // Undeclared exception!
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        groupImpl0.helpLines(2382, (Set) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "1", "1", (-1), (-1));
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        groupImpl0.findOption("org.apache.commons.cli2.option.GroupImpl");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.commons.cli2.Option
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "nZ/", 2680, 2680);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Integer) null);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, list0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-5027), (-1577));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedList0.addFirst(linkedHashSet0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedHashSet cannot be cast to org.apache.commons.cli2.Option
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "1", "1", (-1), (-1));
      // Undeclared exception!
      try { 
        groupImpl0.canProcess((WriteableCommandLine) null, "1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "N*9<", "cAGA>", 1238, 1238);
      LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, "N*9<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GroupImpl groupImpl0 = null;
      try {
        groupImpl0 = new GroupImpl((List) null, "Unexpected.token", "", 263, 2260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-282));
      linkedList0.add(integer0);
      GroupImpl groupImpl0 = null;
      try {
        groupImpl0 = new GroupImpl(linkedList0, "B]", "B]", 32, (-282));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.apache.commons.cli2.Option
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Bo<6S]{_} ~c", "Bo<6S]{_} ~c", 68, 68);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertEquals(68, groupImpl0.getMaximum());
      assertEquals(68, groupImpl0.getMinimum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-164), 786);
      groupImpl0.getPreferredName();
      assertEquals(786, groupImpl0.getMaximum());
      assertEquals((-164), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      GroupImpl groupImpl0 = new GroupImpl(list0, "nR*@| ", (String) null, 5798, 5798);
      String string0 = groupImpl0.getDescription();
      assertEquals(5798, groupImpl0.getMaximum());
      assertEquals(5798, groupImpl0.getMinimum());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(LU6b,Z2cnW9KLvL!4", "(LU6b,Z2cnW9KLvL!4", (-1899), 3922);
      Set set0 = groupImpl0.getPrefixes();
      Comparator<GroupImpl> comparator0 = (Comparator<GroupImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        groupImpl0.appendUsage((StringBuffer) null, set0, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "", 1367, 1277);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "org.apache.commons.cli2.option.GroupImpl", 91, 1367, 'k', 'k', fileValidator0, "org.apache.commons.cli2.option.GroupImpl", list0, 0);
      linkedList0.add(argumentImpl0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(1277, groupImpl0.getMaximum());
      assertEquals(1367, groupImpl0.getMinimum());
      assertEquals("", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Enum.illeaG.value", 60, 60);
      boolean boolean0 = groupImpl0.isRequired();
      assertEquals(60, groupImpl0.getMaximum());
      assertTrue(boolean0);
      assertEquals("Enum.illeaG.value", groupImpl0.getDescription());
      assertEquals(60, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "1", "1", (-1), (-1));
      boolean boolean0 = groupImpl0.isRequired();
      assertEquals((-1), groupImpl0.getMinimum());
      assertEquals((-1), groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("U", ">s~mAUwWzEHvq6#]I", 0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "U", "U", 2801, 41);
      groupImpl0.findOption("U");
      assertEquals(1, linkedList0.size());
      assertEquals(41, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("_(Um:&", ">s~mAUwWzEHvq6#]I", 0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "_(Um:&", "U", 2801, 41);
      groupImpl0.findOption("U");
      assertEquals(1, linkedList0.size());
      assertEquals("U", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "S)8", "S)8", 0, 2843);
      Set set0 = groupImpl0.getTriggers();
      Comparator<Switch> comparator0 = (Comparator<Switch>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(2843, set0, comparator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, list0.size());
      assertEquals(2843, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "}p*z.T\"YQp;IDCa", (-2065), (-497));
      LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
      Comparator<GroupImpl> comparator0 = (Comparator<GroupImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, "S~n@zOF3~)kx^$<MF");
      assertEquals((-2065), groupImpl0.getMinimum());
      assertEquals((-497), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "org.apache.commons.cli2.option.ReverseStringComparator", 0, (-787));
      String string0 = groupImpl0.toString();
      assertEquals("[ ()]", string0);
      assertEquals((-787), groupImpl0.getMaximum());
      assertEquals("org.apache.commons.cli2.option.ReverseStringComparator", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "S)8", "S)8", 0, 2843);
      Set set0 = groupImpl0.getTriggers();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "S)8");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage(stringBuffer0, set0, comparator0, "S)8");
      assertEquals("S)8S)8", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.option.GroupImpl", "", 1367, 1277);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "org.apache.commons.cli2.option.GroupImpl", 91, 1367, 'k', 'k', fileValidator0, "org.apache.commons.cli2.option.GroupImpl", list0, 0);
      linkedList0.add(argumentImpl0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("_(Um:&", ">s~mAUwWzEHvq6#]I", 0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "U", 2801, 41);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "S)8", "S)8", 0, 2843);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals(2843, groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("_Um:&", ">s~mAUwWzEHvq6#]I", 19);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "_Um:&", "U", 2801, 41);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(41, groupImpl0.getMaximum());
      assertEquals("U", groupImpl0.getDescription());
      assertEquals("_Um:&", groupImpl0.getPreferredName());
      assertEquals(2801, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "U", 2801, 41);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("Passes properties and values to the application").when(listIterator0).next();
      doReturn((String) null).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("U", groupImpl0.getDescription());
      assertEquals(41, groupImpl0.getMaximum());
      assertEquals(2801, groupImpl0.getMinimum());
      assertEquals("", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      LinkedList<GroupImpl> linkedList1 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "S)8", "S)8", 0, 2843);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Command> listIterator0 = linkedList0.listIterator(0);
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(2843, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 60, 60);
      PropertyOption propertyOption0 = new PropertyOption("", ")$\"Bqaed<", 60);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.resource.CLIMessageBundle_en_US");
      assertEquals(60, groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals(60, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DS4m-'C", "#WW;1#unmkrS,", (-1186), (-1186));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "org.apache.commons.cli2.resource.bundle");
      assertFalse(boolean0);
      assertEquals("#WW;1#unmkrS,", groupImpl0.getDescription());
      assertEquals((-1186), groupImpl0.getMinimum());
      assertEquals((-1186), groupImpl0.getMaximum());
      assertEquals("DS4m-'C", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption("_(Um:&", ">s~mAUwWzEHvq6#]I", 0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "U", 2801, 41);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("_(Um:&", (Object) null).when(listIterator0).next();
      doReturn("").when(listIterator0).previous();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ClassValidator classValidator0 = new ClassValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, "LSq`<^hD8=h^U> I", 0, 0, '2', '\'', classValidator0, (String) null, linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      linkedList0.add((Object) sourceDestArgument0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "VmSumKU@kYM", "LSq`<^hD8=h^U> I", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(0, linkedList0.size());
      assertEquals("LSq`<^hD8=h^U> I", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Enum.illeaG.value", 60, 60);
      int int0 = groupImpl0.getMaximum();
      assertEquals("", groupImpl0.getPreferredName());
      assertEquals(60, int0);
      assertEquals("Enum.illeaG.value", groupImpl0.getDescription());
      assertEquals(60, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "Enum.illeaG.value", 60, 60);
      int int0 = groupImpl0.getMinimum();
      assertEquals(60, groupImpl0.getMaximum());
      assertEquals("", groupImpl0.getPreferredName());
      assertEquals(60, int0);
      assertEquals("Enum.illeaG.value", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DS4m-'C", "#WW;1#unmkrS,", (-1186), (-1186));
      groupImpl0.getAnonymous();
      assertEquals("DS4m-'C", groupImpl0.getPreferredName());
      assertEquals((-1186), groupImpl0.getMinimum());
      assertEquals("#WW;1#unmkrS,", groupImpl0.getDescription());
      assertEquals((-1186), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "org.apache.commons.cli2.option.ReverseStringComparator", 0, (-787));
      groupImpl0.getOptions();
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals((-787), groupImpl0.getMaximum());
      assertEquals("org.apache.commons.cli2.option.ReverseStringComparator", groupImpl0.getDescription());
      assertEquals("", groupImpl0.getPreferredName());
  }
}
