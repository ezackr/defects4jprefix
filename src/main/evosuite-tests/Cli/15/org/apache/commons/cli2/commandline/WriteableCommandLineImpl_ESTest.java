/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:03:59 GMT 2023
 */

package org.apache.commons.cli2.commandline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WriteableCommandLineImpl_ESTest extends WriteableCommandLineImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      linkedList0.add(" 4&^<]SXzM8;1?k>Vp");
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("\" 4&^<]SXzM8;1?k>Vp\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "", (-1300), (-1300), 'a', 'B', dateValidator0, "", linkedList0, 32);
      String string0 = writeableCommandLineImpl0.getProperty((Option) argumentImpl0, "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D<property>=<value>", "hjtiQIc,J@L!");
      String string0 = writeableCommandLineImpl0.getProperty("-D<property>=<value>");
      assertNotNull(string0);
      assertEquals("hjtiQIc,J@L!", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty("zOF3~)kx^$<MFG|", "");
      String string0 = writeableCommandLineImpl0.getProperty("zOF3~)kx^$<MFG|");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", (String) null, (-122683469), 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.addSwitch(groupImpl0, true);
      Option option0 = writeableCommandLineImpl0.getOption(" (");
      assertEquals(0, option0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "", (-1300), (-1300), 'a', 'B', dateValidator0, "", linkedList0, 32);
      writeableCommandLineImpl0.addValue(argumentImpl0, (Object) null);
      ArgumentImpl argumentImpl1 = (ArgumentImpl)writeableCommandLineImpl0.getOption("-D");
      assertEquals('\u0000', ArgumentImpl.DEFAULT_INITIAL_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Integer integer0 = new Integer((-122683469));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "", (-164989881), (-2));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.setDefaultValues(groupImpl0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption((String) null, "--", (-28629474));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = new Boolean("org.apache.commons.cli2.option.PropertyOption");
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.looksLikeOption((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, (-1268));
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "=o", (-713), (-713));
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getUndefaultedValues(groupImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption((String) null, "Switch.no.enabledPrefix", 32);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UrlValidator urlValidator0 = new UrlValidator("bK_+R|.A!_MZ`");
      ArgumentImpl argumentImpl0 = new ArgumentImpl("or", "reb", 32, 32, '\\', '4', urlValidator0, "GhLN", linkedList0, (-1248));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PropertyOption propertyOption0 = new PropertyOption((String) null, "#@6", (-384));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getProperties((Option) propertyOption0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.OptionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("*]@;1<n", "vG@0Ti=z|d[l!jO1E", (-2422));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getNormalised();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addSwitch((Option) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addProperty((Option) propertyOption0, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9ooc|_H", "", 37, 37);
      DefaultOption defaultOption0 = new DefaultOption("", ".e(q+", false, "", "9ooc|_H", linkedHashSet0, linkedHashSet0, true, (Argument) null, groupImpl0, 37);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(defaultOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addProperty("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = null;
      try {
        writeableCommandLineImpl0 = new WriteableCommandLineImpl((Option) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
      writeableCommandLineImpl0.setDefaultValues((Option) null, (List) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty("tesW&4:n_]e+", "-D");
      Set set0 = writeableCommandLineImpl0.getProperties((Option) propertyOption0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", (String) null, (-122683469), 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getProperties((Option) groupImpl0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("+", "?v1tu+B54O&", 0, 0, 'w', 'u', dateValidator0, "+", linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', '`', "?v1tu+B54O&", linkedList0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      String string0 = writeableCommandLineImpl0.getProperty((Option) sourceDestArgument0, "--", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.OptionException", "Cannot.burst", 32, (-70));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) groupImpl0);
      writeableCommandLineImpl0.addSwitch(groupImpl0, true);
      Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) groupImpl0, boolean0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, (-3244), (-3244), 'z', 'r', fileValidator0, (String) null, linkedList0, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) sourceDestArgument0, (List) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getOptions();
      List list1 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) list0);
      assertTrue(list0.isEmpty());
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", (String) null, (-122683469), 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) groupImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", (String) null, (-122683469), 1);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      Option option0 = writeableCommandLineImpl0.getOption(" (");
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
      assertEquals("Passes properties and values to the application", propertyOption0.getDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("N.&8]AV2aOM47KG", "", 0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-D<property>=<value>");
      linkedList0.add("\"");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("-D<property>=<value> \"", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Passes properties and values to the application");
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertEquals("\"Passes properties and values to the application\"", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.toString();
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("-D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = writeableCommandLineImpl0.looksLikeOption("Lef[CsyTJ6t_S2SMunx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D<property>=<value> \"", "hjtiQIc,J@L!");
      Set set0 = writeableCommandLineImpl0.getProperties();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "", " (");
      String string0 = writeableCommandLineImpl0.getProperty((Option) propertyOption0, "\"", "org.apache.commons.cli2.commandline.WriteableCommandLineImpl");
      assertEquals("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "-D", "Passes properties and values to the application");
      writeableCommandLineImpl0.addProperty((Option) propertyOption0, "Passes properties and values to the application", "Passes properties and values to the application");
      assertEquals(68, propertyOption0.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, (Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      Boolean boolean0 = new Boolean(" (");
      Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getUndefaultedValues(propertyOption0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getValues((Option) propertyOption0, (List) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, false);
      boolean boolean0 = writeableCommandLineImpl0.hasOption((Option) propertyOption0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "-D", (-1281), (-1281), 'i', 'i', dateValidator0, "Passes properties and values to the application", linkedList0, (-1281));
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      writeableCommandLineImpl0.addSwitch(sourceDestArgument0, false);
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.addSwitch(sourceDestArgument0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Switch already set.
         //
         verifyException("org.apache.commons.cli2.commandline.WriteableCommandLineImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption();
      LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-D", "-D", (-1281), (-1281), 'i', 'i', dateValidator0, "Passes properties and values to the application", linkedList0, (-1281));
      writeableCommandLineImpl0.addValue(argumentImpl0, (Object) null);
      writeableCommandLineImpl0.addValue(argumentImpl0, "--");
      assertEquals("Passes properties and values to the application", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("N.&8]AV2aOM47KG", "", 0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addOption(propertyOption0);
      assertEquals("", propertyOption0.getDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("N.&8]AV2aOM47KG", "", 0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getNormalised();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PropertyOption propertyOption0 = new PropertyOption("N.&8]AV2aOM47KG", "", 0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addProperty("-D", "SourceDest.must.enforce.values");
      // Undeclared exception!
      try { 
        writeableCommandLineImpl0.getProperty((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl(":pO[wVvQhLy_!!k<\"", ":pO[wVvQhLy_!!k<\"", 1357, 1357, 'a', 'a', fileValidator0, ":pO[wVvQhLy_!!k<\"", linkedList0, 1357);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      Set set0 = writeableCommandLineImpl0.getOptionTriggers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      LinkedList<Command> linkedList0 = new LinkedList<Command>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      String string0 = writeableCommandLineImpl0.getProperty("Passes properties and values to the application");
      assertNull(string0);
  }
}
