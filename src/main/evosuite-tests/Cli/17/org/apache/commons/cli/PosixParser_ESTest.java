/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:10:46 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = posixParser0.flatten((Options) null, stringArray0, true);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken("_?pID9k@[EV-SwopsG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("m", "m", true, "m");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m";
      stringArray0[1] = "m";
      stringArray0[2] = "m";
      stringArray0[3] = "m";
      stringArray0[4] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      posixParser0.parse(options1, stringArray0);
      posixParser0.burstToken("9V[+KiZYzm1pUU#Dxw", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-,";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("m", "m", false, "m");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m";
      stringArray0[1] = "m";
      stringArray0[2] = "m";
      stringArray0[3] = "m";
      stringArray0[4] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      posixParser0.parse(options1, stringArray0);
      posixParser0.burstToken("*V[+a&iZYzm1pUU#D2w", true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("l", "l", true, "l");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "l";
      stringArray0[1] = "l";
      stringArray0[2] = "l";
      stringArray0[3] = "l";
      stringArray0[4] = "l";
      stringArray0[5] = "l";
      stringArray0[6] = "l";
      posixParser0.parse(options1, stringArray0);
      posixParser0.burstToken("---Q4O`ql", true);
      posixParser0.burstToken("]UNxgY=m}", true);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[10];
      stringArray0[0] = ",";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption("", "' was specified but an option from this group ", false, "Rv'U[G");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Rv'U[G";
      stringArray0[1] = "--";
      stringArray0[2] = "-' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Rv'U[G";
      stringArray0[1] = "--";
      stringArray0[2] = "-' was specified but an option from this group ";
      stringArray0[3] = "-N";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--=z6Z;9c|}D_2";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
