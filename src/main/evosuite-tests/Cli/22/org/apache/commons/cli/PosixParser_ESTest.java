/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:18:34 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = posixParser0.flatten((Options) null, stringArray0, true);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken("_?pID9k@[EV-SwopsG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      Properties properties0 = new Properties();
      posixParser0.parse(options1, stringArray0, properties0);
      posixParser0.burstToken("---#", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-O";
      Options options1 = options0.addOption("O", true, "-O");
      // Undeclared exception!
      try { 
        posixParser0.flatten(options1, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-O";
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      String[] stringArray1 = posixParser0.flatten(options1, stringArray0, true);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[10];
      stringArray0[1] = "-, ";
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">pl#i:]hA:a#%yP ";
      stringArray0[1] = ">pl#i:]hA:a#%yP ";
      stringArray0[2] = ">pl#i:]hA:a#%yP ";
      stringArray0[3] = ">pl#i:]hA:a#%yP ";
      stringArray0[4] = ">pl#i:]hA:a#%yP ";
      options0.addOption("", ">pl#i:]hA:a#%yP ", false, ">pl#i:]hA:a#%yP ");
      stringArray0[5] = ">pl#i:]hA:a#%yP ";
      stringArray0[6] = ">pl#i:]hA:a#%yP ";
      stringArray0[7] = "--";
      stringArray0[8] = "-#";
      posixParser0.parse(options0, stringArray0);
      posixParser0.burstToken("--", false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--M=^Jo'rr3*$qcG2";
      posixParser0.flatten(options0, stringArray0, true);
      posixParser0.burstToken("--M=^Jo'rr3*$qcG2", true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      Properties properties0 = new Properties();
      posixParser0.parse(options1, stringArray0, properties0);
      posixParser0.burstToken("--", true);
  }
}
