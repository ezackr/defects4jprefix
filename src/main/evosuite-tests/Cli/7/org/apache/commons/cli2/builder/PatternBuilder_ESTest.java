/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 19:42:12 GMT 2023
 */

package org.apache.commons.cli2.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.builder.PatternBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PatternBuilder_ESTest extends PatternBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      // Undeclared exception!
      try { 
        patternBuilder0.withPattern((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.builder.PatternBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultOptionBuilder defaultOptionBuilder0 = new DefaultOptionBuilder();
      ArgumentBuilder argumentBuilder0 = new ArgumentBuilder();
      PatternBuilder patternBuilder0 = new PatternBuilder((GroupBuilder) null, defaultOptionBuilder0, argumentBuilder0);
      // Undeclared exception!
      try { 
        patternBuilder0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.builder.PatternBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Tsz,WMx}CI%oE,}");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("8Nmlf.>\"5Zl");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Ea)^AavF^U}j]OC;");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("R}S{Y&26/x&<_x`R");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("d4e=Gdye_m/T{7!");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Ug=0m-O");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("hMf=l9pA.)p?p+");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("B#H2Cf1%+I/(e");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GroupBuilder groupBuilder0 = new GroupBuilder();
      DefaultOptionBuilder defaultOptionBuilder0 = new DefaultOptionBuilder("?ni(*$?%}ZVh0", "/?k{8$nl+]U", true);
      ArgumentBuilder argumentBuilder0 = new ArgumentBuilder();
      PatternBuilder patternBuilder0 = new PatternBuilder(groupBuilder0, defaultOptionBuilder0, argumentBuilder0);
      patternBuilder0.withPattern("/?k{8$nl+]U");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      // Undeclared exception!
      try { 
        patternBuilder0.withPattern("/'#M`F,I8DsAw:njUj#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use null as a validator.
         //
         verifyException("org.apache.commons.cli2.builder.ArgumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("53r^xfe!*`l@X17Z[.");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("Z\"xiJ&`M[0Y_* ");
      Option option0 = patternBuilder0.create();
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      patternBuilder0.withPattern("J");
      Option option0 = patternBuilder0.create();
      assertEquals("-J", option0.getPreferredName());
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PatternBuilder patternBuilder0 = new PatternBuilder();
      PatternBuilder patternBuilder1 = patternBuilder0.reset();
      assertSame(patternBuilder1, patternBuilder0);
  }
}
