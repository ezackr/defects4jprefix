/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 20:29:41 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.ListIterator;
import java.util.Properties;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Properties properties0 = new Properties();
      basicParser0.processProperties(properties0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sL(]%VH";
      basicParser0.parse(options0, stringArray0, true);
      basicParser0.checkRequiredOptions();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      List list0 = basicParser0.getRequiredOptions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[ option: ";
      Properties properties0 = new Properties();
      basicParser0.parse(options0, stringArray0, properties0);
      List list0 = basicParser0.getRequiredOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Options options0 = gnuParser0.getOptions();
      assertNull(options0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Properties properties0 = new Properties();
      posixParser0.parse(options0, stringArray0, properties0, false);
      Options options1 = posixParser0.getOptions();
      assertSame(options1, options0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      // Undeclared exception!
      try { 
        basicParser0.setOptions((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      properties0.put("@", gnuParser0);
      // Undeclared exception!
      try { 
        gnuParser0.processProperties(properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      properties0.put(optionGroup0, posixParser0);
      // Undeclared exception!
      try { 
        posixParser0.processProperties(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.OptionGroup cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[ option: ";
      stringArray0[1] = "[ option: ";
      basicParser0.parse(options0, stringArray0, false);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      try { 
        basicParser0.processOption("gGP=V4ae/dBVy90?$", listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: gGP=V4ae/dBVy90?$
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      ListIterator<Option> listIterator0 = (ListIterator<Option>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basicParser0.processOption("^oD|XB", listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      Options options1 = options0.addOption("", "", true, "");
      posixParser0.setOptions(options1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn(option0).when(listIterator0).next();
      // Undeclared exception!
      try { 
        posixParser0.processOption("", listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      // Undeclared exception!
      try { 
        posixParser0.processArgs((Option) null, listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yes";
      stringArray0[1] = "d'o{~mjS6QcVuxJzIO";
      stringArray0[2] = "s^/1y.@j7,";
      Properties properties0 = new Properties();
      properties0.put(options0, "yes");
      // Undeclared exception!
      try { 
        gnuParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Options cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0);
      GnuParser gnuParser0 = new GnuParser();
      OptionGroup optionGroup0 = new OptionGroup();
      properties0.put(commandLine0, optionGroup0);
      // Undeclared exception!
      try { 
        gnuParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.CommandLine cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "true";
      stringArray0[1] = "-org.apache.commons.cli.Parser";
      try { 
        basicParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -org.apache.commons.cli.Parser
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.checkRequiredOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      GnuParser gnuParser0 = new GnuParser();
      gnuParser0.parse(options0, stringArray0, false);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn((Object) null).when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      try { 
        gnuParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: 
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      options0.addOption(option0);
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      GnuParser gnuParser0 = new GnuParser();
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("").when(listIterator0).next();
      doReturn((Object) null).when(listIterator0).previous();
      gnuParser0.parse(options0, stringArray0, properties0, true);
      try { 
        gnuParser0.processArgs(option0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: 
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GnuParser gnuParser0 = new GnuParser();
      Integer integer0 = new Integer(1);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn(integer0).when(listIterator0).next();
      // Undeclared exception!
      try { 
        gnuParser0.processArgs((Option) null, listIterator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[ option: ";
      stringArray0[1] = "S";
      stringArray0[2] = "[ option: ";
      stringArray0[3] = "-[ option: ";
      Properties properties0 = new Properties();
      try { 
        basicParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -[ option: 
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      options0.addOption(" ", "[ option: ", true, "gGP=V4ae/dBVy90?$");
      stringArray0[0] = "-[ option: ";
      stringArray0[1] = "[ option: ";
      stringArray0[2] = "[ option: ";
      stringArray0[3] = "[ option: ";
      stringArray0[4] = "-[ option: ";
      PosixParser posixParser0 = new PosixParser();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, (Properties) null, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-[ option: ";
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      String[] stringArray0 = new String[6];
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        gnuParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.GnuParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      posixParser0.parse(options0, stringArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      posixParser0.processOption("", listIterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      posixParser0.parse(options0, stringArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      posixParser0.processOption("", listIterator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Option option0 = new Option("", "gGP=V4ae/dBVy90?$", false, "--");
      option0.setOptionalArg(true);
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      basicParser0.processArgs(option0, listIterator0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      options0.addOption(" ", "[ option: ", true, "gGP=V4ae/dBVy90?$");
      stringArray0[0] = "-[ option: ";
      stringArray0[1] = "-[ option: ";
      try { 
        basicParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option:  
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      options0.addOption(" ", "[ option: ", true, "S");
      stringArray0[0] = "-[ option: ";
      stringArray0[1] = "[ option: ";
      // Undeclared exception!
      try { 
        basicParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "1?5GBrEP`l^7:}lr3?(";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      try { 
        gnuParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: []
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("", object0);
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, (String[]) null, properties0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicParser basicParser0 = new BasicParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.cli.CommandLine";
      stringArray0[1] = "-";
      stringArray0[2] = "r4cb8j*O";
      stringArray0[3] = "1";
      stringArray0[4] = "-";
      stringArray0[5] = "dBS$[o5~6]";
      stringArray0[6] = "k(|?spuz#>o";
      stringArray0[7] = "S)ne)L/";
      stringArray0[8] = "(.vl?P]})Ye)okq3&";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = posixParser0.parse(options0, stringArray0, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      String[] stringArray0 = new String[6];
      GnuParser gnuParser0 = new GnuParser();
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        gnuParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.GnuParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      Option option0 = new Option("", "1?5GBrEP`l^7:}lr3?(");
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        posixParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }
}
