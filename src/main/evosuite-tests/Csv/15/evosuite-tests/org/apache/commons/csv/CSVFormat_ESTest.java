/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 06 03:56:27 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('V');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      cSVFormat1.equals(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Integer integer0 = new Integer(9);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40W+k;$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "40W+k;$";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.print((Object) integer0, (Appendable) printWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('Y');
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker(character0);
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      Character character1 = Character.valueOf('B');
      cSVFormat4.withEscape(character1);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);
      cSVFormat0.withQuote('u');
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.getDelimiter();
      cSVFormat2.isCommentMarkerSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat2.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.MYSQL.print((Appendable) pipedWriter0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      cSVFormat4.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      cSVFormat1.withTrim(false);
      cSVFormat4.withTrailingDelimiter();
      cSVFormat1.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.parse(stringReader0);
      cSVFormat0.RFC4180.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withNullString("0B!dQp3X4B9o&>");
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.TDF.hashCode();
      cSVFormat0.POSTGRESQL_TEXT.withCommentMarker((Character) null);
      cSVFormat4.withDelimiter('F');
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat0.withAutoFlush(true);
      cSVFormat4.withDelimiter('m');
      cSVFormat4.isNullStringSet();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat2.getDelimiter();
      cSVFormat3.isNullStringSet();
      cSVFormat5.getIgnoreHeaderCase();
      MockFile mockFile0 = new MockFile("0B!dQp3X4B9o&>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("0B!dQp3X4B9o&>", objectArray0);
      cSVFormat7.printRecord(printWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class1);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuote(character0);
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.DEFAULT.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('>');
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.format(objectArray0);
      cSVFormat1.withRecordSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Character character0 = new Character('#');
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('H');
      cSVFormat2.MYSQL.withRecordSeparator('A');
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat3.println(charBuffer0);
      cSVFormat2.isCommentMarkerSet();
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape('H');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('H')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char char0 = 'z';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('z');
      cSVFormat1.DEFAULT.withAutoFlush(true);
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('I');
      cSVFormat1.DEFAULT.withEscape(character0);
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\r\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0q15 \"D$q";
      stringArray0[1] = "Qb4@fJ]jUX}3UyPT#S";
      stringArray0[2] = "";
      stringArray0[3] = "}E~rf-VM`u%*No'%K";
      stringArray0[4] = "string";
      stringArray0[5] = "";
      stringArray0[6] = "dHsd";
      stringArray0[7] = ":x";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [0q15 \"D$q, Qb4@fJ]jUX}3UyPT#S, , }E~rf-VM`u%*No'%K, string, , dHsd, :x]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
      cSVFormat1.equals(cSVFormat0);
      CSVFormat.Predefined.values();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
      stringArray0[0] = "org.apache.commons.csv.Token$Type";
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      stringArray0[1] = "";
      stringArray0[2] = "{~3muK6)C";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat3.getAllowMissingColumnNames();
      cSVFormat3.equals(cSVFormat4);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(resultSet0);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      cSVFormat6.withHeaderComments(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('1');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.INFORMIX_UNLOAD.printer();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat5.withHeader(class0);
      cSVFormat2.getHeader();
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('}');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('}')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader(1);
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.TDF.withQuote('e');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.withTrim(true);
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.getRecordSeparator();
      cSVFormat1.withTrim(false);
      cSVFormat0.getTrailingDelimiter();
      cSVFormat0.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getNullString();
      cSVFormat0.withNullString("'a_Id_QlqU?qMg?^#%W");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String string0 = "The header contains a duplicate entry: '";
      cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator("The header contains a duplicate entry: '");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.DEFAULT.withTrim();
      cSVFormat1.getSkipHeaderRecord();
      String string1 = ";P:<ffkD7d";
      try { 
        MockURI.URI("The header contains a duplicate entry: '", "Q0{0EF6E", "$mvZlc/$8m9G\"BSP`_I", ";P:<ffkD7d");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: The header contains a duplicate entry: '://Q0{0EF6E$mvZlc/$8m9G%22BSP%60_I#;P:%3CffkD7d
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Character character0 = Character.valueOf('I');
      cSVFormat1.DEFAULT.withEscape(character0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (')')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("org.apache.commons.csv.CSVPrinter");
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.MYSQL.hashCode();
      cSVFormat0.withEscape('[');
      cSVFormat1.getIgnoreEmptyLines();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      String string0 = "The delimiter cannot be a line break";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("The delimiter cannot be a line break");
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat3.withTrailingDelimiter(true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("The delimiter cannot be a line break", "The delimiter cannot be a line break");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ak{V#e");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      String string0 = "F&X";
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("F&X");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ak{V#e";
      stringArray0[1] = "ak{V#e";
      stringArray0[2] = "ak{V#e";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'ak{V#e' in [ak{V#e, ak{V#e, ak{V#e]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = Character.valueOf('D');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVFormat4.POSTGRESQL_CSV.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.isQuoteCharacterSet();
      cSVFormat0.getTrailingDelimiter();
      cSVFormat2.printer();
      File file0 = MockFile.createTempFile("NON_NUMERIC", "The escape character and the delimiter cannot be the same ('");
      try { 
        MockFile.createTempFile("7dZ=[}&6?W3q}|S`", "NON_NUMERIC", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('K');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('[');
      cSVFormat3.RFC4180.withIgnoreEmptyLines(false);
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat6 = cSVFormat1.withRecordSeparator('[');
      CSVFormat cSVFormat7 = cSVFormat0.withNullString("COMMENT");
      cSVFormat2.hashCode();
      CSVFormat cSVFormat8 = cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat7;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat8;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) cSVFormat8;
      cSVFormat8.POSTGRESQL_CSV.format(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat1.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.MYSQL.withTrim(true);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('+');
      cSVFormat4.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.POSTGRESQL_CSV.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines(false);
      cSVFormat2.MYSQL.withTrailingDelimiter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('N');
      Character character0 = Character.valueOf('N');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('N')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getEscapeCharacter();
      cSVFormat1.withEscape('Q');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("yQs?bUCRKeH;m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.yQs?bUCRKeH;m
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.withTrailingDelimiter();
      String string0 = "xMp:O3zBlK\"0|@";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("xMp:O3zBlK\"0|@", "xMp:O3zBlK\"0|@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xMp:O3zBlK\"0|@
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withQuote('&');
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('e');
      cSVFormat1.POSTGRESQL_TEXT.withQuote('<');
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.RFC4180.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withHeader(class0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat1.TDF.withTrim();
      Object[] objectArray0 = new Object[0];
      cSVFormat3.POSTGRESQL_TEXT.withQuote('7');
      cSVFormat3.withSkipHeaderRecord(true);
      cSVFormat0.POSTGRESQL_CSV.withTrim(true);
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      cSVFormat3.POSTGRESQL_TEXT.withEscape('@');
      cSVFormat1.getIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withSkipHeaderRecord();
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.TDF.print((Appendable) charBuffer0);
      Class<Token.Type> class0 = Token.Type.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) '<';
      objectArray0[6] = (Object) '<';
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = 'G';
      Character character0 = Character.valueOf('G');
      cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(true);
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.TDF.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('$');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.printer();
      cSVFormat1.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile mockFile0 = new MockFile("[5u7'?-.Ckp?^KopS", "\" in ");
      File file0 = MockFile.createTempFile("[5u7'?-.Ckp?^KopS", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) "\" in ";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "[5u7'?-.Ckp?^KopS";
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) "[5u7'?-.Ckp?^KopS";
      cSVFormat3.printRecord(mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = new Character('b');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      CSVFormat cSVFormat3 = CSVFormat.newFormat('_');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withQuoteMode(quoteMode0);
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat3.EXCEL.hashCode();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.POSTGRESQL_CSV.withTrailingDelimiter(false);
      cSVFormat4.getTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat4.withQuote('_');
      cSVFormat6.EXCEL.withQuoteMode(quoteMode0);
      cSVFormat3.getQuoteMode();
      cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000001\tjava.lang.Object@0000000006\torg.apache.commons.csv.CSVFormat@0000000001");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      cSVFormat2.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      Character character0 = null;
      cSVFormat0.POSTGRESQL_TEXT.withQuote((Character) null);
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat1.print(object0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      char char0 = ',';
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = new Character('\\');
      cSVFormat2.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("wR*eX5A[>%C8Kn=k]");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("wR*eX5A[>%C8Kn=k]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // wR*eX5A[>%C8Kn=k]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Q');
      Character character0 = new Character('}');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('}')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      String string0 = "UGzGr]f";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("UGzGr]f");
      char char0 = '6';
      Character character0 = new Character('6');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.MYSQL.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "UGzGr]f";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.withTrim();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('E');
      cSVFormat5.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat1.EXCEL.withNullString("z5kU");
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      cSVFormat3.RFC4180.withTrim();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreSurroundingSpaces();
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      cSVFormat0.EXCEL.withCommentMarker('c');
      Character character0 = Character.valueOf('6');
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withEscape(character0);
      cSVFormat2.POSTGRESQL_CSV.withRecordSeparator("rc\"CY\"1z(");
      Character character1 = new Character('6');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character1);
      cSVFormat0.getNullString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      cSVFormat3.getIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("Unexpected Token type: ");
      cSVFormat3.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('U');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('~');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.EXCEL;
          Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
          CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
          QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
          CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
          CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
          Object[] objectArray0 = new Object[2];
          cSVFormat2.POSTGRESQL_TEXT.withFirstRecordAsHeader();
          objectArray0[0] = (Object) class0;
          objectArray0[1] = (Object) cSVFormat2;
          cSVFormat2.TDF.format(objectArray0);
          CSVFormat cSVFormat4 = cSVFormat3.withQuote((Character) null);
          CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
          PipedReader pipedReader0 = new PipedReader(126);
          cSVFormat5.parse(pipedReader0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withCommentMarker(':');
      cSVFormat3.INFORMIX_UNLOAD.withTrailingDelimiter();
      cSVFormat3.INFORMIX_UNLOAD_CSV.printer();
      CSVFormat cSVFormat4 = cSVFormat0.EXCEL.withTrailingDelimiter(false);
      cSVFormat2.MYSQL.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('!');
      cSVFormat5.MYSQL.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter(':');
      CSVFormat cSVFormat7 = cSVFormat6.MYSQL.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat8 = cSVFormat7.POSTGRESQL_CSV.withQuote('_');
      CSVFormat cSVFormat9 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat9.DEFAULT.withCommentMarker((Character) null);
      cSVFormat2.getQuoteMode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat6.POSTGRESQL_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat6.getNullString();
      cSVFormat8.withCommentMarker('/');
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');
      cSVFormat0.EXCEL.parse(pipedReader0);
      cSVFormat0.getDelimiter();
      cSVFormat0.getHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.MYSQL.withIgnoreSurroundingSpaces(false);
      Character character0 = Character.valueOf('x');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat3.withEscape('h');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces(false);
      Character.isIdeographic(1);
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      cSVFormat4.getCommentMarker();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("^mGotVEt7%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.^mGotVEt7%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      cSVFormat2.getQuoteCharacter();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isCommentMarkerSet();
      Character character0 = new Character('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreEmptyLines(false);
      cSVFormat1.toString();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      char char0 = '`';
      cSVFormat1.RFC4180.withCommentMarker('`');
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      MockFile mockFile0 = new MockFile("sLEP4;*g7VZ+41P/W", "sLEP4;*g7VZ+41P/W");
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.POSTGRESQL_CSV.toString();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 543);
      cSVFormat0.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
      cSVFormat1.TDF.withIgnoreSurroundingSpaces(true);
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        cSVFormat0.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String string0 = "ALL";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL");
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getTrim();
      cSVFormat2.DEFAULT.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ALL";
      stringArray0[1] = "ALL";
      stringArray0[2] = "ALL";
      stringArray0[3] = "ALL";
      stringArray0[4] = "ALL";
      stringArray0[5] = "ALL";
      // Undeclared exception!
      try { 
        cSVFormat3.POSTGRESQL_TEXT.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'ALL' in [ALL, ALL, ALL, ALL, ALL, ALL]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.POSTGRESQL_CSV.withIgnoreSurroundingSpaces();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(resultSet0);
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withTrim(false);
      cSVFormat4.TDF.withRecordSeparator('|');
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat1.DEFAULT.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('%');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('%')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf(')');
      cSVFormat0.POSTGRESQL_TEXT.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(')');
      cSVFormat1.printer();
      cSVFormat1.withRecordSeparator("4^xC6J(");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('#');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_CSV.withDelimiter('S');
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator("(u1");
      cSVFormat7.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat6;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.withNullString("> FNW0uFPtx!%");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String string0 = "INVALID";
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("INVALID");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withQuote('F');
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withCommentMarker('F');
      cSVFormat0.RFC4180.withTrailingDelimiter(false);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withNullString("string");
      cSVFormat5.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat1.getNullString();
      cSVFormat2.toString();
      cSVFormat1.getSkipHeaderRecord();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("ALL_NON_NULL", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.DEFAULT.toString();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.hashCode();
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat0.withCommentMarker('=');
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char char0 = ' ';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      Character character0 = Character.valueOf(' ');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (' ')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.getAutoFlush();
      cSVFormat1.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.DEFAULT.withIgnoreSurroundingSpaces(false);
      cSVFormat3.EXCEL.toString();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withCommentMarker('I');
      cSVFormat5.POSTGRESQL_CSV.withIgnoreEmptyLines(false);
      cSVFormat0.TDF.printer();
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat6.withAllowMissingColumnNames();
      cSVFormat6.toString();
      cSVFormat7.MYSQL.withQuote('P');
      cSVFormat7.getHeaderComments();
      cSVFormat7.withTrim(true);
      CSVFormat cSVFormat8 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat8.TDF.toString();
      CSVFormat cSVFormat9 = cSVFormat6.withTrailingDelimiter(false);
      cSVFormat7.isQuoteCharacterSet();
      cSVFormat9.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('Y');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "?+b";
      stringArray0[2] = "OIc]`e1\"(:}#d";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "NullString=<";
      stringArray0[1] = "9RS_}tEFwx^4&V";
      stringArray0[2] = "";
      stringArray0[3] = "MySQL";
      stringArray0[4] = "WLP|HBl4dE1C";
      stringArray0[5] = "w$>G*(";
      stringArray0[6] = "\u2029";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.withHeaderComments(stringArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf(',');
      cSVFormat0.INFORMIX_UNLOAD.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withIgnoreSurroundingSpaces(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat3.getTrim();
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAllowMissingColumnNames();
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.withSkipHeaderRecord();
      Double double0 = new Double(484.9103);
      cSVFormat0.equals(double0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.equals(cSVFormat3);
      cSVFormat1.hashCode();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat$Predefined");
      MockFile.createTempFile("org.apache.commons.csv.CSVFormat$Predefined", "org.apache.commons.csv.CSVFormat$Predefined", (File) mockFile0);
      // Undeclared exception!
      try { 
        Charset.forName("org.apache.commons.csv.CSVFormat$Predefined");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.csv.CSVFormat$Predefined
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Character character0 = new Character(':');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_TEXT.withEscape(character0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<";
      stringArray0[1] = "";
      cSVFormat4.DEFAULT.withHeader(stringArray0);
      cSVFormat4.INFORMIX_UNLOAD.withCommentMarker(':');
      CSVFormat cSVFormat5 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord();
      CSVFormat.newFormat(':');
      CSVFormat.newFormat(':');
      cSVFormat3.POSTGRESQL_TEXT.hashCode();
      cSVFormat3.POSTGRESQL_TEXT.withCommentMarker(character0);
      CSVFormat cSVFormat7 = cSVFormat3.withNullString("");
      cSVFormat7.isQuoteCharacterSet();
      cSVFormat7.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat2.withCommentMarker(':');
      CSVFormat cSVFormat9 = cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat0.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat9.withTrailingDelimiter(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat6;
      cSVFormat8.format(objectArray0);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat9.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat2.withIgnoreHeaderCase();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.getDelimiter();
      cSVFormat2.isCommentMarkerSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.hashCode();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat2.parse(pipedReader0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(false);
      cSVFormat1.withTrim(false);
      cSVFormat4.withTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.RFC4180.withAutoFlush(false);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('I');
      cSVFormat0.DEFAULT.withTrailingDelimiter();
      cSVFormat4.equals(cSVFormat0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('K');
      Character character0 = Character.valueOf('K');
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('\"');
      cSVFormat4.getCommentMarker();
      cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('\"');
      CSVFormat cSVFormat5 = cSVFormat2.withQuote(character0);
      cSVFormat5.MYSQL.withIgnoreEmptyLines();
      cSVFormat0.DEFAULT.toString();
      cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat4.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.POSTGRESQL_TEXT.printer();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat7.RFC4180.hashCode();
      cSVFormat6.getAutoFlush();
      cSVFormat7.withEscape('3');
      cSVFormat1.withAllowMissingColumnNames();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat4.print((Object) "", (Appendable) charArrayWriter0, true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat8 = cSVFormat0.withHeader(class0);
      cSVFormat8.EXCEL.withIgnoreEmptyLines();
      cSVFormat6.getSkipHeaderRecord();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat3.withAutoFlush(false);
      cSVFormat4.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('V');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      cSVFormat1.equals(cSVFormat2);
      cSVFormat1.getCommentMarker();
      cSVFormat0.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat3.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getEscapeCharacter();
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = ']';
      charArray0[2] = 'W';
      charArray0[3] = '\'';
      charArray0[4] = 't';
      charArray0[5] = ' ';
      charArray0[6] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.equals(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      PipedReader pipedReader0 = new PipedReader(8);
      cSVFormat0.POSTGRESQL_TEXT.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter(false);
      cSVFormat3.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('I');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat2.withFirstRecordAsHeader();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('}');
      cSVFormat3.getAutoFlush();
      cSVFormat4.getHeader();
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.getCommentMarker();
      Character character0 = Character.valueOf(')');
      cSVFormat5.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat3.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('f');
      cSVFormat0.EXCEL.withEscape('f');
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withTrailingDelimiter(true);
      StringReader stringReader0 = new StringReader("SR:o)9wi!*mYxv");
      cSVFormat0.INFORMIX_UNLOAD.parse(stringReader0);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      cSVFormat3.DEFAULT.withQuote(character0);
      Character character1 = new Character('x');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character1);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat5.withNullString("VV0P[AFUSpAi`");
      cSVFormat6.getIgnoreEmptyLines();
      cSVFormat5.getEscapeCharacter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TOKEN";
      stringArray0[1] = "VV0P[AFUSpAi`";
      stringArray0[2] = "SR:o)9wi!*mYxv";
      cSVFormat7.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.RFC4180.toString();
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
      cSVFormat2.DEFAULT.withCommentMarker('^');
      cSVFormat2.withTrailingDelimiter();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('f');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\" in ";
      stringArray0[1] = "inputStream";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.POSTGRESQL_TEXT.withEscape(character0);
      cSVFormat5.withAllowMissingColumnNames(true);
      Short short0 = new Short((short)0);
      File file0 = MockFile.createTempFile("inputStream", "inputStream");
      try { 
        MockFile.createTempFile("\" in ", (String) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('K');
      Character.valueOf('K');
      cSVFormat3.withIgnoreHeaderCase();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The comment start and the escape character cannot be the same ('";
      stringArray0[1] = "ECP`FJm5-&";
      stringArray0[2] = "K\"j;NE>yq+-ntB=\"wF?";
      stringArray0[3] = "TOKEN";
      stringArray0[4] = "";
      stringArray0[5] = "jSdpX=b";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [The comment start and the escape character cannot be the same (', ECP`FJm5-&, K\"j;NE>yq+-ntB=\"wF?, TOKEN, , jSdpX=b, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('E');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.withEscape('');
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, 34, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.format(objectArray0);
      Character character0 = Character.valueOf('/');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat1.withIgnoreHeaderCase(true);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("MAx;9kK5=$j:6P1A[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // MAx;9kK5=$j:6P1A[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('.');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      String string0 = "InformixUnload";
      String string1 = "";
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat3.POSTGRESQL_CSV.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('-');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker('-');
      Object[] objectArray0 = new Object[0];
      cSVFormat2.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat3.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat4.withQuoteMode(quoteMode0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.CSVFormat$Predefined", false);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "The comment start character and the quoteChar cannot be the same ('");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // The comment start character and the quoteChar cannot be the same ('
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withRecordSeparator('t');
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat3.getTrim();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('*');
      cSVFormat0.RFC4180.withIgnoreHeaderCase(false);
      cSVFormat3.println((Appendable) null);
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('4');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withHeader(class0);
      cSVFormat0.withTrailingDelimiter();
      cSVFormat2.getNullString();
      cSVFormat6.printer();
      cSVFormat4.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat1.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("&TeCQk.");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('c');
      cSVFormat5.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('~');
      Character character0 = new Character('~');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withIgnoreEmptyLines();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat3.INFORMIX_UNLOAD.printRecord(charArrayWriter0, objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat5.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Q');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode0);
      StringWriter stringWriter0 = new StringWriter(92);
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 33, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      cSVFormat1.withDelimiter('r');
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      cSVFormat2.INFORMIX_UNLOAD.withRecordSeparator("");
      MockFile mockFile0 = new MockFile((File) null, "+b^jb2^~g<$<4");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "LmcA/..7s@*Hi|@Y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // LmcA/..7s@*Hi|@Y
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      cSVFormat0.withNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("A7.5#l}pT@=^i#iE7");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      try { 
        cSVFormat5.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s<ZP_5.`A1t";
      cSVFormat0.TDF.withHeader(stringArray0);
      cSVFormat0.POSTGRESQL_TEXT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('+');
      cSVFormat1.isEscapeCharacterSet();
      cSVFormat1.getHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat2.withDelimiter('F');
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.withAllowMissingColumnNames();
      String string0 = "$VALUES";
      MockFile mockFile0 = new MockFile("$VALUES");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "$VALUES");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $VALUES
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("8B*TG]t!VT");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat4.POSTGRESQL_CSV.withRecordSeparator('P');
      cSVFormat4.withDelimiter('{');
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat3.withTrailingDelimiter();
      cSVFormat2.getIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('q');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat2.DEFAULT.withSkipHeaderRecord();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withDelimiter('i');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat2.EXCEL.withHeader(class0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat4.POSTGRESQL_CSV.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat5 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat5.TDF.withSkipHeaderRecord();
      cSVFormat5.getHeaderComments();
      cSVFormat3.isCommentMarkerSet();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      cSVFormat5.EXCEL.withCommentMarker((Character) null);
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'q';
      charArray0[4] = 'i';
      charArray0[5] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat1.DEFAULT.printRecord(charArrayWriter1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('W');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withEscape('r');
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat6.isCommentMarkerSet();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat4.withIgnoreHeaderCase(true);
      objectArray0[2] = (Object) cSVFormat6;
      cSVFormat3.EXCEL.withHeaderComments(objectArray0);
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat6.POSTGRESQL_TEXT.toString();
      cSVFormat5.EXCEL.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('r')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.getCommentMarker();
      String string0 = "$VALUES";
      MockFile mockFile0 = new MockFile("$VALUES", "Escape=<");
      Charset charset0 = Charset.defaultCharset();
      CSVPrinter cSVPrinter0 = cSVFormat1.print((File) mockFile0, charset0);
      cSVFormat1.getAutoFlush();
      cSVFormat1.getEscapeCharacter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVPrinter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVFormat0.withHeaderComments(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "Escape=<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Escape=<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char char0 = 'o';
      String string0 = "The header contains a duplicate name: \"";
      cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator("The header contains a duplicate name: \"");
      Character character0 = Character.valueOf('o');
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.MYSQL.withIgnoreEmptyLines();
      cSVFormat1.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('o');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('o')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.DEFAULT.withCommentMarker('\'');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('o');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("LmE>!d8\"");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.POSTGRESQL_TEXT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat0.DEFAULT.withHeader(class1);
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.isNullStringSet();
      Character character0 = new Character('a');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat5.TDF.withEscape(character0);
      cSVFormat6.INFORMIX_UNLOAD_CSV.withCommentMarker('a');
      // Undeclared exception!
      try { 
        cSVFormat5.TDF.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char char0 = 'v';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('v');
      cSVFormat0.RFC4180.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('m');
      cSVFormat0.POSTGRESQL_TEXT.hashCode();
      String[] stringArray0 = new String[0];
      cSVFormat1.POSTGRESQL_TEXT.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('v')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Integer integer0 = new Integer(9);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40W+k;$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "40W+k;$";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.print((Object) integer0, (Appendable) printWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      Character character0 = Character.valueOf('B');
      cSVFormat4.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.POSTGRESQL_CSV.withQuoteMode(quoteMode0);
      cSVFormat1.RFC4180.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.MYSQL.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oHk";
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat2.POSTGRESQL_CSV.withQuoteMode(quoteMode1);
      cSVFormat2.EXCEL.withHeader(stringArray0);
      MockFile mockFile0 = new MockFile("oHk", "oHk");
      cSVFormat2.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          cSVFormat0.withAllowMissingColumnNames(false);
          Character character0 = new Character('n');
          CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuote(character0);
          CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withFirstRecordAsHeader();
          StringWriter stringWriter0 = new StringWriter(34);
          MockFile mockFile0 = new MockFile("+KbXi");
          MockFile mockFile1 = new MockFile(mockFile0, "NullString=<");
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.MYSQL.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/elliottzackrone/IdeaProjects/defects4jprefix/+KbXi/NullString=<\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = new Character('%');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "_0}DIdIc>R");
      Path path0 = mockFile1.toPath();
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.MYSQL.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      cSVFormat0.POSTGRESQL_TEXT.hashCode();
      cSVFormat2.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("8%_F&&?:?[Cv).[{ZNK");
      cSVFormat4.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
      cSVFormat4.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('@');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      stringArray0[0] = "org.apache.commons.csv.Token$Type";
      cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      stringArray0[1] = "";
      stringArray0[2] = "{~3muK6)C";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = cSVFormat5.RFC4180.withIgnoreHeaderCase();
      cSVFormat6.getQuoteMode();
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat5.getAllowMissingColumnNames();
      cSVFormat5.equals(cSVFormat7);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat8.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.MYSQL.withHeader(resultSet0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat3.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('v');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat6.POSTGRESQL_CSV.withQuoteMode(quoteMode0);
      cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat1.withCommentMarker('E');
      cSVFormat7.TDF.withIgnoreSurroundingSpaces();
      cSVFormat7.TDF.withSkipHeaderRecord(true);
      cSVFormat4.withQuote('E');
      cSVFormat3.getCommentMarker();
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.toPath();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        cSVFormat7.EXCEL.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, null, , null, null, , null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withNullString("0B!dQp3X4B9o&>");
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.TDF.hashCode();
      cSVFormat0.POSTGRESQL_TEXT.withCommentMarker((Character) null);
      cSVFormat4.withDelimiter('F');
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat0.withAutoFlush(true);
      cSVFormat4.withDelimiter('m');
      cSVFormat4.isNullStringSet();
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat2.getDelimiter();
      cSVFormat3.isNullStringSet();
      cSVFormat5.getIgnoreHeaderCase();
      cSVFormat5.printer();
      cSVFormat6.withCommentMarker('|');
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      char char0 = 'r';
      Character character0 = Character.valueOf('r');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.withDelimiter('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('r')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      boolean boolean0 = false;
      cSVFormat1.MYSQL.withTrim(false);
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat5.INFORMIX_UNLOAD_CSV.withDelimiter('@');
      cSVFormat5.withTrim(false);
      cSVFormat2.getTrim();
      cSVFormat4.getQuoteMode();
      cSVFormat0.withEscape('+');
      Short short0 = new Short((short)3);
      MockFile mockFile0 = new MockFile("XVq");
      MockFile mockFile1 = new MockFile(mockFile0, "XVq");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1";
      stringArray0[1] = "' in ";
      stringArray0[2] = "org.apache.commons.csv.CSVPrinter";
      stringArray0[3] = "string";
      stringArray0[4] = "";
      stringArray0[5] = "\u2029";
      stringArray0[6] = "Qad|CpVro7(+/%G<ei";
      stringArray0[7] = "W~(s)cB1e7.D:O(hf+";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      CSVFormat.newFormat('t');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.INFORMIX_UNLOAD_CSV.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('^');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.getSkipHeaderRecord();
      Character character0 = new Character('^');
      cSVFormat2.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('@');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);
      stringArray0[0] = "org.apache.commons.csv.Token$Type";
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      stringArray0[1] = "";
      stringArray0[2] = "{~3muK6)C";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat4.RFC4180.withIgnoreHeaderCase();
      cSVFormat5.getQuoteMode();
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat4.getAllowMissingColumnNames();
      cSVFormat4.equals(cSVFormat6);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat8 = cSVFormat7.withHeader(resultSet0);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      cSVFormat8.withHeaderComments(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat2.POSTGRESQL_TEXT.printer();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      cSVFormat6.getIgnoreHeaderCase();
      cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat7.RFC4180.hashCode();
      cSVFormat6.getAutoFlush();
      cSVFormat7.withEscape('3');
      cSVFormat1.withAllowMissingColumnNames();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat2.EXCEL.withIgnoreEmptyLines();
      cSVFormat6.getSkipHeaderRecord();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat3.withAutoFlush(false);
      cSVFormat4.withHeader(class0);
      cSVFormat6.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      Character character0 = new Character('=');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      boolean boolean0 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(23);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) charBuffer1, 23, (-909));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat3 = cSVFormat1.DEFAULT.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withFirstRecordAsHeader();
      cSVFormat4.INFORMIX_UNLOAD.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSet) null);
      CSVFormat cSVFormat6 = cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator("G.K");
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat7 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat7.RFC4180.withAutoFlush(true);
      cSVFormat2.isCommentMarkerSet();
      cSVFormat8.TDF.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat9 = cSVFormat8.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat6;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat7;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat8;
      objectArray0[7] = (Object) cSVFormat4;
      cSVFormat5.format(objectArray0);
      cSVFormat9.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("$\"EuAz");
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_TEXT.withNullString("$\"EuAz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l");
      cSVFormat4.EXCEL.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withAllowMissingColumnNames(true);
      cSVFormat1.getNullString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat6 = cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat6.INFORMIX_UNLOAD.printer();
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('');
      cSVFormat7.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile(" EmptyLines:ignored", "l");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.print((File) mockFile0, charset0);
      cSVFormat3.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      cSVFormat0.getDelimiter();
      cSVFormat0.withIgnoreSurroundingSpaces();
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('T')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.isCommentMarkerSet();
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter(false);
      MockFile mockFile0 = new MockFile(".nIU,EJcoi<Vx}", ".nIU,EJcoi<Vx}");
      mockFile0.toPath();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      cSVFormat1.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withRecordSeparator('>');
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withNullString("");
      CSVFormat.Predefined.values();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf('>');
      CSVFormat cSVFormat5 = cSVFormat0.RFC4180.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat7 = cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat8 = cSVFormat7.TDF.withTrim();
      cSVFormat8.EXCEL.withQuote(character0);
      cSVFormat7.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      cSVFormat1.print((Object) null, (Appendable) mockFileWriter0, true);
      cSVFormat6.getIgnoreSurroundingSpaces();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
      cSVFormat5.isCommentMarkerSet();
      cSVFormat4.getQuoteMode();
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat1.EXCEL.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat0.POSTGRESQL_TEXT.toString();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withDelimiter('m');
      Character character0 = new Character('(');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator("&.kE}0EG");
      cSVFormat2.getHeader();
      cSVFormat1.getQuoteMode();
      cSVFormat3.withAutoFlush(true);
      cSVFormat1.withNullString("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('k');
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat0.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(389);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) charBuffer0;
      objectArray0[4] = (Object) cSVFormat5;
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 389
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.RFC4180.withAllowMissingColumnNames(false);
      cSVFormat2.withRecordSeparator('+');
      String string0 = "";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character.valueOf('C');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String[] stringArray0 = new String[0];
      cSVFormat0.MYSQL.withHeader(stringArray0);
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      char char0 = 'd';
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('d');
      cSVFormat2.MYSQL.withRecordSeparator('A');
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat3.println(charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) charBuffer0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}z/p#S^>.VZ";
      cSVFormat1.POSTGRESQL_CSV.withHeader(stringArray0);
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat1.INFORMIX_UNLOAD_CSV.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\u0085";
      stringArray0[1] = "org.apache.commons.csv.CSVFormat$1";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat.Predefined.values();
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      boolean boolean1 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      cSVFormat3.withRecordSeparator('q');
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.parse(stringReader0);
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 's';
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('s');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.withDelimiter('s');
      MockFile mockFile0 = new MockFile(",J^},V^6EmI&EW@");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "ZA:/<9n>N'=L&E!o");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ZA:/<9n>N'=L&E!o
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2058);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('k');
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreHeaderCase(false);
      cSVFormat3.print((Appendable) printStream0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("zQPx-#,='oXg");
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.MYSQL.withTrim(true);
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat7.INFORMIX_UNLOAD.println(printStream0);
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat2.getRecordSeparator();
      cSVFormat2.withTrim(true);
      cSVFormat6.print((Appendable) printStream0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\n";
      stringArray0[1] = "zQPx-#,='oXg";
      stringArray0[2] = "\n";
      stringArray0[3] = "zQPx-#,='oXg";
      stringArray0[4] = "\n";
      stringArray0[5] = "zQPx-#,='oXg";
      stringArray0[6] = "zQPx-#,='oXg";
      stringArray0[7] = "\n";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '
         // ' in [
         // , zQPx-#,='oXg, 
         // , zQPx-#,='oXg, 
         // , zQPx-#,='oXg, zQPx-#,='oXg, 
         // ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('u');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('o');
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("");
      Character character0 = new Character('x');
      cSVFormat5.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat.valueOf("Excel");
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.withRecordSeparator('&');
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('_');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('c');
      cSVFormat5.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVParser0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("4xTC[I-?");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('P');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');
      Character character0 = new Character('P');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat4.print((Appendable) mockPrintStream0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat(';');
      cSVFormat5.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          CSVFormat cSVFormat1 = cSVFormat0.withTrim();
          CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
          QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
          CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
          cSVFormat3.withIgnoreEmptyLines();
          char char0 = 'X';
          MockFile mockFile0 = new MockFile("");
          MockFile mockFile1 = new MockFile(mockFile0, "BkC :Zv.`J%x'$V$M}\"");
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat0.EXCEL.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/elliottzackrone/IdeaProjects/defects4jprefix/BkC :Zv.`J%x'$V$M}\"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor128.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "inputStream");
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('2');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.DEFAULT.hashCode();
      cSVFormat2.getTrailingDelimiter();
      cSVFormat3.getNullString();
      cSVFormat3.withTrailingDelimiter();
      cSVFormat0.getRecordSeparator();
      cSVFormat4.getHeaderComments();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat4.RFC4180.withHeader(class0);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("org.apache.commons.csv.CSVParser");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVParser
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat0.withTrim();
      cSVFormat2.isQuoteCharacterSet();
      cSVFormat1.getEscapeCharacter();
      cSVFormat0.withRecordSeparator("w&AbKjY#`");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      cSVFormat0.parse(stringReader0);
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      cSVFormat1.withTrailingDelimiter(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0q15 \"D$q";
      stringArray0[1] = "Qb4@fJ]jUX}3UyPT#S";
      stringArray0[2] = "";
      stringArray0[3] = "}E~rf-VM`u%*No'%K";
      stringArray0[4] = "string";
      cSVFormat1.INFORMIX_UNLOAD.format(stringArray0);
      stringArray0[5] = "";
      stringArray0[6] = "dHsd";
      stringArray0[7] = ":x";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [0q15 \"D$q, Qb4@fJ]jUX}3UyPT#S, , }E~rf-VM`u%*No'%K, string, , dHsd, :x]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Integer integer0 = new Integer(9);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40W+k;$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "40W+k;$";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.print((Object) integer0, (Appendable) printWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('Y');
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      cSVFormat4.DEFAULT.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat3.withAutoFlush(false);
      Character character1 = Character.valueOf('B');
      cSVFormat5.withEscape(character1);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withNullString("0B!dQp3X4B9o&>");
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.TDF.hashCode();
      cSVFormat0.POSTGRESQL_TEXT.withCommentMarker((Character) null);
      cSVFormat4.withDelimiter('F');
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withTrim(true);
      CSVFormat cSVFormat6 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('m');
      cSVFormat4.isNullStringSet();
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat2.getDelimiter();
      cSVFormat3.isNullStringSet();
      cSVFormat5.getIgnoreHeaderCase();
      String[] stringArray0 = new String[0];
      cSVFormat7.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Integer integer0 = new Integer(9);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40W+k;$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "40W+k;$";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.print((Object) integer0, (Appendable) printWriter0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/elliottzackrone/IdeaProjects/defects4jprefix");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('Y');
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker(character0);
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      Character character1 = Character.valueOf('B');
      cSVFormat4.withEscape(character1);
      cSVFormat2.format(objectArray0);
      cSVFormat1.getNullString();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      cSVFormat0.EXCEL.withIgnoreHeaderCase();
      Character character0 = new Character('g');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.withRecordSeparator('g');
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class1);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuote(character0);
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.DEFAULT.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withCommentMarker('Q');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.newFormat('>');
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat4.withAutoFlush(false);
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('I');
      Character character0 = Character.valueOf('I');
      cSVFormat0.DEFAULT.withEscape(character0);
      cSVFormat0.toString();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('e');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('>');
      cSVFormat4.RFC4180.withAllowMissingColumnNames();
      cSVFormat4.getRecordSeparator();
      String[] stringArray0 = new String[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".p8pJ;,");
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      char char0 = 'm';
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('m');
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat4.POSTGRESQL_TEXT.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('m');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('m')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('a');
      MockFile mockFile0 = new MockFile("", "");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_TEXT.format(objectArray0);
      try { 
        cSVFormat1.POSTGRESQL_CSV.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('T');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('#');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character1 = new Character('C');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character1);
      CSVFormat cSVFormat8 = cSVFormat7.withNullString("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('C');
      cSVFormat8.print((Appendable) charArrayWriter1);
      CSVFormat cSVFormat9 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat9.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Header:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Header:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat3;
      Object object1 = new Object();
      objectArray0[6] = object1;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat1.withTrim(true);
      // Undeclared exception!
      try { 
        cSVFormat1.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      char char0 = '\\';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\\');
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat1.withDelimiter('\\');
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(false);
      Character character0 = new Character('w');
      cSVFormat6.withQuote(character0);
      cSVFormat6.withIgnoreEmptyLines();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
      cSVFormat5.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat0.DEFAULT.withFirstRecordAsHeader();
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
      cSVFormat0.equals(cSVFormat0);
      CSVFormat.Predefined.values();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat2.withAutoFlush(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat7 = cSVFormat4.withSkipHeaderRecord();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat6.print((Object) null, (Appendable) stringWriter0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat6;
      objectArray0[3] = (Object) cSVFormat7;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVFormat5.withHeaderComments(objectArray0);
      QuoteMode quoteMode1 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');
      cSVFormat1.equals(cSVFormat0);
      CSVFormat.Predefined.values();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      char char0 = 'X';
      cSVFormat1.POSTGRESQL_CSV.withEscape('X');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      char char1 = '\"';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('\"');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      String[] stringArray0 = new String[0];
      cSVFormat4.withHeader(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat1.getHeaderComments();
      CSVFormat cSVFormat5 = cSVFormat1.withNullString("AC");
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      cSVFormat5.withTrim(true);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Character.valueOf('I');
      CSVFormat cSVFormat0 = CSVFormat.valueOf("PostgreSQLText");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.printer();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      cSVFormat5.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(688);
      cSVFormat0.parse(stringReader0);
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.getRecordSeparator();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('w');
      Long long0 = new Long((-1L));
      cSVFormat1.equals(long0);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Integer integer0 = new Integer(9);
      MockPrintStream mockPrintStream0 = new MockPrintStream("40W+k;$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.print((Object) integer0, (Appendable) printWriter0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.println(mockPrintWriter0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      Character character0 = Character.valueOf('Y');
      cSVFormat2.INFORMIX_UNLOAD.withCommentMarker(character0);
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      cSVFormat3.withEscape(character0);
      Character character1 = new Character('Y');
      cSVFormat2.withNullString("");
      cSVFormat2.format(objectArray0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      Character character0 = new Character('5');
      cSVFormat3.POSTGRESQL_CSV.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      cSVFormat4.MYSQL.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.withTrim(true);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class1);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      Character character0 = Character.valueOf('Q');
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuote(character0);
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat2.DEFAULT.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withTrim();
      CSVFormat.newFormat('Q');
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat.newFormat('>');
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.getDelimiter();
      cSVFormat4.withNullString("java.lang.Object@0000000005,java.lang.Class@0000000006,java.lang.Class@0000000006,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000007,org.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat4.printer();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('V');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\" in ";
      stringArray0[2] = "";
      stringArray0[3] = "If<\"f}";
      stringArray0[4] = "";
      String string0 = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "H!du=P8qz\"xWUaWd";
      stringArray0[8] = "/%NAPPs'znEz";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, \" in , , If<\"f}, , , , H!du=P8qz\"xWUaWd, /%NAPPs'znEz]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withHeader((ResultSetMetaData) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('z');
      cSVFormat2.INFORMIX_UNLOAD_CSV.toString();
      Character character0 = new Character('z');
      cSVFormat2.POSTGRESQL_TEXT.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("]`H!");
      cSVFormat3.DEFAULT.withAutoFlush(true);
      CSVFormat.newFormat('Q');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('-');
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat0.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.POSTGRESQL_CSV.withDelimiter('T');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
      boolean boolean0 = true;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat2.DEFAULT.withNullString("org.apache.commons.csv.Assertions");
      PipedReader pipedReader0 = new PipedReader(62);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 48);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      Character character0 = new Character('%');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat5.getTrim();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withAutoFlush(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withHeader(class0);
  }
}
