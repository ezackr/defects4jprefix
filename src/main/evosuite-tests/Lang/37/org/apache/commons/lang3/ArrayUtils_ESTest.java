/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:08:36 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.indexOf(floatArray0, (-1539.0F), 1352);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1985, 0.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 3751, (-1.0));
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-100), 2022);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'u';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 4586);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', 'u', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(charArray0, '+', 551);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)3693;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)48);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)3693, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 3847);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = new Short[5];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)1588);
      assertNotNull(short0);
      assertEquals((short)1588, (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short)2;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, object0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-159));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
      assertEquals(6, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1019;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1019);
      assertEquals(3, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)1019, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (-2312L);
      objectArray0[2] = (Object) (-2312L);
      objectArray0[3] = (Object) (-780L);
      objectArray0[4] = objectArray0[2];
      objectArray0[5] = (Object) (-2312L);
      objectArray0[6] = (Object) (-2312L);
      objectArray0[7] = (Object) (-780L);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
      assertEquals(8, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(6, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2319L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2319L));
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-2319L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(4, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[7] = (-2032);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2032), 792);
      assertEquals(9, intArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-2032), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 96);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[1];
      floatArray0[3] = floatArray0[2];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(3, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3165.946;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3165.946, 2169, 1241.77977461);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {3165.946, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (double) (short)9;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 1452);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 9.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3313;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {3313.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2149.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'L';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', 808);
      assertEquals(2, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', 'L'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
      assertEquals(4, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)70;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)70, (int) (byte)42);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)70, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-66));
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(8, byteArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameType("MZ&P", "MZ&P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(57);
      assertNotNull(integer0);
      assertEquals(57, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(9, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-24);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (-471));
      assertEquals(7, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-24), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3295;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)3295);
      assertEquals(6, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)0, (short)3295, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
      assertEquals(5, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "");
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = (long) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
      assertEquals(6, longArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2147483647L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 5314L;
      int int0 = ArrayUtils.indexOf(longArray0, 5314L);
      assertEquals(5, longArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 5314L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-819);
      int int0 = ArrayUtils.indexOf(intArray0, (-819), 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-819), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[3] = (-839);
      int int0 = ArrayUtils.indexOf(intArray0, (-839));
      assertEquals(9, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-839), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 233;
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {3, 233}, intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2883.183F;
      int int0 = ArrayUtils.indexOf(floatArray0, 2883.183F, 0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {2883.183F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = (-345.353F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-345.353F));
      assertEquals(5, floatArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-345.353F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-92);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-92.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-518), (double) Integer.MAX_VALUE);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-860.273F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 0L);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-860.2730102539062), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)57;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {57.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = 'C';
      int int0 = ArrayUtils.indexOf(charArray0, 'C', 0);
      assertEquals(9, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'C', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      int int0 = ArrayUtils.indexOf(charArray0, '.');
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[7] = 'h';
      int int0 = ArrayUtils.indexOf(charArray0, 'h');
      assertEquals(9, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'h', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)120;
      ArrayUtils.reverse(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)120, 0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)49);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-56);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56));
      assertEquals(6, byteArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-56), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[7];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1617L), 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1088.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'g', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)3, (byte)18);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)18, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-2145610062));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145610062, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 707);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 707, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-3481), (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3481, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), 84.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-66));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte)1);
      assertEquals(6, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.18), 556);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 2046.087994;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2878.4661, (-979), 963.0356);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 2046.087994, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, 343.0, 0, (double) 0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, (-1084.18), 0, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'w';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)0, (int) (short) (-1289));
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {119.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-125), 474);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 630.736923883764, (-453));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)70, (int) (byte)42);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)127, (-1286));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)120;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)120, 0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)120}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) (byte) (-24));
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((char[]) null, 'p', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[8] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4, 2281);
      assertEquals(9, shortArray0.length);
      assertEquals(8, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)4}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4, 2281);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-24);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (-458));
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-24)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2944, 64);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 258, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 556;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {556L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short)527);
      assertEquals(5, longArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 439L;
      int int0 = ArrayUtils.indexOf(longArray0, 439L, 0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {439L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.indexOf(longArray0, (-3266L), 100);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[5] = (Object) (-2312L);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], 3937);
      assertEquals(8, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) "", 31);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array", 64);
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) (byte)70);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 1406);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "java.lang.Integer", (int) (short) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(booleanArray1, objectArray0);
      assertNotNull(objectArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "sj[7zW`^LaSlQ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.indexOf(charArray0, '.');
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[3] = (short) (-468);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-468), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2646.16F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'j', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "user.name";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "user.name");
      assertEquals(5, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, 64, (Object) null);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = ArrayUtils.add(stringArray0, 0, "");
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-1963), object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1963, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) booleanArray1, object0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[11];
      booleanArray0[0] = (Boolean) false;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(11, booleanArray0.length);
      assertEquals(11, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("', is neither of type Map.Entry nor an Array");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      booleanArray0[2] = booleanArray0[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (-1L));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {773.19F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 773.19F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotSame(doubleArray1, objectArray0);
      assertNotNull(objectArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-2688));
      assertNotNull(double0);
      assertEquals((-2688.0), (double)double0, 0.01);
      
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2688.0), (-2688.0), (-2688.0), (-2688.0), (-2688.0), (-2688.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-170.08209677487));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(432.3);
      assertNotNull(double0);
      assertEquals(432.3, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {432.3, 432.3, 432.3, 432.3, 432.3, 432.3}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-16));
      assertNotNull(byte0);
      assertEquals((byte) (-16), (byte)byte0);
      
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[0];
      byteArray0[3] = byteArray0[1];
      byteArray0[4] = byteArray0[1];
      byteArray0[5] = byteArray0[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Byte[] byteArray0 = new Byte[18];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) shortArray0[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1137);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = (Short) (short)524;
      shortArray0[1] = (Short) (short)2;
      shortArray0[2] = (Short) (short)524;
      shortArray0[3] = (Short) (short)524;
      shortArray0[4] = (Short) (short)2;
      shortArray0[5] = (Short) (short)4027;
      shortArray0[6] = (Short) (short)2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)524, (short)2, (short)524, (short)524, (short)2, (short)4027, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3575));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-3575), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-3575), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      longArray0[0] = (Long) 0L;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 411L, 411L, 411L, 411L, 411L, 411L, 411L, 411L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3214L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '(');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+', '+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1976));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-921));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-2418.9207F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2418.9207F), 1431655765);
      assertEquals(9, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-2418.9207F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2016.2957F, 0);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3137.0F, (-3040));
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-860.273F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-860.273F));
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-860.273F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int int0 = ArrayUtils.indexOf(floatArray0, (-1527.7157F), (-171));
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.61459120328, 2918.5301702262213);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (double) 1;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)1);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1508.771535));
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 6485.40117429313;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.7, 7009, (-467.02517183));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 6485.40117429313}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2900.31171079269, (-2481), (-1466.0));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-449.04364), 2169, 2763.752662583577);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2185.793, (-1));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-532.94708536686), 2507);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2921.217853;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 104.5F, (-1), (double) (-1118.4F));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2921.217853}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 573.260065281386);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 0.0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)0, (int) (short) (-1289));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)55);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), (int) (byte) (-119));
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-57));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (int) (byte) (-123));
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'A', (int) (byte) (-124));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'n';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'n', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)408;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)408);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)408, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-997));
      assertEquals(9, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short)0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2595), (int) (short) (-922));
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)21845, 2103657451);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 21845;
      integerArray0[1] = (Integer) 2103657451;
      integerArray0[2] = (Integer) int0;
      integerArray0[3] = (Integer) 21845;
      integerArray0[4] = (Integer) 21845;
      integerArray0[5] = (Integer) 2103657451;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {21845, 2103657451, (-1), 21845, 21845, 2103657451}, intArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (-471));
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = (int) (short)21845;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)21845);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 21845, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 63);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2283), (-4388));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 690, (-3296));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-3259));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long[] longArray0 = new long[7];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-36L), (-2144778109));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 184L, (-89));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1480);
      int int0 = ArrayUtils.indexOf(longArray0, (-1480L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-109), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-221.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-2312L);
      objectArray0[1] = (Object) (-2312L);
      objectArray0[2] = (Object) (-2312L);
      objectArray0[3] = (Object) (-780L);
      objectArray0[4] = objectArray0[2];
      objectArray0[5] = (Object) (-2312L);
      objectArray0[6] = (Object) (-2312L);
      objectArray0[7] = (Object) (-780L);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "e$VCh]x", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array", (-44));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "MZ&P", 36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) 'n';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) null);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-922));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(object0, "Mac");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(18, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[4];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = new Object[2];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) longArray1);
      assertEquals(3, longArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2607);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 7);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-963), 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147), (-2147));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 57, (-416));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1472, (-1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2303, 3575);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1472);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)1588);
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      short short1 = (short) (-16);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) short1, (int) shortArray0[1]);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 1285);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, (-1));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-918), 672);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2083), Integer.MAX_VALUE);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3033), (int) (byte)2);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 3313, 1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1, (-93));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, 2197);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-942), 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 297, 2146540524);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 971, (-1525));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-785), 2660);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (int) (short) (-2204));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2146214317, 2146214317);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 57, 2527);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-416), 1264);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) shortArray0[0], (int) 0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2169, 1731);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.subarray((AbstractMap.SimpleImmutableEntry<String, Object>[]) null, (int) 2, 1);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, (int)  (-101), 3475);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertEquals(7, abstractMap_SimpleEntryArray1.length);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-951));
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)3);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, (-5583));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5583, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Integer integer0 = new Integer((byte)0);
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)6, (byte)116);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), 'i');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)365);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)365}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (int) '0';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
      assertArrayEquals(new int[] {0, 48, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 416, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 416, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      long[] longArray0 = new long[9];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 2147042647);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147042647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1742);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1742, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short)0);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1278), 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1278, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-3));
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2879));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2879, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) "', is neither of type Map.Entry nor an Array");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (int) (short) (-467));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -467, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-121));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-121)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2790, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2790, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1372.3595F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'D'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (double) (short)0);
      assertEquals((-1), int0);
  }
}
