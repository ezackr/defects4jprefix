/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:30:35 GMT 2023
 */

package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DurationFormatUtils_ESTest extends DurationFormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-1907L), true, true);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationISO((-1907L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012");
      assertEquals(6, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012", 228);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000280java.lang.StringBuffer@00000000290java.lang.StringBuffer@00000000300java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@0000000033-1java.lang.StringBuffer@00000000343java.lang.StringBuffer@0000000035", 228);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean0);
      
      String string2 = DurationFormatUtils.formatPeriod((-1907L), (-371L), "Minimum abbreviation width with offset is 7");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      String string3 = DurationFormatUtils.formatDurationWords((-2300L), false, true);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string4 = DurationFormatUtils.formatPeriod((-1907L), 86400000L, "java.lang.StringBuffer@00000000280java.lang.StringBuffer@00000000290java.lang.StringBuffer@00000000300java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@0000000033-1java.lang.StringBuffer@00000000343java.lang.StringBuffer@0000000035", true, timeZone0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("GMT", timeZone0.getID());
      
      String string5 = DurationFormatUtils.formatPeriodISO((-1L), 1944L);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = DurationFormatUtils.formatDurationISO(86400000L);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean1 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "");
      assertTrue(boolean1 == boolean0);
      assertEquals(6, durationFormatUtils_TokenArray0.length);
      assertFalse(boolean1);
      
      String string7 = DurationFormatUtils.formatPeriod((long) 228, 1L, "0java.lang.StringBuffer@000000005400java.lang.StringBuffer@0000000055java.lang.StringBuffer@00000000560java.lang.StringBuffer@000000005701java.lang.StringBuffer@0000000058java.lang.StringBuffer@0000000059", true, timeZone0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("GMT", timeZone0.getID());
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012");
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      boolean boolean2 = durationFormatUtils_Token0.equals(durationFormatUtils_Token2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = (-1907L);
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords((-1907L), true, true);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationISO((-1907L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012");
      assertEquals(6, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      int int0 = 228;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012", 228);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000280java.lang.StringBuffer@00000000290java.lang.StringBuffer@00000000300java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@0000000033-1java.lang.StringBuffer@00000000343java.lang.StringBuffer@0000000035", 228);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean1 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean1);
      
      String string2 = DurationFormatUtils.formatPeriod((-1907L), (-371L), "Minimum abbreviation width with offset is 7");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long long1 = 86400000L;
      // Undeclared exception!
      try { 
        ZoneId.of("0java.lang.StringBuffer@000000005400java.lang.StringBuffer@0000000055java.lang.StringBuffer@00000000560java.lang.StringBuffer@000000005701java.lang.StringBuffer@0000000058java.lang.StringBuffer@0000000059");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: 0java.lang.StringBuffer@000000005400java.lang.StringBuffer@0000000055java.lang.StringBuffer@00000000560java.lang.StringBuffer@000000005701java.lang.StringBuffer@0000000058java.lang.StringBuffer@0000000059
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = (-1907L);
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords((-1907L), true, true);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationISO((-1907L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 228;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012", 228);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000280java.lang.StringBuffer@00000000290java.lang.StringBuffer@00000000300java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@0000000033-1java.lang.StringBuffer@00000000343java.lang.StringBuffer@0000000035", 228);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean1 = durationFormatUtils_Token0.equals(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean1);
      
      String string2 = DurationFormatUtils.formatPeriod((-1907L), (-371L), "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      long long1 = 86400000L;
      // Undeclared exception!
      try { 
        ZoneId.of("");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(object0, 2299);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      String string0 = (String)DurationFormatUtils.s;
      assertNotNull(string0);
      assertEquals("s", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("s", 2299);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("s");
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token2);
      
      String string1 = durationFormatUtils_Token2.toString();
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotNull(string1);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      String string2 = durationFormatUtils_Token2.toString();
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotNull(string2);
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertNotNull(durationFormatUtils_Token3);
      
      durationFormatUtils_Token0.increment();
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token3);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 2299);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token3);
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token4));
      assertNotNull(durationFormatUtils_Token5);
      
      String string3 = durationFormatUtils_Token4.toString();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token3);
      assertNotNull(string3);
      
      durationFormatUtils_Token4.increment();
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token3);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token4);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token5);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token3);
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, object0);
      assertEquals(6, durationFormatUtils_TokenArray0.length);
      assertTrue(boolean0);
      
      String string4 = DurationFormatUtils.formatDurationWords(2299, true, true);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = DurationFormatUtils.formatPeriodISO(2299, (-1L));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = DurationFormatUtils.formatPeriod(1985L, (-1932L), "0java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000182java.lang.StringBuffer@0000000019");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = DurationFormatUtils.formatPeriod((-1932L), (-837L), "java.lang.StringBuffer@00000000350java.lang.StringBuffer@00000000360java.lang.StringBuffer@00000000370java.lang.StringBuffer@00000000380java.lang.StringBuffer@00000000390java.lang.StringBuffer@0000000040-2java.lang.StringBuffer@000000004100java.lang.StringBuffer@0000000042");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = DurationFormatUtils.formatDurationISO((-1724L));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = DurationFormatUtils.formatPeriod((-495L), (-1724L), "~U6O:");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      // Undeclared exception!
      DurationFormatUtils.formatPeriod(1985L, (-837L), string3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[7];
      String string0 = (String)DurationFormatUtils.M;
      assertNotNull(string0);
      assertEquals("M", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M", (-2107));
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("M");
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(" 1 hours");
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "M");
      assertNotNull(stringBuffer0);
      assertEquals("M", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(stringBuffer0);
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertNotNull(durationFormatUtils_Token3);
      assertEquals("M", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(" 1 hours", 115);
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token4;
      String string1 = (String)DurationFormatUtils.d;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("d", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token("d", 115);
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      assertNotNull(durationFormatUtils_Token5);
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token5;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token(durationFormatUtils_Token2);
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token6);
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token6;
      String string2 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 3, 115, 39, 8192, 3, 8192, (-2107), true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, durationFormatUtils_TokenArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, false);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(2419200000L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      assertNotNull(durationFormatUtils_Token0);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertTrue(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("java.lang.StringBuffer@0000000019-1875767296java.lang.StringBuffer@0000000020java.lang.StringBuffer@0000000021java.lang.StringBuffer@0000000022java.lang.StringBuffer@0000000023");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(timeZone1);
      assertEquals("GMT", timeZone1.getID());
      
      boolean boolean0 = timeZone0.observesDaylightTime();
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotSame(timeZone0, timeZone1);
      assertFalse(boolean0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone2 = TimeZone.getDefault();
      assertTrue(timeZone2.equals((Object)timeZone1));
      assertTrue(timeZone2.equals((Object)timeZone0));
      assertNotSame(timeZone2, timeZone0);
      assertNotSame(timeZone2, timeZone1);
      assertNotNull(timeZone2);
      assertEquals("GMT", timeZone2.getID());
      
      String string2 = DurationFormatUtils.formatPeriod(0L, 0L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", false, timeZone0);
      assertTrue(timeZone0.equals((Object)timeZone2));
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(timeZone0, timeZone2);
      assertNotSame(timeZone0, timeZone1);
      assertNotNull(string2);
      assertEquals("GMT", timeZone0.getID());
      
      String string3 = DurationFormatUtils.formatDuration(4574L, " 1 second");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = (String)DurationFormatUtils.H;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("H", string4);
      
      boolean boolean1 = durationFormatUtils_Token0.equals("H");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = durationFormatUtils_Token0.toString();
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)object0));
      assertNotNull(string5);
      
      Object object1 = durationFormatUtils_Token0.getValue();
      assertFalse(object1.equals((Object)string4));
      assertTrue(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)string5));
      assertFalse(object1.equals((Object)string1));
      assertFalse(object1.equals((Object)string3));
      assertFalse(object1.equals((Object)string2));
      assertNotNull(object1);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals(1, int0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      boolean boolean2 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = DurationFormatUtils.formatPeriodISO((-1382L), 1L);
      assertFalse(string6.equals((Object)object1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)object0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = DurationFormatUtils.formatPeriod((long) 1, 4574L, "OU4cq2M-5ffJXi\"fg?");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)object0));
      assertFalse(string7.equals((Object)object1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(object2);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("", 1);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      String string8 = DurationFormatUtils.formatDurationISO(0L);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)object1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      int int1 = durationFormatUtils_Token1.getCount();
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertTrue(int1 == int0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(" 1 minute");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("y", 674);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token2);
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 13);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token3);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token3, 48);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token("y", 13);
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token5);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token5;
      String string0 = (String)DurationFormatUtils.y;
      assertNotNull(string0);
      assertEquals("y", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token("y");
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token6.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token6);
      
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token6;
      StringBuffer stringBuffer0 = new StringBuffer("y");
      assertNotNull(stringBuffer0);
      assertEquals("y", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token7 = new DurationFormatUtils.Token(stringBuffer0, 13);
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token7.equals((Object)durationFormatUtils_Token5));
      assertNotNull(durationFormatUtils_Token7);
      assertEquals("y", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token7;
      DurationFormatUtils.Token durationFormatUtils_Token8 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token8.equals((Object)durationFormatUtils_Token3));
      assertNotNull(durationFormatUtils_Token8);
      
      durationFormatUtils_TokenArray0[7] = durationFormatUtils_Token8;
      DurationFormatUtils.Token durationFormatUtils_Token9 = new DurationFormatUtils.Token(stringBuffer0);
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token8));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token4));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token7));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token5));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token6));
      assertFalse(durationFormatUtils_Token9.equals((Object)durationFormatUtils_Token3));
      assertNotNull(durationFormatUtils_Token9);
      assertEquals("y", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      durationFormatUtils_TokenArray0[8] = durationFormatUtils_Token9;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 3, 3, 1276, 980, 980, 674, 1276, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, durationFormatUtils_TokenArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationISO(1139L);
      //  // Unstable assertion: assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(2351L, false, false);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDurationISO(2351L);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[5];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("");
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      StringWriter stringWriter0 = new StringWriter();
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(stringBuffer0);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(" 0 days", (-2697));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token2);
      
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("");
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token3);
      
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token3);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token4);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token3, (-2697));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token5.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token5);
      
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token5;
      String string3 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 0, 39, (-2697), (-2697), 24, 39, 0, true);
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertEquals(5, durationFormatUtils_TokenArray0.length);
      //  // Unstable assertion: assertNotNull(string3);
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token4);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token4));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token3));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token4.equals((Object)durationFormatUtils_Token5));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token3);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token4);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token5);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token5);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token3, durationFormatUtils_Token4);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token3);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token4, durationFormatUtils_Token5);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.y;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("y", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", 3193);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      int int0 = durationFormatUtils_Token0.getCount();
      //  // Unstable assertion: assertEquals(3193, int0);
      
      long long0 = 3059L;
      durationFormatUtils_Token0.increment();
      String string1 = DurationFormatUtils.formatDurationWords(3059L, false, false);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatPeriodISO(3059L, 3059L);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string2);
      
      String string3 = DurationFormatUtils.formatPeriod(0L, 3059L, "java.lang.StringBuffer@00000000290java.lang.StringBuffer@00000000300java.lang.StringBuffer@00000000310java.lang.StringBuffer@00000000320java.lang.StringBuffer@00000000330java.lang.StringBuffer@00000000340java.lang.StringBuffer@0000000035000java.lang.StringBuffer@0000000036");
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string3);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[7];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token1;
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token0;
      String string4 = durationFormatUtils_Token1.toString();
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(string4);
      
      durationFormatUtils_Token0.increment();
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[6] = durationFormatUtils_Token0;
      int int1 = 24;
      String string5 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 3193, 3193, 3193, 0, 2048, 24, 3193, false);
      //  // Unstable assertion: assertFalse(string5.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string5.equals((Object)string4));
      //  // Unstable assertion: assertEquals(7, durationFormatUtils_TokenArray0.length);
      //  // Unstable assertion: assertNotNull(string5);
      //  // Unstable assertion: assertEquals("", string5);
      
      int int2 = 1;
      String string6 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 14, 14, (-1), 14, 24, 14, 1, true);
      //  // Unstable assertion: assertFalse(string6.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string1));
      //  // Unstable assertion: assertTrue(string6.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string6.equals((Object)string4));
      //  // Unstable assertion: assertEquals(7, durationFormatUtils_TokenArray0.length);
      //  // Unstable assertion: assertNotNull(string6);
      //  // Unstable assertion: assertEquals("", string6);
      
      durationFormatUtils_TokenArray0[5].increment();
      //  // Unstable assertion: assertEquals(7, durationFormatUtils_TokenArray0.length);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string7 = DurationFormatUtils.formatDurationWords(int2, boolean0, boolean1);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(string7.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string7.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string7);
      
      String string8 = (String)DurationFormatUtils.d;
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertNotNull(string8);
      //  // Unstable assertion: assertEquals("d", string8);
      
      boolean boolean2 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, string8);
      //  // Unstable assertion: assertFalse(string8.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string4));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string8.equals((Object)string3));
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(7, durationFormatUtils_TokenArray0.length);
      //  // Unstable assertion: assertFalse(boolean2);
      
      String string9 = "";
      boolean boolean3 = false;
      TimeZone timeZone0 = TimeZone.getTimeZone(string4);
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string9));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
      
      String string10 = DurationFormatUtils.formatPeriod(long0, (long) int1, string9, boolean3, timeZone0);
      //  // Unstable assertion: assertTrue(string10.equals((Object)string9));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string4));
      //  // Unstable assertion: assertTrue(string10.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string2));
      //  // Unstable assertion: assertTrue(string10.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string10.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string4.equals((Object)string9));
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string8));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string7));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string9.equals((Object)string5));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string3));
      //  // Unstable assertion: assertTrue(string9.equals((Object)string6));
      //  // Unstable assertion: assertFalse(string9.equals((Object)string4));
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      //  // Unstable assertion: assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      //  // Unstable assertion: assertNotNull(string10);
      //  // Unstable assertion: assertEquals("", string10);
      //  // Unstable assertion: assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " 1 minutes", 0, 0, 0, 0, 0, 0, 77, 77);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id= 1 minutes,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=77,endTime=77,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(" 1 minutes", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.forLanguageTag(" 1 minutes");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertNotNull(mockGregorianCalendar0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotNull(calendar0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      String string0 = locale0.getDisplayLanguage();
      assertFalse(locale0.equals((Object)locale2));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotNull(string0);
      assertEquals("Chinese", string0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, calendar0, 0, 0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
      assertEquals("java.util.SimpleTimeZone[id= 1 minutes,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=77,endTime=77,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(" 1 minutes", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id= 1 minutes,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=77,endTime=77,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(locale0, (-1735));
      assertFalse(locale0.equals((Object)locale2));
      assertNotNull(durationFormatUtils_Token0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = durationFormatUtils_Token0.toString();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = DurationFormatUtils.reduceAndCorrect(calendar0, mockGregorianCalendar0, 0, 0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertTrue(int1 == int0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertEquals(0, int1);
      assertEquals("java.util.SimpleTimeZone[id= 1 minutes,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=77,endTime=77,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(" 1 minutes", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id= 1 minutes,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=77,endTime=77,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) "");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string0 = DurationFormatUtils.formatPeriod(1L, 1L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration((-1175L), "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertEquals(15, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string2 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      int int0 = 401;
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 401, 401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(0L, 1L, "ZyB}gFSlRyk<z7a/Yim");
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(0L, "java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000101java.lang.StringBuffer@00000000110java.lang.StringBuffer@00000000120");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      String string2 = DurationFormatUtils.formatPeriod(2419200000L, 162L, "F=X_Bul]Oc[O", false, timeZone0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string0 = DurationFormatUtils.formatPeriodISO(60000L, (-1984L));
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(181L, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDurationISO(986L);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = DurationFormatUtils.formatPeriod(1020L, (-1L), "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = DurationFormatUtils.formatPeriodISO((-1L), (-1L));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000330java.lang.StringBuffer@00000000340java.lang.StringBuffer@00000000350java.lang.StringBuffer@0000000036", 0);
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("java.lang.StringBuffer@00000000520java.lang.StringBuffer@00000000530java.lang.StringBuffer@00000000540java.lang.StringBuffer@00000000550java.lang.StringBuffer@00000000560java.lang.StringBuffer@00000000570java.lang.StringBuffer@0000000058986java.lang.StringBuffer@0000000059");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-1L), "", false);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("", string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];
      String string1 = (String)DurationFormatUtils.M;
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("M", string1);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M", 0);
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("");
      //  // Unstable assertion: assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      //  // Unstable assertion: assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      String string2 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1, 0, 0, (-1), (-1), (-1), 0, false);
      //  // Unstable assertion: assertTrue(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertEquals(2, durationFormatUtils_TokenArray0.length);
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string0 = DurationFormatUtils.formatDurationHMS(1L);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(durationFormatUtils0, 39);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatPeriod(1L, (long) 39, "0java.lang.StringBuffer@000000000900java.lang.StringBuffer@000000001000java.lang.StringBuffer@0000000011001");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals(41, int0);
      
      long long0 = (-1552L);
      String string3 = DurationFormatUtils.formatPeriodISO((-1552L), 41);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object object0 = durationFormatUtils_Token0.getValue();
      assertSame(durationFormatUtils0, object0);
      assertSame(object0, durationFormatUtils0);
      assertNotNull(object0);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration(1L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.lexx((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(1L, "", false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = false;
      String string1 = DurationFormatUtils.formatDurationWords(1L, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string2 = DurationFormatUtils.formatDurationHMS(142L);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "";
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("");
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string4 = DurationFormatUtils.formatDurationWords(1L, false, false);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("-.b8!,H/6RhUL8L}x", 0);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string5 = durationFormatUtils_Token0.toString();
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = DurationFormatUtils.formatDuration(4242L, "->", true);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      durationFormatUtils_Token0.increment();
      String string7 = DurationFormatUtils.formatDurationWords(4242L, false, true);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = DurationFormatUtils.formatDuration((long) 0, "");
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("", string8);
      
      int int0 = 3431;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3431, 3431, 4367);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, 3431, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3431
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.s;
      assertNotNull(string0);
      assertEquals("s", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("s");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      durationFormatUtils_Token0.increment();
      String string2 = durationFormatUtils_Token0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.increment();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod((-1107L), (-1107L), (String) null, false, (TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(1359L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("java.lang.StringBuffer@00000000191359java.lang.StringBuffer@0000000020java.lang.StringBuffer@0000000021java.lang.StringBuffer@0000000022java.lang.StringBuffer@0000000023");
      assertEquals(7, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string2 = DurationFormatUtils.formatDurationHMS(0L);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      String string3 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("cinese (Taiwan)", string3);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(calendar0, (Calendar) null, 1088, 1088);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1];
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(durationFormatUtils0, 121);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = DurationFormatUtils.formatPeriod(440L, 0L, "0M_E/RG9tfSu&DE.l9");
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 858, 858, 858, 24, 24, 24, 0, false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, durationFormatUtils_TokenArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = DurationFormatUtils.formatDuration(2419200000L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO((-3962L), 86400000L);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000181java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@00000000213java.lang.StringBuffer@0000000022962java.lang.StringBuffer@0000000023");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string1 = DurationFormatUtils.formatDuration(86400000L, "", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = DurationFormatUtils.formatDuration(86400000L, "", true);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("m");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string3 = DurationFormatUtils.formatPeriod((-3962L), (-2021L), "", true, timeZone0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(1L, 2419200000L, " ");
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(2419200000L, " 1 seconds", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDurationHMS(1L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = DurationFormatUtils.formatDurationHMS(0L);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriod(607L, 607L, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-1730L), false, false);
      assertNotNull(string0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("");
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012", 1000);
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = durationFormatUtils_Token0.toString();
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("");
      assertFalse(boolean0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1000);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertEquals(1001, int0);
      
      boolean boolean1 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@0000000011-1java.lang.StringBuffer@0000000012");
      assertTrue(boolean1 == boolean0);
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertFalse(boolean1);
      
      // Undeclared exception!
      DurationFormatUtils.formatDuration((long) 1000, string2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];
      String string0 = (String)DurationFormatUtils.d;
      assertNotNull(string0);
      assertEquals("d", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", 12);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 12);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 12);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertTrue(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token2);
      
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertTrue(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token3.equals((Object)durationFormatUtils_Token0));
      assertNotNull(durationFormatUtils_Token3);
      
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token3;
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 12, (-4698), (-4698), 749, 12, 12, 2340, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, durationFormatUtils_TokenArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 114, 0, 114, 0);
      assertNotNull(mockGregorianCalendar0);
      
      int int0 = DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, 0, (-1));
      assertEquals(0, int0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61867346400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=9,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=185,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null);
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = (String)DurationFormatUtils.m;
      assertNotNull(string0);
      assertEquals("m", string0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals("m");
      assertFalse(boolean0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[5];
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token0;
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token0;
      boolean boolean1 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, durationFormatUtils_TokenArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-4147L), "x9X@wFn#Teo$gd)&", false);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000040java.lang.StringBuffer@0000000005");
      assertNotNull(durationFormatUtils_Token0);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals(1, int0);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("java.lang.StringBuffer@00000000040java.lang.StringBuffer@0000000005");
      assertEquals(4, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      int int1 = durationFormatUtils_Token0.getCount();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, (-2083), 1, 0, 1, (-2083), (-2083), 0, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, durationFormatUtils_TokenArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 0L;
      String string0 = DurationFormatUtils.formatDuration(0L, "!G'6'fEr[EH");
      assertNotNull(string0);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string1 = DurationFormatUtils.formatDurationWords(0L, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, 378, 378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration((-1L), "", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertNotNull(durationFormatUtils_Token0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(string1);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.format((DurationFormatUtils.Token[]) null, (-2335), (-2335), (-2335), 298, 1134, (-3119), (-2335), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(1652L);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000901java.lang.StringBuffer@0000000010652");
      assertNotNull(durationFormatUtils_Token0);
      
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      durationFormatUtils_Token0.increment();
      Object object0 = durationFormatUtils_Token0.getValue();
      assertFalse(object0.equals((Object)string1));
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string2 = DurationFormatUtils.formatPeriodISO(1652L, 1652L);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils0);
      assertFalse(boolean0);
      
      String string3 = DurationFormatUtils.formatDuration(1652L, " 1 days", true);
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      durationFormatUtils_Token0.increment();
      String string4 = DurationFormatUtils.formatPeriodISO(0L, (-457L));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals(4, int0);
      
      String string5 = DurationFormatUtils.formatDuration(1652L, "java.lang.StringBuffer@00000000590java.lang.StringBuffer@00000000600java.lang.StringBuffer@00000000610java.lang.StringBuffer@00000000620java.lang.StringBuffer@00000000630java.lang.StringBuffer@00000000640java.lang.StringBuffer@000000006543java.lang.StringBuffer@0000000066", true);
      assertFalse(string5.equals((Object)object0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = durationFormatUtils_Token0.equals("java.lang.StringBuffer@00000000590java.lang.StringBuffer@00000000600java.lang.StringBuffer@00000000610java.lang.StringBuffer@00000000620java.lang.StringBuffer@00000000630java.lang.StringBuffer@00000000640java.lang.StringBuffer@000000006543java.lang.StringBuffer@0000000066");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(1L, true, true);
      assertNotNull(string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", (-1391));
      assertNotNull(durationFormatUtils_Token0);
      
      String string1 = durationFormatUtils_Token0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      durationFormatUtils_Token0.increment();
      String string2 = durationFormatUtils_Token0.toString();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = durationFormatUtils_Token0.toString();
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = durationFormatUtils_Token0.getCount();
      assertEquals((-1390), int0);
      
      boolean boolean1 = durationFormatUtils_Token0.equals("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect((Calendar) null, (Calendar) null, 1, 1270);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(2L, true, false);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationWords(0L, true, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("M}dJ^i,E");
      assertEquals(4, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string0 = DurationFormatUtils.formatDuration(2884L, "`V;I`35Rf:?F0IK=S#G", false);
      assertNotNull(string0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 2710, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect(mockGregorianCalendar0, mockGregorianCalendar0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
      
      String string0 = DurationFormatUtils.formatPeriodISO(0L, 1L);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDuration(3600000L, "q_:+", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatDurationISO(3600000L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDuration(2419200000L, "xs{*:,");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords((-2053L), false, false);
      assertNotNull(string0);
      
      String string1 = DurationFormatUtils.formatDurationHMS((-2053L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = DurationFormatUtils.formatPeriodISO(1L, 1L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      String string3 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, 2773, 2773, 2773, 2773, 2773, 83, 83, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, durationFormatUtils_TokenArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = DurationFormatUtils.formatDurationHMS((-276L));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = DurationFormatUtils.formatDuration((-1L), "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("yfL8t2\"|YP[c%Sx");
      assertEquals(4, durationFormatUtils_TokenArray0.length);
      assertNotNull(durationFormatUtils_TokenArray0);
      
      String string0 = (String)DurationFormatUtils.d;
      assertNotNull(string0);
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationHMS(1L);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@000000000800java.lang.StringBuffer@000000000900java.lang.StringBuffer@0000000010001", 0);
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      String string1 = DurationFormatUtils.formatPeriod(0L, 0L, "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'", true, (TimeZone) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatPeriod(60000L, (-1L), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = (-1L);
      String string0 = null;
      // Undeclared exception!
      try { 
        DurationFormatUtils.formatDuration((-1L), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(2498L, 0L);
      String string1 = DurationFormatUtils.formatPeriod(2498L, 0L, "java.lang.StringBuffer@00000000160java.lang.StringBuffer@00000000170java.lang.StringBuffer@00000000180java.lang.StringBuffer@00000000190java.lang.StringBuffer@00000000200java.lang.StringBuffer@0000000021-2java.lang.StringBuffer@000000002202java.lang.StringBuffer@0000000023");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = DurationFormatUtils.formatPeriodISO(1L, 0L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H", (-862));
      boolean boolean0 = durationFormatUtils_Token0.equals("d' days 'H' hours 'm' minutes 's' seconds'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(" 1 days", 4165);
      Object object0 = durationFormatUtils_Token0.getValue();
      assertEquals(" 1 days", object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = 0L;
      DurationFormatUtils.formatPeriod(0L, 2419200000L, "WRs!dWao}m");
      Object object0 = null;
      int int0 = 12;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null, 12);
      durationFormatUtils_Token0.equals("java.lang.StringBuffer@00000000070java.lang.StringBuffer@000000000828java.lang.StringBuffer@00000000090");
      DurationFormatUtils.formatPeriod((-2300L), 0L, "WRs!dWao}m");
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        durationFormatUtils_Token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, true, false);
      DurationFormatUtils.formatDuration(2419200000L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      durationFormatUtils_Token0.getValue();
      TimeZone timeZone0 = TimeZone.getTimeZone("java.lang.StringBuffer@0000000019-1875767296java.lang.StringBuffer@0000000020java.lang.StringBuffer@0000000021java.lang.StringBuffer@0000000022java.lang.StringBuffer@0000000023");
      TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      TimeZone.getDefault();
      DurationFormatUtils.formatPeriod(0L, 0L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", false, timeZone0);
      String string1 = DurationFormatUtils.formatDuration(4574L, ">lg)E6-d=e%_VsjI~");
      String string2 = (String)DurationFormatUtils.H;
      durationFormatUtils_Token0.equals("H");
      DurationFormatUtils.formatPeriod(0L, 2419200000L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      Object object0 = durationFormatUtils_Token0.getValue();
      assertTrue(object0.equals((Object)string0));
      
      durationFormatUtils_Token0.getCount();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
      
      DurationFormatUtils.formatPeriodISO((-1382L), 1L);
      DurationFormatUtils.formatPeriod((long) 1, 4574L, "OU4cq2M-5ffJXi\"fg?");
      Object object1 = new Object();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(object1);
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("", 1);
      DurationFormatUtils.formatDurationISO(0L);
      int int0 = durationFormatUtils_Token1.getCount();
      assertEquals(1, int0);
      
      String string3 = DurationFormatUtils.formatDurationHMS((-716L));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, true);
      DurationFormatUtils.formatDuration(2419200000L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      TimeZone timeZone0 = TimeZone.getTimeZone("java.lang.StringBuffer@0000000019-1875767296java.lang.StringBuffer@0000000020java.lang.StringBuffer@0000000021java.lang.StringBuffer@0000000022java.lang.StringBuffer@0000000023");
      TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      TimeZone.getDefault();
      String string1 = DurationFormatUtils.formatPeriod(0L, 0L, "0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012", false, timeZone0);
      assertFalse(string1.equals((Object)string0));
      
      DurationFormatUtils.formatDuration(4574L, " 1 son");
      String string2 = (String)DurationFormatUtils.H;
      durationFormatUtils_Token0.equals("H");
      durationFormatUtils_Token0.toString();
      Object object0 = durationFormatUtils_Token0.getValue();
      assertTrue(object0.equals((Object)string0));
      
      durationFormatUtils_Token0.getCount();
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[0];
      boolean boolean0 = durationFormatUtils_Token0.equals(durationFormatUtils_Token0);
      assertTrue(boolean0);
      
      DurationFormatUtils.formatDurationHMS(0L);
      DurationFormatUtils.formatPeriod((long) 1, 4574L, "OU4cq2M-5ffJXi\"fg?");
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.StringBuffer@00000000310java.lang.StringBuffer@0000000032java.lang.StringBuffer@0000000033java.lang.StringBuffer@0000000034java.lang.StringBuffer@0000000035", 1);
      DurationFormatUtils.formatDurationISO(0L);
      DurationFormatUtils.formatDurationHMS((-716L));
      StringBuffer stringBuffer0 = new StringBuffer(1000);
      boolean boolean1 = durationFormatUtils_Token1.equals(stringBuffer0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[6];
      Object object0 = new Object();
      int int0 = 2299;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(object0, 2299);
      String string0 = (String)DurationFormatUtils.s;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("s", 2299);
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("s");
      durationFormatUtils_Token2.toString();
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token2;
      durationFormatUtils_Token2.toString();
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_TokenArray0[3], 2299);
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token3;
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token2);
      // Undeclared exception!
      try { 
        durationFormatUtils_Token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H", (-3000));
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0);
      DurationFormatUtils.formatPeriod((long) (-3000), (long) (-3000), "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'");
      durationFormatUtils_Token1.increment();
      durationFormatUtils_Token1.toString();
      String string1 = (String)DurationFormatUtils.m;
      durationFormatUtils_Token1.equals("m");
      DurationFormatUtils.formatDurationISO((-3000));
      durationFormatUtils_Token1.toString();
      DurationFormatUtils.formatDurationWords((-2L), true, false);
      durationFormatUtils_Token0.increment();
      DurationFormatUtils.formatDurationWords(2193L, true, true);
      DurationFormatUtils.formatDurationISO(2193L);
      durationFormatUtils_Token1.increment();
      // Undeclared exception!
      try { 
        DurationFormatUtils.reduceAndCorrect((Calendar) null, (Calendar) null, (-3000), (-3000));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.time.DurationFormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("", "AI<l~HS6");
      simpleTimeZone0.observesDaylightTime();
      locale0.getDisplayName();
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      int int0 = DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 0, 0);
      assertEquals(0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = DurationFormatUtils.formatDurationWords(0L, false, false);
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuffer@00000000090java.lang.StringBuffer@00000000100java.lang.StringBuffer@00000000110java.lang.StringBuffer@0000000012");
      durationFormatUtils_Token0.increment();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      String string1 = durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.increment();
      String string2 = DurationFormatUtils.formatDuration(0L, "");
      DurationFormatUtils.formatDurationISO(2123L);
      durationFormatUtils_Token0.increment();
      String string3 = DurationFormatUtils.formatPeriod(1L, 2123L, "", false, (TimeZone) null);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      durationFormatUtils_Token0.increment();
      String string4 = DurationFormatUtils.formatDurationHMS(0L);
      assertFalse(string4.equals((Object)string3));
      
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      String string5 = DurationFormatUtils.formatDurationWords((-110L), false, false);
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[6];
      String string0 = (String)DurationFormatUtils.s;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("s", 1);
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("", 1);
      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1);
      durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token0;
      String string1 = (String)DurationFormatUtils.d;
      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token("d");
      DurationFormatUtils.Token durationFormatUtils_Token4 = new DurationFormatUtils.Token(durationFormatUtils_Token3, 1);
      durationFormatUtils_TokenArray0[3] = durationFormatUtils_Token4;
      DurationFormatUtils.Token durationFormatUtils_Token5 = new DurationFormatUtils.Token(durationFormatUtils_Token4);
      durationFormatUtils_TokenArray0[4] = durationFormatUtils_Token5;
      durationFormatUtils_Token4.increment();
      String string2 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token6 = new DurationFormatUtils.Token("H");
      durationFormatUtils_TokenArray0[5] = durationFormatUtils_Token6;
      durationFormatUtils_Token3.increment();
      durationFormatUtils_Token5.toString();
      DurationFormatUtils.format(durationFormatUtils_TokenArray0, 221, 1592, 1, 3158, 221, 425, 939, true);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(221, 221, 939);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 221 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.H;
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H");
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.toString();
      durationFormatUtils_Token0.equals("H");
      durationFormatUtils_Token0.toString();
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("java.lang.String@0000000002", 12);
      durationFormatUtils_Token1.increment();
      durationFormatUtils_Token1.toString();
      DurationFormatUtils.formatDuration((long) 12, "_tbC-%xi+9l");
      durationFormatUtils_Token1.equals("_tbC-%xi+9l");
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("");
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      DurationFormatUtils.formatDuration((-332L), "org.apache.commons.lang.time.DurationFormatUtils$Token");
      DurationFormatUtils.formatDuration((-332L), "s", false);
      DurationFormatUtils.formatDurationISO(1L);
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("");
      boolean boolean0 = DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, durationFormatUtils_Token2);
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      DurationFormatUtils.reduceAndCorrect(calendar0, calendar0, 12, 12);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392408561320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=9,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = new DurationFormatUtils.Token[0];
      locale0.getDisplayName();
      DurationFormatUtils.format(durationFormatUtils_TokenArray1, 0, 0, 0, 0, 2628, 1059, 0, false);
      String string1 = (String)DurationFormatUtils.S;
      boolean boolean1 = durationFormatUtils_Token0.equals("S");
      assertTrue(boolean1 == boolean0);
  }
}
