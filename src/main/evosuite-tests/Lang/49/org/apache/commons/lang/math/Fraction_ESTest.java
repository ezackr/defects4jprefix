/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 03:51:25 GMT 2023
 */

package org.apache.commons.lang.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(869, 869);
      Fraction fraction1 = Fraction.getFraction(869, 1283);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(869, fraction1.getNumerator());
      assertEquals(1, int0);
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE_THIRD.invert();
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertFalse(boolean0);
      assertEquals(3, fraction1.getNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/;cJnC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" bOeg1/`gL<|%d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" bOeg1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".t]<n_;@6|p>,'\"p`6^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1145, (-1));
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction1, fraction0);
      assertEquals((-1145.0), fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-78.0502075079038));
      Fraction fraction1 = fraction0.pow(1);
      assertEquals((-771058), fraction1.getNumerator());
      assertEquals((-78.05020751088166), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.pow(599);
      assertEquals(0, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), (-3569));
      Fraction fraction1 = fraction0.pow((-1));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(3569, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2461.523167961));
      Fraction fraction1 = fraction0.negate();
      assertEquals((-19549417), fraction0.getNumerator());
      assertEquals(2461.5231679677663, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.TWO_FIFTHS.negate();
      fraction1.negate();
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(947.9);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-947.9), fraction1.doubleValue(), 0.01);
      assertEquals((byte) (-77), fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
      Fraction fraction3 = fraction2.negate();
      assertEquals(1, fraction3.getDenominator());
      assertEquals(1, fraction2.intValue());
      assertEquals((-1L), fraction3.longValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.getFraction((-2254.0));
      Fraction fraction2 = fraction0.FOUR_FIFTHS.multiplyBy(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1803.2F), fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.ONE_FIFTH.negate();
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertEquals((-0.1F), fraction2.floatValue(), 0.01F);
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      Fraction fraction1 = fraction0.ONE_THIRD.invert();
      Fraction fraction2 = fraction1.subtract(fraction0);
      Fraction fraction3 = fraction0.ONE_THIRD.multiplyBy(fraction2);
      assertEquals(4.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1.3333333333333333, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
      long long0 = fraction1.longValue();
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      long long0 = fraction0.longValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2440.08978));
      Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
      Fraction fraction2 = fraction1.invert();
      assertEquals((-6876173), fraction0.getNumerator());
      assertEquals(5636, fraction2.getDenominator());
      assertEquals((-2.732139907862508E-4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(285, 285);
      int int0 = fraction0.intValue();
      assertEquals(1, int0);
      assertEquals(285, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1");
      int int0 = fraction0.getProperWhole();
      assertEquals((-1), int0);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2590), 25);
      int int0 = fraction0.getNumerator();
      assertEquals(5, fraction0.getDenominator());
      assertEquals((-518), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-103 3/5");
      assertEquals((-103.6F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-114), 4, 4);
      assertEquals((-115.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2268);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2268, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2024, 0, 31);
      assertEquals(62744, fraction0.getNumerator());
      assertEquals(31, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 25);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      assertEquals(25, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.negate();
      float float0 = fraction1.floatValue();
      assertEquals((-0.6666667F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
      double double0 = fraction1.doubleValue();
      assertEquals((-0.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(869, 869);
      Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction1.divideBy(fraction2);
      assertEquals((-1.0011511754461366), fraction3.doubleValue(), 0.01);
      assertEquals((-1115796), fraction3.getNumerator());
      assertEquals((-868.6773187840997), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO_QUARTERS.invert();
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction0.add(fraction2);
      assertEquals(2, fraction3.getDenominator());
      assertEquals((-3), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.getFraction(3481.7902348955795);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(3482.040234895887, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1100), (-2));
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      Fraction fraction2 = fraction1.abs();
      assertEquals(302500, fraction1.getNumerator());
      assertSame(fraction2, fraction1);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(225.75775);
      Fraction fraction1 = fraction0.invert();
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.compareTo("q&bBD1O}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.lang.math.Fraction
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0);
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.pow(4);
      assertEquals(0.31640625F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(4039, 4039);
      // Undeclared exception!
      try { 
        fraction0.ZERO.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.getProperWhole();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.getProperNumerator();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getNumerator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.divideBy(fraction1);
      String string0 = fraction2.toProperString();
      assertEquals("3", string0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("-1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(869, 869);
      String string0 = fraction0.toProperString();
      assertEquals(869, fraction0.getDenominator());
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      int int0 = fraction0.getDenominator();
      assertEquals(4, int0);
      
      fraction0.FOUR_FIFTHS.toProperString();
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
      assertEquals(2.8019052E-4F, fraction3.floatValue(), 0.01F);
      
      Fraction fraction4 = Fraction.ONE_QUARTER;
      fraction2.ZERO.toProperString();
      assertEquals(0.13333334F, fraction2.floatValue(), 0.01F);
      assertEquals(15, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      String string0 = fraction1.ZERO.toString();
      assertEquals("0/1", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.ZERO.toString();
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(869, 869);
      Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(869.6773187840997, fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.getDenominator();
      String string0 = fraction0.FOUR_FIFTHS.toProperString();
      assertEquals("4/5", string0);
      
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      assertEquals(0.13333334F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
      assertEquals(2.801905295601009E-4, fraction3.doubleValue(), 0.01);
      
      Fraction fraction4 = Fraction.ONE_QUARTER;
      fraction1.hashCode();
      assertEquals(2, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      Fraction fraction1 = fraction0.negate();
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertFalse(boolean0);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      boolean boolean0 = fraction0.equals("YoWv<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(869, 869);
      Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(869.6773F, fraction1.floatValue(), 0.01F);
      assertEquals(869, fraction0.getNumerator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE.multiplyBy(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.divideBy(fraction0);
      assertEquals(0, fraction0.getProperWhole());
      
      int int0 = fraction1.getProperWhole();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(947.9);
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.multiplyBy((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.getFraction((-2983.168584589799));
      Fraction fraction2 = fraction0.divideBy(fraction1);
      // Undeclared exception!
      try { 
        fraction1.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.getReducedFraction(0, (-2590));
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
      Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
      assertEquals((-7341), fraction0.getNumerator());
      assertEquals(3.042271031910485, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      // Undeclared exception!
      try { 
        fraction0.ONE.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-222751), (-4526));
      Fraction fraction1 = Fraction.getFraction(903031, (-4526));
      // Undeclared exception!
      try { 
        fraction1.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.pow(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.pow(407);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_THIRDS.pow(0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.abs();
      assertEquals((-3), fraction2.getNumerator());
      assertEquals(0.6F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.THREE_FIFTHS.reduce();
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1416, 1416);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1416, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("3");
      assertEquals(3.0, fraction0.doubleValue(), 0.01);
      assertEquals(3, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("4/5");
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("U\"(.s>>e#=*>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1.7976931348623157E308);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1658));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-2275), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1717986917), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(134217728, 65, 5254);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2263), 2146066167, 1514);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2), (-2), 982);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-2590), 2268, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2819, 2819, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(144, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(1161, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      double double0 = fraction0.doubleValue();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
      int int0 = fraction0.intValue();
      assertEquals((-3), int0);
      assertEquals(2413, fraction0.getDenominator());
      assertEquals((-3.042271031910485), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      float float0 = fraction0.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2590), 17);
      String string0 = fraction0.toProperString();
      assertEquals("-152 6/17", string0);
      assertEquals(17, fraction0.getDenominator());
  }
}
