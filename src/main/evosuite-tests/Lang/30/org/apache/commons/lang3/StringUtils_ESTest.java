/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:52:22 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.substringAfter("awt.toolkit", "awt.toolkit");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("8]ht\"x0`xh:g:>=flq", "gL");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.chomp("NFD", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NFD", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.startsWithAny("w!Dtm hx", (String[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.defaultString(">=flq");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">=flq", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace(">=flq");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string4 = StringUtils.stripStart("gL", "=JuZnozjQ2/");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("gL", string4);
      assertNotNull(string4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'W');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches("qv5>5#/&", "awt.toolkit");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.repeat("NFD", (-684));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'N';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      int int2 = StringUtils.indexOfAny((CharSequence) "NFD", charArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, charArray0.length);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {'W', 'W', 'N', 'W', 'W', 'W'}, charArray0);
      
      String string7 = StringUtils.replaceChars("srQ|O>IXu(#2[C-%ZAk", "`xh:g", "qv5>5#/&");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("srQ|O>IXu(#2[C-%ZAk", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'H');
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, (-1), '9');
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((String) null, "n@.k:);S6{rvj", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.replace("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "strings must not be nuvl", (String) null, (-1));
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("8[^", 'H');
      assertFalse(string2.equals((Object)string1));
      assertEquals("8[^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "strings must not be nuvl";
      stringArray0[1] = ";*_W788% ";
      int int2 = StringUtils.indexOfAny("strings must not be nuvl", stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '2', 3, 241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "{6!f'm]3N1cq.m<";
      String string1 = StringUtils.center("{6!f'm]3N1cq.m<", 46, "}8ZAb|5fM");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}8ZAb|5fM}8ZAb|{6!f'm]3N1cq.m<}8ZAb|5fM}8ZAb|5", string1);
      assertNotNull(string1);
      
      String string2 = "F]";
      int int0 = 55296;
      // Undeclared exception!
      StringUtils.rightPad("F]", 55296, "}8ZAb|5fM");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null", 3507);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultString("Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("Strings must not be null", 3507);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("tfVvSk6", "Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("tfVvSk6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("Or+T|w,3Mt");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("oR+t|W,3mT", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("Strings must not be null", "Strings must not be null", " vs ");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Strings must not be null", "Strings must not be null");
      assertFalse(boolean0);
      
      String string4 = StringUtils.right("Solaris", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Strings must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.rightPad("tfVvSk6", 34, "Solaris");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tfVvSk6SolarisSolarisSolarisSolari", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip((String) null, "tfVvSk6");
      assertNull(string6);
      
      String string7 = StringUtils.rightPad("Strings must not be null", (-3323), "");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("Strings must not be null", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("8]hglx0`xh:g:>=flq", "qX(GQ/7GZVAt\"");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp("tfVvSk6", "tfVvSk6SolarisSolarisSolarisSolari");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertEquals("tfVvSk6", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.chop("tfVvSk6SolarisSolarisSolarisSolari");
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertEquals("tfVvSk6SolarisSolarisSolarisSolar", string10);
      assertNotNull(string10);
      
      TreeSet<Locale.LanguageRange> treeSet0 = new TreeSet<Locale.LanguageRange>();
      assertNotNull(treeSet0);
      
      Iterator<Locale.LanguageRange> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string11 = StringUtils.join(iterator0, "java.text.Normalizer$Form");
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 685;
      String string0 = StringUtils.repeat("1.4", 685);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("java.runtime.name", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JAVA.RUNTIME.NAME", string1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.stripToNull("Cannot pad a negative amount: ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Cannot pad a negative amount:", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars((String) null, " is less than 0: ", string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      char char0 = 'Q';
      int int1 = 0;
      String[] stringArray0 = StringUtils.split(string0, "", 0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 685, (-2420));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "awt.toolkit";
      String string1 = StringUtils.substringAfter("awt.toolkit", "awt.toolkit");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("8]ht\"x0`xh:g:>=flq", "gL");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = "NFD";
      String string4 = StringUtils.chomp("NFD", "");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("NFD", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.startsWithAny("(76]J0VJ", (String[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.defaultString(">=flq");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(">=flq", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.isNumericSpace("");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string6 = StringUtils.stripStart("gL", "=JuZnozjQ2/");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("gL", string6);
      assertNotNull(string6);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Integer integer0 = new Integer((-1305));
      assertEquals((-1305), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean5 = linkedList0.add(integer0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(boolean5);
      assertEquals(1, linkedList0.size());
      
      char char0 = 'W';
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'W');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("6.0", "", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("UxRS~L`&zjDqX/", "");
      assertEquals(15, int0);
      
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains("", "IllegalAccessException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("", (String) null, 758);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.stripStart("", "UxRS~L`&zjDqX/");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.leftPad("", (-1), '3');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeEnd("", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("", "UxRS~L`&zjDqX/");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastIndexOf("U~,=D", "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, int2);
      
      String string5 = StringUtils.substring("", 758);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase("'G)/4>", "LU~)n)qMBG(el\"fo", 5);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.ordinalIndexOf("IllegalAccessException occurred during 1.6 backcompat code", "", (-2552));
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      String string6 = StringUtils.chomp("W3%Kk.kH~`,uNtnV");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("W3%Kk.kH~`,uNtnV", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "W3%Kk.kH~`,uNtnV", charArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.leftPad(":v[IG8o", 384, ":v[IG8o");
      assertEquals(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", 384);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(":v[IG8o");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":v[IG8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase("ZEqES<8fw6", "ZEqES<8fw6", 384);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp("8]ht\"x>=flq:g:50>3?", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("8]ht\"x>=flq:g:50>3?", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("\"(:}#d/4rgraphicsenv", ":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", "8]ht\"x>=flq:g:50>3?");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\"(:}#d/4rgraphicsenv", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("]ht\"x", ":v[IG8o");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((String) null, "8]ht\"x0`xglg:>=flq", 384);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8:c%a.";
      stringArray0[1] = ":v[IG8o";
      stringArray0[2] = "8]ht\"x0`xglg:>=flq";
      stringArray0[3] = "";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.remove("V_5", 'V');
      assertEquals("_5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("hgGPj5(Se5{}6D\"*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("hgGPj5(Se5{}6D\"*", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "8]ht\"x0`xh:g>=uflq");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "IllegalArgumentExceptionoccurredduring1.6backcompatcode");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[4] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(24, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", (-3183), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.stripStart("n)E@'r", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("n)E@'r", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, int3);
      
      String string5 = StringUtils.rightPad("IllegalArgumentExceptionoccurredduring1.6backcompatcode", (-101), "n)E@'r");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("n)E@'r", 5);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("n)E@'r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(0, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.substringAfterLast("AX~M@Z=w7m", "");
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(5));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertFalse(linkedList0.contains(5));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string9 = StringUtils.join((Iterator<?>) listIterator0, "Search and Replace array lengths don't match: ");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertFalse(linkedList0.contains(5));
      assertEquals("", string9);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.repeat("&Sl\u0004x`f}", "", 2189);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("&Sl\u0004x`f}", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("&Sl\u0004x`f}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("&Sl\u0004x`f}", "&Sl\u0004x`f}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("xO61c:iK", "xO61c:iK", 0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'K';
      charArray0[2] = 'd';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'.', 'K', 'd'}, charArray0);
      
      String string3 = StringUtils.substringBeforeLast("^VL/0", "normalize");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("^VL/0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("&Sl\u0004x`f}", (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("&Sl\u0004x`f}", string4);
      assertNotNull(string4);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("&Sl\u0004x`f}"));
      assertNotNull(treeSet0);
      
      NavigableSet<Object> navigableSet0 = treeSet0.tailSet((Object) "^VL/0", false);
      assertFalse(treeSet0.contains("&Sl\u0004x`f}"));
      assertFalse(navigableSet0.contains("&Sl\u0004x`f}"));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(boolean1 == boolean0);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("&Sl\u0004x`f}"));
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("&Sl\u0004x`f}"));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "$L+2[%:]0$H,.2~:v|");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("&Sl\u0004x`f}"));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      int int1 = StringUtils.indexOf("&C=FWE", 'T', 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((String) null, "&C=FWE");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.indexOfIgnoreCase("", "!\"b:b1}'tmtA|");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.trimToNull((String) null);
      assertNull(string7);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "x_x_~");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.chop("v");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIV1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertEquals("cv-qociv1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "T1_@'Zx4^+");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Strings must not be null", 5, "Strings must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches("8)0!j%k+lP", "CV-qOcIV1>'8E9%");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase("Strings must not be null", "v", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.capitalize("CV-qOcIV1>'8E9%");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("CV-qOcIV1>'8E9%", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.stripStart("k>X2", "k>X2");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("k>X2", ";4YEMj9&R_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(";4YEMj9&R_", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase(";4YEMj9&R_");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";4yemJ9&r_", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(";4YEMj9&R_", "k>X2");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ";4yemJ9&\r_";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "zzUsS2)8gL=oJ=4!");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.chomp("", "Minimum abbreviation width with offset is 7");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("_a");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("_a", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("", 62, '3');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("33333333333333333333333333333333333333333333333333333333333333", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("os.arch", 62, '3');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("3333333333333333333333333333333333333333333333333333333os.arch", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.contains("8]ht\"x0`xh:g:>=fgl", "NFD");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.removeStart("Linux", "8]ht\"gl0`xh:g:>=flq");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Linux", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      String string0 = StringUtils.replace("java.text.Normalizer", "java.text.Normalizer", "fXCn.^z30Fc#j&C0RJ", 1);
      assertEquals("fXCn.^z30Fc#j&C0RJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null", 3507);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultString("Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Cannot pad a negative amount: ", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("tfVvSk6", "Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("tfVvSk6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("Or+T|w,3Mt");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("oR+t|W,3mT", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("Cannot pad a negative amount: ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Cannot pad a negative amount: ", "Strings must not be null");
      assertFalse(boolean0);
      
      String string4 = StringUtils.right("Solaris", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Cannot pad a negative amount: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.join((Object[]) stringArray1, "", 0, 4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, stringArray1.length);
      assertEquals("Cannotpadanegative", string5);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.strip((String) null, "tfVvSk6");
      assertNull(string6);
      
      String string7 = StringUtils.rightPad("Cannot pad a negative amount: ", (-3323), "");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals("Cannot pad a negative amount: ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("8]hglx0`xh:g:>=flq", "qX(GQ/7GZVAt\"");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "OS/2";
      stringArray0[1] = "8]ht\"x0`xh:g:>=flq";
      stringArray0[2] = "JZ";
      stringArray0[3] = "org.apache.commons.lang3.SystemUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.SystemUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.repeat("JZ", 97);
      assertEquals("JZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase("java.runtime.version", ":g:50");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "JZ", "NFD");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches("OS/2", "JZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("NFD", "[|mPEd4(5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.uncapitalize(":g:50");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":g:50", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "OS/2");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("OS/2");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace("java.runtime.version");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.defaultIfEmpty("", "8]ht\"x0`xh:g:>=flq");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("8]ht\"x0`xh:g:>=flq", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isAllUpperCase("8]ht\"x0`xh:g:>=flq");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase("GrFn>gH{0Cu", (String) null, 40);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean5 = StringUtils.isNumeric("JZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZJZ");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("NFD"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean6 = arrayList0.add((Object) "8]ht\"x0`xh:g:>=flq");
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(arrayList0.contains("8]ht\"x0`xh:g:>=flq"));
      assertFalse(arrayList0.contains("NFD"));
      assertTrue(boolean6);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.contains("8]ht\"x0`xh:g:>=flq"));
      assertFalse(arrayList0.contains("NFD"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(arrayList0.contains("8]ht\"x0`xh:g:>=flq"));
      assertFalse(arrayList0.contains("NFD"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(string5);
      
      boolean boolean7 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.chomp(":>", ":>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = ":>";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf(":>", 'p', 122);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, ">=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.leftPad("QK&9NZ1\"s!ujx0:&", (-2347), 'p');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("QK&9NZ1\"s!ujx0:&", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "l-~|");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "org.apache.commons.lang3.SystemUtils");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween(" vs ", "jR8h5:");
      assertNull(string5);
      
      String string6 = StringUtils.chomp("8]ht\"x0`gl:g:>=flq", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("8]ht\"x0`gl:g:>=flq", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance(":>", "8]ht\"x0`gl:g:>=flq");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string8 = StringUtils.swapCase("user.name");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("USER.NAME", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.leftPad(":v[IG8o", 384, ":v[IG8o");
      assertEquals(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(":v[IG8o", 384);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":v[IG8o", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(":v[IG8o");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":v[IG8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase(":v[IG8o", ":v[IG8o", 384);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("\"(:}#d/4rgraphicsenv", ":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o", ":v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8o:v[IG8:v[IG8o");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\"(:}#d/4rgraphicsenv", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("]ht\"x", ":v[IG8o");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8:c%a.";
      stringArray0[1] = ":v[IG8o";
      stringArray0[2] = "8]ht\"x0`xglg:>=flq";
      stringArray0[3] = "";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.substringBetween("gj*@%@H'npq`L_(UM!w", ".OrAY", ".OrAY");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "gj*@%@H'npq`L_(UM!w";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("java.version", "java.version", (-1169));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.countMatches("gj*@%@H'npq`L_(UM!w", (String) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.split("java.text.Normalizer$Form", "java.text.Normalizer$Form", (-906));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("java.version");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.abbreviateMiddle(".OrAY", (String) null, 0);
      assertEquals(".OrAY", string1);
      assertNotNull(string1);
      
      char char0 = '*';
      int int2 = StringUtils.lastIndexOf("ht\"x", '*');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.replaceChars("e", "", "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("e", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("gj*@%@H'npq`L_(UM!w", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("", "]", 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]]]]]", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, "`hMwP^");
      assertNull(string2);
      
      String string3 = StringUtils.substring("The character must not be null", 400);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf("]", "SGoac`r&5L/ FL>gc", (-537));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substring("The character must not be null", 59, 0);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("]", "^ftzn");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.mid("]", 59, (-5460));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "]]]]]", (String) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "Re<Syn?x>~02Gpvyl");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "...", (-1362));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("8]HT\"0`XH:g:50>3?", "Re<Syn?x>~02Gpvyl");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">=FLQ";
      stringArray0[7] = ">=FLQ";
      stringArray0[2] = "Re<Syn?x>~02Gpvyl";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Re<Syn?x>~02Gpvyl";
      stringArray0[7] = ">=FLQ";
      stringArray0[8] = "8]HT\"X0`XH:g:50>3?";
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int1);
      
      String string3 = StringUtils.abbreviate("", (-1159), 101);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfAny("Re<Syn?x>~02Gpvyl", stringArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals(17, int2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("8]HT\"X0`XH:g:50>3?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "assuti";
      int int0 = 55296;
      char char0 = '=';
      // Undeclared exception!
      StringUtils.center("assuti", 55296, '=');
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "Re<Syn?x>~02Gpvyl");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 7);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "...", (-1362));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("8]HT\"X0`XH:g:50>3?", ">=FLQ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">=FLQ";
      stringArray0[1] = ">=FLQ";
      stringArray0[2] = "Re<Syn?x>~02Gpvyl";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[1] = "Re<Syn?x>~02Gpvyl";
      stringArray0[7] = ">=FLQ";
      stringArray0[8] = "8]HT\"X0`XH:g:50>3?";
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad("", 0, ';');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "Re<Syn?x>~02Gpvyl");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "...", (-1362));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("8]HT\"X0`XH:g:50>3?", ">=FLQ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">=FLQ";
      stringArray0[1] = ">=FLQ";
      stringArray0[2] = "Re<Syn?x>~02Gpvyl";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Re<Syn?x>~02Gpvyl";
      stringArray0[7] = ">=FLQ";
      stringArray0[8] = "8]HT\"X0`XH:g:50>3?";
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase("", "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.contains("Re<Syn?x>~02Gpvyl", '?');
      assertTrue(boolean0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) ">=FLQ", (CharSequence) ">=FLQ");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharBuffer charBuffer0 = StringUtils.defaultIfEmpty((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
      
      int int0 = StringUtils.lastIndexOf("?spu", "S)ne)L/", (-370));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains("S)ne)L/", ')');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("5bf-X<HzH$mK~#t2");
      assertEquals("5bf-X<HzH$mK~#t2", string0);
      assertNotNull(string0);
      
      String string1 = "0`xh:";
      int int0 = StringUtils.indexOfAnyBut("0`xh:", "7x2EAiQUDx&0qqK~a");
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.split("normalize", "0`xh:", (-225716157));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("7x2EAiQUDx&0qqK~a");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase("8]ht\"x0`xh:g:>=fgl", "7x2EAiQUDx&0qqK~a");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.mid("5bf-X<HzH$mK~#t2", (-1), 1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5", string2);
      assertNotNull(string2);
      
      String string3 = "os.arch";
      boolean boolean1 = StringUtils.equalsIgnoreCase("r[H+jgnAL87?ur^5I", "os.arch");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("normalize");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "5bf-X<HzH$mK~#t2", " 2QI*7tE");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.right("0`xh:", (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("os.arch", (-225716157), "8]ht\"x0`xh:g:>=fgl");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("os.arch", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase("8]ht\"x0`xh:g:>=fgl", "r[H+jgnAL87?ur^5I", 1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = "A:?%WqIu{";
      int int3 = StringUtils.lastIndexOfIgnoreCase("A:?%WqIu{", "1aMXMYirazws-4;5Xl>", (-1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = (-2022);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("A:@", (-1), (-2022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("TimeToLive of ", "TimeToLive of ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf("", 'z');
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(",E :$o_hK=&z", 1682, 2665);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ",E :$o_hK=&z", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('z'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.contains('z'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      arrayList0.trimToSize();
      assertFalse(arrayList0.contains('z'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.join(iterator0, "L");
      assertFalse(arrayList0.contains(",E :$o_hK=&z"));
      assertEquals("", string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase(" ~Y4WFm]", "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.join(iterator0, 'z');
      assertFalse(arrayList0.contains((-1)));
      assertEquals("", string3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string3);
      
      int int2 = StringUtils.countMatches("TimeToLive of ", "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      Stream<Object> stream0 = arrayList0.stream();
      assertFalse(arrayList0.contains((-1)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(stream0);
      
      String string4 = StringUtils.center((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.chomp("O fsp+vJo#*");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("O fsp+vJo#*", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int3);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      
      int int4 = StringUtils.indexOf("", '\\');
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      boolean boolean1 = StringUtils.isWhitespace(",E :$o_hK=&z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.remove("8>=flq0`xh:g:50>3?", '@');
      assertEquals("8>=flq0`xh:g:50>3?", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "t\"x0");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("re<syn?x>~02gpvyl", 7, 'f');
      assertFalse(string2.equals((Object)string0));
      assertEquals("re<syn?x>~02gpvyl", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches("5.0", "Rm(9:|z(q-Kyz1~J");
      assertEquals(0, int0);
      
      String string3 = StringUtils.remove("Fss e", '@');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Fss e", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase("float", "re<syn?x>~02gpvyl", (-874));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("re<syn?x>~02gpvyl");
      assertFalse(boolean0);
      
      String string4 = StringUtils.center("re<syn?x>~02gpvyl", (-874));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("re<syn?x>~02gpvyl", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("Fss e", "re<syn?x>~02gpvyl");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Fss e", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("float", 0, '*');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("float", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents("Fss e");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertEquals("Fss e", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.abbreviateMiddle("float", "{$GS[}/kv-L", 1417);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertEquals("float", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Fss e");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((String) null, "8>=flq0`xh:g:50>3?");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string9 = StringUtils.defaultString("Minimum abbreviation width with offset is 7", "t\"x0");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertEquals("Minimum abbreviation width with offset is 7", string9);
      assertNotNull(string9);
      
      boolean boolean3 = StringUtils.isEmpty("re<syn?x>~02gpvyl");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string10 = StringUtils.remove("1Gs=eUDIi:Yk}", '@');
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertEquals("1Gs=eUDIi:Yk}", string10);
      assertNotNull(string10);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8]ht\"x0`x>=flq0>3?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBefore("@7*+p4`[k", "@7*+p4`[k");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("8]ht\"x0`x>=flq0>3?", 983);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8]ht\"x0`x>=flq0>3?", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf("", "8]ht\"x0`x>=flq0>3?", 983);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase("xh:g:", "", 642);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '0';
      charArray0[2] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "8]ht\"x0`x>=flq0>3?", charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', '0', '/'}, charArray0);
      
      int int2 = StringUtils.ordinalIndexOf("", (String) null, 527);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isAlpha("xh:g:");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("@7*+p4`[k");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase((String) null, "");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.chop("Fs");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.chomp("ha.qsc}mb@");
      assertEquals("ha.qsc}mb@", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("ha.qsc}mb@", "ha.qsc}mb@");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains("illegalargumentexceptionoccurredduringreo.^g+ats\",>tv)7", 'V');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split((String) null, 'V');
      assertNull(stringArray0);
      
      String string1 = StringUtils.chomp("\"q5v?V*m?D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"q5v?V*m?D", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\"q5v?V*m?D", (CharSequence) "\"q5v?V*m?D");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("ha.qsc}mb@");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.remove("4.9", 'V');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4.9", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("we&V8B#k(_4WrR!U8", "2W3}&VY+$iN");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.substringBetween("ha.qsc}mb@", "\"q5v?V*m?D", "C");
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("?P `R>4dkV^@>QW/l@n", "WU@[^+r", (String) null);
      assertNull(string5);
      
      int int1 = StringUtils.length("ha.qsc}mb@");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String[] stringArray2 = StringUtils.substringsBetween("8]ht>=flqxh:g:50>3?", "", "ha.qsc}mb@");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(0, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string0);
      assertEquals(0, enumSet0.size());
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 4114);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", ":g:50");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween((String) null, ":g:50", "yq[L?E)1.hI|");
      assertNull(string1);
      
      String string2 = StringUtils.mid((String) null, 524, 527);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "x_x_~");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("v", 0, 'Z');
      assertEquals("v", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIV1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertEquals("cv-qociv1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "T1_@'Zx4^+");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Strings must not be null", 5, "Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("'upQWV", 5, 12);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("V", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 685;
      String string0 = StringUtils.repeat("4", 685);
      assertEqualsstring0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance("4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444", "4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.leftPad("\"gMiLioO |pljG`Z", 32, "{3+\"5=");
      assertEquals("{3+\"5={3+\"5={3+\"\"gMiLioO |pljG`Z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("xZVYj~q%_U\u0002ObQ", 1646);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xZVYj~q%_U\u0002ObQ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("{3+\"5=");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xZVYj~q%_U\u0002ObQ";
      stringArray0[1] = "xZVYj~q%_U\u0002ObQ";
      boolean boolean1 = StringUtils.startsWithAny("xZVYj~q%_U\u0002ObQ", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf("xZVYj~q%_U\u0002ObQ", "0`xh", 32);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '6';
      charArray0[2] = 'H';
      charArray0[3] = 'F';
      int int1 = StringUtils.indexOfAny((CharSequence) "{3+\"5={3+\"5={3+\"\"gMiLioO |pljG`Z", charArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {')', '6', 'H', 'F'}, charArray0);
      
      int int2 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("{3+\"5=");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{3+\"5=", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8]ht>=flqxh:g:50>3?");
      assertEquals("8]ht>=flqxh:g:50>3?", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("8]ht>=flqxh:g:50>3?");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("8]ht>=flqxh:g:50>3?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "8]ht>=flqxh:g:50>3?";
      objectArray0[1] = (Object) "8]ht>=flqxh:g:50>3?";
      objectArray0[2] = (Object) "8]ht>=flqxh:g:50>3?";
      objectArray0[3] = (Object) "8]ht>=flqxh:g:50>3?";
      objectArray0[4] = (Object) "8]ht>=flqxh:g:50>3?";
      objectArray0[5] = (Object) "8]ht>=flqxh:g:50>3?";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "8]ht>=flqxh:g:50>3?";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-706), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -706
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToEmpty("T8|y");
      assertEquals("T8|y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("T8|y");
      assertTrue(string1.equals((Object)string0));
      assertEquals("T8|y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("WE&BA");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WE&BA", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("T8|y");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "WE&BA", "T8|y");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center((String) null, 48, "]z5/Cd%Cxm&@,0TLj");
      assertNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "WE&BA", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TimeToLive of ";
      int int0 = StringUtils.lastIndexOfAny("TimeToLive of ", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trim("TimeToLive of ");
      assertEquals("TimeToLive of", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "TimeToLive of ", (CharSequence) "TimeToLive of");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string1 = StringUtils.abbreviateMiddle("u>rYU6gS#r;rA-", "B#+{e(.3O]", 4979);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u>rYU6gS#r;rA-", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "TimeToLive of ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "u>rYU6gS#r;rA-";
      String string2 = StringUtils.join(objectArray0, '-', 13, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.lastIndexOfAny("java.vm.vendcr", stringArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.rightPad("", 89, '-');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-----------------------------------------------------------------------------------------", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "IllegalArgumentExceptionoccurredduring1.6backcompatcode");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[4] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(24, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", (-3218), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.stripStart("n)E@'r", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("n)E@'r", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, int3);
      
      String string5 = StringUtils.rightPad("IllegalArgumentExceptionoccurredduring1.6backcompatcode", (-101), "n)E@'r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("n)E@'r", 5);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertEquals("n)E@'r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals(0, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("xh:g:", "wgG0!GA", "n)E@'r");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "IllegalArgumentExceptionoccurredduring1.6backcompatcode");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[4] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", (-3183), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("?wc,r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = "n)E@'r";
      String string5 = StringUtils.stripStart("n)E@'r", "");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("n)E@'r", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("\"(:}#d/4r", "S", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("Cannot pad a negative amount: ", (String) null, 0);
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("A", "6V@Ai4w].");
      assertFalse(string2.equals((Object)string1));
      assertEquals("A", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "A", (String) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeStartIgnoreCase("java.awt.graphicsenv", "\"(:}#d/4r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java.awt.graphicsenv", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace((String) null, (String) null, "java.awt.graphicsenv", 567);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.defaultString(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(";Tmok6+f~v}qt", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf(" vs ", ";Tmok6+f~v}qt", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Tmok6+f~v}qt";
      stringArray0[1] = "";
      stringArray0[2] = " vs ";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ";Tmok6+f~v}qt", (CharSequence) " vs ");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";Tmok6+f~v}qt", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ";Tmok6+f~v}qt");
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";Tmok6+f~v}qt";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ";Tmok6+f~v}qt";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ";Tmok6+f~v}qt";
      String string3 = StringUtils.join(objectArray0, "-uXfv");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(";Tmok6+f~v}qt", 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(";Tmok6+f~v}qt", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("The character must not be null", ";Tmok6+f~v}qt", 0, 1151);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(";Tmok6+f~v}qt", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase("I&", "", (-165));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("java.awt.headless");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int5 = StringUtils.indexOfIgnoreCase("", " vs ");
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals((-1), int5);
      
      String string6 = StringUtils.center("", 16, "', is neither of type Map.Entry nor an Array");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("', is ne', is ne", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ER ;Td;(*o", "ER ;Td;(*o");
      assertNull(string0);
      
      String string1 = StringUtils.center(" ", 90, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("", "", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, "`hMwP^");
      assertNull(string2);
      
      String string3 = StringUtils.substring("The character must not be null", 400);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf("", "SGoac`r&5L/ FL>gc", (-537));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring("The character must not be null", 59, 0);
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "^ftzn");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.mid("TG,u[Rk~ojH2", 59, (-5460));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle("the chapz`n+si*k(bsrdnzoe null", "|s", 4);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("t|sl", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "haracter must not";
      String string1 = StringUtils.chomp("haracter must not", "haracter must not");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "haracter must not");
      assertEquals(0, int0);
      
      String string2 = "}N^W~v9qa9 }v^!fx";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "haracter must not", "}N^W~v9qa9 }v^!fx");
      assertFalse(boolean0);
      
      String string3 = "awt.toolkit";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("awt.toolkit", 1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "t\"x0`";
      int int0 = StringUtils.lastIndexOfIgnoreCase("t\"x0`", "XJIT", 1);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("NoSuchFieldException occurred during 1.6 backcompat code", ", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = null;
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "t\"x0`");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = "6ph#B*Kz?g";
      String string3 = StringUtils.left("6ph#B*Kz?g", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.center("=SE;B#6Xxsw", 850, '1');
      assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111=SE;B#6Xxsw11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("=SE;B#6Xxsw");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111=SE;B#6Xxsw11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.removeEnd("r-q,2UD`i0TYRk.:", "wY* H7^@bxmH-:FUN5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("r-q,2UD`i0TYRk.:", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.contains("S", (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((String) null, "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111=SE;B#6Xxsw11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", 850);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '(';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      boolean boolean3 = StringUtils.containsNone((CharSequence) "wY* H7^@bxmH-:FUN5", charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'1', '1', '(', '1', '1', '1', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("TimeToLive of ", "Z0N3=amI");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("Z0N3=amI");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("TimeToLive of ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.mid("c&l{\"", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Class<Locale.Category> class1 = Locale.Category.class;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean2 = enumSet0.add(locale_Category0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean2);
      assertEquals(2, enumSet0.size());
      assertSame(class0, class1);
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(2, enumSet1.size());
      assertNotNull(enumSet1);
      assertSame(class1, class0);
      assertNotSame(enumSet1, enumSet0);
      
      String string1 = StringUtils.join(iterator0, 'q');
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("DISPLAYqFORMAT", string1);
      assertEquals(2, enumSet0.size());
      assertNotNull(string1);
      assertSame(class0, class1);
      assertNotSame(enumSet0, enumSet1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("TimeToLive of ");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.countMatches("h1qSPZ2Ei4y00`", "Y");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Y", "Y");
      assertTrue(boolean0);
      
      String string0 = StringUtils.swapCase("h1qSPZ2Ei4y00`");
      assertEquals("H1Qspz2eI4Y00`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("H1Qspz2eI4Y00`", "6~,MtbYhd");
      assertTrue(string1.equals((Object)string0));
      assertEquals("H1Qspz2eI4Y00`", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf("`^", 'm');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replace("Y", "java.awt.", "Arguments cannot both be null", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("Y", "Y", "n)e@'r");
      assertNull(string3);
      
      int int2 = StringUtils.indexOf("The stripAccents(String) method is not supported until Java 1.6", 'm');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(25, int2);
      
      String string4 = "km%\\uwd/+ub";
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", string4, 25);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.ordinalIndexOf("<|KILBl~WPC~`BOx6;J", (String) null, 77);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((String) null, "[d}`mD^St\"x0`", (-1));
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "x_x_~");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("CV-qOcIV1>'8E9%", 0, 'Z');
      assertEquals("CV-qOcIV1>'8E9%", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIV1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertEquals("cv-qociv1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "T1_@'Zx4^+");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(55, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", 55, (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("wn{04m+ihboz>", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("wn{04m+ihboz>", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.stripStart("n)E@'r", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("n)E@'r", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, int3);
      
      String string5 = StringUtils.center("n)E@'r", 5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("n)E@'r", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertEquals(0, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      int int4 = StringUtils.indexOfIgnoreCase("wn{04m+ihboz>", "n)E@'r");
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = treeSet0.add(charBuffer0);
      assertTrue(treeSet0.contains(charBuffer0));
      assertTrue(boolean0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>((SortedSet<CharBuffer>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(treeSet0.contains(charBuffer0));
      assertTrue(treeSet1.contains(charBuffer0));
      assertNotNull(treeSet1);
      
      String string2 = StringUtils.substring("+a[>g]_", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("+a[>g]_", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "CX\"_xoa|`xstSB";
      stringArray0[3] = "K K`1]x";
      stringArray0[4] = "";
      stringArray0[5] = "!cw?O'";
      stringArray0[6] = "";
      stringArray0[7] = "";
      int int0 = StringUtils.indexOfAny("+a[>g]_", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.defaultString(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(";Tmok6+f~v}qt", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf(" vs ", ";Tmok6+f~v}qt", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Tmok6+f~v}qt";
      stringArray0[1] = "";
      stringArray0[2] = " vs ";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ";Tmok6+f~v}qt", (CharSequence) " vs ");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";Tmok6+f~v}qt", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ";Tmok6+f~v}qt");
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";Tmok6+f~v}qt";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ";Tmok6+f~v}qt";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ";Tmok6+f~v}qt";
      String string3 = StringUtils.join(objectArray0, "-uXfv");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(";Tmok6+f~v}qt", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals(";Tmok6+f~v}qt", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("The character must not be null", ";Tmok6+f~v}qt", 0, 1151);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals(";Tmok6+f~v}qt", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase("I&", "", (-165));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("java.awt.headless");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(";Tmok6+f~v}qt");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.left("U1YgR}zNVwx6ey}", 0);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("\"(:}#d/4r", "S", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("Cannot pad a negative amount: ", (String) null, 0);
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((String) null, '?');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Cannot pad a negative amount: ";
      stringArray0[1] = "|U>C`Sl7/ZF^v;a]j";
      stringArray0[2] = null;
      stringArray0[3] = "S";
      stringArray0[4] = "Cannot pad a negative amount: ";
      stringArray0[5] = null;
      stringArray0[6] = "r9P )A8?+RYaeknG";
      stringArray0[7] = null;
      stringArray0[8] = null;
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("A", "6V@Ai4w].");
      assertFalse(string2.equals((Object)string1));
      assertEquals("A", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "A", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeStartIgnoreCase("java.awt.graphicsenv", "\"(:}#d/4r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("java.awt.graphicsenv", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("|U>C`Sl7/ZF^v;a]j", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("|U>C`Sl7/ZF^v;a]j", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 685;
      String string0 = StringUtils.repeat("1.4", 685);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("1.4", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1.4", string1);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance(string0, "1.4");
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(2052, int1);
      
      String string2 = "";
      int int2 = StringUtils.indexOfIgnoreCase(string0, "", 2052);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2052, int2);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char char0 = 'Q';
      int int3 = StringUtils.lastIndexOf("K K`1]x", 'Q', 2052);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = 0;
      String[] stringArray0 = StringUtils.split(string0, "", 0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 685, (-2420));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "IllegalArgumentExceptionoccurredduring1.6backcompatcode");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[4] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(24, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", (-3183), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.stripStart("n)E@'r", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("n)E@'r", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, int3);
      
      String string5 = StringUtils.rightPad("IllegalArgumentExceptionoccurredduring1.6backcompatcode", (-101), "n)E@'r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("n)E@'r", 5);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertEquals("n)E@'r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertEquals(0, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string8 = StringUtils.substringBefore("The character must not be null", "");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("org.apache.commons.lanfcld=-,sutils", "0I{1s4l.{gW]%^%?");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultString("0I{1s4l.{gW]%^%?");
      assertEquals("0I{1s4l.{gW]%^%?", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("0I{1s4l.{gW]%^%?");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("%", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("0I{1s4l.{gW]%^%?");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("0I{1s4l.{gW]%^%?", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("0I{1s4l.{gW]%^%?", "u}4srg ", "{}");
      assertNull(string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "%";
      stringArray0[2] = "%";
      stringArray0[3] = null;
      stringArray0[4] = "0I{1s4l.{gW]%^%?";
      int int1 = StringUtils.lastIndexOfAny("0I{1s4l.{gW]%^%?", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(14, int1);
      
      String string4 = StringUtils.abbreviateMiddle(string3, "{}", (-4153));
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, (String) null, "?U&");
      assertNull(stringArray1);
      
      int int2 = StringUtils.indexOf((String) null, 'Z');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.getLevenshteinDistance("{}", "%");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2, int3);
      
      String string5 = StringUtils.swapCase("org.apache.commons.lanfcld=-,sutils");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANFCLD=-,SUTILS", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAlpha("?U&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.lowerCase("java.util.prefs.PreferencesFactory");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("java.util.prefs.preferencesfactory", string7);
      assertNotNull(string7);
      
      int int4 = StringUtils.indexOf("0I{1s4l.{gW]%^%?", 'Z');
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string8 = StringUtils.lowerCase("{}", locale0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("{}", string8);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string8);
      
      String string9 = StringUtils.join((Object[]) null, "Windows NT", 14, 2);
      assertNull(string9);
      
      String string10 = StringUtils.abbreviateMiddle("s*$P4I,f,!GRLt", string3, (-1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertEquals("s*$P4I,f,!GRLt", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("\"(:}#d/4r", "S", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("Cannot pad a negative amount: ", (String) null, 0);
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((String) null, '?');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Cannot pad a negative amount: ";
      stringArray0[1] = "|U>C`Sl7/ZF^v;a]j";
      stringArray0[2] = null;
      stringArray0[3] = "S";
      stringArray0[4] = "Cannot pad a negative amount: ";
      stringArray0[5] = null;
      stringArray0[6] = "r9P )A8?+RYaeknG";
      stringArray0[7] = null;
      stringArray0[8] = null;
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("A", "6V@Ai4w].");
      assertFalse(string2.equals((Object)string1));
      assertEquals("A", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "A", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeStartIgnoreCase("java.awt.graphicsenv", "\"(:}#d/4r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("java.awt.graphicsenv", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf(":Bo~-h|J8?s7D3G1x1", '?');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, int2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.defaultString(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(";Tmok6+f~v}qt", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf(" vs ", ";Tmok6+f~v}qt", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Tmok6+f~v}qt";
      stringArray0[1] = "";
      stringArray0[2] = " vs ";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ";Tmok6+f~v}qt", (CharSequence) " vs ");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStartIgnoreCase(";Tmok6+f~v}qt", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";Tmok6+f~v}qt", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ";Tmok6+f~v}qt");
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ";Tmok6+f~v}qt";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ";Tmok6+f~v}qt";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ";Tmok6+f~v}qt";
      String string3 = StringUtils.join(objectArray0, "-uXfv");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(";Tmok6+f~v}qt", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(";Tmok6+f~v}qt", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("The character must not be null", ";Tmok6+f~v}qt", 0, 1151);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(";Tmok6+f~v}qt", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase("I&", "", (-165));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("java.awt.headless");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.stripStart(";Tmok6+f~v}qt", ";Tmok6+f~v}qt");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, 'f');
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@171e17f1fjava.lang.Object@720047dbfjava.lang.Object@56229d87fjava.lang.Object@6d5c0b98fjava.lang.Object@a1a285d", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(23, int0);
      assertArrayEquals(new char[] {'W', 'f', 'f', 'f', 'f'}, charArray0);
      
      String string1 = StringUtils.chomp("Mac OS X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mac OS X", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Mac OS X");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("java.lang.Object@171e17f1fjava.lang.Object@720047dbfjava.lang.Object@56229d87fjava.lang.Object@6d5c0b98fjava.lang.Object@a1a285d", "Mac OS X", 23);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase("8(Mai)))(%.iWuN<", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceChars(".common", 'f', 'f');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".common", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) ".common", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, charArray0.length);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {'W', 'f', 'f', 'f', 'f'}, charArray0);
      
      String string3 = StringUtils.substring("org.apache.commons.fcld=-,lassutils", 5, 8192);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("pache.commons.fcld=-,lassutils", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("%\"h", 1949);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%\"h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf("", "\"0ocwxks", 1949);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf("%\"h", "%\"h", 1503);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("%\"h");
      assertTrue(arrayDeque0.contains("%\"h"));
      assertFalse(arrayDeque0.contains(""));
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.contains("%\"h"));
      assertFalse(arrayDeque0.contains(""));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, ':');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(arrayDeque0.contains("%\"h"));
      assertFalse(arrayDeque0.contains(""));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance("", "%\"h");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
      
      String string4 = StringUtils.defaultIfEmpty("%\"h", "\"0ocwxks");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("%\"h", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.String@0000000001";
      stringArray0[1] = "java.lang.String@0000000001";
      stringArray0[2] = "%\"h";
      int int3 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(3, stringArray0.length);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase("Kd;kVg@3e", "java.lang.String@0000000001", (-1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null, (-901));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("1){VKi=[~");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "1){VKi=[~");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((String) null, "", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf("0U<h5xDRi", "fA.s", (-1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "lonjg");
      assertNull(string4);
      
      String string5 = StringUtils.center("", 0, "(k@}NCeO`Y");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int4 = StringUtils.indexOf("?\"y2ThQ]", 'o', 8192);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.defaultString("a\"HB4OP$'");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("a\"HB4OP$'", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.center((String) null, 10, 's');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((String) null, "lassuti");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.leftPad("N>v#jo;~", 10, "N>v#jo;~");
      assertEquals("NN>v#jo;~", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.contains("N>v#jo;~", (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "N>v#jo;~";
      objectArray0[2] = (Object) "N>v#jo;~";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 's', 10, 723);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat(">LdQ[%@BD6\",Inm", 55296);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.substring("1w*Zk1f :", 937);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "java.awt.fonts", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("java.text.Normalizer$Form");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf("1w*Zk1f :", "");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(int0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = priorityQueue0.add(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(priorityQueue0.contains(0));
      assertFalse(priorityQueue0.contains(int0));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(priorityQueue0.contains(0));
      assertFalse(priorityQueue0.contains(int0));
      assertEquals(1, priorityQueue0.size());
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("java.text.Normalizer$Form", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.stripStart("/=-7,OR%;Y|mOq", "1w*Zk1f :");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/=-7,OR%;Y|mOq", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split("", 'A');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.remove("1w*Zk1f :", 'A');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1w*Zk1f :", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("", "1w*Zk1f :");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("1w*Zk1f :", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("java.text.Normalizer$Form", "/=-7,OR%;Y|mOq", "Linux");
      assertNull(string6);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("':`S", "", (-1));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("java.awt.fonts", "<LJf-<p'c[jG");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertEquals((-1), int2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      
      String string7 = StringUtils.abbreviateMiddle((String) null, "IllegalArgumentException occurred during 1.6 backcompat code", 18);
      assertNull(string7);
      
      Locale locale0 = new Locale("8]ht\"");
      assertEquals("8]ht\"", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8]ht\"", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string8 = StringUtils.upperCase((String) null, locale0);
      assertEquals("8]ht\"", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8]ht\"", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string8);
      
      int int3 = StringUtils.indexOf("8]>=flq0`xh:g:50>3?", "java.lang.Integer@0000000001", (-742));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "w";
      int int0 = StringUtils.lastOrdinalIndexOf("w", "w", 773);
      assertEquals((-1), int0);
      
      int int1 = (-1854);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("w", (-1854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'K';
      charArray0[2] = '6';
      charArray0[3] = '+';
      charArray0[4] = '6';
      charArray0[5] = 'F';
      charArray0[6] = '=';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "8nmlf.", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'^', 'K', '6', '+', '6', 'F', '='}, charArray0);
      
      String string1 = StringUtils.deleteWhitespace("8nmlf.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8nmlf.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd((String) null, "");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf("", "OS/2");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.left(" ", 820);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      
      CharBuffer charBuffer2 = charBuffer1.get(charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.position());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.limit());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertEquals(0, charBuffer2.remaining());
      assertFalse(charBuffer2.isDirect());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      
      boolean boolean0 = StringUtils.isWhitespace(charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      
      Buffer buffer0 = charBuffer1.rewind();
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.limit());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.isReadOnly());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(buffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        charBuffer1.limit(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.reverse("C");
      assertEquals("C", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("C");
      assertTrue(string1.equals((Object)string0));
      assertEquals("C", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("C");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = arrayList0.removeAll(linkedList0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertFalse(linkedList1.contains("C"));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      String string2 = Locale.lookupTag(arrayList0, linkedList1);
      assertFalse(linkedList1.contains("C"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertNull(string2);
      
      String string3 = locale0.toLanguageTag();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("zh-CN", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string3);
      assertSame(locale0, locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string4 = StringUtils.upperCase("C", locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("C", string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      
      String string5 = StringUtils.lowerCase("C");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("c", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, 57, (-1573));
      assertNull(string6);
      
      String string7 = StringUtils.capitalize((CharSequence) null);
      assertNull(string7);
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.allocate(57);
      assertEquals(57, charBuffer0.remaining());
      assertEquals(57, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(57, charBuffer0.length());
      assertEquals(57, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = linkedList1.removeFirstOccurrence(charBuffer0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList1.contains("C"));
      assertFalse(boolean2);
      assertEquals(57, charBuffer0.remaining());
      assertEquals(57, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(57, charBuffer0.length());
      assertEquals(57, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, linkedList1.size());
      
      charArray0[0] = 'K';
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'K'}, charArray0);
      
      String string8 = StringUtils.upperCase((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.removeStart("C", "c");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertEquals("C", string9);
      assertNotNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, "C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.replace(")]_%'3xoT,)pYPohQra", ")]_%'3xoT,)pYPohQra", ")]_%'3xoT,)pYPohQra", 2023);
      assertEquals(")]_%'3xoT,)pYPohQra", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches(")]_%'3xoT,)pYPohQra", "normalize");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "BT9sA8MC$0f^");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '1';
      charArray0[2] = 'd';
      charArray0[3] = 'm';
      charArray0[4] = 'v';
      charArray0[5] = 'q';
      charArray0[6] = 'a';
      charArray0[7] = '!';
      charArray0[8] = 'x';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ")]_%'3xoT,)pYPohQra", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'2', '1', 'd', 'm', 'v', 'q', 'a', '!', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.upperCase("m->|#8%_F&&?:");
      assertEquals("M->|#8%_F&&?:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf("win8$ws nt", "win8$ws nt", 127);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "tDKA3~");
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "tDKA3~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "tDKA3~";
      stringArray0[5] = "";
      stringArray0[4] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.removeStart(", '", ", '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = 'E';
      String[] stringArray0 = StringUtils.split("", 'E');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize((CharSequence) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.center("", 8192, 'T');
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("", "", (-1426));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("", "SN^AOdHAzu-mvhW", (-1426));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", (-1426), 'T');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "IllegalArgumentExceptionoccurredduring1.6backcompatcode");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[1] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[2] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[3] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[4] = (CharSequence) "IllegalArgumentException occurred during 1.6 backcompat code";
      charSequenceArray0[5] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      charSequenceArray0[6] = (CharSequence) "IllegalArgumentExceptionoccurredduring1.6backcompatcode";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(24, int1);
      
      int int2 = StringUtils.length(charSequenceArray0[2]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(60, int2);
      
      String string1 = StringUtils.mid("rEo.^G+Ats\",>tv)7", (-3183), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("rEo.^G+Ats\",>tv)7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("IllegalArgumentExceptionoccurredduring1.6backcompatcode", "rEo.^G+Ats\",>tv)7");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.stripStart("n)E@'r", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("n)E@'r", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[6], charSequenceArray0[0]);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(5, int3);
      
      String string5 = StringUtils.rightPad("IllegalArgumentExceptionoccurredduring1.6backcompatcode", (-101), "n)E@'r");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("n)E@'r", 5);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("n)E@'r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceEachRepeatedly(" ", stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(0, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertEquals(" ", string7);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Character must not be null";
      stringArray0[1] = "The Character must not be null";
      stringArray0[2] = "The Character must not be null";
      stringArray0[3] = "The Character must not be null";
      stringArray0[4] = "The Character must not be null";
      stringArray0[5] = "The Character must not be null";
      stringArray0[6] = "The Character must not be null";
      stringArray0[7] = "The Character must not be null";
      int int0 = StringUtils.indexOfAny("The Character must not be null", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceOnce("The Character must not be null", "", ".DsL>ZsE.X");
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("The Character must not be null", "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.difference("The Character must not be null", "Rb\u0001$;g;e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Rb\u0001$;g;e", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("The Character must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("0kGIWN+gs|", 0, "The Character must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0kGIWN+gs|", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "The Character must not be null", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.mid("SDo6kW G%Gb_UVK", 128, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("The Character must not be null");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("The Character must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("", 'i');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("The Character must not be null");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("The Character must not be null", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfIgnoreCase("", "", (-1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null, 4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.split("The Character must not be null", "");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "QYV&&<`EH-c\"R4e+&";
      String string2 = StringUtils.substringBetween("QYV&&<`EH-c\"R4e+&", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, stringArray1.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = "g&KxDR$qv\\)H#SP\"<";
      String string5 = StringUtils.removeStart("QYV&&<`EH-c\"R4e+&", "g&KxDR$qv)H#SP\"<");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("QYV&&<`EH-c\"R4e+&", string5);
      assertNotNull(string5);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      StringUtils.repeat("QYV&&<`EH-c\"R4e+&", "g&KxDR$qv)H#SP\"<", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 13, '?');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceEach("`D|V{c7w(u`c", (String[]) null, (String[]) null);
      assertFalse(string5.equals((Object)string2));
      assertEquals("`D|V{c7w(u`c", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("", "`D|V{c7w(u`c");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) null);
      assertNull(string7);
      
      String string8 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string8);
      
      boolean boolean0 = StringUtils.startsWithAny("", (String[]) null);
      assertFalse(boolean0);
      
      String string9 = StringUtils.replace("`D|V{c7w(u`c", (String) null, (String) null, 13);
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertEquals("`D|V{c7w(u`c", string9);
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf("N*`]c$z", '?', 13);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray1);
      
      String string10 = StringUtils.stripStart("", (String) null);
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string6));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'9', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("", (String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "H RT");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.difference("", "");
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny("#imW[+", (String[]) null);
      assertEquals((-1), int0);
      
      String string4 = null;
      String string5 = StringUtils.trim((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.replace((String) null, "#imW[+", (String) null);
      assertNull(string6);
      
      String[] stringArray1 = new String[0];
      String[] stringArray2 = StringUtils.stripAll(stringArray1, (String) null);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "|Y$suM");
      assertNull(stringArray3);
      
      String string7 = StringUtils.substringAfter("", "");
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((String) null, " in an array of ");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      HashSet<CharBuffer> hashSet0 = null;
      try {
        hashSet0 = new HashSet<CharBuffer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("6ZVx>U>m-~N^Q< 9|U4", "6ZVx>U>m-~N^Q< 9|U4", 0);
      assertEquals("6ZVx>U>m-~N^Q< 9|U4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("6kj9U'GGka&g#m%", 'N', '8');
      assertFalse(string1.equals((Object)string0));
      assertEquals("6kj9U'GGka&g#m%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("6ZVx>U>m-~N^Q< 9|U4", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("6ZVx>U>m-~N^Q< 9|U4", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("6ZVx>U>m-~N^Q< 9|U4", (String) null, "Bto^9rY9");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5.0", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.lowerCase("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.rightPad("Nh2Daj", (-3672), (String) null);
      assertEquals("Nh2Daj", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("Nh2Daj", 0, '`');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Nh2Daj", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Nh2Daj";
      String string2 = StringUtils.join(objectArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertEquals("Nh2Daj", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("Nh2Daj", (String) null, "tBg`lls#ec^lAr5 ", 0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Nh2Daj", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("u7\"", "NoSuchMethodException occurred during 1.6 backcompat code", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.remove("Nh2Daj", '`');
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("Nh2Daj", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "The stripAccents(String) method is not supported until Java 1.6");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" is not in the range '0' - '9'");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string3 = StringUtils.repeat("wzh", "HSz", 0);
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(20, stringArray0.length);
      assertEquals(20, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.remove("", 'z');
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("j$6no-K1/2xv))_", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceChars("", 'h', ')');
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("Isin", (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.right("", (-2906));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("foL%G ?x]D", 'Q', '\\');
      assertFalse(string1.equals((Object)string0));
      assertEquals("foL%G ?x]D", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("=g6zL,nfle\"K)", " vs ");
      assertNull(string2);
      
      String string3 = StringUtils.center(" vs ", 0, "NoSuchMethodException occurred during 1.6 backcompat code");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "java.awt.printerjob";
      String string1 = StringUtils.rightPad("java.awt.printerjob", (-186));
      assertTrue(string1.equals((Object)string0));
      assertEquals("java.awt.printerjob", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "\"OTM|");
      assertFalse(boolean0);
      
      String string2 = "IllegalAccessException occurred during 1.6 backcompat code";
      String string3 = StringUtils.removeEnd((String) null, "IllegalAccessException occurred during 1.6 backcompat code");
      assertNull(string3);
      
      String string4 = "Strings must not be null";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("java.awt.printerjob", "Strings must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.center((String) null, (-186), ';');
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOf("java.awt.printerjob", "user.dir", (-186));
      assertEquals((-1), int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains((-186)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertFalse(linkedList0.contains((-186)));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("~", "~", "z&Fr>X>qEq0 H/ jTA");
      assertEquals("z", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'W';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "z", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'>', 'W', '@', 'e'}, charArray0);
      
      String string1 = StringUtils.abbreviate(";>&A", 76, 76);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";>&A", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWithAny("{W[Uw0xi<be", (String[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.chomp("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("cCA2U0f8{rP(M:", "z", 76);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.leftPad("|+GD8|0>X(yiF]y", 76, '>');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>|+GD8|0>X(yiF]y", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("IllegalArgumentException occurred during 1.6 backcompat code", 3085);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, 'p', 433, 3085);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Windows NT", "8$");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("8$", (-1));
      assertEquals("8$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, "8$");
      assertTrue(string1.equals((Object)string0));
      assertEquals("8$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("^", "8$", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance("8$", "Windows NT");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase("8$", "8$");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.overlay((String) null, (String) null, 256, 0);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(">H", "+wj{x/ZEm c");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ">H");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray2[1] = "";
      stringArray2[2] = "8$";
      stringArray2[3] = "8$";
      int int3 = StringUtils.lastIndexOfAny("X%Y?}|L.KB*", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4, stringArray2.length);
      assertEquals(11, int3);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains("Windows NT"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(priorityQueue0.contains("Windows NT"));
      assertEquals("", string4);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("%#u]X{h_mx");
      assertEquals("%#u]X{h_mx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("/v3", '%', '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals("/v3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("/v3", 5, 56319);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("java.vendor", "%#u]X{h_mx", 5, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%#u]X{h_mxvendor", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("*.5SD", "@_vmS");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*.5SD", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("bKT]TJ4_s:W6E2", "", "java.vendor");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("bKT]TJ4_s:W6E2", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("HP-UX", 0, (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("HP-UX", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      stringArray0[2] = "pQ";
      stringArray0[3] = "";
      stringArray0[4] = "][WqD0rX8{U;";
      stringArray0[5] = "user.country";
      stringArray0[6] = "[>[Y-Y,zRQ*]|";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 36, '1');
      assertFalse(string1.equals((Object)string0));
      assertEquals("111111111111111111111111111111111111", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(arrayDeque0.contains(""));
      assertEquals("", string3);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", " is not in the range '0' - '9'");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rightPad("", (-1004), "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "", 36);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOf("", "...", (-3021));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) " is not in the range '0' - '9'";
      String string4 = StringUtils.join(objectArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, objectArray0.length);
      assertEquals(" is not in the range '0' - '9'", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.startsWith("@I]", "");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'f';
      charArray0[2] = 'a';
      charArray0[3] = 'K';
      charArray0[4] = ';';
      charArray0[5] = 'l';
      charArray0[6] = 'L';
      charArray0[7] = 'H';
      boolean boolean4 = StringUtils.containsOnly((CharSequence) " is not in the range '0' - '9'", charArray0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean4);
      assertArrayEquals(new char[] {'w', 'f', 'a', 'K', ';', 'l', 'L', 'H'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "@1";
      String string1 = StringUtils.replace("", "@1", "@1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "s4`R\"=.oju3g&J;qg";
      String string3 = null;
      int int0 = StringUtils.lastIndexOf("s4`R\"=.oju3g&J;qg", (String) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultIfEmpty("*NJNF", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("*NJNF", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("s4`R\"=.oju3g&J;qg", "73`;[0HHTlcEGzx5Yh", (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("s4`R\"=.oju3g&J;qg", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("1){VKi=[~");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.center("", 3832, '4');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "1){VKi=[~");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "long");
      assertNull(string5);
      
      String string6 = StringUtils.center("", 0, "(k@}NCeO`Y");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, '4', 8192, 76);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOf("?\"y2ThQ]", 'o', 8192);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf("", '4', 8192);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      String string8 = StringUtils.defaultString("1){VKi=[~");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("1){VKi=[~", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("user.home", "SP(be");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "SP(be", "SP(be");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.overlay("_?9\"HSgP", "SP(be", (-2195), 59);
      assertEquals("SP(be", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'F';
      charArray0[2] = '0';
      charArray0[3] = 'd';
      charArray0[4] = 'r';
      charArray0[5] = '4';
      int int2 = StringUtils.indexOfAny((CharSequence) "SP(be", charArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'3', 'F', '0', 'd', 'r', '4'}, charArray0);
      
      String string1 = StringUtils.center("jUzgB", (-2195), 'r');
      assertFalse(string1.equals((Object)string0));
      assertEquals("jUzgB", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = Locale.lookupTag(stack0, priorityQueue0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, priorityQueue0.size());
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("", locale0);
      assertEquals("", string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("", (-1781));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("byte");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("byte", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.leftPad("", 420);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, Integer.MAX_VALUE, 'a');
      assertNull(string5);
      
      String string6 = StringUtils.center("YD`~yqCW$Pe>1", 195, '!');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!YD`~yqCW$Pe>1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.uncapitalize("YD`~yqCW$Pe>1");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("yD`~yqCW$Pe>1", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOf("yD`~yqCW$Pe>1", 'Q', 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("", "", (-558));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center((String) null, (-1), 'L');
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'L');
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("", "", (-1));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      String[] stringArray3 = new String[9];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray3[3] = null;
      stringArray3[4] = "";
      stringArray3[5] = "";
      stringArray3[6] = "";
      stringArray3[7] = "UT-` ><'e6(3m";
      stringArray3[8] = null;
      String string3 = StringUtils.replaceEach("", stringArray2, stringArray3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(3, stringArray2.length);
      assertEquals(9, stringArray3.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("v", 0, 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("v", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIV1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("cv-qociv1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "T1_@'Zx4^+");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Strings must not be null", 5, "Strings must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("8]ht\"", "Qm1L}", "8]ht\"", 0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("8]ht\"", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("", '{', '{');
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "", 852);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.leftPad("", 0);
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", "n;}B");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.endsWith("", "");
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5);
      
      String string4 = StringUtils.center("", 0, "");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.startsWithIgnoreCase("", (String) null);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6);
      
      String string5 = StringUtils.rightPad((String) null, (-1), '~');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.stripEnd("RkmLGE1%D$I\"0HM\"g", "RkmLGE1%D$I\"0HM\"g");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", (-687));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("RkmLGE1%D$I\"0HM\"g");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("RkmLGE1%D$I\"0HM\"g");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length("RkmLGE1%D$I\"0HM\"g");
      assertEquals(17, int0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "RkmLGE1%D$I\"0HM\"g", "s");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.length("RkmLGE1%D$I\"0HM\"g");
      assertTrue(int1 == int0);
      assertEquals(17, int1);
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.chomp("", "v9$`OLw[0cgY@Xvw");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("v9$`OLw[0cgY@Xvw", "F|&l", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("v9$`OLw[0cgY@Xvw", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("v9$`OLw[0cgY@Xvw", "v9$`OLw[0cgY@Xvw");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Array must not be null", "", 17);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.strip("8j}[~{K", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("8j}[~{K", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("java.specification.name", 17, "8j}[~{K");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("java.specification.name", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "java.vm.vendor", (-687));
      assertNull(stringArray1);
      
      boolean boolean4 = StringUtils.isNotEmpty("java.specification.name");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "RkmLGE1%D$I\"0HM\"g", (char[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.trim((String) null);
      assertNull(string7);
      
      int int3 = StringUtils.countMatches("zlsIcTn(Hb=-|z,sh", "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string8 = StringUtils.substringBetween("", "java.specification.name");
      assertNull(string8);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase("1.Ly", "java.specification.name", 17);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      int int1 = StringUtils.lastIndexOfIgnoreCase("q?k@NKb}e#v6.\"ok[", "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "{{h";
      String string1 = StringUtils.substringBetween("", "", "{{h");
      assertNull(string1);
      
      String string2 = "(/3kPo";
      String[] stringArray1 = StringUtils.splitByCharacterType("(/3kPo");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Can't find a public method for ", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "$Uc^fz}?");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-2279), 'K');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("", 'K');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf("", "[/", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.mid("$Uc^fz}?", Integer.MAX_VALUE, 0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}}5Ea)^AavF^U");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("}}5Ea)^AavF^U", "}}5Ea)^AavF^U", "ur");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "F?p9j*", 0, 0);
      assertEquals(10, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("F?p9j*");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("F?p9j*");
      assertFalse(string2.equals((Object)string1));
      assertEquals("F?p9j*", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("", "...", 2572, 2197);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "}}5Ea)^AavF^U";
      stringArray1[2] = "...";
      stringArray1[3] = "}}5Ea)^AavF^U";
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, stringArray1.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOf("", "F?p9j*");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.difference("", "...");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = null;
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = "%[|-,";
      stringArray2[6] = null;
      stringArray2[7] = "...";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("F?p9j*", stringArray2, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.defaultString("_qF$4tV`JMX1");
      assertEquals("_qF$4tV`JMX1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("D>smH");
      assertFalse(string1.equals((Object)string0));
      assertEquals("d>smh", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "D>smH";
      charSequenceArray0[1] = (CharSequence) "D>smH";
      charSequenceArray0[2] = (CharSequence) "_qF$4tV`JMX1";
      charSequenceArray0[3] = (CharSequence) "d>smh";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("_qF$4tV`JMX1", 1942, (-2183));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 1962);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("D>smH"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addFirst("_qF$4tV`JMX1");
      assertFalse(linkedList0.contains("D>smH"));
      assertTrue(linkedList0.contains("_qF$4tV`JMX1"));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(55296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55296, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "S3rSTSZ=%s";
      stringArray0[2] = "xHOmObw(6E";
      stringArray0[3] = ">A2wKWiDzwR0-";
      stringArray0[4] = "4Vt";
      stringArray0[5] = "java.text.Normalizer$Form";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "~";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Mg-/IdJ3j{[5d[");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("+HT", 'W');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.indexOf("The stripAccents(String) method is not supported until Java 1.6", "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(".8pdtxd]*_AEv'");
      assertFalse(string1.equals((Object)string0));
      assertEquals(".8pdtxd]*_AEv'", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(">A2wKWiDzwR0-");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf("xfe!*`l@X1", "~", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.right((String) null, (-3174));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((String) null, "", 76);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("elzLR:TuE`=W7aM *", '}');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.leftPad("", (-498), '6');
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.join((Iterable<?>) null, '6');
      assertNull(string3);
      
      String string4 = StringUtils.center("", (-35));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "k", 0);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.defaultString("`aG&)a4RO>R_=_;Y");
      assertEquals("`aG&)a4RO>R_=_;Y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("`aG&)a4RO>R_=_;Y", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("`aG&)a4RO>R_=_;Y", string1);
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.mid("`aG&)a4RO>R_=_;Y", (-1), 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`aG&)a4RO>R_=_;Y";
      stringArray0[1] = "`aG&)a4RO>R_=_;Y";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "`aG&)a4RO>R_=_;Y";
      stringArray0[6] = "`aG&)a4RO>R_=_;Y";
      stringArray0[7] = "`aG&)a4RO>R_=_;Y";
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.removeStart("d]3p", "InvocationTargetException occurred during 1.6 backcompat code");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("d]3p", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf("", 'I');
      assertEquals((-1), int0);
      
      String string5 = StringUtils.reverse("plUM?N Fsn");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("nsF N?MUlp", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("tY5", 'e');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'e';
      charArray0[6] = 'I';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'e', 'e', 'I', 'I', 'I', 'e', 'I'}, charArray0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "nsF N?MUlp", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, charArray0.length);
      assertEquals(0, int2);
      assertArrayEquals(new char[] {'e', 'e', 'I', 'I', 'I', 'e', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" is less than 0: ", (String) null, (-1443));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("^k$mQ", "^k$mQ");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween(">QDkwC/'", "^k$mQ");
      assertNull(string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ">QDkwC/'";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) ">QDkwC/'";
      objectArray0[3] = (Object) "^k$mQ";
      objectArray0[4] = (Object) "^k$mQ";
      objectArray0[5] = (Object) "^k$mQ";
      objectArray0[6] = (Object) "^k$mQ";
      objectArray0[7] = (Object) "^k$mQ";
      String string1 = StringUtils.join(objectArray0, ')');
      assertEquals(8, objectArray0.length);
      assertEquals(">QDkwC/'))>QDkwC/')^k$mQ)^k$mQ)^k$mQ)^k$mQ)^k$mQ", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "^k$mQ", charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      
      String string2 = StringUtils.replaceChars("]._GfgtZw", "float", "_|p$~Yo$?mX");
      assertFalse(string2.equals((Object)string1));
      assertEquals("]._G_g~Zw", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("float");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("float", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("]._G_g~Zw");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("^k$mQ", "]._GfgtZw", 2123);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("float");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace(">QDkwC/'");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isBlank(">QDkwC/'))>QDkwC/')^k$mQ)^k$mQ)^k$mQ)^k$mQ)^k$mQ");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string4 = StringUtils.join(objectArray0, "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, objectArray0.length);
      assertEquals(">QDkwC/'>QDkwC/'^k$mQ^k$mQ^k$mQ^k$mQ^k$mQ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("float", (String) null, "YfC8cAr");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("float", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 3692;
      String string0 = StringUtils.overlay("NFD", (String) null, 3692, 2746);
      assertEquals("NFD", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("NFD", 147, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("2hKYK@W L", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "W";
      boolean boolean2 = StringUtils.startsWith("java.vm.version", "W");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("NFD");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut("", "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 0;
      String string3 = StringUtils.replace("", "IllegalAccessException occurred during 1.6 backcompat code", "normalize", 0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      LinkedHashSet<Integer> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Integer>(0, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(",J'}", (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("CYl\u0006d", (String) null, 263);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "CYl\u0006d", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.endsWith((String) null, "B0(T=;nqW6'~.E<@[d@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5T>gK1TK,m?a4", "BT9sA8MC$0f^");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf("BT9sA8MC$0f^", '0', 1585);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.deleteWhitespace("TEq#r\")5HK");
      assertFalse(string2.equals((Object)string1));
      assertEquals("TEq#r\")5HK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, "B0(T=;nqW6'~.E<@[d@");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("BT9sA8MC$0f^");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("bT9sA8MC$0f^", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.startsWithAny("B0(T=;nqW6'~.E<@[d@", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean3 = StringUtils.isNumericSpace("BT9sA8MC$0f^");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("PV6AR3rv", "PV6AR3rv");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "PV6AR3rv";
      stringArray0[5] = "PV6AR3rv";
      stringArray0[6] = "";
      stringArray0[7] = "PV6AR3rv";
      stringArray0[8] = "";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance("PV6AR3rv", "");
      assertEquals(8, int0);
      
      String string2 = StringUtils.chop("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("..", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.center("%", 1, '7');
      assertEquals("%", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains("user.name", '7');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%";
      stringArray0[1] = "%";
      stringArray0[2] = "%";
      stringArray0[3] = "%";
      stringArray0[4] = "%";
      stringArray0[5] = "%";
      stringArray0[6] = "%";
      stringArray0[7] = "user.name";
      stringArray0[8] = "%";
      int int0 = StringUtils.lastIndexOfAny("%", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("%%%%%%%user.name%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("java.specification.name", "/YimPZnfC", "%%%%%%%user.name%");
      assertNull(string2);
      
      String string3 = StringUtils.chop("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf((String) null, "%", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.chop("Bul]Oc[Oh9EZ&Mi");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Bul]Oc[Oh9EZ&M", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, '7');
      assertNull(stringArray1);
      
      String string5 = StringUtils.replaceChars("", '7', 's');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "java.text.Normalizer$Form", 125);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBeforeLast("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "os.version");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 125);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceEach("`.", stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("`.", string3);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '?';
      charArray0[2] = '(';
      charArray0[3] = 'a';
      charArray0[4] = '6';
      charArray0[5] = ';';
      charArray0[6] = 'I';
      charArray0[7] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("v?(a6;Ii", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'v', '?', '(', 'a', '6', ';', 'I', 'i'}, charArray0);
      assertNotNull(charBuffer0);
      
      boolean boolean1 = arrayList0.add(charBuffer0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      assertTrue(arrayList0.contains(charBuffer0));
      assertTrue(boolean1);
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("v?(a6;Ii", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertArrayEquals(new char[] {'v', '?', '(', 'a', '6', ';', 'I', 'i'}, charArray0);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertFalse(arrayList1.contains(""));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean2 = arrayList0.retainAll(arrayList1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList1.contains(""));
      assertFalse(arrayList0.contains(charBuffer0));
      assertTrue(boolean2);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, 'X');
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(arrayList0.contains(charBuffer0));
      assertEquals("", string4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny("", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.trimToNull("=");
      assertEquals("=", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut("", "-`)=,c{yd!<`");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) null, 'y', (-1), 1);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "015G$^m#k-%\"_GN*");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=", "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("~>HA< 'A5", 1, 'y');
      assertFalse(string2.equals((Object)string0));
      assertEquals("~>HA< 'A5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "-`)=,c{yd!<`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("", 'v');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.rightPad("", 1214);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("", (-76));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "1O", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("^^", "^^", "/`M8|xhrd6");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/`M8|xhrd6", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWith("", "-%=Hl*7I3]8g");
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultString("");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1O";
      stringArray0[1] = "";
      stringArray0[2] = "/`M8|xhrd6";
      stringArray0[3] = ";=2q0";
      stringArray0[4] = "C";
      int int0 = StringUtils.lastIndexOfAny("C", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "/`M8|xhrd6", (CharSequence) "/`M8|xhrd6");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substringAfter("+rANQitww", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("+rANQitww", string6);
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.split("/`M8|xhrd6", ">acX{4:0.=2x}", 2358);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.removeStart("`3", "");
      assertEquals("`3", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`3";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`3";
      stringArray0[4] = "`3";
      stringArray0[5] = "";
      stringArray0[6] = "`3";
      stringArray0[7] = "`3";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("`3", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: `3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-2030));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("G?Gx", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("G?Gx", "3y@K.F");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G?Gx", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("3y@K.F", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "G?Gx";
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.stripStart("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.indexOfAny("Strings must not be null", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((String) null, (String) null, 4);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.defaultString("/Kk=8D7@:tIdY#");
      assertEquals("/Kk=8D7@:tIdY#", string0);
      assertNotNull(string0);
      
      char char0 = 'i';
      int int2 = StringUtils.indexOf((String) null, 'i', (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      int int3 = StringUtils.lastIndexOf((String) null, "/Kk=8D7@:tIdY#");
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.lastIndexOf("", 's', (-1));
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("/Kk=8D7@:tIdY#");
      assertTrue(string1.equals((Object)string0));
      assertEquals("/Kk=8D7@:tIdY#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("1yxP m;5Z)");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1yxP m;5Z)", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      int int5 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int5);
      
      boolean boolean1 = StringUtils.isWhitespace("1yxP m;5Z)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat((String) null, (String) null, (-1));
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int6 = StringUtils.indexOfIgnoreCase("", "1yxP m;5Z)");
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertEquals((-1), int6);
      
      boolean boolean3 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Windows NT", (String) null);
      assertEquals("Windows NT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Windows NT", "N(686|R}S{Y&2");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Windows NT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("mtmiHL", "N(686|R}S{Y&2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("mtmiHL", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("mtmiHL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains("Windows NT", '4');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("N(686|R}S{Y&2", "mtmiHL", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Windows NT", "N(686|R}S{Y&2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isBlank("Windows NT");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.chomp("java.version");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("java.version", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "mtmiHL";
      stringArray2[1] = "java.version";
      stringArray2[2] = "Windows NT";
      String string4 = StringUtils.replaceEach("", stringArray2, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(2, stringArray1.length);
      assertEquals(3, stringArray2.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string5 = StringUtils.overlay("java.version", "", 0, 0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("java.version", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("Windows NT", 48);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Windows NT", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("0lyQ0", "java.text.Normalizer", 59);
      assertEquals("0lyQ0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "0lyQ0", "pC?-HY[qvw~v3[");
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("0lyQ0", (-82), (-2597));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pC?-HY[qvw~v3[";
      stringArray0[1] = "pC?-HY[qvw~v3[";
      stringArray0[2] = "pC?-HY[qvw~v3[";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.center("java.text.Normalizer", (-82), "!lHu~7oGJSb%C");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.text.Normalizer", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SchhOpTg\"?]=s?[C.Rw", "SchhOpTg\"?]=s?[C.Rw", 1767);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.remove("SchhOpTg\"?]=s?[C.Rw", ',');
      assertEquals("SchhOpTg\"?]=s?[C.Rw", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "SchhOpTg\"?]=s?[C.Rw", (CharSequence) "SchhOpTg\"?]=s?[C.Rw");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf("hPQ%", "", (-77));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 4);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 4);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'k');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase("Mac OS X", "ClassNotFoundException occurred during 1.6 backcompat code", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.contains("", "Gou=$)z)>r7");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = StringUtils.replaceEachRepeatedly("1.1", (String[]) null, (String[]) null);
      assertEquals("1.1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Gou=$)z)>r7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Gou=$)z)>r7", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("1.1", "Gou=$)z)>r7");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1.1", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("t7q~rP F  ;&mp", "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.remove((String) null, "java.endorsed.dirs");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("java.endorsed.dirs", 1354, "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("1.1");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string5 = StringUtils.stripStart("Gou=$)z)>r7", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("Gou=$)z)>r7", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Gou=$)z)>r7", (CharSequence) "t7q~rP F  ;&mp");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.reverseDelimited((String) null, '^');
      assertNull(string6);
      
      String string7 = StringUtils.stripStart("java.endorsed.dirs", "Cannot pad a negative amount: ");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("java.endorsed.dirs", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'f');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.replaceEachRepeatedly((String) null, stringArray1, (String[]) null);
      assertEquals(0, stringArray1.length);
      assertNull(string8);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace("Gou=$)z)>r7");
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("+\"ti!L", "+\"ti!L", "+\"ti!L");
      assertNull(stringArray0);
      
      int int0 = StringUtils.length("+\"ti!L");
      assertEquals(6, int0);
      
      int int1 = StringUtils.ordinalIndexOf("meK+k[", "", 6);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny("*{(QS0_!.JY@Ym", (String[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string0 = StringUtils.stripStart((String) null, "PH+jQO");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("+\"ti!L");
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOfIgnoreCase("PH+jQO", (String) null, 6);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string1 = StringUtils.replaceChars("", 'h', 'h');
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int4 = StringUtils.ordinalIndexOf("java.text.Normalizer", "", 6);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      String string2 = StringUtils.join((Object[]) null, 'h');
      assertNull(string2);
      
      String string3 = StringUtils.remove("", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("C", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBefore("WClg8&##;48", "WClg8&##;48");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripToNull("WClg8&##;48");
      assertFalse(string1.equals((Object)string0));
      assertEquals("WClg8&##;48", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ':';
      charArray0[2] = 'Z';
      charArray0[3] = '`';
      charArray0[4] = 'C';
      charArray0[5] = '(';
      charArray0[6] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'@', ':', 'Z', '`', 'C', '(', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("me{!dtM7{@Nm573jA");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains("daT.:<|2Nsc7>X|rh", '?');
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`S0>.1Nv\"", "me{!dtM7{@Nm573jA");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.split("tU[b+jhMc");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string0 = StringUtils.center((String) null, 13, 'w');
      assertNull(string0);
      
      int int0 = StringUtils.indexOf("daT.:<|2Nsc7>X|rh", '?', (-456));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBefore(" vs ", "me{!dtM7{@Nm573jA");
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String[] stringArray3 = StringUtils.split("Can't find a public method for ", '!');
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("daT.:<|2Nsc7>X|rh");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int1 = StringUtils.indexOfIgnoreCase(" vs ", "?O\"Dr@q/;E 7", (-456));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean4 = StringUtils.contains("", "tU[b+jhMc");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 59);
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertTrue(string1.equals((Object)string0));
      assertFalse(arrayList0.contains(""));
      assertEquals("", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'X';
      charArray0[2] = '{';
      charArray0[3] = ')';
      charArray0[4] = 'W';
      charArray0[5] = 'S';
      charArray0[6] = 'r';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'e', 'X', '{', ')', 'W', 'S', 'r'}, charArray0);
      
      String string2 = StringUtils.chomp("", "~neErvtv|w<'");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.replace("6pe2qv@", "", "`", 0);
      assertEquals("6pe2qv@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 0, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase("2-.<iOZ :U6l^}(QHC", "LINUX");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "2-.<iOZ :U6l^}(QHC";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "6pe2qv@";
      objectArray0[3] = (Object) "`";
      objectArray0[4] = (Object) "6pe2qv@";
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      assertEquals("2-.<iOZ :U6l^}(QHC6pe2qv@`6pe2qv@", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", (-388));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trim("Minimum abbreviation width with offset is 7");
      assertEquals("Minimum abbreviation width with offset is 7", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "Minimum abbreviation width with offset is 7");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.trimToNull("Minimum abbreviation width with offset is 7");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertNotNull(string1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque1, '8');
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertEquals("", string2);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(string2);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      
      String string3 = StringUtils.repeat((String) null, 16);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayDeque1;
      objectArray0[1] = (Object) arrayDeque0;
      objectArray0[2] = (Object) "Minimum abbreviation width with offset is 7";
      objectArray0[3] = (Object) null;
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, objectArray0.length);
      assertEquals("[][]Minimum abbreviation width with offset is 7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.replace("4>3", "4>3", "4>3");
      assertEquals("4>3", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("4>3", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4>3";
      stringArray0[1] = "";
      stringArray0[2] = "4>3";
      stringArray0[3] = "4>3";
      stringArray0[4] = "qJNt5V[5(A?N}qe";
      stringArray0[5] = "4>3";
      stringArray0[6] = "4>3";
      stringArray0[7] = "4>3";
      boolean boolean0 = StringUtils.startsWithAny("4>3", stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToNull("L_TEwE7^NuImFc9h`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L_TEwE7^NuImFc9h`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(":kGdE%aB0at", 256, "4>3");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>34>:kGdE%aB0at", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("IllegalArgumentException occurred during 1.6 backcompat code", "", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf("", 'N');
      assertEquals((-1), int0);
      
      String string5 = StringUtils.defaultIfEmpty((String) null, "u");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("u", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[0] = (Object) stringUtils0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) stringUtils0;
      objectArray0[6] = (Object) stringUtils0;
      objectArray0[7] = (Object) stringUtils0;
      objectArray0[8] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("n(NDKMwc4C628iW", "~<7/c~{eq>Iq\"eud", "$Ss");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substring("~<7/c~{eq>Iq\"eud", (-264), 192);
      assertEquals("~<7/c~{eq>Iq\"eud", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "n(NDKMwc4C628iW", 192, (-806));
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf("aW+na=fT}2ru86SS1", '2', (-1934));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.mid("~<7/c~{eq>Iq\"eud", (-806), 774);
      assertTrue(string2.equals((Object)string0));
      assertEquals("~<7/c~{eq>Iq\"eud", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((String) null, "n(NDKMwc4C628iW");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("~<7/c~{eq>Iq\"eud", 'b');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", 'B');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string3 = StringUtils.strip("Dq)(VNMr", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Dq)(VNMr", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("", "~<7/c~{eq>Iq\"eud");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'f');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replaceOnce((String) null, "org.apache.commons.lang3.StringUtils", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited(").G,wS6'", 'N');
      assertEquals(").G,wS6'", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("@", "@", 219);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils", locale0);
      assertFalse(string3.equals((Object)string2));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("@", "ORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("@", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("ORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(10, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.remove(").G,wS6'", 'J');
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(").G,wS6'", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.join(objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.contains("", 'V');
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf("", "InvocationTargetException occurred during 1.6 backcompat code", (-857));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "zf{a|?:$ p;)Y");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("zf{a|?:$ p;)Y", "2Xtm", "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.rightPad("The String must not be empty", 0, '^');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'c');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, '=');
      assertFalse(linkedList0.contains(""));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[2] = "";
      String string2 = StringUtils.replaceEach("IllegalArgumentException occurred during 1.6 backcompat code", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("hD,=ev|P>]{kh", "IllegalArgumentException occurred during 1.6 backcompat code", 0, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat codehD,=ev|P>]{kh", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "0wNPl$8oLnL;l\"6h J");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut("user.home", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.overlay("normalize", "normalize", 0, 0);
      assertEquals("normalizenormalize", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore(" PIa*|beb'", "normalize");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" PIa*|beb'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("[8[Nb'1[RYD&dS]8Y$", " PIa*|beb'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[8[Nb'1[RYD&dS]8Y$", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = ">sLdQ[%@BD6\"5,Inm";
      // Undeclared exception!
      StringUtils.leftPad(">sLdQ[%@BD6\"5,Inm", 55296, ">sLdQ[%@BD6\"5,Inm");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("", (String) null);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.replaceChars("0E)]x~vaFjZ<`c", "", ">JeW");
      assertEquals("0E)]x~vaFjZ<`c", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("i=@g$jHVMr", "i=@g$jHVMr", "8mu08/wZzZ(bJ`WA", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i=@g$jHVMr", string1);
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "0E)]x~vaFjZ<`c");
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      String string2 = StringUtils.upperCase("java.specification.vendor");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("JAVA.SPECIFICATION.VENDOR", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("", (String) null, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf("", '*');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, (String) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("%XJyh,", (-1), 'C');
      assertEquals("%XJyh,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "%XJyh,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayVariant();
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string2);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(""));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string3 = StringUtils.lowerCase("LINUX", locale0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("linux", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("LINUX", "%XJyh,", "linux");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(" i");
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("%XJyh,", "%XJyh,", "%XJyh,");
      assertNull(stringArray2);
      
      String string4 = StringUtils.remove("%XJyh,", "%XJyh,");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("%XJyh,", (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%XJyh,", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("", "os.version", "");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("Can't find a public method for ", "VmI7`bX^XL_Gwy9 8Gs");
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, '*');
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<Character> set1 = locale0.getExtensionKeys();
      assertFalse(set1.contains('*'));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("", string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = StringUtils.lowerCase("gUwQ{Lt4?", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("guwq{lt4?", string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string1);
      assertSame(locale0, locale1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Cannot pad a negative amount: ", "The stripAccents(String) method is not supported until Java 1.6");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot pad a negative amount: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("}f", 0, 4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}f", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("}f");
      assertFalse(boolean0);
      
      String string4 = StringUtils.capitalize("gUwQ{Lt4?");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("GUwQ{Lt4?", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The stripAccents(String) method is not supported until Java 1.6");
      assertEquals(23, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.reverse("guwq{lt4?");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("?4tl{qwug", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase("i|@Ya+S5CLy Tg_O", locale0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("i|@ya+s5cly tg_o", string6);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string6);
      assertSame(locale0, locale1);
      
      String string7 = StringUtils.substringBeforeLast("", "");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 13, '?');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "s ");
      assertEquals("s ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 13);
      assertNull(string4);
      
      String string5 = StringUtils.replaceEach("`D|V{c7w(u`c", (String[]) null, (String[]) null);
      assertFalse(string5.equals((Object)string2));
      assertEquals("`D|V{c7w(u`c", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("s ", "`D|V{c7w(u`c");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) null);
      assertNull(string7);
      
      String string8 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string8);
      
      boolean boolean0 = StringUtils.startsWithAny("", (String[]) null);
      assertFalse(boolean0);
      
      String string9 = StringUtils.replace("`D|V{c7w(u`c", (String) null, (String) null, 13);
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertEquals("`D|V{c7w(u`c", string9);
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.startsWith("`D|V{c7w(u`c", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((String) null, "`D|V{c7w(u`c");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf("^", '?', 13);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray1);
      
      String string10 = StringUtils.stripStart("s ", (String) null);
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertEquals("s ", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.leftPad("W{sm?j49`a7;cT{QYG", 0, "W{sm?j49`a7;cT{QYG");
      assertEquals("W{sm?j49`a7;cT{QYG", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "W{sm?j49`a7;cT{QYG", "W{sm?j49`a7;cT{QYG");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Iterator<?>) null, 'M');
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.leftPad((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.strip("W{sm?j49`a7;cT{QYG");
      assertTrue(string4.equals((Object)string0));
      assertEquals("W{sm?j49`a7;cT{QYG", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("The String must not be empty", "T]~]LIvezO*");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.contains("InvocationTargetException occurred during 1.6 backcompat code", ']');
      assertFalse(boolean0);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      Class<Locale.Category> class1 = Locale.Category.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Locale.Category> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, '7');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.isWhitespace("W{sm?j49`a7;cT{QYG");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.vendor.url", 0);
      assertEquals("java.vendor.url", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.vendor.url");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "...", 4096);
      assertEquals((-1), int0);
      
      String string0 = "\\";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 3064);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny("", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.chomp("X7pf1?dV6#bN?N5", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("X7pf1?dV6#bN?N5", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWith("I", "");
      assertTrue(boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(4096));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertFalse(priorityQueue0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.lowerCase("1NV]bO(UUJ`", locale0);
      assertEquals("1nv]bo(uuj`", string0);
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      
      String string1 = StringUtils.right("1NV]bO(UUJ`", 1881);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1NV]bO(UUJ`", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'i';
      charArray0[2] = 'W';
      charArray0[3] = 'E';
      charArray0[4] = '/';
      charArray0[5] = 'v';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "1NV]bO(UUJ`", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {':', 'i', 'W', 'E', '/', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = " ";
      stringArray0[6] = " ";
      stringArray0[7] = " ";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      stringArray1[1] = " ";
      stringArray1[2] = "";
      stringArray1[3] = " ";
      stringArray1[4] = " ";
      stringArray1[5] = "ClassNotFoundException occurred during 1.6 backcompat code";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(" ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0, (String) null);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("InvocationTargetException occurred during 1.6 backcompat code", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.contains((String) null, '}');
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "YkbWt_IH22J", (-487));
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f", (-1582));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f", "YkbWt_IH22J");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f", (CharSequence) "YkbWt_IH22J");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string3 = StringUtils.strip(" is less than 0: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("is less than 0:", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string4 = StringUtils.upperCase("java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("JAVA.LANG.OBJECT@65617737JAVA.LANG.OBJECT@601D2892JAVA.LANG.OBJECT@46885851JAVA.LANG.OBJECT@2734B75F");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut("I", "java.lang.Object@65617737java.lang.Object@601d2892java.lang.Object@46885851java.lang.Object@2734b75f");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string6 = StringUtils.upperCase(" is less than 0: ", locale0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(" IS LESS THAN 0: ", string6);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string6);
      
      String string7 = StringUtils.difference((String) null, "");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.reverse("`");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("`", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.split("JAVA.LANG.OBJECT@65617737JAVA.LANG.OBJECT@601D2892JAVA.LANG.OBJECT@46885851JAVA.LANG.OBJECT@2734B75F", '~');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0;g+s@1MZ>n)M9:09", "0;g+s@1MZ>n)M9:09");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("0;g+s@1MZ>n)M9:09", "PufPBEPf (VRd;", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("0;g+s@1MZ>n)M9:09", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertTrue(boolean0);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "PufPBEPf (VRd;", (CharSequence) "0;g+s@1MZ>n)M9:09");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("PufPBEPf (VRd;");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string1 = StringUtils.chop("e|%A(v*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("e|%A(v", string1);
      assertNotNull(string1);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("kh(h0-", "The character must not be null");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string2 = StringUtils.join((Object[]) stringArray1, ":@n'KwQ0=", 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray1.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.trimToEmpty("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean5 = StringUtils.isNumeric("");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string4 = StringUtils.replaceOnce("p=EYOsiWJ", (String) null, "java.vm.specification.vendor");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p=EYOsiWJ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.length("0;g+s@1MZ>n)M9:09");
      assertEquals(18, int0);
      
      String string5 = StringUtils.substringBefore((String) null, "The character must not be null");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringAfter("awt.toolkit", "awt.toolkit");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("awt.toolkit", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.chomp("NFD", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NFD", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.startsWithAny("(76]J0VJ", (String[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.defaultString(">=flq");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(">=flq", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace(">=flq");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string4 = StringUtils.stripStart("gL", "=JuZnozjQ2/");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("gL", string4);
      assertNotNull(string4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'W');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf("NFD", 'W');
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches("qv5>T5#/&", "awt.toolkit");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.repeat("NFD", (-684));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("java.specification.version", 0, "X+");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("java.specification.version", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "x_x_~");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("x_x_~", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIVOh1>'8E9%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("v", 0, 'Z');
      assertEquals("v", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIVOh1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertEquals("cv-qocivoh1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "line.separator");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Strings must not be null", 5, "Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 0, 'x');
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'x');
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, "", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.left("1.6", (-2720));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("HP-UX", "");
      assertFalse(string4.equals((Object)string3));
      assertEquals("HP-UX", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("0ES?W,Bk", (-2687), (-1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0ES?W,B", string5);
      assertNotNull(string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = ':';
      charArray0[2] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals("C:O", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'C', ':', 'O'}, charArray0);
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charBuffer0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals("C:O", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'C', ':', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.repeat(" sM", " sM", 237);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) " sM";
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      String string2 = StringUtils.join(objectArray0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceChars(string0, 'H', 'G');
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("6 i0QL/kw!", 237, 237);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "K{IIpx#P@HazBm8c", (-3241), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3241
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Udu[5u7'?-.Ckp", "Udu[5u7'?-.Ckp");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains("Udu[5u7'?-.Ckp", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 59);
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("v{Q\"SJx|R!R5Yn", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((Object[]) null, 'L', 59, 46);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(";),L", "hbF+UGzGr]f3sDiO%f", 46);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("(!116#.P|7&-q4\"");
      assertEquals("(!116#.P|7&-q4\"", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains("(!116#.P|7&-q4\"", "(!116#.P|7&-q4\"");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("x'e#lx?K}\"g,(SX.", 4181);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.center("", 1723, 'l');
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("", ",.K$OsOO7O'ej", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("java.text.Normalizer$Form");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.text.Normalizer$Form", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("", 0, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("", "tR6IA[g?Gz];(j");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize("");
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp((String) null, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertNull(string7);
      
      String string8 = StringUtils.abbreviateMiddle("Wo(k_N\"fBGh", (String) null, 1860);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("Wo(k_N\"fBGh", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tR6IA[g?Gz];(j";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "java.text.Normalizer$Form";
      stringArray0[4] = "Wo(k_N\"fBGh";
      stringArray0[5] = "i-A=##%;)D";
      String string9 = StringUtils.replaceEachRepeatedly(",Pl%Ku", stringArray0, stringArray0);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertEquals(6, stringArray0.length);
      assertEquals(",Pl%Ku", string9);
      assertNotNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("|]g${Q=F;IDUlN", 1723, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = StringUtils.indexOf("J", '\\', 5);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.left("J", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "J", "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEachRepeatedly("-", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.rightPad("c", 46, "c");
      assertEquals("cccccccccccccccccccccccccccccccccccccccccccccc", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf("cccccccccccccccccccccccccccccccccccccccccccccc", ':', 55296);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("c");
      assertFalse(string1.equals((Object)string0));
      assertEquals("c", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "c", charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "user.region");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.repeat("jo(AzNrC%:t?", "jo(AzNrC%:t?", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "7Lky+ g.rE6v,k", "7Lky+ g.rE6v,k", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 0, "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("sP`u+I ,=U*", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "~=4n(a!$m0";
      String string1 = "U)[";
      String string2 = StringUtils.removeStart("~=4n(a!$m0", "U)[");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~=4n(a!$m0", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "~=4n(a!$m0", "~=4n(a!$m0");
      assertFalse(boolean0);
      
      String string3 = "j:6P";
      String string4 = StringUtils.remove("j:6P", "");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("j:6P", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("yMtv'SG:XR", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid((String) null, 4096, 256);
      assertNull(string3);
      
      String string4 = StringUtils.trim("`>c<(");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("`>c<(", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`>c<(", (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWith("ClassNotFoundException occurred during 1.6 backcompat code", "Strings must not be null");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      int int1 = StringUtils.indexOfAny("&(e^^SuEt", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.reverseDelimited("8^*%yD=;z5(LW", '*');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%yD=;z5(LW*8^", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("%yD=;z5(LW*8^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.lastIndexOf("", "Strings must not be null", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", " ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ", '";
      String string1 = "Minimum abbreviation width is 4";
      String string2 = StringUtils.removeStart(", '", "Minimum abbreviation width is 4");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", '", string2);
      assertNotNull(string2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      String string3 = "!2QTRG_,'\"9A<5f-\\.U";
      boolean boolean0 = arrayDeque0.add("Minimum abbreviation width is 4");
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("Minimum abbreviation width is 4"));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      boolean boolean1 = arrayDeque0.add("!2QTRG_,'\"9A<5f-.U");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("Minimum abbreviation width is 4"));
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("Minimum abbreviation width is 4"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("Minimum abbreviation width is 4"));
      assertEquals("!2QTRG_,'\"9A<5f-.UMinimum abbreviation width is 4", string4);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = 7;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Minimum abbreviation width is 4", 7, 2585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.stripToNull("cD@LCr`-tuV?;1L@Y");
      assertEquals("cD@LCr`-tuV?;1L@Y", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "cD@LCr`-tuV?;1L@Y";
      stringArray0[2] = "cD@LCr`-tuV?;1L@Y";
      stringArray0[3] = "cD@LCr`-tuV?;1L@Y";
      stringArray0[4] = "cD@LCr`-tuV?;1L@Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "TVM xv");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.countMatches("TVM xv", "TVM xv");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.defaultString("{ipy!*AR;rz", "cD@LCr`-tuV?;1L@Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{ipy!*AR;rz", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J', 'J'}, charArray0);
      
      int int2 = StringUtils.indexOf((String) null, 'J', Integer.MAX_VALUE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.center("<a ||!-OY", 64);
      assertEquals("                           <a ||!-OY                            ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<a ||!-OY", "                           <a ||!-OY                            ", (-1301));
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replace("NFD", "2|&G\"mrWYsn2]a", "                           <a ||!-OY                            ", (-1185));
      assertFalse(string1.equals((Object)string0));
      assertEquals("NFD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("\"u8", "hl4dPCkRz ]NV8}^0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"u8", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = ':';
      charArray0[2] = 'K';
      charArray0[3] = 'S';
      charArray0[4] = '`';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "hl4dPCkRz ]NV8}^0", charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'f', ':', 'K', 'S', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("NoSuchFieldException occurred during 1.6 backcompat code", "Gp@+Ax");
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = 'O';
      charArray0[4] = '}';
      charArray0[5] = 'A';
      charArray0[6] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "NoSuchFieldException occurred during 1.6 backcompat code", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'F', 'd', '4', 'O', '}', 'A', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "hJ");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("bzMh%v{<0[Kf[K", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("hJ", 'R');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlpha("bzMh%v{<0[Kf[K");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.upperCase("*d\"", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*D\"", string1);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "SunOS", (-1), (-1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.upperCase("", locale0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("", "4.9", "");
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("w`vm_:5%JI", " is less than 0: ", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("w`vm_:5%JI", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "The character must not be null", 2496, 2496);
      assertEquals(2, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Y_3`\n", (-38), 2496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 1980);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "0");
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("QeJT.wQQ@)wJ3t@", "", 1980);
      assertEquals(15, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '~';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'x', 'g', 'g', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.join(objectArray0, (String) null, 0, (-1));
      assertEquals(2, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0, 901.96F);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertFalse(linkedHashSet0.contains(""));
      assertEquals("", string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf("", '{');
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(">_", "Minimum abbreviation width is 4", (-236));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) ">_", (char[]) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringUtils0;
      objectArray0[1] = (Object) stringUtils0;
      objectArray0[2] = (Object) stringUtils0;
      objectArray0[3] = (Object) stringUtils0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) stringUtils0;
      objectArray0[6] = (Object) stringUtils0;
      objectArray0[7] = (Object) stringUtils0;
      objectArray0[8] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B;?k", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "+1vZbk@@{ks[");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("", "v(cvNV@V9", "Qwb:");
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+1vZbk@@{ks[");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.endsWith("CCIt0S9", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.split("", "", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substringBeforeLast("", "]{_} ~c9%3+G%zj");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 685;
      String string0 = StringUtils.repeat("1.4", 685);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("java.runtime.name", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JAVA.RUNTIME.NAME", string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance(string0, "JAVA.RUNTIME.NAME");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.chop("Strings must not be null");
      assertEquals("Strings must not be nul", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Strings must not be nul");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Strings must not be null", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.capitalize("Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Strings must not be null");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "Strings must not be null";
      int int0 = StringUtils.indexOfAny("Strings must not be nul", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "rN<9)KXt]XK|.`/");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("rN<9)KXt]XK|.`/", 0);
      assertEquals("rN<9)KXt]XK|.`/", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("rN<9)KXt]XK|.`/", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("rN<9)KXt]XK|.`/");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      
      String string1 = StringUtils.join((Object[]) stringArray1, '@', 36, (-1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray1.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("rN<9)KXt]XK|.`/");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(14, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '@', (-1), 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.defaultString("VO;h9!Ubi*B", ")-V%0}a5=7fPIIQs.");
      assertEquals("VO;h9!Ubi*B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter(")-V%0}a5=7fPIIQs.", "");
      assertEquals(")-V%0}a5=7fPIIQs.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 57);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase(")-V%0}a5=7fPIIQs.");
      assertFalse(boolean0);
      
      String string3 = StringUtils.chomp("Z");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Z", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("path.separator", "P7hKJZy", "P7hKJZy");
      assertEquals("path.separator", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("7r~{()clj!", "$^8bEh");
      assertEquals("7r~{()clj!", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf("7r~{()clj!", "Windows 9");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringAfterLast("", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase("6i!!Aix.t)");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("6i!!aix.t)", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.reverseDelimited("Z", 'J');
      assertEquals("Z", string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.isEmpty("Z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.upperCase("@oDv3U,B u ");
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertEquals("@ODV3U,B U ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.difference("7r~{()clj!", "6i!!aix.t)");
      assertEquals("6i!!aix.t)", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      
      String string11 = StringUtils.overlay("@oDv3U,B u ", "8nueDG~", 57, 902);
      assertEquals("@oDv3U,B u 8nueDG~", string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertNotNull(string11);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Z", ")-V%0}a5=7fPIIQs.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string12 = StringUtils.substringBetween("qMg?^#%", "6i!!aix.t)", "");
      assertNull(string12);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("@oDv3U,B u 8nueDG~", "7r~{()clj!", (-2039));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string13 = StringUtils.substring("6i!!Aix.t)", 0);
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertEquals("6i!!Aix.t)", string13);
      assertNotNull(string13);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("6i!!Aix.t)");
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf("", "java.io.tmpdir");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "java.io.tmpdir";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "java.io.tmpdir";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      String string0 = StringUtils.join(objectArray0, 'Q', (-1), (-1));
      assertEquals(8, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "java.io.tmpdir";
      stringArray0[7] = "";
      int int1 = StringUtils.lastIndexOfAny(")cB1e7.", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o+e'tsK|mab", "", (-2720));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("=y/|p");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.contains("", '>');
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", (-2720));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray2.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null", 3507);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultString("Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Cannot pad a negative amount: ", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      String string2 = "tfVvSk6";
      String string3 = StringUtils.substringBeforeLast("tfVvSk6", "Strings must not be null");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("tfVvSk6", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("Or+T|w,3Mt");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("oR+t|W,3mT", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Cannot pad a negative amount: ", "Strings must not be null");
      assertFalse(boolean0);
      
      String string5 = StringUtils.right("Solaris", 0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Cannot pad a negative amount: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "", 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'y';
      charArray0[2] = 'f';
      charArray0[3] = '.';
      charArray0[4] = '5';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'F', 'y', 'f', '.', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "awt.toolkit");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "awt.toolkit");
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      String string0 = StringUtils.defaultString((String) null, " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("awt.toolkit");
      assertFalse(string1.equals((Object)string0));
      assertEquals("awt.toolkit", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("awt.toolkit");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance("awt.toolkit", " ");
      assertEquals(11, int0);
      
      String string2 = StringUtils.repeat("4.9", "", 11);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4.94.94.94.94.94.94.94.94.94.94.9", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches("awt.toolkit", "4.9");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "awt.toolkit", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "awt.toolkit", "wO4!");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string4 = StringUtils.substringBetween("awt.toolkit", "4O'.AE.t<");
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("awt.toolkit", "@H", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("awt.toolkit", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("Strings must not be null", "}0EGvFsk!p,-c");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Strings must not be null", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("user.country", "user.country", 2204);
      assertEquals("user.country", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("user.country", 1529, "user.country");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase("zrtmsqiv'", "user.country", 1529);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "zrtmsqiv'", (String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase("e>ZNpj<@MGm3t", "user.country", (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.removeEnd("user.country", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("user.country", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("PGIW[$VF,d/s");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("PGIW[$VF,d/s", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be nul", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Strings must not be nul");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, "", 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.reverse("VWS['V4g-Q!%i");
      assertEquals("i%!Q-g4V'[SWV", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "VWS['V4g-Q!%i";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "UpyCu!q";
      String string4 = StringUtils.replaceEach("UpyCu!q", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertEquals("UpyCu!q", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull(", Length: ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(", Length:", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("org.apache.commons.lang3.ArrayUtils", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertNotNull(string6);
      
      boolean boolean4 = StringUtils.isAllLowerCase("");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string7 = StringUtils.substringBeforeLast("2mT^", "");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("2mT^", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeStart("", "");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean5 = StringUtils.endsWith("Linux", "");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      boolean boolean6 = StringUtils.containsOnly((CharSequence) ", Length: ", "");
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "x_x_~");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, "CV-qOcIV1>'8E9%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("v", 0, 'Z');
      assertEquals("v", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("x_x_~");
      assertEquals(5, int0);
      
      String string2 = StringUtils.lowerCase("CV-qOcIV1>'8E9%");
      assertFalse(string2.equals((Object)string1));
      assertEquals("cv-qociv1>'8e9%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", "T1_@'Zx4^+");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Strings must not be null", 5, "Strings must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace("T1_@'Zx4^+");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.strip("Minimum abbreviation width with offset is 7", "B0(T=;nqW6'~.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is 7", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance("Minimum abbreviation width with offset is 7", "T1_@'Zx4^+");
      assertFalse(int1 == int0);
      assertEquals(43, int1);
      
      String string6 = StringUtils.repeat("wind8$s nt", 5);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("wind8$s ntwind8$s ntwind8$s ntwind8$s ntwind8$s nt", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.swapCase("3Hk<G^l\u0002&}j>4?g");
      assertEquals("3hK<g^L\u0002&}J>4?G", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("3Hk<G^l\u0002&}j>4?g", "", "IllegalAccessException occurred during 1.6 backcompat code");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3Hk<G^l\u0002&}j>4?g", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.stripToNull("3Hk<G^l\u0002&}j>4?g");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("3Hk<G^l\u0002&}j>4?g", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("3Hk<G^l\u0002&}j>4?g", "k");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("3H", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, 'E', 0, 0);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.contains(" vs ", 'E');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.stripToNull("&B,t");
      assertEquals("&B,t", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '>';
      charArray0[2] = 't';
      charArray0[3] = '}';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&B,t", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'%', '>', 't', '}'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("NoSuchFieldException occurred during 1.6 backcompat code", "NoSuchFieldException occurred during 1.6 backcompat code", 1);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.mid("NoSuchFieldException occurred during 1.6 backcompat code", 1, (-1023));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("", 'r', 'r');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeEnd("", ",X_ux*o_1t]w&F\"-");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("InvocationTargetException occurred during 1.6 backcompat code", "", (-2664));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String[] stringArray3 = StringUtils.stripAll(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      
      String string3 = StringUtils.chomp("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_3\"N:J2Hs'smX4%_";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "+(";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.substring("", (-579), (-579));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", (-1446));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 7, 'N');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("NNNNNNN", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("", (String) null, Integer.MAX_VALUE, 7);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("NNNNNNN");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.center("", (-1446), "");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat((String) null, "", Integer.MAX_VALUE);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string7 = StringUtils.removeEndIgnoreCase("NNNNNNN", "WPI");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("NNNNNNN", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is 4", "Minimum abbreviation width is 4", 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("Minimum abbreviation width is 4");
      assertEquals("Minimum abbreviation width is 4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is 4", "CyVw$>G*(ELs");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4", string1);
      assertNotNull(string1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<CharBuffer> class1 = CharBuffer.class;
      Class<Object> class2 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<CharBuffer> serviceLoader2 = ServiceLoader.loadInstalled(class0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      assertSame(class0, class1);
      assertNotSame(serviceLoader2, serviceLoader0);
      
      ServiceLoader<CharBuffer> serviceLoader3 = ServiceLoader.loadInstalled(class1);
      assertFalse(serviceLoader3.equals((Object)serviceLoader2));
      assertFalse(serviceLoader3.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader3.toString());
      assertNotNull(serviceLoader3);
      assertSame(class1, class0);
      assertNotSame(serviceLoader3, serviceLoader2);
      assertNotSame(serviceLoader3, serviceLoader0);
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, 'v');
      assertFalse(serviceLoader0.equals((Object)serviceLoader2));
      assertFalse(serviceLoader0.equals((Object)serviceLoader3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(string2);
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader2);
      assertNotSame(serviceLoader0, serviceLoader3);
      
      String string3 = StringUtils.chomp((String) null, "j=:4,XR*");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is 4", (String) null, 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.left((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.trimToEmpty("&dT[5.S6}[x~o");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("&dT[5.S6}[x~o", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("]Qf(\"", 0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("]Qf(\"", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllLowerCase("]Qf(\"");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'v');
      assertNull(stringArray1);
      
      String string7 = StringUtils.rightPad("&dT[5.S6}[x~o", 0);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("&dT[5.S6}[x~o", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.uncapitalize("&dT[5.S6}[x~o");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertEquals("&dT[5.S6}[x~o", string8);
      assertNotNull(string8);
      
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null, "Windows NT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf("", 'Z', (-1600));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.swapCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "NfTiD/X");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.difference("NfTiD/X", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumeric("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string3 = StringUtils.rightPad("", 3776, 'Z');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches("", "F<");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.remove("E!VI", 'v');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("E!VI", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isAlphanumeric("E!VI");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'v';
      charArray0[2] = 'Z';
      charArray0[3] = 'v';
      charArray0[4] = 'Z';
      charArray0[5] = 'j';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'Z', 'v', 'Z', 'v', 'Z', 'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.stripToNull("char");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("char", 378, "java.version");
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjava.versionjachar", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("char");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("char", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("char");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("char", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("", "H%0y-{");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("T^FIks8+)&5AMT", "EiU8m/,~q.CIvWC", "T^FIks8+)&5AMT");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "char";
      charSequenceArray0[1] = (CharSequence) "java.version";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y#=>E\"Cc@X&V:";
      stringArray0[1] = "";
      stringArray0[2] = "Y#=>E\"Cc@X&V:";
      int int0 = StringUtils.indexOfAny("Y#=>E\"Cc@X&V:", stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.center("Y#=>E\"Cc@X&V:", (-1506), ')');
      assertEquals("Y#=>E\"Cc@X&V:", string0);
      assertNotNull(string0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertFalse(linkedHashSet0.contains((-1506)));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains((-1506)));
      assertFalse(linkedList0.contains((-1506)));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(linkedHashSet0.contains(int0));
      assertFalse(linkedHashSet0.contains((-1506)));
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, '>');
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedHashSet0.contains(int0));
      assertFalse(linkedHashSet0.contains((-1506)));
      assertFalse(linkedList0.contains('>'));
      assertEquals("", string1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf("", "H!&{`(r6rwWwT]'I");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Y#=>E\"Cc@X&V:", (char[]) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray2 = StringUtils.split("p1vkXa(&=a='<@]7\"", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase("H!&{`(r6rwWwT]'I");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(13, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "p1vkXa(&=a='<@]7\"");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeEnd("{Qh", "vr}Hm%r0rXZ8h.m7{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{Qh", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.right("", 59);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("@fy{cp~`xGbQ", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("", "", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "=tCpT", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf(" Amj|8s 6N%>f2M42", "", 2254);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "The Array must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains("", 'f');
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("*_MZj0_bZ[Xf4q", 'f');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBefore("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The Array must not be null", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'f', 'f', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.overlay("", "NFD", (-1745), (-1745));
      assertEquals("NFD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) null, "", (-1100), (-1100));
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("", (-1100));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>(2680);
      assertEquals(0, vector0.size());
      assertEquals(2680, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string6 = StringUtils.join((Iterable<?>) vector0, '-');
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertEquals(0, vector0.size());
      assertEquals(2680, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
      
      String string7 = StringUtils.upperCase("");
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale.setDefault(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '_');
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("", 1083, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left("", 248);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut("byQ;Sw(kT@", "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.remove("", '_');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("byQ;Sw(kT@", (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("byQ;Sw(kT@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("[-oD(+(y?l", "7pQ~WZPENtVIS-1O4");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[1] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[2] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[3] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[4] = null;
      stringArray0[5] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[6] = "b?}Dx1HW;:~(ZBeTS?";
      stringArray0[7] = null;
      int int0 = StringUtils.indexOfAny("b?}Dx1HW;:~(ZBeTS?", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("K", "K");
      assertEquals(0, int0);
      
      String string0 = StringUtils.repeat(" vs ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase("K", "", (-2072));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches((String) null, "8");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase("IllegalAccessException occurred during 1.6 backcompat code", (String) null);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.repeat("QUalxVG@2yL/T=E", 2057);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, (char[]) null);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      
      String string2 = StringUtils.lowerCase(")bicLbo", locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(")biclbo", string2);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf(")bicLbo", 'k', 97);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("Strings must not be null", locale0);
      assertEquals("strings must not be null", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("rMy?K}U1Qxkb", "rMy?K}U1Qxkb");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "{OVF}wc{y` Y]H~$Hn");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf("{OVF}wc{y` Y]H~$Hn", "", 256);
      assertEquals(18, int0);
      
      String string2 = StringUtils.leftPad("6+\"|M&Us47]k", 3799, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("(%j{!", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(%j{!", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("user.timezone", "P9hDpvi");
      assertFalse(string1.equals((Object)string0));
      assertEquals("user.timezone", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf("P9hDpvi", "", 76);
      assertEquals(7, int0);
      
      int int1 = StringUtils.indexOf((String) null, 'A', 76);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.lowerCase("B`-s?Nb;k=<>S");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("b`-s?nb;k=<>s", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("user.timezone");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B`-s?Nb;k=<>S", "C", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.lowerCase("");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("P9hDpvi");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.reverseDelimited("g", 'A');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("g", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf("", 'A');
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("S:p0sP_!", "", (-3072));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("S:p0sP_!", "");
      assertEquals("S:p0sP_!", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "S:p0sP_!", charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.replace("S:p0sP_!", ";x~WwI]V@i%'P>>DP", "S:p0sP_!");
      assertTrue(string1.equals((Object)string0));
      assertEquals("S:p0sP_!", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(";x~WwI]V@i%'P>>DP", 'p');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.countMatches("o^5s(L%Joo", "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.overlay("", "", 0, (-695));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.replace("S:p0sP_!", (String) null, (String) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S:p0sP_!", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("S:p0sP_!", 0, "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("S:p0sP_!", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.difference(" vs ", "2{L");
      assertEquals("2{L", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("0Kc=#oQ&bC(uD) ", 3316, "2{L");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.leftPad("Windows", (-898), "file.separator");
      assertEquals("Windows", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(".e(q+", ".e(q+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("9ooc|_H");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9ooc|_H", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "", "9ooc|_H", 697);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.difference("JGfkzU*", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("", "", "Minimum abbreviation width with offset is 7");
      assertNull(string1);
      
      Vector<Integer> vector0 = new Vector<Integer>(0, 0);
      assertFalse(vector0.contains(0));
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(vector0.contains(0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.capacity());
      
      String string2 = StringUtils.join((Iterable<?>) vector0, '8');
      assertFalse(string2.equals((Object)string0));
      assertTrue(vector0.contains(0));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("Minimum abbreviation width with offset is 7", "wd?%");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is 7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter(">2r53^Yd?", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">2r53^Yd?", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlpha("Minimum abbreviation width with offset is 7");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = new Locale("n|72+!D", "5mq}oI\"g!");
      assertEquals("", locale0.getVariant());
      assertEquals("n|72+!d", locale0.getLanguage());
      assertEquals("5MQ}OI\"G!", locale0.getCountry());
      assertEquals("n|72+!d_5MQ}OI\"G!", locale0.toString());
      assertNotNull(locale0);
      
      String string5 = StringUtils.lowerCase("Index: ", locale0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("index: ", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("n|72+!d", locale0.getLanguage());
      assertEquals("5MQ}OI\"G!", locale0.getCountry());
      assertEquals("n|72+!d_5MQ}OI\"G!", locale0.toString());
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.repeat("Minimum abbreviation width with offset is 7", 0);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.center("user.name", 0, 'i');
      assertEquals("user.name", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("user.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";}6<DY!+2xSu<";
      stringArray0[1] = ";$J4Lbx";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly(";}6<DY!+2xSu<", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(";}6<DY!+2xSu<", string0);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 0, ";}6<DY!+2xSu<");
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd("=Z:hs[nt4}0", "BvPa&6bQw");
      assertFalse(string3.equals((Object)string0));
      assertEquals("=Z:hs[nt4}0", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "Lz+O_j{lD'oz@1", 65);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((String) null, "-?n}t3oZ#S'V4mL]");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOf("b", 'A', (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isNotEmpty("Lz+O_j{lD'oz@1");
      assertTrue(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "yF#Kv45HM>QG");
      assertNull(string0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("Lz+O_j{lD'oz@1"));
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertFalse(treeSet0.contains("Lz+O_j{lD'oz@1"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '7');
      assertFalse(treeSet0.contains("Lz+O_j{lD'oz@1"));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.center("<", 0, "vth/~TL");
      assertEquals("<", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase("<", ">(y{iGgn<tI?", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars((String) null, 'u', 'u');
      assertNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3, locale_Category4);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category4.equals((Object)locale_Category2));
      assertTrue(enumSet0.contains(locale_Category3));
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category4);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category4);
      assertSame(locale_Category3, locale_Category4);
      assertSame(locale_Category3, locale_Category0);
      assertNotSame(locale_Category3, locale_Category2);
      assertSame(locale_Category3, locale_Category1);
      assertSame(locale_Category4, locale_Category3);
      assertSame(locale_Category4, locale_Category0);
      assertNotSame(locale_Category4, locale_Category2);
      assertSame(locale_Category4, locale_Category1);
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category4.equals((Object)locale_Category2));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category3));
      assertTrue(enumSet1.contains(locale_Category3));
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertNotNull(enumSet1);
      assertSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category4);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category4);
      assertSame(locale_Category3, locale_Category4);
      assertSame(locale_Category3, locale_Category0);
      assertNotSame(locale_Category3, locale_Category2);
      assertSame(locale_Category3, locale_Category1);
      assertSame(locale_Category4, locale_Category3);
      assertSame(locale_Category4, locale_Category0);
      assertNotSame(locale_Category4, locale_Category2);
      assertSame(locale_Category4, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      String string2 = StringUtils.join((Iterable<?>) enumSet1, 'u');
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category4.equals((Object)locale_Category2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(enumSet0.contains(locale_Category3));
      assertTrue(enumSet1.contains(locale_Category3));
      assertEquals("DISPLAYuFORMAT", string2);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertNotNull(string2);
      assertSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category4);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category4);
      assertSame(locale_Category3, locale_Category4);
      assertSame(locale_Category3, locale_Category0);
      assertNotSame(locale_Category3, locale_Category2);
      assertSame(locale_Category3, locale_Category1);
      assertSame(locale_Category4, locale_Category3);
      assertSame(locale_Category4, locale_Category0);
      assertNotSame(locale_Category4, locale_Category2);
      assertSame(locale_Category4, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Caught a SecurityException reading the system property '");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("Caught a SecurityException reading the system property '", "");
      assertEquals("Caught a SecurityException reading the system property '", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("Caught a SecurityException reading the system property '");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Caught a SecurityException reading the system property '", "", 97);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray1, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, stringArray1.length);
      assertEquals("CaughtaSecurityExceptionreadingthesystemproperty'", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      
      String string3 = StringUtils.chop("NFD");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("NF", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring((String) null, 2413, (-1844));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("69%N#p");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStartIgnoreCase("69%N#p", "69%N#p");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("path.separator", 128, "1.6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("path.separator1.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.61.6", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains("", '=');
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.rightPad("6V?R o|=cME", 0);
      assertEquals("6V?R o|=cME", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance("6V?R o|=cME", "6V?R o|=cME");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("os.version", "6V?R o|=cME", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Z:P[Q", "Q6R[X", (-18));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'A');
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 8192;
      int int1 = StringUtils.indexOfIgnoreCase("L", "L", 8192);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf("", "", 8192);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = "FUgfDGN";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("FUgfDGN", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "E]lMjv&;Vd1h{xBZ";
      String string1 = StringUtils.substringAfter("E]lMjv&;Vd1h{xBZ", "S']ifOvD9pJyt");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string2);
      
      int int0 = (-3366);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("E]lMjv&;Vd1h{xBZ", (-3366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("Chd)1NS)Tf?<%", "Chd)1NS)Tf?<%");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToNull("Chd)1NS)Tf?<%");
      assertEquals("Chd)1NS)Tf?<%", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.CharUtils", "Minimum abbreviation width is 4");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("Chd)1NS)Tf?<%", 0, ')');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Chd)1NS)Tf?<%", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string3 = locale0.getDisplayName(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Chinesisch (China)", string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertFalse(priorityQueue0.contains(locale1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0);
      assertFalse(priorityQueue0.contains(locale1));
      assertFalse(list0.contains(locale1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string4 = "";
      Locale locale2 = Locale.forLanguageTag("");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("k?VUi,", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=k?vui,
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", "ny|Nc&SRn_");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(" ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.chop(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("Cannot pad a negative amount: ", "n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot pad a negative amount: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("{}", 201);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{}                                                                                                                                                                                                       ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf("java.compiler", '9', 1);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.startsWith("Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.trimToEmpty(" ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string5 = StringUtils.replaceChars("Cannot pad a negative amount: ", 'z', 'P');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Cannot pad a negative amount: ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, 'b', (-2501), (-2501));
      assertEquals(3, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("java.runtime.version", "java.runtime.version");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("java.runtime.version", "java.runtime.version");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf("QFd7ev~.RLI}zz", "java.runtime.version", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("", "DyP$NK;&>;oJzy]~O");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", (-1267));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("qvb9b:dxfM3", "qvb9b:dxfM3");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse("', has a length less than 2");
      assertEquals("2 naht ssel htgnel a sah ,'", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAnyBut("", "C<!Ss");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase("qvb9b:dxfM3", " is less than 0: ");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.defaultString("2 naht ssel htgnel a sah ,'", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("2 naht ssel htgnel a sah ,'", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("qvb9b:dxfM3", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Iterable<?>) null, 'g');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trim("-y.]1r5");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-y.]1r5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("-y.]1r5", " is less than 0: ", "Strings must not be null");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("-y.]1r5", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((CharSequence) null);
      assertNull(string6);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase("", "', has a length less than 2", 0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("", '6', 'D');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 76);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, '}');
      assertNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = '}';
      charArray0[3] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'}', '2', '}', '}'}, charArray0);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd((String) null, "RgOdw87A&6,\"(.");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.replaceChars("'q8p&$", "'q8p&$", "7\"");
      assertEquals("7\"", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("7\"", "Cannot pad a negative amount: ", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("7\"", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches("7\"", "Ac6A3M^H=Z8gVH");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'V');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "1.7");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1.7";
      stringArray0[1] = "1.7";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "1.7";
      boolean boolean1 = StringUtils.startsWithAny("1.7", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("+85/LOX", "+85/LOX");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "+85/LOX";
      stringArray0[1] = "+85/LOX";
      stringArray0[2] = ":l<0->";
      stringArray0[3] = "+85/LOX";
      stringArray0[4] = "+85/LOX";
      stringArray0[5] = "+85/LOX";
      stringArray0[6] = "+85/LOX";
      stringArray0[7] = "=JF}Uh#c";
      int int1 = StringUtils.indexOfAny("=JF}Uh#c", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.leftPad("W", 76, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(" ls4dh)", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-129));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains("W", "*','dA");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((String) null, "y{7+~bW5x4vSf I\"NPS");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase("", "N+yvh}");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.chomp("");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("122B", "*','dA");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("122B", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "N+yvh}", "*','dA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTW";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) " ls4dh)";
      objectArray0[4] = (Object) "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTW";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "N+yvh}";
      objectArray0[7] = (Object) "";
      String string6 = StringUtils.join(objectArray0, 'T');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(8, objectArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("java.library.path", ':');
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("org.apache.commons.lang3.ClassUtils");
      assertEquals("org.apache.commons.lang3.ClassUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.chomp("Udu[5u7'?-.Ckp");
      assertEquals("Udu[5u7'?-.Ckp", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Udu[5u7'?-.Ckp", (CharSequence) "Udu[5u7'?-.Ckp");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 59);
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("v{Q\"SJx|R!R5Yn", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((Object[]) null, 'X', 59, 46);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(";),L", "hbF+UGzGr]f3sDiO%f", 46);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(";I`35Rf:?F0IK=", ";I`35Rf:?F0IK=");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf("", 'r');
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '2');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.trim("");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("NfF", "%xL!h?;FT|<lx_!~", (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("NfF", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.strip((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.strip("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("", "");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("", 1);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = '?';
      charArray0[2] = '8';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'t', '?', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("GP=V4ae/dBVy90?$?`.", (String) null, (-2448));
      assertEquals("GP=V4ae/dBVy90?$?`.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Mac", "UAb])u3J", (-2448));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf("", 'r');
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle("NfF", "%xL!h?;FT|<lx_!~", (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("NfF", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.rightPad(" zGx2N#48ZH#U,t7Fx", 16, " zGx2N#48ZH#U,t7Fx");
      assertEquals(" zGx2N#48ZH#U,t7Fx", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", " zGx2N#48ZH#U,t7Fx", 0);
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split(" zGx2N#48ZH#U,t7Fx");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substringAfter(" zGx2N#48ZH#U,t7Fx", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", " zGx2N#48ZH#U,t7Fx", 16);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("", "TimeToLive of ", (-46));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.center("8xxG6sqHZx", 3323, 'T');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("jO,", "java.text.Normalizer");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("jO,", 3323, "java.text.Normalizer");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("jO,", string0, 3323);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "java.text.Normalizer");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.trim("]p~+@BV1@");
      assertEquals("]p~+@BV1@", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("]p~+@BV1@");
      assertEquals(9, int0);
      
      String string1 = StringUtils.difference("]p~+@BV1@", "]p~+@BV1@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("...", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("Solaris");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Solaris", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.leftPad("_i", 9);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("       _i", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("", (String) null, 9);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut("@.k", "       _i");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf(" f71I9!oAMBoC)8pkBv", 'v', 2500);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(18, int2);
      
      String string6 = StringUtils.stripEnd("", "gtjqJAKF$}f4^#");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("DGv", 4, '1');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("DGv1", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.startsWith("_i", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("+\nSkS5rv", "+\nSkS5rv");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains("4ek@Ie`RGqSu", '2');
      assertFalse(boolean0);
      
      String string0 = "";
      int int1 = StringUtils.indexOfAnyBut("+\nSkS5rv", "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = "ClassNotFoundException occurred during 1.6 backcompat code";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ClassNotFoundException occurred during 1.6 backcompat code", 59, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("byQ;Sw(kT@", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "7pQ~WZPENtVIS-1O4", (CharSequence) "byQ;Sw(kT@");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.trimToEmpty("7pQ~WZPENtVIS-1O4");
      assertEquals("7pQ~WZPENtVIS-1O4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Kfh+7eMSwj", '`');
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf("Kfh+7eMSwj", 'R', (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "", (-5396));
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 76, 's');
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("8Nmlf.>\"5Zl", "^oD|XB");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("", 76, '!');
      assertFalse(string1.equals((Object)string0));
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("className must not be null.", "^oD|XB", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.contains("", "^oD|XB");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripToEmpty("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", "");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(""));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string5 = StringUtils.join((Iterable<?>) set0, "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(set0.contains(""));
      assertEquals("", string5);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("thij", '(', 'n');
      assertEquals("thij", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("thij", "UDL9kQ9,T2?fnV");
      assertTrue(string1.equals((Object)string0));
      assertEquals("thij", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "thij", (CharSequence) "UDL9kQ9,T2?fnV");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("{z>@Ha{CVQ}", 0, (-2575));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase("{z>@Ha{CVQ}", "thij", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      Integer integer0 = new Integer((-3512));
      assertEquals((-3512), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = treeSet0.add(integer0);
      assertTrue(treeSet0.contains(integer0));
      assertTrue(boolean0);
      
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((Collection<? extends Integer>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(treeSet0.contains(integer0));
      assertTrue(treeSet1.contains(integer0));
      assertNotNull(treeSet1);
      
      Stream<Integer> stream0 = treeSet0.stream();
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet0.contains(integer0));
      assertNotNull(stream0);
      assertNotSame(treeSet0, treeSet1);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet1, "");
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(treeSet0.contains(integer0));
      assertTrue(treeSet1.contains(integer0));
      assertNotNull(string0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Integer@0000000001";
      stringArray0[1] = "";
      stringArray0[2] = ";D$gbG=HobCy!Q";
      int int0 = StringUtils.lastIndexOfAny("java.lang.Integer@0000000001", stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "tDKA3~");
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "tDKA3~";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "tDKA3~";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = "java.version";
      Integer integer0 = new Integer((-957));
      assertEquals((-957), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.offerFirst(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "java.version");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.stripToNull(":n");
      assertEquals(":n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":n", ":n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("IllegalAccessException occurred during 1.6 backcompat code", ":n", 1628);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("IllegalAccessException occurred during 1.6 backcompat code");
      assertFalse(string1.equals((Object)string0));
      assertEquals("illegalaccessexception occurred during 1.6 backcompat code", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, ":n");
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "l861[");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf("illegalaccessexception occurred during 1.6 backcompat code", 'C');
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 4904);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("", 4904, "");
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((String) null, "}/-_o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("}/-_o", "", (-2353));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.startsWithAny((String) null, stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf("", 'R', (-2353));
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(string1, "8ne9p}B9!");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Cannot pad a negative amount: ", "Cannot pad a negative amount: ", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf("9&eGH/n:I", 'h');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "9&eGH/n:I", "V,");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "}'%+/0YOV(t8");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("}'%+/0YOV(t8");
      assertEquals("}'%+/0YOV(t8", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Windows 9", "", 7);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("}'%+/0YOV(t8", ";&W!X{SVUl>Kh,s=rC(", ";&W!X{SVUl>Kh,s=rC(");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty("}'%+/0YOV(t8");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.strip("", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int int0 = 1419;
      String string0 = StringUtils.repeat("FwLvb.Fsa#w\"s1", 1419);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((String) null, string0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.reverseDelimited(string0, 'B');
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("`W$T mqh5?y>?Vm", '7');
      assertEquals("`W$T mqh5?y>?Vm", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "`W$T mqh5?y>?Vm", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, 363, "");
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "W[ v<aOzl`P[*");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) null, "", 0, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.repeat("", ".yc&5", 654);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.capitalize("{");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("{", "{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("zynM0jM8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zynM0jM8", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "zynM0jM8", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "java.class.path");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = StringUtils.lowerCase("XY_8=/+cz 3Rnp", locale1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xy_8=/+cz 3rnp", string1);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null, (-2342));
      assertNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.substringAfterLast("IllegalAccessException occurred during 1.6 backcompat code", "java.text.Normalizer");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      String string2 = StringUtils.stripStart((String) null, "");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chop("]h");
      assertEquals("]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("]");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]";
      stringArray0[1] = "]";
      stringArray0[2] = "]h";
      stringArray0[3] = "]";
      stringArray0[4] = "]";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("]", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("]h");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase("ht", (String) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad("~.JGU8Q6trTA|.", (-1), "]");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~.JGU8Q6trTA|.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("B^");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("B^", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '#';
      charArray0[2] = 'P';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "]", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'W', '#', 'P'}, charArray0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, stringArray0.length);
      assertEquals("]", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("java.text.Normalizer", "]", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.defaultString("]", "]");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("]", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("]", "Windows NT", 1874);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.chop("8]ht\"gl0`xh:g:>=flq");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("8]ht\"gl0`xh:g:>=fl", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" vs ", " vs ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("NFD", "", 56319);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripStart("", " vs ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 84);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.chomp(" vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}}5Ea)^AavF^U");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("}}5Ea)^AavF^U", "}}5Ea)^AavF^U", "ur");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "F?p9j*", 0, 0);
      assertEquals(10, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("F?p9j*");
      assertTrue(boolean0);
      
      String string2 = StringUtils.overlay("", "...", 2572, 2197);
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "}}5Ea)^AavF^U";
      stringArray1[2] = "...";
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, stringArray1.length);
      assertEquals("", string3);
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOf("", "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.difference("", "...");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = null;
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = "%[|-,";
      stringArray2[6] = null;
      stringArray2[7] = "...";
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray2, stringArray1);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(4, stringArray1.length);
      assertEquals(8, stringArray2.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray2);
      assertTrue(int1 == int0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(8, stringArray2.length);
      assertEquals(0, int1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int2 = StringUtils.lastIndexOf("...", '&');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.replaceChars("user.dir", "user.dir", "user.dir");
      assertEquals("user.dir", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("user.dir", "w;EJ%PU08%M,u`");
      assertTrue(string1.equals((Object)string0));
      assertEquals("user.dir", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "user.dir", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut("invocannot store xception occurred during 1.6 backcompat code", "w;EJ%PU08%M,u`");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripAccents("w;EJ%PU08%M,u`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("w;EJ%PU08%M,u`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("invocationtargetexcepcannot store  during 1.6 backcompat code", "invocannot store xception occurred during 1.6 backcompat code");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("invocationtargetexcepcannot store  during 1.6 backcompat code", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("invocannot store xception occurred during 1.6 backcompat code", "short", "qW?8:f#.S]MZ");
      assertNull(stringArray0);
      
      String string4 = StringUtils.defaultString("user.dir", (String) null);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("user.dir", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToEmpty("TimeToLive of ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("TimeToLive of", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("fwDQa@9");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast(";9!_KQ<c]Y9,y", "rQxkWj%Zj#q;{");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEnd("qW?8:f#.S]MZ", "C_YBD%X/{ JK;'/]");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("qW?8:f#.S]MZ", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.chomp("user.dir");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("user.dir", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.right("invocannot store xception occurred during 1.6 backcompat code", 0);
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.chop("user.dir");
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertEquals("user.di", string11);
      assertNotNull(string11);
      
      String string12 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.substringBetween("{}", "{}", "{}");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("=nj\"w_K6*", 511);
      assertEquals("                                                                                                                                                                                                                                                           =nj\"w_K6*                                                                                                                                                                                                                                                           ", string1);
      
      StringUtils.repeat((String) null, 255);
      int int0 = StringUtils.lastIndexOf((String) null, (String) null, 255);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'I';
      StringUtils.containsOnly((CharSequence) null, charArray0);
      StringUtils.indexOf("1.1", "CVB@J8f", (-1));
      String string2 = StringUtils.substringAfterLast("1.1", "8]ht\"x0`xh>=flq>3?");
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("8]ht\"x0`xh>=flq>3?");
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.indexOfAnyBut("a8368g3p^[F$", "^q%/AI$W9!R!");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringUtils.replace("&Y~2a)IqaI", "&Y~2a)IqaI", "', is neither of type Map.Entry nor an Array", 198);
      StringUtils.split("&Y~2a)IqaI", (String) null, (-493287490));
      StringUtils.swapCase("invocationtargetexcepcannot store  during 1.6 backcompat code");
      StringUtils.substringBetween("7JNB]95Bko", "INVOCATIONTARGETEXCEPCANNOT STORE  DURING 1.6 BACKCOMPAT CODE");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "INVOCATIONTARGETEXCEPCANNOT STORE  DURING 1.6 BACKCOMPAT CODE");
      CharBuffer.wrap((CharSequence) "&Y~2a)IqaI");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayList0.add((Object) locale_Category0);
      // Undeclared exception!
      try { 
        charBuffer0.subSequence(3, (-493287490));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null", 3507);
      StringUtils.defaultString("Strings must not be null");
      String string0 = "tfVvSk6";
      StringUtils.substringBeforeLast("tfVvSk6", "Strings must not be null");
      StringUtils.swapCase("Or+T|w,3Mt");
      String[] stringArray0 = StringUtils.split(" vs ");
      StringUtils.containsNone((CharSequence) "Strings must not be null", "Strings must not be null");
      StringUtils.right("Solaris", 0);
      StringUtils.isAlphanumericSpace("Strings must not be null");
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      StringUtils.substringAfter("awt.toolkit", "awt.toolkit");
      StringUtils.isAlpha("");
      StringUtils.containsIgnoreCase("8]ht\"x0`xh:g:>=flq", "gL");
      StringUtils.getCommonPrefix((String[]) null);
      StringUtils.isAlphaSpace("");
      StringUtils.chomp("NFD", "");
      StringUtils.startsWithAny("(76]J0VJ", (String[]) null);
      StringUtils.defaultString(">=flq");
      StringUtils.isNumericSpace(">=flq");
      String string0 = StringUtils.stripStart("gL", "=JuZnozjQ2/");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'W');
      StringUtils.indexOf("NFD", 'W');
      StringUtils.countMatches("qv5>T5#/&", "awt.toolkit");
      StringUtils.repeat("NFD", (-684));
      String string1 = StringUtils.center("java.specification.version", 0, "X+");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replace("r-q,2UD`i0TYRk.:wY* H7^@bxmH-:FUN5", "r-q,2UD`i0TYRk.:wY* H7^@bxmH-:FUN5", "SecurityException occurred during 1.6 backcompat code", 1);
      assertEquals("SecurityException occurred during 1.6 backcompat code", string0);
      
      String string1 = StringUtils.leftPad("SecurityException occurred during 1.6 backcompat code", (-1592), 'f');
      assertNotNull(string1);
      
      StringUtils.containsAny((CharSequence) "SecurityException occurred during 1.6 backcompat code", (char[]) null);
      String string2 = StringUtils.substringAfter("[d}`mD^St\"x0`", "r-q,2UD`i0TYRk.:wY* H7^@bxmH-:FUN5");
      assertEquals("", string2);
      
      StringUtils.remove("", 'f');
      String string3 = StringUtils.replaceChars("^YO6bk5mg", "SecurityException occurred during 1.6 backcompat code", "");
      assertEquals("^YO5", string3);
      
      StringUtils.lastIndexOf("\"(:}#d/4s", "SecurityException occurred during 1.6 backcompat code", 0);
      StringUtils.lastIndexOf("", "b ", (-526));
      int int0 = StringUtils.indexOf("^YO5", "", 91);
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.isNumeric("SecurityException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      StringUtils.stripEnd("", "");
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils.substringsBetween("", "", "");
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      String string0 = StringUtils.repeat("", "", 0);
      assertNotNull(string0);
      
      StringUtils.join((Object[]) null, "`hMwP^");
      String string1 = StringUtils.substring("The character must not be null", 400);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOf("", "SGoac`r&5L/ FL>gc", (-537));
      assertTrue(int1 == int0);
      
      StringUtils.substring("The character must not be null", 59, 0);
      StringUtils.isAsciiPrintable("");
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "^ftzn");
      assertEquals(0, stringArray0.length);
      
      StringUtils.mid("TG,u[Rk~ojH2", 59, (-5460));
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '_');
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("", 1083, "");
      StringUtils.endsWithIgnoreCase("", "");
      StringUtils.left("", 248);
      StringUtils.indexOfAnyBut("byQ;Sw(kT@", "");
      StringUtils.remove("", '_');
      StringUtils.center("byQ;Sw(kT@", (-1));
      String string1 = StringUtils.substringAfterLast("[-oD(+(y?l", "7pQ~WZPENtVIS-1O4");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils.equalsIgnoreCase("", "7pQ~WZPENtVIS-1O4");
      StringUtils.isNumericSpace("[-oD(+(y?l");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = string0;
      stringArray0[6] = "byQ;Sw(kT@";
      stringArray0[7] = "";
      stringArray0[8] = "[-oD(+(y?l";
      int int1 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringUtils.substringBefore("", "Re<Syn?x>~02Gpvyl");
      StringUtils.abbreviateMiddle("", "", 0);
      StringUtils.abbreviateMiddle("", "...", (-1362));
      StringUtils.lastIndexOfIgnoreCase("8]HT\"X0`XH:g:50>3?", ">=FLQ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">=FLQ";
      stringArray0[1] = ">=FLQ";
      stringArray0[2] = "Re<Syn?x>~02Gpvyl";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Re<Syn?x>~02Gpvyl";
      stringArray0[7] = ">=FLQ";
      stringArray0[8] = "8]HT\"X0`XH:g:50>3?";
      StringUtils.lastIndexOfAny("", stringArray0);
      StringUtils.indexOf("Re<Syn?x>~02Gpvyl", '7');
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "8]HT\"X0`XH:g:50>3?");
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("HA.QSc}Mb@", "HA.QSc}Mb@");
      assertEquals(0, int0);
      
      StringUtils.trimToNull("HA.QSc}Mb@");
      String[] stringArray0 = StringUtils.split("HA.QSc}Mb@", "ZRtmsqIv'", 0);
      StringUtils.replaceEachRepeatedly("ZRtmsqIv'", stringArray0, stringArray0);
      boolean boolean0 = StringUtils.isWhitespace("ZRtmsqIv'");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripToEmpty("Q-)Nrl+0eC,7TVYGd");
      assertEquals("Q-)Nrl+0eC,7TVYGd", string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("HA.QSc}Mb@", string1);
      
      String string2 = StringUtils.rightPad("ZRtmsqIv'", 1665, "HA.QSc}Mb@");
      boolean boolean1 = StringUtils.isNotBlank("HA.QSc}Mb@");
      StringUtils.capitalize(string2);
      StringUtils.split("GrFn>gH{0Cu");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ZRtmsqIv'", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals(3, stringArray1.length);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) string2, "Q-)Nrl+0eC,7TVYGd");
      assertTrue(boolean2 == boolean1);
      
      StringUtils.isAlpha("");
      StringUtils.endsWithIgnoreCase("HA.QSc}Mb@", "ZRtmsqIv'");
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("C*vME~%hs0YI{&S&w\"Y");
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      StringUtils.indexOfIgnoreCase("lYc", (String) null, 2376);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '^';
      charArray0[2] = '.';
      charArray0[3] = '|';
      charArray0[4] = 'o';
      charArray0[5] = '-';
      charArray0[6] = '[';
      int int1 = StringUtils.indexOfAny((CharSequence) "Q-)Nrl+0eC,7TVYGd", charArray0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.center("NoSuchMethodException occurred during 1.6 backcompat code", 1219, "NoSuchMethodException occurred during 1.6 backcompat code");
      StringUtils.join((Object[]) null, "NoSuchMethodException occurred during 1.6 backcompat code", 1219, 1219);
      StringUtils.defaultString("UDq:N'*%oFE", "NoSuchMethodException occurred during 1.6 backcompat code");
      StringUtils.stripEnd("UDq:N'*%oFE", "user.name");
      boolean boolean0 = StringUtils.endsWith("", string0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MH";
      stringArray0[1] = "NoSuchMethodException occurred during 1.6 backcompat code";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "UDq:N'*%oFE";
      stringArray0[6] = "user.name";
      stringArray0[7] = string0;
      stringArray0[8] = "UDq:N'*%oFE";
      boolean boolean1 = StringUtils.startsWithAny("MH", stringArray0);
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("NoSuchMethodException occurred during 1.6 backcompat code", string0, 0);
      assertFalse(string1.equals((Object)string0));
      
      StringUtils.containsNone((CharSequence) "UDq:N'*%oFE", "user.name");
      String[] stringArray1 = StringUtils.split("", '#');
      assertNotNull(stringArray1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((Comparator<? super Object>) null);
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertNotNull(string2);
      
      StringUtils.lastIndexOf("org.apache.commons.lang3.SystemUtils", '#', 1219);
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", "MH");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }
}
