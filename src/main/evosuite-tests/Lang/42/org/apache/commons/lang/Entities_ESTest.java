/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:35:27 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("KS!!0%&{&8{b(W'LqVf");
      assertEquals("KS!!0%&{&8{b(W'LqVf", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("&");
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = new Entities();
      StringWriter stringWriter0 = new StringWriter(0);
      entities0.escape((Writer) stringWriter0, "c:QQ{,9W5");
      assertEquals("c:QQ{,9W5", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(128);
      entities_BinaryEntityMap0.size = 7;
      String string0 = entities_BinaryEntityMap0.name(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("", 1437);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(139);
      entities_BinaryEntityMap0.size = (-418);
      int int0 = entities_BinaryEntityMap0.value("M_VtDs4uMx6");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.value("");
      entities_ArrayEntityMap0.add("", (-1));
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.entityName(2059);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.size = (-2179);
      String string0 = entities_ArrayEntityMap0.name((-233));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      String string0 = entities_LookupEntityMap0.name(256);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      int int0 = entities_PrimitiveEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      String string0 = entities_PrimitiveEntityMap0.name((-3070));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      String string0 = entities_ArrayEntityMap0.name((-822));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(2364);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.escape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      int int0 = entities0.entityValue("igrave");
      assertEquals(236, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = new Entities();
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.entityName(34);
      assertEquals("quot", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      // Undeclared exception!
      try { 
        entities0.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      // Undeclared exception!
      try { 
        entities0.HTML32.unescape((Writer) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Entities.fillWithHtml40Entities((Entities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      // Undeclared exception!
      try { 
        entities0.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      // Undeclared exception!
      try { 
        entities0.HTML32.escape((Writer) null, "loz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities entities1 = Entities.HTML32;
      Entities.fillWithHtml40Entities(entities1);
      Entities entities2 = Entities.XML;
      Entities.fillWithHtml40Entities(entities2);
      entities0.HTML40.addEntity("org.apache.commons.lang.Entities$LookupEntityMap", 0);
      Entities.fillWithHtml40Entities(entities0);
      entities0.XML.map = null;
      entities0.HTML32.unescape("1A-%<\"'");
      // Undeclared exception!
      try { 
        entities0.entityValue("]s:E5`o@)+^4vaKA$r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(703);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "loz";
      stringArray0[1] = "8225";
      entities_BinaryEntityMap0.names = stringArray0;
      int[] intArray0 = new int[9];
      intArray0[0] = 703;
      intArray0[1] = 703;
      intArray0[2] = 703;
      intArray0[3] = 703;
      intArray0[4] = 703;
      intArray0[6] = 703;
      intArray0[7] = 703;
      intArray0[8] = 703;
      entities_BinaryEntityMap0.ensureCapacity(0);
      entities_BinaryEntityMap0.values = intArray0;
      entities_BinaryEntityMap0.ensureCapacity(703);
      entities_BinaryEntityMap0.name((-870));
      Entities entities0 = Entities.XML;
      // Undeclared exception!
      try { 
        entities0.entityName(703);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities entities0 = new Entities();
      entities0.HTML32.addEntity("", 217);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Entities entities0 = Entities.XML;
      // Undeclared exception!
      try { 
        entities0.HTML40.addEntities((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String[][] stringArray0 = new String[5][0];
      // Undeclared exception!
      try { 
        entities0.XML.addEntities(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Entities entities0 = new Entities();
      String[][] stringArray0 = new String[0][3];
      entities0.XML.addEntities(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Entities entities0 = new Entities();
      String[][] stringArray0 = new String[5][2];
      // Undeclared exception!
      try { 
        entities0.addEntities(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(260);
      Entities entities0 = Entities.HTML32;
      entities0.unescape((Writer) stringWriter0, "`&BfzC4U'2Qeq4{~ZIx");
      assertEquals("`&BfzC4U'2Qeq4{~ZIx", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("$+kkY&NC1%.#");
      assertEquals("$+kkY&NC1%.#", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 6603);
      entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", (-1180));
      entities_BinaryEntityMap0.add("org.apache.commons.lang.IntHashMap$Entry", 6603);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M)er1y";
      stringArray0[1] = "org.apache.commons.lang.IntHashMap";
      stringArray0[2] = "org.apache.commons.lang.IntHashMap";
      stringArray0[3] = "t},&&A~7>3MM8.kKeF";
      entities_BinaryEntityMap0.names = stringArray0;
      entities_BinaryEntityMap0.ensureCapacity((-958));
      Entities entities0 = Entities.XML;
      Entities.fillWithHtml40Entities(entities0);
      Entities entities1 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities1.escape((Writer) stringWriter0, "");
      entities1.unescape((Writer) stringWriter0, "");
      Entities.fillWithHtml40Entities(entities1);
      entities0.addEntity("org.apache.commons.lang.exception.NestableRuntimeException", (-958));
      entities0.HTML32.escape((Writer) stringWriter0, "org.apache.commons.lang.exception.NestableRuntimeException");
      entities_BinaryEntityMap0.add("", 1437);
      int int0 = entities0.entityValue("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      Entities entities0 = new Entities();
      entities_BinaryEntityMap0.size = 116;
      entities0.map = (Entities.EntityMap) entities_BinaryEntityMap0;
      // Undeclared exception!
      try { 
        entities0.escape("H3A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("$+kkY&NC1%#", 116);
      Entities entities0 = new Entities();
      entities0.map = (Entities.EntityMap) entities_BinaryEntityMap0;
      String string0 = entities0.escape("H3A");
      assertEquals("H3A", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      int int0 = entities0.entityValue((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.value("");
      entities_ArrayEntityMap0.add("", (-1));
      Entities entities0 = Entities.HTML32;
      // Undeclared exception!
      try { 
        entities0.entityName((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      // Undeclared exception!
      try { 
        entities0.HTML32.entityName((-854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -854
         //
         verifyException("org.apache.commons.lang.Entities$LookupEntityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      entities_PrimitiveEntityMap0.add("!\t\"0g@:b(6", 104);
      int int0 = entities_PrimitiveEntityMap0.value("!\t\"0g@:b(6");
      assertEquals(104, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities0.escape("951");
      assertEquals("951", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name(1959);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("$+kkY&NC1%.#", 116);
      int int0 = entities_BinaryEntityMap0.value("$+kkY&NC1%.#");
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      entities_HashEntityMap0.add("", 758);
      int int0 = entities_HashEntityMap0.value("");
      assertEquals(758, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      Entities.fillWithHtml40Entities(entities0);
  }
}
