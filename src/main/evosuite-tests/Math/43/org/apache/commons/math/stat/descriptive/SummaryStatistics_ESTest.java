/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 14:57:27 GMT 2023
 */

package org.apache.commons.math.stat.descriptive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.stat.descriptive.StatisticalSummary;
import org.apache.commons.math.stat.descriptive.StatisticalSummaryValues;
import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
import org.apache.commons.math.stat.descriptive.SummaryStatistics;
import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
import org.apache.commons.math.stat.descriptive.moment.Kurtosis;
import org.apache.commons.math.stat.descriptive.moment.Mean;
import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
import org.apache.commons.math.stat.descriptive.moment.Skewness;
import org.apache.commons.math.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math.stat.descriptive.moment.Variance;
import org.apache.commons.math.stat.descriptive.rank.Max;
import org.apache.commons.math.stat.descriptive.rank.Min;
import org.apache.commons.math.stat.descriptive.summary.Product;
import org.apache.commons.math.stat.descriptive.summary.Sum;
import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SummaryStatistics_ESTest extends SummaryStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      GeometricMean geometricMean0 = summaryStatistics1.geoMean;
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      summaryStatistics1.geoMean = geometricMean0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, summaryStatistics1.geoMean.getN());
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      geometricMean0.setSumLogImpl(summaryStatistics1.geoMean);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertSame(summaryStatistics1.geoMean, geometricMean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      secondMoment0.clear();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      summaryStatistics2.secondMoment = secondMoment0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.secondMoment.getResult(), 0.01);
      
      SecondMoment secondMoment1 = summaryStatistics0.secondMoment;
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment1);
      
      summaryStatistics2.secondMoment = secondMoment1;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.secondMoment.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.getGeometricMean();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.addValue(1.7597776278732318E-296);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double0 = summaryStatistics1.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMaxImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1.7597776278732318E-296, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      double double1 = summaryStatistics1.getMax();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(1.7597776278732318E-296, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics();
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      GeometricMean geometricMean0 = summaryStatistics2.geoMean;
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      Variance variance0 = new Variance();
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      summaryStatistics1.variance = variance0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(summaryStatistics1.variance.isBiasCorrected());
      assertEquals(0L, summaryStatistics1.variance.getN());
      assertEquals(Double.NaN, summaryStatistics1.variance.getResult(), 0.01);
      
      summaryStatistics2.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1.7597776278732318E-296, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      summaryStatistics0.geoMean = geometricMean0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, summaryStatistics0.geoMean.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics1.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1.7597776278732318E-296, storelessUnivariateStatistic2.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic2.getN());
      assertNotNull(storelessUnivariateStatistic2);
      
      double double2 = summaryStatistics1.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double3 = geometricMean0.getResult();
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, geometricMean0.getN());
      
      summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1.7597776278732318E-296, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      
      summaryStatistics1.geoMean = null;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      Variance.copy(summaryStatistics1.variance, summaryStatistics1.variance);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(summaryStatistics1.variance, variance0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(summaryStatistics1.variance.isBiasCorrected());
      assertEquals(0L, summaryStatistics1.variance.getN());
      assertEquals(Double.NaN, summaryStatistics1.variance.getResult(), 0.01);
      
      double double4 = summaryStatistics1.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.759777627873213E-296, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      summaryStatistics0.setSumImpl(storelessUnivariateStatistic1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 1\nmin: 1.7597776278732318E-296\nmax: 1.7597776278732318E-296\nmean: 1.7597776278732318E-296\ngeometric mean: 1.759777627873213E-296\nvariance: 0.0\nsum of squares: 0.0\nstandard deviation: 0.0\nsum of logs: -681.0000000729693\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertNotNull(string0);
      
      double double5 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      String string1 = summaryStatistics0.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: 1.7597776278732318E-296\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string1);
      
      double double6 = summaryStatistics0.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics2.getSumLogImpl();
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(storelessUnivariateStatistic3.equals((Object)storelessUnivariateStatistic1));
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(storelessUnivariateStatistic3, storelessUnivariateStatistic1);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic3.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic3.getN());
      assertNotNull(storelessUnivariateStatistic3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Max max0 = new Max();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      
      boolean boolean0 = summaryStatistics0.equals(max0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      Max max1 = new Max();
      assertTrue(max1.equals((Object)max0));
      assertEquals(Double.NaN, max1.getResult(), 0.01);
      assertEquals(0L, max1.getN());
      assertNotNull(max1);
      
      Max max2 = max1.copy();
      assertTrue(max1.equals((Object)max0));
      assertTrue(max2.equals((Object)max1));
      assertTrue(max2.equals((Object)max0));
      assertNotSame(max1, max2);
      assertNotSame(max1, max0);
      assertNotSame(max2, max1);
      assertNotSame(max2, max0);
      assertEquals(Double.NaN, max1.getResult(), 0.01);
      assertEquals(0L, max1.getN());
      assertEquals(0L, max2.getN());
      assertEquals(Double.NaN, max2.getResult(), 0.01);
      assertNotNull(max2);
      
      boolean boolean1 = summaryStatistics0.equals(max1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(max1.equals((Object)max0));
      assertTrue(max1.equals((Object)max2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(max1, max2);
      assertNotSame(max1, max0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, max1.getResult(), 0.01);
      assertEquals(0L, max1.getN());
      
      Mean mean0 = new Mean();
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics1.setMeanImpl(mean0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      Skewness skewness0 = new Skewness();
      assertEquals(0L, skewness0.getN());
      assertNotNull(skewness0);
      
      summaryStatistics1.setGeoMeanImpl(skewness0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, skewness0.getN());
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      double double0 = summaryStatistics1.getGeometricMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      SummaryStatistics summaryStatistics3 = summaryStatistics1.copy();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics3, summaryStatistics2);
      assertNotSame(summaryStatistics3, summaryStatistics0);
      assertNotSame(summaryStatistics3, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics3.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics3.getN());
      assertNotNull(summaryStatistics3);
      
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      boolean boolean2 = secondMoment0.equals(summaryStatistics2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(boolean2);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      summaryStatistics0.secondMoment = secondMoment0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.secondMoment.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics2.setMaxImpl(summaryStatistics0.secondMoment);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      summaryStatistics0.addValue((-2899.732));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics1.setMinImpl(mean0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      double double1 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean3 = summaryStatistics2.equals(summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(boolean3);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      Variance variance0 = new Variance(false, secondMoment0);
      assertEquals(1L, variance0.getN());
      assertEquals(0.0, variance0.getResult(), 0.01);
      assertFalse(variance0.isBiasCorrected());
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      assertNotNull(variance0);
      
      double double2 = summaryStatistics2.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics2.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(0.0, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics2.getSumLogImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      SummaryStatistics summaryStatistics4 = new SummaryStatistics(summaryStatistics3);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics4.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics4.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics4.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics4.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics0));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics4.getN());
      assertEquals(Double.NaN, summaryStatistics4.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics3.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics3.getN());
      assertNotNull(summaryStatistics4);
      
      SummaryStatistics.copy(summaryStatistics4, summaryStatistics3);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics4));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics4));
      assertTrue(summaryStatistics4.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics4.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics4.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics4.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics4));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics4);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics4);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics4, summaryStatistics3);
      assertNotSame(summaryStatistics4, summaryStatistics1);
      assertNotSame(summaryStatistics4, summaryStatistics0);
      assertNotSame(summaryStatistics4, summaryStatistics2);
      assertNotSame(summaryStatistics3, summaryStatistics4);
      assertNotSame(summaryStatistics3, summaryStatistics2);
      assertNotSame(summaryStatistics3, summaryStatistics0);
      assertNotSame(summaryStatistics3, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, summaryStatistics4.getN());
      assertEquals(Double.NaN, summaryStatistics4.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics3.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics3.getN());
      
      double double3 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics4));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics4);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics2.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics4));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics4));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics4));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics4);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics1, summaryStatistics4);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics4);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      SummaryStatistics summaryStatistics5 = summaryStatistics0.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics4));
      assertFalse(summaryStatistics5.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics5.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics5.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics5.equals((Object)summaryStatistics3));
      assertFalse(summaryStatistics5.equals((Object)summaryStatistics4));
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics5);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics4);
      assertNotSame(summaryStatistics5, summaryStatistics2);
      assertNotSame(summaryStatistics5, summaryStatistics1);
      assertNotSame(summaryStatistics5, summaryStatistics0);
      assertNotSame(summaryStatistics5, summaryStatistics3);
      assertNotSame(summaryStatistics5, summaryStatistics4);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics5.getN());
      assertEquals(0.0, summaryStatistics5.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics1.setMeanImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double0 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      Sum sum0 = new Sum();
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
      
      summaryStatistics1.setMeanImpl(sum0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: 0.0\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics();
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      GeometricMean geometricMean0 = summaryStatistics2.geoMean;
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      summaryStatistics0.geoMean = geometricMean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, summaryStatistics0.geoMean.getN());
      
      summaryStatistics1.n = (-257L);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals((-257L), summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      Variance variance0 = new Variance();
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      long long0 = 6722166367014452318L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6722166367014452318L;
      doubleArray0[1] = (double) 6722166367014452318L;
      doubleArray0[2] = (double) 6722166367014452318L;
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertEquals("SummaryStatistics:\nn: -257\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals((-257L), summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      doubleArray0[3] = (double) 6722166367014452318L;
      // Undeclared exception!
      try { 
        variance0.evaluate(doubleArray0, doubleArray0, (-2882), 2184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2882
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      boolean boolean0 = summaryStatistics0.equals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n");
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Sum sum0 = new Sum();
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertNotNull(sum0);
      
      summaryStatistics0.sum = sum0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.sum.getN());
      assertEquals(0.0, summaryStatistics0.sum.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumImpl();
      assertTrue(storelessUnivariateStatistic0.equals((Object)sum0));
      assertNotSame(storelessUnivariateStatistic0, sum0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertTrue(storelessUnivariateStatistic0.equals((Object)sum0));
      assertNotSame(storelessUnivariateStatistic0, sum0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double0 = summaryStatistics0.getMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics();
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      boolean boolean1 = summaryStatistics0.equals(summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getGeoMeanImpl();
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double1 = summaryStatistics1.getSumsq();
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      SummaryStatistics summaryStatistics3 = summaryStatistics0.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics3.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics3.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics3, summaryStatistics2);
      assertNotSame(summaryStatistics3, summaryStatistics0);
      assertNotSame(summaryStatistics3, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics3.getN());
      assertEquals(Double.NaN, summaryStatistics3.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics3);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumLogImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(0.0, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      String string1 = summaryStatistics0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics3));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: 0.0\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics3);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string1);
      
      StatisticalSummary statisticalSummary1 = summaryStatistics1.getSummary();
      assertTrue(statisticalSummary1.equals((Object)statisticalSummary0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics3));
      assertNotSame(statisticalSummary1, statisticalSummary0);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertEquals(0L, statisticalSummary1.getN());
      assertEquals(Double.NaN, statisticalSummary1.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary1.getSum(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(statisticalSummary1);
      
      double double2 = summaryStatistics2.getSumOfLogs();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      Variance variance0 = (Variance)summaryStatistics2.getVarianceImpl();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics3));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics3));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics3);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics3);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(variance0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertNotNull(sumOfLogs0);
      
      summaryStatistics0.setGeoMeanImpl(sumOfLogs0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertNotNull(statisticalSummary0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      GeometricMean geometricMean0 = summaryStatistics1.geoMean;
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      summaryStatistics1.geoMean = geometricMean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, geometricMean0.getN());
      assertEquals(0L, summaryStatistics1.geoMean.getN());
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      secondMoment0.clear();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      summaryStatistics2.secondMoment = secondMoment0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.secondMoment.getResult(), 0.01);
      
      SecondMoment secondMoment1 = summaryStatistics0.secondMoment;
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment1);
      
      summaryStatistics2.secondMoment = secondMoment1;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.secondMoment.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double0 = summaryStatistics1.getGeometricMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      StandardDeviation standardDeviation0 = new StandardDeviation();
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      assertNotNull(standardDeviation0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      double double1 = standardDeviation0.evaluate(doubleArray0, (-1.0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      summaryStatistics0.setSumsqImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.addValue(1190.52);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      summaryStatistics0.setVarianceImpl(geometricMean0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, geometricMean0.getN());
      
      double double2 = summaryStatistics1.getSecondMoment();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double3 = summaryStatistics0.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double4 = geometricMean0.evaluate(doubleArray1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, geometricMean0.getN());
      
      secondMoment0.increment((-2288.0357795279));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(secondMoment0.equals((Object)secondMoment1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(secondMoment0, secondMoment1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(6050175.155643478, secondMoment0.getResult(), 0.01);
      
      Variance variance0 = (Variance)summaryStatistics1.getVarianceImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(2L, variance0.getN());
      assertEquals(6050175.155643478, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertEquals("SummaryStatistics:\nn: 1\nmin: 1190.52\nmax: 1190.52\nmean: -548.7578897639501\ngeometric mean: 1190.5200000000004\nvariance: 6050175.155643478\nsum of squares: 1417337.8704\nstandard deviation: 0.0\nsum of logs: 7.082145465449812\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertNotNull(string0);
      
      Min min0 = (Min)summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, min0.getN());
      assertEquals(1190.52, min0.getResult(), 0.01);
      assertNotNull(min0);
      
      SumOfSquares sumOfSquares0 = (SumOfSquares)summaryStatistics0.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNull(sumOfSquares0);
      
      SumOfSquares sumOfSquares1 = (SumOfSquares)summaryStatistics2.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(sumOfSquares1);
      
      double double5 = summaryStatistics2.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0.0, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      boolean boolean0 = summaryStatistics0.equals(summaryStatistics0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMinImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      Mean mean0 = new Mean();
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics0.mean = mean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.mean.getN());
      
      double[] doubleArray0 = new double[0];
      mean0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
      assertTrue(storelessUnivariateStatistic2.equals((Object)mean0));
      assertNotSame(storelessUnivariateStatistic2, mean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
      assertTrue(statisticalSummary1.equals((Object)statisticalSummary0));
      assertNotSame(statisticalSummary1, statisticalSummary0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, statisticalSummary1.getN());
      assertEquals(Double.NaN, statisticalSummary1.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary1.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary1.getMean(), 0.01);
      assertNotNull(statisticalSummary1);
      
      summaryStatistics0.setGeoMeanImpl((StorelessUnivariateStatistic) null);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNull(storelessUnivariateStatistic3);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
      assertTrue(storelessUnivariateStatistic4.equals((Object)mean0));
      assertSame(storelessUnivariateStatistic4, storelessUnivariateStatistic2);
      assertNotSame(storelessUnivariateStatistic4, mean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic4.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic4.getN());
      assertNotNull(storelessUnivariateStatistic4);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getSumImpl();
      assertSame(storelessUnivariateStatistic5, storelessUnivariateStatistic1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic5.getN());
      assertEquals(0.0, storelessUnivariateStatistic5.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic5);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
      assertSame(storelessUnivariateStatistic6, storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic6.getN());
      assertNotNull(storelessUnivariateStatistic6);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      Max max0 = new Max();
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      assertNotNull(max0);
      
      summaryStatistics1.setMeanImpl(max0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      
      double double0 = summaryStatistics1.getStandardDeviation();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      Min min0 = null;
      double[] doubleArray0 = new double[0];
      max0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      
      Min min1 = new Min();
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      assertNotNull(min1);
      
      double double1 = summaryStatistics0.getSumsq();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.setSumsqImpl(max0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      
      summaryStatistics1.setGeoMeanImpl(min1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      min1.clear();
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      double double2 = summaryStatistics0.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean0 = min1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      summaryStatistics1.setMinImpl(min1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      summaryStatistics1.setMaxImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      double double1 = summaryStatistics1.getSum();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double2 = summaryStatistics1.getGeometricMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics1.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double3 = summaryStatistics1.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      Variance variance0 = new Variance((SecondMoment) null);
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      
      summaryStatistics1.variance = variance0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertTrue(variance0.isBiasCorrected());
      assertTrue(summaryStatistics1.variance.isBiasCorrected());
      
      double double4 = summaryStatistics0.getSum();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        SummaryStatistics.copy(summaryStatistics1, summaryStatistics1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.moment.Variance", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      sumOfSquares0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      summaryStatistics0.setSumLogImpl(sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      summaryStatistics0.addValue((-2342.594));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertEquals(1.0975493297672E7, double0, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue((-3142.95));
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(320284.8633679998, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(320284.8633679998, double1, 0.01);
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(320284.8633679998, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics0.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics1.addValue(2784.6486);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 1\nmin: 2784.6486\nmax: 2784.6486\nmean: 2784.6486\ngeometric mean: 2784.6486000000004\nvariance: 0.0\nsum of squares: 7754267.82548196\nstandard deviation: 0.0\nsum of logs: 7.931876968457981\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertNotNull(string0);
      
      double double1 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics1.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2784.6486, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double4 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, statisticalSummary0.getN());
      assertEquals(2784.6486, statisticalSummary0.getMin(), 0.01);
      assertEquals(2784.6486, statisticalSummary0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary0.getVariance(), 0.01);
      assertEquals(2784.6486, statisticalSummary0.getMean(), 0.01);
      assertEquals(2784.6486, statisticalSummary0.getSum(), 0.01);
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double5 = summaryStatistics1.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(2784.6486, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      assertEquals(7754267.82548196, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      double double6 = summaryStatistics0.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setSumsqImpl(storelessUnivariateStatistic1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfLogs sumOfLogs0 = null;
      summaryStatistics0.sumLog = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double0 = summaryStatistics0.getSum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      try { 
        SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double1 = summaryStatistics0.getMin();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics1.getSumsq();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertNotNull(statisticalSummary0);
      
      double double3 = summaryStatistics0.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumsqImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.hashCode();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      double double4 = summaryStatistics2.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      Mean mean0 = summaryStatistics1.mean;
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics2.setSumImpl(mean0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics2.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      double double6 = summaryStatistics2.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      double double7 = summaryStatistics2.getMax();
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double7, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics2);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      summaryStatistics2.setMaxImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      summaryStatistics1.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      long long0 = summaryStatistics2.getN();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0L, long0);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      double double8 = summaryStatistics1.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics1.getMaxImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double9 = summaryStatistics1.getSecondMoment();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double10 = summaryStatistics0.getMin();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double11 = summaryStatistics2.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double1, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics2, summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Sum sum0 = null;
      summaryStatistics0.sum = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      SumOfSquares.copy(sumOfSquares0, sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      sumOfSquares0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      boolean boolean0 = summaryStatistics0.equals(sumOfSquares0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = summaryStatistics0.getSumOfLogs();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMinImpl((StorelessUnivariateStatistic) null);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      doubleArray0[2] = 477.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      sumOfSquares0.setData(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 477.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics1.getMin();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics1.getMin();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getMin();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Mean mean0 = new Mean();
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      summaryStatistics1.mean = mean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics1.mean.getN());
      assertEquals(Double.NaN, summaryStatistics1.mean.getResult(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertNotNull(sumOfLogs0);
      
      SumOfLogs sumOfLogs1 = summaryStatistics0.sumLog;
      assertTrue(sumOfLogs1.equals((Object)sumOfLogs0));
      assertNotSame(sumOfLogs1, sumOfLogs0);
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      assertNotNull(sumOfLogs1);
      
      summaryStatistics1.sumLog = sumOfLogs1;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      assertEquals(0.0, summaryStatistics1.sumLog.getResult(), 0.01);
      assertEquals(0L, summaryStatistics1.sumLog.getN());
      
      double double3 = summaryStatistics0.getMax();
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      doubleArray0[6] = Double.NaN;
      double double4 = mean0.evaluate(doubleArray0);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      summaryStatistics1.setSumsqImpl(mean0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      summaryStatistics1.setMinImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics1.getGeometricMean();
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double6 = summaryStatistics1.getSumsq();
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumImpl();
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getSumsqImpl();
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(storelessUnivariateStatistic1, mean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = null;
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.secondMoment = secondMoment0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.secondMoment.getResult(), 0.01);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      summaryStatistics0.setSumsqImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.setGeoMeanImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean0 = sumOfSquares0.equals(summaryStatistics0);
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      double double1 = 1525.76606325;
      // Undeclared exception!
      try { 
        summaryStatistics0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.setSumLogImpl(sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      summaryStatistics0.addValue((-2342.594));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertEquals(1.0975493297672E7, double0, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(0L);
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(2743873.324418, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getMean();
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1171.297), double1, 0.01);
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(2743873.324418, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      Max max0 = new Max();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      
      summaryStatistics1.setMeanImpl(max0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      double double0 = summaryStatistics1.getStandardDeviation();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      Min min0 = null;
      double[] doubleArray0 = new double[0];
      max0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      Min min1 = new Min();
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      assertNotNull(min1);
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getSumsq();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.setSumsqImpl(max0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      summaryStatistics1.setGeoMeanImpl(min1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      min1.clear();
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      double double3 = summaryStatistics0.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean0 = min1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      summaryStatistics1.setMinImpl(min1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      summaryStatistics1.setMaxImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics0.setSumImpl(min1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      double double4 = summaryStatistics0.getSumOfLogs();
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics1.getMean();
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      max0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.getSummary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.addValue(1310.6544628);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertEquals(1717815.1208575564, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics1.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      
      summaryStatistics0.setGeoMeanImpl(variance0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      
      String string1 = summaryStatistics0.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string1);
      
      double double1 = summaryStatistics1.getPopulationVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertEquals(1717815.1208575564, storelessUnivariateStatistic0.getResult(), 0.01);
      
      summaryStatistics0.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics1.getMin();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1310.6544628, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double3 = summaryStatistics0.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Mean mean0 = (Mean)summaryStatistics0.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics1.addValue((-1227.11609694078));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3220139.7069435157, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2L, summaryStatistics1.getN());
      
      double double4 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics1.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(3223629.03622873, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3220139.7069435157, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setVarianceImpl(storelessUnivariateStatistic0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getMax();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getMax();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumsqImpl();
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      Mean mean0 = summaryStatistics0.mean;
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      double[] doubleArray0 = new double[4];
      mean0.clear();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      mean0.setData(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      doubleArray0[0] = Double.NaN;
      summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic0);
      assertSame(storelessUnivariateStatistic0, storelessUnivariateStatistic1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      mean0.setData(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      summaryStatistics0.setSumImpl(mean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getVarianceImpl();
      assertSame(storelessUnivariateStatistic2, storelessUnivariateStatistic1);
      assertSame(storelessUnivariateStatistic2, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(0.0, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      Min min0 = summaryStatistics0.min;
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      
      min0.increment((-1.0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals((-1.0), min0.getResult(), 0.01);
      assertEquals(1L, min0.getN());
      
      boolean boolean0 = summaryStatistics0.equals(min0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals((-1.0), min0.getResult(), 0.01);
      assertEquals(1L, min0.getN());
      
      double double2 = summaryStatistics0.getMean();
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      boolean boolean1 = summaryStatistics0.equals(storelessUnivariateStatistic1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic2);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: -1.0\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: 0.0\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
      
      summaryStatistics0.setSumImpl(min0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals((-1.0), min0.getResult(), 0.01);
      assertEquals(1L, min0.getN());
      
      double double3 = summaryStatistics0.getSum();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1.0), double3, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMaxImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic3.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic3.getN());
      assertNotNull(storelessUnivariateStatistic3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.sumsq = sumOfSquares0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, summaryStatistics0.sumsq.getN());
      assertEquals(0.0, summaryStatistics0.sumsq.getResult(), 0.01);
      
      SumOfSquares.copy(sumOfSquares0, sumOfSquares0);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      double double0 = 1930.388389299657;
      summaryStatistics0.hashCode();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(1930.388389299657);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMeanImpl();
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(1930.388389299657, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double1 = summaryStatistics0.getSecondMoment();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      summaryStatistics0.hashCode();
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      summaryStatistics0.hashCode();
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment1);
      
      Mean mean0 = new Mean(secondMoment1);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertFalse(mean0.equals((Object)storelessUnivariateStatistic0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      double[] doubleArray0 = new double[8];
      secondMoment0.setData(doubleArray0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(secondMoment0, secondMoment1);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      SecondMoment secondMoment2 = secondMoment1.copy();
      assertTrue(secondMoment2.equals((Object)secondMoment1));
      assertTrue(secondMoment2.equals((Object)secondMoment0));
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment2, secondMoment0);
      assertNotSame(secondMoment2, secondMoment1);
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment0, secondMoment2);
      assertNotSame(secondMoment1, secondMoment2);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, secondMoment2.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment2);
      
      doubleArray0[0] = 1930.388389299657;
      boolean boolean0 = mean0.equals(sumOfSquares0);
      assertTrue(secondMoment0.equals((Object)secondMoment2));
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertTrue(secondMoment1.equals((Object)secondMoment2));
      assertFalse(mean0.equals((Object)storelessUnivariateStatistic0));
      assertFalse(boolean0);
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment0, secondMoment2);
      assertNotSame(secondMoment1, secondMoment2);
      assertNotSame(secondMoment1, secondMoment0);
      assertNotSame(mean0, storelessUnivariateStatistic0);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      doubleArray0[1] = 1930.388389299657;
      SecondMoment secondMoment3 = secondMoment1.copy();
      assertTrue(secondMoment3.equals((Object)secondMoment1));
      assertTrue(secondMoment3.equals((Object)secondMoment2));
      assertTrue(secondMoment3.equals((Object)secondMoment0));
      assertTrue(secondMoment0.equals((Object)secondMoment2));
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertTrue(secondMoment1.equals((Object)secondMoment2));
      assertNotSame(secondMoment3, secondMoment2);
      assertNotSame(secondMoment3, secondMoment1);
      assertNotSame(secondMoment3, secondMoment0);
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment0, secondMoment3);
      assertNotSame(secondMoment0, secondMoment2);
      assertNotSame(secondMoment1, secondMoment3);
      assertNotSame(secondMoment1, secondMoment2);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, secondMoment3.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment3);
      
      doubleArray0[2] = 1930.388389299657;
      doubleArray0[3] = 1930.388389299657;
      // Undeclared exception!
      try { 
        secondMoment3.evaluate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      Mean mean0 = new Mean();
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double[] doubleArray0 = new double[4];
      Mean mean1 = mean0.copy();
      assertTrue(mean1.equals((Object)mean0));
      assertNotSame(mean0, mean1);
      assertNotSame(mean1, mean0);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      assertNotNull(mean1);
      
      mean1.setData(doubleArray0);
      assertTrue(mean0.equals((Object)mean1));
      assertTrue(mean1.equals((Object)mean0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(mean0, mean1);
      assertNotSame(mean1, mean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      
      doubleArray0[0] = 815.7295178732;
      mean0.incrementAll(doubleArray0);
      assertFalse(mean0.equals((Object)mean1));
      assertArrayEquals(new double[] {815.7295178732, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(mean0, mean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(203.93237946829998, mean0.getResult(), 0.01);
      assertEquals(4L, mean0.getN());
      
      doubleArray0[1] = 0.0;
      boolean boolean0 = mean0.equals(mean1);
      assertFalse(mean0.equals((Object)mean1));
      assertFalse(mean1.equals((Object)mean0));
      assertFalse(boolean0);
      assertNotSame(mean0, mean1);
      assertNotSame(mean1, mean0);
      assertEquals(203.93237946829998, mean0.getResult(), 0.01);
      assertEquals(4L, mean0.getN());
      assertEquals(0L, mean1.getN());
      assertEquals(Double.NaN, mean1.getResult(), 0.01);
      
      doubleArray0[2] = 894.4;
      doubleArray0[3] = (-132.0622226468583);
      double double1 = mean0.evaluate(doubleArray0);
      assertFalse(mean0.equals((Object)mean1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {815.7295178732, 0.0, 894.4, (-132.0622226468583)}, doubleArray0, 0.01);
      assertEquals(394.5168238065854, double1, 0.01);
      assertNotSame(mean0, mean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(203.93237946829998, mean0.getResult(), 0.01);
      assertEquals(4L, mean0.getN());
      
      summaryStatistics0.setMeanImpl(mean0);
      assertFalse(mean0.equals((Object)mean1));
      assertNotSame(mean0, mean1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(203.93237946829998, mean0.getResult(), 0.01);
      assertEquals(4L, mean0.getN());
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.sumsq = sumOfSquares0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0.0, summaryStatistics0.sumsq.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.sumsq.getN());
      
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getSumOfLogs();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics0.getStandardDeviation();
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      sumOfSquares0.setData(doubleArray0);
      assertArrayEquals(new double[] {815.7295178732, 0.0, 894.4, (-132.0622226468583)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      double double4 = summaryStatistics0.getSecondMoment();
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics0.getSum();
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double6 = summaryStatistics0.getVariance();
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setGeoMeanImpl(sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      Max max0 = summaryStatistics0.max;
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      assertNotNull(max0);
      
      boolean boolean1 = summaryStatistics0.equals(max0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      double double0 = summaryStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getMax();
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      String string1 = summaryStatistics0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string1);
      
      String string2 = summaryStatistics0.toString();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string2);
      
      double double3 = summaryStatistics0.getVariance();
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMinImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(Double.NaN);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumImpl();
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double4 = summaryStatistics0.getSumOfLogs();
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics0.getSumOfLogs();
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double6 = summaryStatistics0.getSum();
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic2.getN());
      assertNotNull(storelessUnivariateStatistic2);
      
      summaryStatistics1.addValue(Double.NaN);
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2L, summaryStatistics1.getN());
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics1.setMaxImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double0 = summaryStatistics0.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics1.getMax();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double2 = summaryStatistics0.getSecondMoment();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.addValue(0.0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      
      String string0 = summaryStatistics0.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      boolean boolean0 = summaryStatistics0.equals(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NEGATIVE_INFINITY, storelessUnivariateStatistic0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getSumImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setGeoMeanImpl(storelessUnivariateStatistic0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      summaryStatistics0.addValue(56.927721003);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      double double0 = summaryStatistics0.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(56.927721003, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getMax();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(56.927721003, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      summaryStatistics1.variance = null;
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double2 = summaryStatistics1.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double3 = summaryStatistics1.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setSumImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double0 = summaryStatistics0.getMax();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMinImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      summaryStatistics0.addValue(Double.NaN);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.hashCode();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
      assertSame(sumOfLogs0, storelessUnivariateStatistic0);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertNotNull(sumOfLogs0);
      
      SumOfLogs sumOfLogs1 = new SumOfLogs(sumOfLogs0);
      assertTrue(sumOfLogs1.equals((Object)storelessUnivariateStatistic0));
      assertTrue(sumOfLogs1.equals((Object)sumOfLogs0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      assertNotNull(sumOfLogs1);
      
      summaryStatistics0.sumLog = sumOfLogs1;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      assertEquals(0L, summaryStatistics0.sumLog.getN());
      assertEquals(0.0, summaryStatistics0.sumLog.getResult(), 0.01);
      
      double double0 = summaryStatistics0.getMin();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
      assertTrue(storelessUnivariateStatistic0.equals((Object)sumOfLogs1));
      assertNotSame(storelessUnivariateStatistic0, sumOfLogs1);
      assertSame(storelessUnivariateStatistic0, sumOfLogs0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMinImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double1 = summaryStatistics0.getMin();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      sumOfLogs1.increment(1.0);
      assertFalse(sumOfLogs0.equals((Object)sumOfLogs1));
      assertFalse(sumOfLogs1.equals((Object)sumOfLogs0));
      assertFalse(sumOfLogs1.equals((Object)storelessUnivariateStatistic0));
      assertSame(sumOfLogs0, storelessUnivariateStatistic0);
      assertNotSame(sumOfLogs0, sumOfLogs1);
      assertNotSame(sumOfLogs1, sumOfLogs0);
      assertNotSame(sumOfLogs1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs1.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      
      summaryStatistics0.hashCode();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getVarianceImpl();
      assertFalse(storelessUnivariateStatistic2.equals((Object)sumOfLogs1));
      assertSame(storelessUnivariateStatistic2, sumOfLogs0);
      assertSame(storelessUnivariateStatistic2, storelessUnivariateStatistic0);
      assertNotSame(storelessUnivariateStatistic2, sumOfLogs1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(0.0, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double2 = summaryStatistics0.getGeometricMean();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMinImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumsqImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.addValue((-364.37117018));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(6.0);
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(34293.700925125624, double1, 0.01);
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(2L, storelessUnivariateStatistic2.getN());
      assertEquals((-179.18558509), storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double2 = summaryStatistics0.getMax();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.0, double2, 0.01);
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics0.getMin();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-364.37117018), double3, 0.01);
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      double double4 = summaryStatistics0.getPopulationVariance();
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(34293.700925125624, double4, 0.01);
      assertEquals(68587.40185025125, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      Max max0 = new Max();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2814.20982632362;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 6.0;
      doubleArray0[4] = 6.0;
      doubleArray0[5] = 6.0;
      doubleArray0[6] = 6.0;
      max0.setData(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 2814.20982632362, 1.0, 6.0, 6.0, 6.0, 6.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1172.1898886721);
      doubleArray1[1] = 6.0;
      doubleArray1[2] = 6.0;
      doubleArray1[3] = 34293.700925125624;
      doubleArray1[4] = 34293.700925125624;
      doubleArray1[5] = (-364.37117018);
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = 34293.700925125624;
      doubleArray1[8] = Double.NaN;
      // Undeclared exception!
      try { 
        max0.setData(doubleArray1, 2082, (-453));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.addValue(6.0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(6.0);
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2L, storelessUnivariateStatistic0.getN());
      assertEquals(3.58351893845611, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(2L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.setMaxImpl(secondMoment0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      double double0 = summaryStatistics0.getSumsq();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      double double1 = summaryStatistics0.getVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getSecondMoment();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics0.getMean();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double4 = summaryStatistics0.getMean();
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics0.getVariance();
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Variance variance0 = summaryStatistics0.variance;
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      // Undeclared exception!
      try { 
        variance0.incrementAll(doubleArray0, 232, 232);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics1.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics0.setMeanImpl(storelessUnivariateStatistic0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      Mean mean0 = summaryStatistics1.mean;
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics0.mean = mean0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, summaryStatistics0.mean.getN());
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertNotNull(statisticalSummary0);
      
      double double1 = summaryStatistics0.getGeometricMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics1.getPopulationVariance();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double3 = summaryStatistics0.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      mean0.setData((double[]) null);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double4 = summaryStatistics0.getVariance();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      mean0.increment(Double.NaN);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      
      summaryStatistics0.mean.setData((double[]) null);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(summaryStatistics0.mean, mean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, summaryStatistics0.mean.getN());
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      
      double double5 = summaryStatistics0.getSumOfLogs();
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double6 = summaryStatistics0.getPopulationVariance();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertSame(storelessUnivariateStatistic0, storelessUnivariateStatistic1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double7 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double8 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics1.setMaxImpl(summaryStatistics0.mean);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(summaryStatistics0.mean, mean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, summaryStatistics0.mean.getN());
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      
      summaryStatistics0.setMeanImpl(storelessUnivariateStatistic1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      
      SummaryStatistics summaryStatistics2 = summaryStatistics0.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      summaryStatistics2.hashCode();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      summaryStatistics0.hashCode();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics1.setVarianceImpl(summaryStatistics0.mean);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertSame(summaryStatistics0.mean, mean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, summaryStatistics0.mean.getN());
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics1.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0.0, storelessUnivariateStatistic3.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic3.getN());
      assertNotNull(storelessUnivariateStatistic3);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics2.getMinImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(storelessUnivariateStatistic4.equals((Object)storelessUnivariateStatistic2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(storelessUnivariateStatistic4, storelessUnivariateStatistic2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(0L, storelessUnivariateStatistic4.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic4.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic4);
      
      summaryStatistics1.setSumLogImpl(storelessUnivariateStatistic0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertSame(storelessUnivariateStatistic0, storelessUnivariateStatistic1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double9 = summaryStatistics2.getPopulationVariance();
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double4, 0.01);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double9, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      // Undeclared exception!
      try { 
        SummaryStatistics.copy(summaryStatistics1, summaryStatistics2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.descriptive.moment.GeometricMean cannot be cast to org.apache.commons.math.stat.descriptive.summary.SumOfLogs
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[3];
      summaryStatistics1.setSumsqImpl(product0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      
      Max max0 = new Max();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      
      double double0 = summaryStatistics0.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      max0.setData(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      double double1 = summaryStatistics1.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics0.setVarianceImpl(max0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0;
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        product0.evaluate(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // element 0 is NaN
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = null;
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.secondMoment = secondMoment0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.secondMoment.getResult(), 0.01);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      summaryStatistics0.setSumsqImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setGeoMeanImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.getGeometricMean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      Skewness skewness0 = new Skewness();
      assertEquals(0L, skewness0.getN());
      assertNotNull(skewness0);
      
      Skewness skewness1 = new Skewness(skewness0);
      assertTrue(skewness1.equals((Object)skewness0));
      assertEquals(0L, skewness0.getN());
      assertEquals(0L, skewness1.getN());
      assertNotNull(skewness1);
      
      summaryStatistics1.setSumsqImpl(skewness1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(skewness0.equals((Object)skewness1));
      assertTrue(skewness1.equals((Object)skewness0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(skewness0, skewness1);
      assertNotSame(skewness1, skewness0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, skewness0.getN());
      assertEquals(0L, skewness1.getN());
      
      double double0 = summaryStatistics1.getMax();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics1.sum = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setMinImpl(storelessUnivariateStatistic0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(storelessUnivariateStatistic1.equals((Object)storelessUnivariateStatistic0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      summaryStatistics2.setVarianceImpl(storelessUnivariateStatistic1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(storelessUnivariateStatistic1.equals((Object)storelessUnivariateStatistic0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      
      long long0 = 1820L;
      summaryStatistics0.n = 1820L;
      assertEquals(1820L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics2.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(1820L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      double double0 = summaryStatistics2.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(1820L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      
      double double1 = summaryStatistics0.getSum();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1820L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.setSumsqImpl(storelessUnivariateStatistic1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1,820 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.hashCode();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double0 = summaryStatistics1.getSum();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      String string0 = summaryStatistics0.toString();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
      
      double double1 = summaryStatistics1.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMaxImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      Skewness skewness0 = new Skewness();
      assertEquals(0L, skewness0.getN());
      assertNotNull(skewness0);
      
      double double2 = skewness0.getResult();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0L, skewness0.getN());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      skewness0.setData(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0L, skewness0.getN());
      
      summaryStatistics1.n = 6716L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(6716L, summaryStatistics1.getN());
      
      summaryStatistics0.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = skewness0.getResult();
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0L, skewness0.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setMaxImpl(skewness0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 6,716 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      GeometricMean geometricMean0 = null;
      double double1 = summaryStatistics1.getMin();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMinImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.setMinImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getMean();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics1.getPopulationVariance();
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics1.geoMean = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      boolean boolean0 = summaryStatistics0.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double4 = summaryStatistics0.getMean();
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double5 = summaryStatistics1.getMean();
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double6 = summaryStatistics1.getSumOfLogs();
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double7 = summaryStatistics1.getSumsq();
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double8 = summaryStatistics0.getSum();
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double9 = summaryStatistics0.getSecondMoment();
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double10 = summaryStatistics1.getSumsq();
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(0.0, double10, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setSumLogImpl((StorelessUnivariateStatistic) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Min min0 = new Min();
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      
      summaryStatistics0.setMinImpl(min0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      
      Max max0 = new Max();
      assertEquals(0L, max0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertNotNull(max0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      max0.increment(0.0);
      assertEquals(0.0, max0.getResult(), 0.01);
      assertEquals(1L, max0.getN());
      
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      summaryStatistics0.hashCode();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setSumLogImpl(min0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      
      doubleArray0[5] = Double.NaN;
      max0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, max0.getResult(), 0.01);
      assertEquals(7L, max0.getN());
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean0 = summaryStatistics0.equals(max0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, max0.getResult(), 0.01);
      assertEquals(7L, max0.getN());
      
      double double2 = summaryStatistics0.getMean();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertSame(storelessUnivariateStatistic0, min0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.copy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.descriptive.rank.Min cannot be cast to org.apache.commons.math.stat.descriptive.summary.SumOfLogs
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      summaryStatistics0.setMinImpl(sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.addValue((-2853.559));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double0 = summaryStatistics1.getMax();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals((-2853.559), double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals((-2853.559), storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      // Undeclared exception!
      try { 
        sumOfLogs0.evaluate();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input array
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      GeometricMean geometricMean0 = new GeometricMean();
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      long long0 = 972L;
      summaryStatistics0.n = 972L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(972L, summaryStatistics0.getN());
      
      GeometricMean.copy(geometricMean0, geometricMean0);
      assertEquals(0L, geometricMean0.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics0.setMeanImpl(geometricMean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 972 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = null;
      try {
        summaryStatistics0 = new SummaryStatistics((SummaryStatistics) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      long long0 = 0L;
      summaryStatistics1.n = 0L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics1.setMinImpl((StorelessUnivariateStatistic) null);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.addValue(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.setMinImpl(secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      secondMoment0.increment(0.0);
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      
      summaryStatistics0.setMinImpl(secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getMin();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics0.getSumOfLogs();
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setSumsqImpl(secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: 0.0\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      sumOfLogs0.increment(967.76566);
      assertEquals(6.874989971191984, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 967.76566;
      doubleArray0[1] = 967.76566;
      double double0 = sumOfLogs0.evaluate(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {967.76566, 967.76566}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6.874989971191984, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      summaryStatistics0.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setVarianceImpl(sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6.874989971191984, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getVarianceImpl();
      assertSame(storelessUnivariateStatistic0, sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(6.874989971191984, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertFalse(storelessUnivariateStatistic1.equals((Object)storelessUnivariateStatistic0));
      assertFalse(storelessUnivariateStatistic1.equals((Object)sumOfLogs0));
      assertNotSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertNotSame(storelessUnivariateStatistic1, sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMaxImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      
      boolean boolean0 = summaryStatistics0.equals(storelessUnivariateStatistic2);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      
      double double1 = summaryStatistics0.getStandardDeviation();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue((-712.76614168463));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfLogs sumOfLogs0 = null;
      GeometricMean geometricMean0 = new GeometricMean((SumOfLogs) null);
      assertNotNull(geometricMean0);
      
      summaryStatistics0.setMaxImpl(geometricMean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = null;
      try {
        summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SumOfSquares sumOfSquares0 = summaryStatistics1.sumsq;
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics1.setMinImpl(sumOfSquares0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(storelessUnivariateStatistic0, sumOfSquares0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment1);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(secondMoment1);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertNotNull(standardDeviation0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      standardDeviation0.incrementAll(doubleArray0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(1, doubleArray0.length);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      SumOfSquares sumOfSquares1 = new SumOfSquares(sumOfSquares0);
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertNotNull(sumOfSquares1);
      
      summaryStatistics0.sumsq = sumOfSquares1;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertEquals(0.0, summaryStatistics0.sumsq.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.sumsq.getN());
      
      summaryStatistics0.setVarianceImpl(standardDeviation0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      double double0 = summaryStatistics0.getPopulationVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(800.8876609);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      Mean mean0 = new Mean();
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics1.mean = mean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(0L, summaryStatistics1.mean.getN());
      assertEquals(Double.NaN, summaryStatistics1.mean.getResult(), 0.01);
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertNotNull(sumOfLogs0);
      
      summaryStatistics0.sumLog = sumOfLogs0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.sumLog.getN());
      assertEquals(0.0, summaryStatistics0.sumLog.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics1.clear();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getMin();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfLogs sumOfLogs0 = summaryStatistics0.sumLog;
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertNotNull(sumOfLogs0);
      
      sumOfLogs0.increment((-1817.526));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      summaryStatistics0.setSumImpl(sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.sumsq = sumOfSquares0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, summaryStatistics0.sumsq.getN());
      assertEquals(0.0, summaryStatistics0.sumsq.getResult(), 0.01);
      
      double double1 = summaryStatistics0.getVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getMin();
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics0.getMean();
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double4 = summaryStatistics0.getPopulationVariance();
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.clear();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMaxImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Object object0 = null;
      boolean boolean0 = summaryStatistics0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getGeoMeanImpl();
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      Sum sum0 = new Sum();
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertNotNull(sum0);
      
      summaryStatistics0.sum = sum0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.sum.getN());
      assertEquals(0.0, summaryStatistics0.sum.getResult(), 0.01);
      
      summaryStatistics0.setSumLogImpl(storelessUnivariateStatistic1);
      assertSame(storelessUnivariateStatistic1, storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertSame(storelessUnivariateStatistic0, storelessUnivariateStatistic1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double0 = summaryStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.hashCode();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertNotNull(secondMoment1);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(true, secondMoment1);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertNotNull(standardDeviation0);
      
      summaryStatistics0.setMinImpl(standardDeviation0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      summaryStatistics0.setSumImpl(standardDeviation0);
      assertTrue(secondMoment0.equals((Object)secondMoment1));
      assertTrue(secondMoment1.equals((Object)secondMoment0));
      assertNotSame(secondMoment0, secondMoment1);
      assertNotSame(secondMoment1, secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, secondMoment1.getResult(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics0.getSecondMoment();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics0.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics1.addValue(2784.6486);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      
      String string0 = summaryStatistics1.toString();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 1\nmin: 2784.6486\nmax: 2784.6486\nmean: 2784.6486\ngeometric mean: 2784.6486000000004\nvariance: 0.0\nsum of squares: 7754267.82548196\nstandard deviation: 0.0\nsum of logs: 7.931876968457981\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      double double1 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics0.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics1.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(2784.6486, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics1.n = (-2200L);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      
      double double4 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics1.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      assertEquals(2784.6486, statisticalSummary0.getMin(), 0.01);
      assertEquals(0.0, statisticalSummary0.getVariance(), 0.01);
      assertEquals(2784.6486, statisticalSummary0.getMax(), 0.01);
      assertEquals(2784.6486, statisticalSummary0.getMean(), 0.01);
      assertEquals((-2200L), statisticalSummary0.getN());
      assertEquals(2784.6486, statisticalSummary0.getSum(), 0.01);
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getGeoMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double5 = summaryStatistics1.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(2784.6486, double5, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getSumsqImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      assertEquals(7754267.82548196, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      double double6 = summaryStatistics0.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics1.setSumsqImpl(storelessUnivariateStatistic1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      assertEquals(7754267.82548196, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics1.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(2784.6486, storelessUnivariateStatistic2.getResult(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      assertNotNull(storelessUnivariateStatistic2);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics1.getSumLogImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1L, storelessUnivariateStatistic3.getN());
      assertEquals(7.931876968457981, storelessUnivariateStatistic3.getResult(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals((-2200L), summaryStatistics1.getN());
      assertNotNull(storelessUnivariateStatistic3);
      
      double double7 = summaryStatistics0.getMin();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.hashCode();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.n = 0L;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      summaryStatistics0.setSumLogImpl(sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      summaryStatistics0.addValue((-2342.594));
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertEquals(1.0975493297672E7, double0, 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue((-3142.95));
      assertEquals(320284.8633679998, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics1.setMaxImpl(secondMoment0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(false);
      assertEquals(0L, standardDeviation0.getN());
      assertFalse(standardDeviation0.isBiasCorrected());
      assertNotNull(standardDeviation0);
      
      StandardDeviation standardDeviation1 = new StandardDeviation(standardDeviation0);
      assertTrue(standardDeviation1.equals((Object)standardDeviation0));
      assertEquals(0L, standardDeviation0.getN());
      assertFalse(standardDeviation0.isBiasCorrected());
      assertFalse(standardDeviation1.isBiasCorrected());
      assertEquals(0L, standardDeviation1.getN());
      assertNotNull(standardDeviation1);
      
      summaryStatistics0.setSumsqImpl(standardDeviation1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(standardDeviation0.equals((Object)standardDeviation1));
      assertTrue(standardDeviation1.equals((Object)standardDeviation0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(standardDeviation0, standardDeviation1);
      assertNotSame(standardDeviation1, standardDeviation0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, standardDeviation0.getN());
      assertFalse(standardDeviation0.isBiasCorrected());
      assertFalse(standardDeviation1.isBiasCorrected());
      assertEquals(0L, standardDeviation1.getN());
      
      summaryStatistics1.secondMoment = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.getPopulationVariance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMinImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      SumOfLogs sumOfLogs0 = summaryStatistics1.sumLog;
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      double[] doubleArray0 = new double[0];
      double double0 = sumOfLogs0.evaluate(doubleArray0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      
      summaryStatistics1.sumLog = sumOfLogs0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, summaryStatistics1.sumLog.getN());
      assertEquals(0.0, summaryStatistics1.sumLog.getResult(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      summaryStatistics0.setSumsqImpl(variance0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      
      summaryStatistics0.addValue((-4629.945258492814));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      
      StatisticalSummaryValues statisticalSummaryValues0 = (StatisticalSummaryValues)summaryStatistics1.getSummary();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummaryValues0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummaryValues0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummaryValues0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummaryValues0.getMean(), 0.01);
      assertEquals(0L, statisticalSummaryValues0.getN());
      assertEquals(Double.NaN, statisticalSummaryValues0.getMin(), 0.01);
      assertNotNull(statisticalSummaryValues0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.n = (-1516L);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SumOfLogs sumOfLogs0 = null;
      summaryStatistics0.sumLog = null;
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      long long0 = summaryStatistics0.getN();
      assertEquals((-1516L), long0);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      
      summaryStatistics0.hashCode();
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals((-1516L), statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertNotNull(statisticalSummary0);
      
      summaryStatistics0.hashCode();
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumLogImpl();
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      double double1 = summaryStatistics0.getSumOfLogs();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getSum();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      long long1 = summaryStatistics0.getN();
      assertTrue(long1 == long0);
      assertEquals((-1516L), long1);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMinImpl();
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double3 = summaryStatistics0.getMax();
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMinImpl(storelessUnivariateStatistic2);
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertEquals((-1516L), summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      // Undeclared exception!
      try { 
        summaryStatistics0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      boolean boolean0 = summaryStatistics0.equals(sumOfSquares0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      summaryStatistics0.sumLog = null;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
      
      double double0 = summaryStatistics0.getPopulationVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      Mean mean0 = new Mean(secondMoment0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-436.3669815);
      doubleArray0[1] = 3787.426;
      doubleArray0[2] = (-2706.0);
      doubleArray0[3] = (-2083.205283014479);
      double double0 = mean0.evaluate(doubleArray0);
      assertArrayEquals(new double[] {(-436.3669815), 3787.426, (-2706.0), (-2083.205283014479)}, doubleArray0, 0.01);
      assertEquals((-359.5365661286197), double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      boolean boolean0 = summaryStatistics0.equals(mean0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      summaryStatistics0.clear();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double1 = summaryStatistics0.getGeometricMean();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      
      double double2 = summaryStatistics0.getVariance();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics0.getGeometricMean();
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertNotNull(statisticalSummary0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      Kurtosis kurtosis0 = new Kurtosis();
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      assertNotNull(kurtosis0);
      
      double[] doubleArray0 = new double[0];
      kurtosis0.setData(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      kurtosis0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      summaryStatistics0.setGeoMeanImpl(kurtosis0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      kurtosis0.setData(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMeanImpl(kurtosis0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      Variance variance0 = (Variance)summaryStatistics0.getVarianceImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertNotNull(variance0);
      
      summaryStatistics0.setSumsqImpl(kurtosis0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertEquals(0L, kurtosis0.getN());
      
      Kurtosis kurtosis1 = (Kurtosis)summaryStatistics0.getGeoMeanImpl();
      assertSame(kurtosis1, kurtosis0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, kurtosis1.getN());
      assertEquals(Double.NaN, kurtosis1.getResult(), 0.01);
      assertNotNull(kurtosis1);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      Variance variance1 = new Variance(false, secondMoment0);
      assertTrue(variance1.equals((Object)variance0));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      assertFalse(variance1.isBiasCorrected());
      assertNotNull(variance1);
      
      double double1 = variance1.evaluate(doubleArray0);
      assertTrue(variance1.equals((Object)variance0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(variance1, variance0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      assertFalse(variance1.isBiasCorrected());
      
      Variance variance2 = new Variance(variance1);
      assertTrue(variance1.equals((Object)variance0));
      assertTrue(variance2.equals((Object)variance0));
      assertTrue(variance2.equals((Object)variance1));
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      assertFalse(variance1.isBiasCorrected());
      assertEquals(Double.NaN, variance2.getResult(), 0.01);
      assertEquals(0L, variance2.getN());
      assertFalse(variance2.isBiasCorrected());
      assertNotNull(variance2);
      
      summaryStatistics0.variance = variance2;
      assertEquals(Double.NaN, summaryStatistics0.variance.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.variance.getN());
      assertFalse(summaryStatistics0.variance.isBiasCorrected());
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, variance1.getResult(), 0.01);
      assertEquals(0L, variance1.getN());
      assertFalse(variance1.isBiasCorrected());
      assertEquals(Double.NaN, variance2.getResult(), 0.01);
      assertEquals(0L, variance2.getN());
      assertFalse(variance2.isBiasCorrected());
      
      summaryStatistics0.addValue(1960.8126982974234);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      // Undeclared exception!
      try { 
        variance2.evaluate(doubleArray0, 29, 2602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      Mean mean0 = new Mean(secondMoment0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      summaryStatistics0.setGeoMeanImpl(mean0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      Min min0 = new Min();
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertNotNull(min0);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setMeanImpl(min0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      Sum sum0 = summaryStatistics2.sum;
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertNotNull(sum0);
      
      double double0 = summaryStatistics0.getMax();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      sum0.setData(doubleArray0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      
      summaryStatistics2.sum = sum0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0.0, sum0.getResult(), 0.01);
      assertEquals(0L, sum0.getN());
      assertEquals(0.0, summaryStatistics2.sum.getResult(), 0.01);
      assertEquals(0L, summaryStatistics2.sum.getN());
      
      String string0 = summaryStatistics1.toString();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      double double1 = summaryStatistics1.getSecondMoment();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      Skewness skewness0 = new Skewness();
      assertEquals(0L, skewness0.getN());
      assertNotNull(skewness0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = skewness0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0L, skewness0.getN());
      
      summaryStatistics1.setMeanImpl(skewness0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, skewness0.getN());
      
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getGeoMeanImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      Variance variance0 = (Variance)summaryStatistics2.getVarianceImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(variance0);
      
      summaryStatistics0.setVarianceImpl(variance0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      Variance variance0 = (Variance)summaryStatistics2.getVarianceImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      SummaryStatistics.copy(summaryStatistics2, summaryStatistics2);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      
      summaryStatistics1.setGeoMeanImpl(variance0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      
      summaryStatistics0.setMeanImpl(variance0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics1.getSecondMoment();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      SumOfLogs sumOfLogs1 = new SumOfLogs(sumOfLogs0);
      assertTrue(sumOfLogs1.equals((Object)sumOfLogs0));
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      assertNotNull(sumOfLogs1);
      
      summaryStatistics1.setMaxImpl(sumOfLogs1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(sumOfLogs0.equals((Object)sumOfLogs1));
      assertTrue(sumOfLogs1.equals((Object)sumOfLogs0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(sumOfLogs0, sumOfLogs1);
      assertNotSame(sumOfLogs1, sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0.0, sumOfLogs1.getResult(), 0.01);
      assertEquals(0L, sumOfLogs1.getN());
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics1.secondMoment = secondMoment0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.secondMoment.getResult(), 0.01);
      
      StandardDeviation standardDeviation0 = new StandardDeviation(true);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertNotNull(standardDeviation0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = summaryStatistics0.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      standardDeviation0.setData(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      boolean boolean0 = standardDeviation0.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      summaryStatistics1.setGeoMeanImpl(standardDeviation0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      summaryStatistics1.addValue(Double.NaN);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      long long0 = summaryStatistics1.getN();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(1L, long0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics1.getMaxImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(storelessUnivariateStatistic1.equals((Object)sumOfLogs0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertSame(storelessUnivariateStatistic1, sumOfLogs1);
      assertNotSame(storelessUnivariateStatistic1, sumOfLogs0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, storelessUnivariateStatistic1.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic1);
      
      double double4 = summaryStatistics1.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SumOfSquares sumOfSquares0 = null;
      summaryStatistics0.n = 3L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      SummaryStatistics summaryStatistics1 = summaryStatistics0.copy();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      assertEquals(3L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.clear();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics1.addValue(3L);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      double double0 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      summaryStatistics0.sumsq = null;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics0.getVariance();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics0.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      long long0 = summaryStatistics1.getN();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(1L, long0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(3L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      GeometricMean geometricMean0 = summaryStatistics0.geoMean;
      assertEquals(0L, geometricMean0.getN());
      assertNotNull(geometricMean0);
      
      Max max0 = new Max();
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      assertNotNull(max0);
      
      geometricMean0.setSumLogImpl(max0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, geometricMean0.getN());
      assertEquals(Double.NaN, max0.getResult(), 0.01);
      assertEquals(0L, max0.getN());
      
      double double0 = geometricMean0.getResult();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, geometricMean0.getN());
      
      summaryStatistics1.setSumLogImpl(geometricMean0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, geometricMean0.getN());
      
      Min min0 = summaryStatistics1.min;
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertNotNull(min0);
      
      Min min1 = new Min(min0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(min1.equals((Object)min0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      assertNotNull(min1);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics0.setMinImpl(min1);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(min0.equals((Object)min1));
      assertTrue(min1.equals((Object)min0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(min0, min1);
      assertNotSame(min1, min0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, min0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(Double.NaN, min1.getResult(), 0.01);
      assertEquals(0L, min1.getN());
      
      summaryStatistics1.n = 735L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(735L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMinImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(storelessUnivariateStatistic0.equals((Object)min1));
      assertTrue(storelessUnivariateStatistic0.equals((Object)min0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(storelessUnivariateStatistic0, min0);
      assertNotSame(storelessUnivariateStatistic0, min1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(735L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic2.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic2.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic2);
      
      double double1 = summaryStatistics1.getSecondMoment();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(735L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double2 = summaryStatistics0.getSumOfLogs();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics1.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(storelessUnivariateStatistic3.equals((Object)storelessUnivariateStatistic2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(storelessUnivariateStatistic3, storelessUnivariateStatistic2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic3.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic3.getN());
      assertEquals(735L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(storelessUnivariateStatistic3);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setMinImpl(storelessUnivariateStatistic0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 735 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-919.1716461469);
      doubleArray0[1] = 3.0;
      Mean mean0 = summaryStatistics0.mean;
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertNotNull(mean0);
      
      summaryStatistics0.mean = mean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.mean.getResult(), 0.01);
      assertEquals(0L, summaryStatistics0.mean.getN());
      
      doubleArray0[2] = (-536.261394773);
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      boolean boolean0 = secondMoment0.equals(sumOfSquares0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      
      doubleArray0[3] = 613.921765753;
      doubleArray0[4] = 0.0;
      summaryStatistics0.setSumsqImpl(secondMoment0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      doubleArray0[5] = 0.0;
      secondMoment0.increment((-919.1716461469));
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, secondMoment0.getResult(), 0.01);
      
      doubleArray0[6] = 4.0;
      doubleArray0[7] = 2.0;
      secondMoment0.incrementAll(doubleArray0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertArrayEquals(new double[] {(-919.1716461469), 3.0, (-536.261394773), 613.921765753, 0.0, 0.0, 4.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      
      Variance variance0 = new Variance(secondMoment0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(9L, variance0.getN());
      assertEquals(251665.710785101, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      summaryStatistics1.setSumImpl(variance0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(9L, variance0.getN());
      assertEquals(251665.710785101, variance0.getResult(), 0.01);
      
      boolean boolean1 = secondMoment0.equals(summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      
      variance0.clear();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(9L, variance0.getN());
      assertEquals(251665.710785101, variance0.getResult(), 0.01);
      
      double double0 = summaryStatistics1.getSumOfLogs();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics1.setVarianceImpl(variance0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(9L, variance0.getN());
      assertEquals(251665.710785101, variance0.getResult(), 0.01);
      
      summaryStatistics0.setMaxImpl(secondMoment0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(2013325.686280808, secondMoment0.getResult(), 0.01);
      
      double double1 = summaryStatistics1.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(2013325.686280808, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      try { 
        SummaryStatistics.copy((SummaryStatistics) null, (SummaryStatistics) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Variance variance0 = new Variance();
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertNotNull(variance0);
      
      summaryStatistics0.variance = variance0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(summaryStatistics0.variance.isBiasCorrected());
      assertEquals(0L, summaryStatistics0.variance.getN());
      assertEquals(Double.NaN, summaryStatistics0.variance.getResult(), 0.01);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics0.getGeometricMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.addValue(Double.NaN);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      summaryStatistics1.sumLog = null;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      Sum sum0 = summaryStatistics0.sum;
      assertEquals(1L, sum0.getN());
      assertEquals(Double.NaN, sum0.getResult(), 0.01);
      assertNotNull(sum0);
      
      Sum sum1 = new Sum(sum0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(sum1.equals((Object)sum0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(1L, sum0.getN());
      assertEquals(Double.NaN, sum0.getResult(), 0.01);
      assertEquals(1L, sum1.getN());
      assertEquals(Double.NaN, sum1.getResult(), 0.01);
      assertNotNull(sum1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2897.757348057302);
      doubleArray0[8] = 0.0;
      variance0.incrementAll(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-2897.757348057302), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      
      boolean boolean0 = variance0.equals(sum1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(sum0.equals((Object)sum1));
      assertTrue(sum1.equals((Object)sum0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(sum0, sum1);
      assertNotSame(sum1, sum0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(9L, variance0.getN());
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(1L, sum0.getN());
      assertEquals(Double.NaN, sum0.getResult(), 0.01);
      assertEquals(1L, sum1.getN());
      assertEquals(Double.NaN, sum1.getResult(), 0.01);
      
      boolean boolean1 = summaryStatistics1.equals(summaryStatistics0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      summaryStatistics1.setVarianceImpl((StorelessUnivariateStatistic) null);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics0.copy();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertFalse(summaryStatistics2.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(1L, summaryStatistics2.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics2);
      
      double double2 = summaryStatistics1.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics2));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double3 = summaryStatistics0.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      StandardDeviation standardDeviation0 = new StandardDeviation();
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertNotNull(standardDeviation0);
      
      summaryStatistics0.setGeoMeanImpl(standardDeviation0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setMaxImpl(standardDeviation0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      
      String string0 = summaryStatistics1.toString();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics();
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      Min min0 = new Min();
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      assertNotNull(min0);
      
      double double0 = summaryStatistics0.getSumOfLogs();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setMeanImpl(min0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, min0.getResult(), 0.01);
      assertEquals(0L, min0.getN());
      
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.hashCode();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics1.setSumLogImpl(secondMoment0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      summaryStatistics1.setMeanImpl(secondMoment0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      double double0 = summaryStatistics1.getMean();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      double double1 = summaryStatistics1.getSumsq();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumLogImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics1.addValue(0.0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0.0, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setSumImpl(secondMoment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertTrue(boolean0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics2.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertNotSame(summaryStatistics2, summaryStatistics0);
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics2.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics2.getN());
      assertNotNull(summaryStatistics2);
      
      StatisticalSummary statisticalSummary0 = summaryStatistics0.getSummary();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMean(), 0.01);
      assertEquals(0.0, statisticalSummary0.getSum(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMin(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getVariance(), 0.01);
      assertEquals(Double.NaN, statisticalSummary0.getMax(), 0.01);
      assertEquals(0L, statisticalSummary0.getN());
      assertNotNull(statisticalSummary0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getMinImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics2));
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      double double0 = summaryStatistics0.getSumsq();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics2));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.getVarianceImpl();
      summaryStatistics2.getSumsqImpl();
      assertNotSame(summaryStatistics2, summaryStatistics1);
      assertEquals(0L, summaryStatistics2.getN());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = summaryStatistics0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics1);
      
      summaryStatistics1.n = 1406L;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1406L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double0 = summaryStatistics1.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1406L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics1.getSumsq();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(1406L, summaryStatistics1.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      
      Variance variance0 = new Variance();
      assertTrue(variance0.isBiasCorrected());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      // Undeclared exception!
      try { 
        summaryStatistics1.setMinImpl(variance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1,406 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = new SecondMoment();
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      Mean mean0 = new Mean(secondMoment0);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics0.setSumLogImpl(mean0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      StandardDeviation standardDeviation0 = new StandardDeviation();
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertNotNull(standardDeviation0);
      
      StandardDeviation standardDeviation1 = new StandardDeviation(standardDeviation0);
      assertTrue(standardDeviation1.equals((Object)standardDeviation0));
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation1.isBiasCorrected());
      assertEquals(0L, standardDeviation1.getN());
      assertNotNull(standardDeviation1);
      
      summaryStatistics0.setSumImpl(standardDeviation1);
      assertTrue(standardDeviation0.equals((Object)standardDeviation1));
      assertTrue(standardDeviation1.equals((Object)standardDeviation0));
      assertNotSame(standardDeviation0, standardDeviation1);
      assertNotSame(standardDeviation1, standardDeviation0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation1.isBiasCorrected());
      assertEquals(0L, standardDeviation1.getN());
      
      double double0 = summaryStatistics0.getMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getSecondMoment();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      StandardDeviation standardDeviation0 = new StandardDeviation();
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      assertNotNull(standardDeviation0);
      
      boolean boolean0 = standardDeviation0.equals(summaryStatistics0);
      assertFalse(boolean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      summaryStatistics0.setMinImpl(standardDeviation0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      summaryStatistics0.setSumsqImpl(standardDeviation0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, standardDeviation0.getN());
      assertTrue(standardDeviation0.isBiasCorrected());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(string0);
      
      SumOfSquares sumOfSquares0 = summaryStatistics0.sumsq;
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertNotNull(sumOfSquares0);
      
      SumOfSquares sumOfSquares1 = new SumOfSquares(sumOfSquares0);
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertEquals(0L, sumOfSquares1.getN());
      assertNotNull(sumOfSquares1);
      
      summaryStatistics0.setMaxImpl(sumOfSquares1);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertNotSame(sumOfSquares1, sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertEquals(0L, sumOfSquares1.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMaxImpl();
      assertTrue(storelessUnivariateStatistic0.equals((Object)sumOfSquares0));
      assertSame(storelessUnivariateStatistic0, sumOfSquares1);
      assertNotSame(storelessUnivariateStatistic0, sumOfSquares0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getGeoMeanImpl();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.setGeoMeanImpl(secondMoment0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      
      long long0 = summaryStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      summaryStatistics0.addValue(0L);
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getMinImpl();
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(1L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      summaryStatistics0.addValue(5332.74726);
      assertEquals(1L, summaryStatistics0.getN());
      assertEquals(0.0, summaryStatistics0.getSecondMoment(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      double double0 = summaryStatistics0.getMean();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      SumOfLogs sumOfLogs0 = new SumOfLogs();
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertNotNull(sumOfLogs0);
      
      summaryStatistics0.sumLog = sumOfLogs0;
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfLogs0.getResult(), 0.01);
      assertEquals(0L, sumOfLogs0.getN());
      assertEquals(0L, summaryStatistics0.sumLog.getN());
      assertEquals(0.0, summaryStatistics0.sumLog.getResult(), 0.01);
      
      SumOfSquares sumOfSquares0 = new SumOfSquares();
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertNotNull(sumOfSquares0);
      
      SumOfSquares sumOfSquares1 = sumOfSquares0.copy();
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertNotSame(sumOfSquares1, sumOfSquares0);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      assertNotNull(sumOfSquares1);
      
      SumOfSquares.copy(sumOfSquares0, sumOfSquares0);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      sumOfLogs0.increment(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, sumOfLogs0.getResult(), 0.01);
      assertEquals(1L, sumOfLogs0.getN());
      
      sumOfLogs0.increment(2740.59457608);
      assertEquals(Double.NEGATIVE_INFINITY, sumOfLogs0.getResult(), 0.01);
      assertEquals(2L, sumOfLogs0.getN());
      
      summaryStatistics0.hashCode();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setSumsqImpl(sumOfSquares0);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      summaryStatistics0.setVarianceImpl(sumOfSquares0);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      
      summaryStatistics0.setVarianceImpl(sumOfSquares1);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertNotSame(sumOfSquares1, sumOfSquares0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      
      double double1 = summaryStatistics0.getGeometricMean();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
      assertTrue(storelessUnivariateStatistic0.equals((Object)sumOfSquares1));
      assertNotSame(storelessUnivariateStatistic0, sumOfSquares1);
      assertSame(storelessUnivariateStatistic0, sumOfSquares0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: 0.0\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(string0);
      
      double double2 = summaryStatistics0.getMax();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics0.getSecondMoment();
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      long long0 = summaryStatistics0.getN();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double4 = summaryStatistics0.getPopulationVariance();
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double5 = summaryStatistics0.getVariance();
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      summaryStatistics0.setVarianceImpl(sumOfSquares1);
      assertTrue(sumOfSquares0.equals((Object)sumOfSquares1));
      assertTrue(sumOfSquares1.equals((Object)storelessUnivariateStatistic0));
      assertTrue(sumOfSquares1.equals((Object)sumOfSquares0));
      assertSame(sumOfSquares0, storelessUnivariateStatistic0);
      assertNotSame(sumOfSquares0, sumOfSquares1);
      assertNotSame(sumOfSquares1, storelessUnivariateStatistic0);
      assertNotSame(sumOfSquares1, sumOfSquares0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, sumOfSquares0.getResult(), 0.01);
      assertEquals(0L, sumOfSquares0.getN());
      assertEquals(0L, sumOfSquares1.getN());
      assertEquals(0.0, sumOfSquares1.getResult(), 0.01);
      
      summaryStatistics0.clear();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      double double0 = summaryStatistics1.getMax();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      summaryStatistics1.sum = null;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      
      // Undeclared exception!
      try { 
        summaryStatistics1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertNotNull(summaryStatistics1);
      
      Kurtosis kurtosis0 = new Kurtosis();
      assertEquals(0L, kurtosis0.getN());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      assertNotNull(kurtosis0);
      
      kurtosis0.increment(0.0);
      assertEquals(1L, kurtosis0.getN());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      
      summaryStatistics1.setMeanImpl(kurtosis0);
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(1L, kurtosis0.getN());
      assertEquals(Double.NaN, kurtosis0.getResult(), 0.01);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics1.getSumImpl();
      assertTrue(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertNotNull(storelessUnivariateStatistic0);
      
      summaryStatistics0.setMaxImpl(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      double double0 = summaryStatistics0.getMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      double double1 = summaryStatistics0.getGeometricMean();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      Mean mean0 = summaryStatistics1.mean;
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertNotNull(mean0);
      
      summaryStatistics1.mean = mean0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, mean0.getResult(), 0.01);
      assertEquals(0L, mean0.getN());
      assertEquals(Double.NaN, summaryStatistics1.mean.getResult(), 0.01);
      assertEquals(0L, summaryStatistics1.mean.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertTrue(storelessUnivariateStatistic1.equals((Object)mean0));
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(storelessUnivariateStatistic1, mean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
      
      boolean boolean0 = summaryStatistics0.equals(storelessUnivariateStatistic0);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertFalse(boolean0);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      
      double double2 = summaryStatistics0.getStandardDeviation();
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      
      boolean boolean1 = summaryStatistics1.equals(storelessUnivariateStatistic1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(storelessUnivariateStatistic1.equals((Object)mean0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertNotSame(storelessUnivariateStatistic1, mean0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
      assertEquals(Double.NaN, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      
      boolean boolean2 = summaryStatistics0.equals(summaryStatistics1);
      assertFalse(summaryStatistics0.equals((Object)summaryStatistics1));
      assertFalse(summaryStatistics1.equals((Object)summaryStatistics0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(summaryStatistics0, summaryStatistics1);
      assertNotSame(summaryStatistics1, summaryStatistics0);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics1.getN());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertNotNull(summaryStatistics0);
      
      SecondMoment secondMoment0 = summaryStatistics0.secondMoment;
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertNotNull(secondMoment0);
      
      summaryStatistics0.secondMoment = secondMoment0;
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(Double.NaN, secondMoment0.getResult(), 0.01);
      assertEquals(Double.NaN, summaryStatistics0.secondMoment.getResult(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 2560.635831778;
      // Undeclared exception!
      try { 
        secondMoment0.incrementAll(doubleArray0, (-1367), 3418);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-1,367)
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertNotNull(summaryStatistics0);
      
      Product product0 = new Product();
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertNotNull(product0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2096.1975889873;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1742.0);
      doubleArray0[5] = 1125.0;
      doubleArray0[6] = 1189.3451897785;
      doubleArray0[7] = (-2670.625);
      doubleArray0[8] = (-2026.2876409556332);
      double double0 = product0.evaluate(doubleArray0);
      assertArrayEquals(new double[] {2096.1975889873, 0.0, 0.0, 0.0, (-1742.0), 1125.0, 1189.3451897785, (-2670.625), (-2026.2876409556332)}, doubleArray0, 0.01);
      assertEquals(-0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      
      Product product1 = new Product(product0);
      assertTrue(product1.equals((Object)product0));
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(1.0, product1.getResult(), 0.01);
      assertEquals(0L, product1.getN());
      assertNotNull(product1);
      
      summaryStatistics0.setMeanImpl(product1);
      assertTrue(product0.equals((Object)product1));
      assertTrue(product1.equals((Object)product0));
      assertNotSame(product0, product1);
      assertNotSame(product1, product0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0L, product0.getN());
      assertEquals(1.0, product0.getResult(), 0.01);
      assertEquals(1.0, product1.getResult(), 0.01);
      assertEquals(0L, product1.getN());
      
      Variance variance0 = summaryStatistics0.variance;
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      assertNotNull(variance0);
      
      summaryStatistics0.setVarianceImpl(variance0);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(Double.NaN, variance0.getResult(), 0.01);
      assertTrue(variance0.isBiasCorrected());
      assertEquals(0L, variance0.getN());
      
      summaryStatistics0.clear();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double1 = summaryStatistics0.getPopulationVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double2 = summaryStatistics0.getSumsq();
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      double double3 = summaryStatistics0.getSecondMoment();
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      
      StorelessUnivariateStatistic storelessUnivariateStatistic0 = summaryStatistics0.getSumsqImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic0.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic0.getN());
      assertNotNull(storelessUnivariateStatistic0);
      
      StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumImpl();
      assertEquals(Double.NaN, summaryStatistics0.getSecondMoment(), 0.01);
      assertEquals(0L, summaryStatistics0.getN());
      assertEquals(0.0, storelessUnivariateStatistic1.getResult(), 0.01);
      assertEquals(0L, storelessUnivariateStatistic1.getN());
      assertNotNull(storelessUnivariateStatistic1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getSumsq();
      summaryStatistics0.getMin();
      summaryStatistics0.getSumOfLogs();
      summaryStatistics0.getMin();
      Kurtosis kurtosis0 = new Kurtosis();
      summaryStatistics0.setGeoMeanImpl(kurtosis0);
      summaryStatistics0.n = 295L;
      summaryStatistics0.toString();
      summaryStatistics0.getVarianceImpl();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      summaryStatistics0.getPopulationVariance();
      summaryStatistics0.getPopulationVariance();
      summaryStatistics0.getMaxImpl();
      Mean mean0 = new Mean();
      Sum sum0 = summaryStatistics0.sum;
      summaryStatistics0.getGeometricMean();
      summaryStatistics0.getSumLogImpl();
      SummaryStatistics summaryStatistics2 = summaryStatistics0.copy();
      summaryStatistics1.getMeanImpl();
      assertEquals(295L, summaryStatistics0.getN());
      assertNotSame(summaryStatistics0, summaryStatistics2);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      Kurtosis kurtosis0 = new Kurtosis();
      double[] doubleArray0 = new double[0];
      kurtosis0.setData(doubleArray0);
      kurtosis0.incrementAll(doubleArray0);
      summaryStatistics0.setGeoMeanImpl(kurtosis0);
      kurtosis0.setData(doubleArray0);
      summaryStatistics0.setMeanImpl(kurtosis0);
      summaryStatistics0.getVarianceImpl();
      summaryStatistics0.getGeoMeanImpl();
      SecondMoment secondMoment0 = new SecondMoment();
      Variance variance0 = new Variance(false, secondMoment0);
      variance0.evaluate(doubleArray0);
      Variance variance1 = new Variance(variance0);
      summaryStatistics0.variance = variance1;
      summaryStatistics0.addValue(1926.6547716005507);
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics0);
      // Undeclared exception!
      try { 
        variance1.evaluate(doubleArray0, 29, 2598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // subarray ends after array end
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      boolean boolean0 = summaryStatistics1.equals(summaryStatistics0);
      assertTrue(boolean0);
      
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      Min min0 = summaryStatistics1.min;
      summaryStatistics0.getSumsq();
      summaryStatistics1.getVarianceImpl();
      assertNotSame(summaryStatistics1, summaryStatistics2);
      assertEquals(0L, summaryStatistics1.getN());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      SecondMoment secondMoment0 = new SecondMoment();
      SecondMoment secondMoment1 = new SecondMoment(secondMoment0);
      secondMoment0.equals(summaryStatistics0);
      StandardDeviation standardDeviation0 = new StandardDeviation(false, secondMoment1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 425.58486;
      doubleArray0[2] = 300.0;
      doubleArray0[3] = 6.0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        standardDeviation0.incrementAll(doubleArray0, (-4163), 643);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // start position (-4,163)
         //
         verifyException("org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getMean();
      String string0 = summaryStatistics0.toString();
      assertEquals("SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: 0.0\n", string0);
      
      summaryStatistics0.getSumOfLogs();
      summaryStatistics0.getVariance();
      summaryStatistics0.getN();
      summaryStatistics0.clear();
      summaryStatistics0.clear();
      double double0 = summaryStatistics0.getStandardDeviation();
      assertEquals(Double.NaN, double0, 0.01);
      
      SecondMoment secondMoment0 = new SecondMoment();
      summaryStatistics0.setGeoMeanImpl(secondMoment0);
      Variance variance0 = new Variance(false, secondMoment0);
      variance0.setBiasCorrected(false);
      secondMoment0.clear();
      summaryStatistics0.setSumImpl(variance0);
      summaryStatistics0.toString();
      summaryStatistics0.setGeoMeanImpl(secondMoment0);
      summaryStatistics0.getMin();
      summaryStatistics0.setGeoMeanImpl(secondMoment0);
      summaryStatistics0.hashCode();
      summaryStatistics0.getMinImpl();
      summaryStatistics0.getVarianceImpl();
      summaryStatistics0.getVarianceImpl();
      summaryStatistics0.getSumsq();
      double double1 = summaryStatistics0.getMean();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      summaryStatistics0.getSummary();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      GeometricMean geometricMean0 = summaryStatistics1.geoMean;
      summaryStatistics1.geoMean = geometricMean0;
      SummaryStatistics summaryStatistics2 = new SummaryStatistics(summaryStatistics1);
      SecondMoment secondMoment0 = summaryStatistics1.secondMoment;
      secondMoment0.clear();
      summaryStatistics2.secondMoment = secondMoment0;
      SecondMoment secondMoment1 = summaryStatistics0.secondMoment;
      summaryStatistics2.secondMoment = secondMoment1;
      summaryStatistics0.getMaxImpl();
      summaryStatistics0.getSumLogImpl();
      summaryStatistics1.getGeometricMean();
      StandardDeviation standardDeviation0 = new StandardDeviation();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      standardDeviation0.evaluate(doubleArray0, (-1.0));
      summaryStatistics1.setSumsqImpl(standardDeviation0);
      summaryStatistics1.addValue(1190.52);
      summaryStatistics0.setVarianceImpl(geometricMean0);
      summaryStatistics1.getSecondMoment();
      summaryStatistics0.getMean();
      double[] doubleArray1 = new double[0];
      geometricMean0.evaluate(doubleArray1);
      secondMoment0.increment((-2288.0357795279));
      summaryStatistics1.toString();
      summaryStatistics1.getMinImpl();
      summaryStatistics0.getSumsqImpl();
      summaryStatistics2.getSumsqImpl();
      summaryStatistics2.getSumOfLogs();
      double double0 = summaryStatistics1.getPopulationVariance();
      assertEquals(6050175.155643478, summaryStatistics1.getSecondMoment(), 0.01);
      assertEquals(3025087.577821739, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      summaryStatistics1.getMax();
      summaryStatistics1.getSumOfLogs();
      summaryStatistics1.addValue((-1.0));
      summaryStatistics1.equals(summaryStatistics1);
      summaryStatistics0.clear();
      Min min0 = summaryStatistics1.min;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      summaryStatistics0.getGeometricMean();
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.0);
      min0.evaluate(doubleArray0);
      // Undeclared exception!
      try { 
        summaryStatistics1.setMinImpl(min0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1 values have been added before statistic is configured
         //
         verifyException("org.apache.commons.math.stat.descriptive.SummaryStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      SummaryStatistics summaryStatistics0 = new SummaryStatistics();
      Max max0 = new Max();
      summaryStatistics0.equals(max0);
      SummaryStatistics summaryStatistics1 = new SummaryStatistics(summaryStatistics0);
      Max max1 = new Max();
      max1.copy();
      summaryStatistics0.equals(max1);
      Mean mean0 = new Mean();
      summaryStatistics1.setMeanImpl(mean0);
      Skewness skewness0 = new Skewness();
      summaryStatistics1.setGeoMeanImpl(skewness0);
      SummaryStatistics summaryStatistics2 = summaryStatistics1.copy();
      summaryStatistics1.getGeometricMean();
      SummaryStatistics summaryStatistics3 = summaryStatistics1.copy();
      SummaryStatistics.copy(summaryStatistics1, summaryStatistics0);
      SecondMoment secondMoment0 = new SecondMoment();
      secondMoment0.equals(summaryStatistics2);
      summaryStatistics0.secondMoment = secondMoment0;
      SummaryStatistics.copy(summaryStatistics0, summaryStatistics1);
      summaryStatistics2.setMaxImpl(summaryStatistics0.secondMoment);
      summaryStatistics0.addValue((-2899.732));
      summaryStatistics1.hashCode();
      summaryStatistics1.setMinImpl(mean0);
      summaryStatistics0.getStandardDeviation();
      Variance variance0 = new Variance(false, secondMoment0);
      summaryStatistics2.getSumOfLogs();
      summaryStatistics2.getSummary();
      summaryStatistics2.getSumLogImpl();
      SummaryStatistics summaryStatistics4 = new SummaryStatistics(summaryStatistics3);
      SummaryStatistics.copy(summaryStatistics4, summaryStatistics3);
      summaryStatistics0.getVariance();
      summaryStatistics2.getMinImpl();
      summaryStatistics0.copy();
      assertEquals(1L, summaryStatistics0.getN());
  }
}
